import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest8 {

    public static boolean debug = false;

    @Test
    public void test04001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04001");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = builder0.getmongoCollectionFilter();
        builder0.setskipInitialImport(false);
        java.lang.String str9 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str11 = mongoDBRiverDefinition10.getSKIP_INITIAL_IMPORT_FIELD();
        boolean boolean12 = mongoDBRiverDefinition10.mongoSSLVerifyCertificate;
        java.lang.String str13 = mongoDBRiverDefinition10.getLOCAL_DB_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition10.riverIndexName;
        java.lang.String str15 = mongoDBRiverDefinition10.getStatisticsIndexName();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "skip_initial_import" + "'", str11, "skip_initial_import");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "local" + "'", str13, "local");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test04002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04002");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.typeName;
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder6.mongoCollectionFilter = basicDBObject8;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoAdminPassword("db");
        docScoreSearchScript0.setNextVar("bulk_size", (java.lang.Object) builder6);
        java.lang.Object obj14 = null;
        docScoreSearchScript0.setNextVar("gridfs", obj14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        java.util.Set<java.lang.String> strSet19 = builder17.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder17.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject21 = null;
        builder17.setmongoOplogFilter(basicDBObject21);
        boolean boolean23 = builder17.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray24 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList25 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList25, serverAddressArray24);
        builder17.mongoServers = serverAddressList25;
        java.lang.String str28 = builder17.mongoAdminPassword;
        java.lang.String str29 = builder17.getscriptType();
        java.lang.String str30 = builder17.gettypeName();
        docScoreSearchScript0.setNextVar("advanced_transformation", (java.lang.Object) builder17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder32);
        java.util.Set<java.lang.String> strSet34 = builder32.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder32.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject36 = null;
        builder32.setmongoOplogFilter(basicDBObject36);
        com.mongodb.BasicDBObject basicDBObject38 = builder32.getmongoCollectionFilter();
        java.lang.String str39 = builder32.getindexName();
        com.mongodb.ServerAddress[] serverAddressArray40 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList41 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList41, serverAddressArray40);
        builder32.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList41);
        java.lang.String str44 = builder32.getstatisticsTypeName();
        com.mongodb.MongoClientOptions mongoClientOptions45 = null;
        builder32.mongoClientOptions = mongoClientOptions45;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.util.Set<java.lang.String> strSet50 = builder48.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions51 = builder48.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject52 = null;
        builder48.setmongoOplogFilter(basicDBObject52);
        com.mongodb.BasicDBObject basicDBObject54 = builder48.getmongoCollectionFilter();
        builder48.setskipInitialImport(false);
        java.lang.String str57 = builder48.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder48.connectTimeout((int) ' ');
        com.mongodb.BasicDBObject basicDBObject60 = builder59.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder32.mongoCollectionFilter(basicDBObject60);
        java.lang.Object obj62 = docScoreSearchScript0.unwrap((java.lang.Object) builder32);
        boolean boolean63 = builder32.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder32.mongoSSLVerifyCertificate(true);
        com.mongodb.MongoClientOptions mongoClientOptions66 = null;
        builder32.setmongoClientOptions(mongoClientOptions66);
        builder32.skipInitialImport = false;
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serverAddressArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(strSet34);
        org.junit.Assert.assertNull(mongoClientOptions35);
        org.junit.Assert.assertNotNull(basicDBObject38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(serverAddressArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertNull(mongoClientOptions51);
        org.junit.Assert.assertNotNull(basicDBObject54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(basicDBObject60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test04003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04003");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = mongoDBRiverDefinition1.getExcludeFields();
        java.lang.String str3 = mongoDBRiverDefinition1.statisticsIndexName;
        boolean boolean4 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test04004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04004");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str3 = mongoDBRiverDefinition1.scriptType;
        boolean boolean4 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str5 = mongoDBRiverDefinition1.getNAME_FIELD();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition1.getExcludeFields();
        boolean boolean7 = mongoDBRiverDefinition1.isMongoUseSSL();
        boolean boolean8 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        java.lang.String str9 = mongoDBRiverDefinition1.getMongoAdminPassword();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "name" + "'", str5, "name");
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test04005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04005");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.statisticsTypeName("bulk_size");
        builder0.setdropCollection(false);
        builder0.setstatisticsTypeName("type");
        java.lang.String str9 = builder0.getscript();
        java.lang.String str10 = builder0.riverIndexName;
        builder0.setmongoCollection("socket_timeout");
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test04006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04006");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = builder0.getmongoCollectionFilter();
        builder0.script = "parent_types";
        builder0.setmongoDb("bulk");
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(basicDBObject6);
    }

    @Test
    public void test04007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04007");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoCollection;
        builder0.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.script("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.advancedTransformation(true);
        builder7.setconnectTimeout(100);
        java.lang.String str10 = builder7.script;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "actions" + "'", str10, "actions");
    }

    @Test
    public void test04008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04008");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        boolean boolean6 = builder0.getmongoGridFS();
        java.lang.String str7 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.riverIndexName("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str11 = builder0.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoAdminUser("connect_timeout");
        java.util.List<com.mongodb.ServerAddress> serverAddressList14 = builder0.mongoServers;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(serverAddressList14);
    }

    @Test
    public void test04009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04009");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getDEFAULT_DB_HOST();
        com.mongodb.BasicDBObject basicDBObject6 = mongoDBRiverDefinition2.getMongoCollectionFilter();
        org.elasticsearch.common.unit.TimeValue timeValue7 = mongoDBRiverDefinition2.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str8 = mongoDBRiverDefinition2.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition2.getMongoAdminPassword();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "localhost" + "'", str5, "localhost");
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "import_all_collections" + "'", str8, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test04010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04010");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        builder5.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoLocalUser("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        boolean boolean11 = builder9.dropCollection;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test04011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04011");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        java.lang.String str4 = mongoDBRiverDefinition2.getGRIDFS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition2.getINCLUDE_FIELDS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getScriptType();
        boolean boolean8 = mongoDBRiverDefinition2.getadvancedTransformation();
        java.lang.String str9 = mongoDBRiverDefinition2.getMongoCollection();
        java.lang.String str10 = mongoDBRiverDefinition2.getCONCURRENT_BULK_REQUESTS_FIELD();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gridfs" + "'", str4, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_fields" + "'", str6, "include_fields");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_bulk_requests" + "'", str10, "concurrent_bulk_requests");
    }

    @Test
    public void test04012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04012");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        builder0.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.importAllCollections(true);
        boolean boolean10 = builder9.storeStatistics;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test04013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04013");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = builder0.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.advancedTransformation(false);
        builder0.setstatisticsTypeName("initial_timestamp");
        boolean boolean11 = builder0.getdisableIndexRefresh();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test04014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04014");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        java.lang.String str12 = builder0.getscriptType();
        java.lang.String str13 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.connectTimeout(32);
        builder0.storeStatistics = false;
        builder0.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoDb("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str23 = mongoDBRiverDefinition22.getSSL_VERIFY_CERT_FIELD();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ssl_verify_certificate" + "'", str23, "ssl_verify_certificate");
    }

    @Test
    public void test04015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04015");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoGridFS(true);
        java.lang.String str9 = builder0.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet11 = builder0.getexcludeFields();
        boolean boolean12 = builder0.getmongoSecondaryReadPreference();
        builder0.dropCollection = false;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04016");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.typeName;
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder12.mongoCollectionFilter = basicDBObject14;
        java.lang.String str16 = builder12.mongoAdminUser;
        builder12.disableIndexRefresh = false;
        java.lang.String str19 = builder12.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.typeName;
        com.mongodb.BasicDBObject basicDBObject22 = null;
        builder20.mongoCollectionFilter = basicDBObject22;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder20.mongoUseSSL(true);
        java.lang.String[] strArray35 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        builder25.setparentTypes((java.util.Set<java.lang.String>) strSet36);
        builder12.parentTypes = strSet36;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder0.includeCollection("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder0.indexName("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition45 = builder0.build();
        java.lang.String str46 = mongoDBRiverDefinition45.getStatisticsTypeName();
        boolean boolean47 = mongoDBRiverDefinition45.getmongoUseSSL();
        boolean boolean48 = mongoDBRiverDefinition45.getdropCollection();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test04017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04017");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.isMongoSecondaryReadPreference();
        java.lang.String str4 = mongoDBRiverDefinition2.getRiverIndexName();
        java.lang.String str5 = mongoDBRiverDefinition2.getPASSWORD_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getDB_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getSIZE_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition2.initialTimestamp;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "password" + "'", str5, "password");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "db" + "'", str6, "db");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "size" + "'", str7, "size");
        org.junit.Assert.assertNull(wildcardTimestamp8);
    }

    @Test
    public void test04018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04018");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        docScoreSearchScript0.setNextScore(100.0f);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.util.Set<java.lang.String> strSet7 = builder5.includeFields;
        java.lang.String str8 = builder5.mongoAdminUser;
        builder5.setskipInitialImport(true);
        builder5.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str14 = builder13.typeName;
        com.mongodb.BasicDBObject basicDBObject15 = null;
        builder13.mongoCollectionFilter = basicDBObject15;
        java.lang.String str17 = builder13.mongoAdminUser;
        java.lang.String str18 = builder13.getriverName();
        builder13.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder13.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder13.typeName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        int int27 = mongoDBRiverDefinition26.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str28 = mongoDBRiverDefinition26.scriptType;
        boolean boolean29 = mongoDBRiverDefinition26.importAllCollections;
        java.lang.String str30 = mongoDBRiverDefinition26.getCOLLECTION_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList31 = mongoDBRiverDefinition26.mongoServers;
        builder24.setmongoServers(serverAddressList31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder33);
        java.util.Set<java.lang.String> strSet35 = builder33.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder33.getmongoClientOptions();
        builder33.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str41 = builder40.typeName;
        com.mongodb.BasicDBObject basicDBObject42 = null;
        builder40.mongoCollectionFilter = basicDBObject42;
        java.lang.String str44 = builder40.mongoAdminUser;
        builder40.disableIndexRefresh = false;
        java.lang.String str47 = builder40.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str49 = builder48.typeName;
        com.mongodb.BasicDBObject basicDBObject50 = null;
        builder48.mongoCollectionFilter = basicDBObject50;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder48.mongoUseSSL(true);
        java.lang.String[] strArray63 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet64 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        builder53.setparentTypes((java.util.Set<java.lang.String>) strSet64);
        builder40.parentTypes = strSet64;
        builder33.excludeFields = strSet64;
        builder24.setincludeFields((java.util.Set<java.lang.String>) strSet64);
        builder5.setparentTypes((java.util.Set<java.lang.String>) strSet64);
        java.lang.Object obj71 = docScoreSearchScript0.unwrap((java.lang.Object) builder5);
        builder5.mongoSSLVerifyCertificate = false;
        builder5.setscriptType("drop_collection");
        builder5.script = "bulk_size";
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "collection" + "'", str30, "collection");
        org.junit.Assert.assertNotNull(serverAddressList31);
        org.junit.Assert.assertNull(strSet35);
        org.junit.Assert.assertNull(mongoClientOptions36);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(obj71);
    }

    @Test
    public void test04019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04019");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        java.util.Set<java.lang.String> strSet6 = builder4.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder4.setmongoOplogFilter(basicDBObject8);
        boolean boolean10 = builder4.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray11 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList12 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList12, serverAddressArray11);
        builder4.mongoServers = serverAddressList12;
        java.lang.String str15 = builder4.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str17 = builder16.typeName;
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder16.mongoCollectionFilter = basicDBObject18;
        java.lang.String str20 = builder16.mongoAdminUser;
        builder16.disableIndexRefresh = false;
        java.lang.String str23 = builder16.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str25 = builder24.typeName;
        com.mongodb.BasicDBObject basicDBObject26 = null;
        builder24.mongoCollectionFilter = basicDBObject26;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder24.mongoUseSSL(true);
        java.lang.String[] strArray39 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        builder29.setparentTypes((java.util.Set<java.lang.String>) strSet40);
        builder16.parentTypes = strSet40;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder4.parentTypes((java.util.Set<java.lang.String>) strSet40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder4.includeCollection("type");
        docScoreSearchScript0.setNextVar("", (java.lang.Object) builder4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder49);
        int int51 = mongoDBRiverDefinition50.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList52 = mongoDBRiverDefinition50.mongoServers;
        java.lang.String str53 = mongoDBRiverDefinition50.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str54 = mongoDBRiverDefinition50.getDB_FIELD();
        boolean boolean55 = mongoDBRiverDefinition50.skipInitialImport;
        docScoreSearchScript0.setNextVar("gridfs", (java.lang.Object) mongoDBRiverDefinition50);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj57 = docScoreSearchScript0.run();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(serverAddressArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 8 + "'", int51 == 8);
        org.junit.Assert.assertNotNull(serverAddressList52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "initial_timestamp" + "'", str53, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "db" + "'", str54, "db");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test04020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04020");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.lang.String str9 = builder8.mongoCollection;
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str12 = builder11.typeName;
        com.mongodb.BasicDBObject basicDBObject13 = null;
        builder11.mongoCollectionFilter = basicDBObject13;
        java.lang.String str15 = builder11.mongoAdminUser;
        builder11.disableIndexRefresh = false;
        java.lang.String str18 = builder11.getincludeCollection();
        org.elasticsearch.common.settings.Settings settings19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        java.util.Set<java.lang.String> strSet22 = builder20.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder20.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject24 = null;
        builder20.setmongoOplogFilter(basicDBObject24);
        com.mongodb.BasicDBObject basicDBObject26 = builder20.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings27 = new org.elasticsearch.river.RiverSettings(settings19, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject26);
        builder11.setmongoOplogFilter(basicDBObject26);
        org.elasticsearch.river.RiverSettings riverSettings29 = new org.elasticsearch.river.RiverSettings(settings10, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject26);
        builder8.setmongoCollectionFilter(basicDBObject26);
        int int31 = builder8.getthrottleSize();
        java.lang.String str32 = builder8.typeName;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test04021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04021");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getDEFAULT_DB_HOST();
        boolean boolean6 = mongoDBRiverDefinition2.isMongoSSLVerifyCertificate();
        boolean boolean7 = mongoDBRiverDefinition2.isMongoGridFS();
        java.lang.String str8 = mongoDBRiverDefinition2.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition2.getMongoCollection();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "localhost" + "'", str5, "localhost");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "import_all_collections" + "'", str8, "import_all_collections");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test04022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04022");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        builder5.setparentTypes((java.util.Set<java.lang.String>) strSet16);
        builder5.setriverName("index");
        builder5.mongoCollection = "secondary_read_preference";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder5.mongoLocalUser("local");
        builder24.mongoUseSSL = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder24.skipInitialImport(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test04023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04023");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getStatisticsIndexName();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition2.getIncludeFields();
        java.util.List<com.mongodb.ServerAddress> serverAddressList7 = mongoDBRiverDefinition2.mongoServers;
        boolean boolean8 = mongoDBRiverDefinition2.isDropCollection();
        boolean boolean9 = mongoDBRiverDefinition2.isMongoGridFS();
        java.lang.String str10 = mongoDBRiverDefinition2.getMongoAdminPassword();
        java.lang.String str11 = mongoDBRiverDefinition2.getDEFAULT_DB_HOST();
        java.lang.String str12 = mongoDBRiverDefinition2.getINCLUDE_COLLECTION_FIELD();
        int int13 = mongoDBRiverDefinition2.getDEFAULT_BULK_ACTIONS();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(serverAddressList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "localhost" + "'", str11, "localhost");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "include_collection" + "'", str12, "include_collection");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1000 + "'", int13 == 1000);
    }

    @Test
    public void test04024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04024");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getDEFAULT_DB_HOST();
        java.lang.String str6 = mongoDBRiverDefinition2.getFLUSH_INTERVAL_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getSOCKET_TIMEOUT();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "localhost" + "'", str5, "localhost");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "flush_interval" + "'", str6, "flush_interval");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "socket_timeout" + "'", str7, "socket_timeout");
    }

    @Test
    public void test04025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04025");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        java.lang.String str6 = mongoDBRiverDefinition1.getDEFAULT_DB_HOST();
        java.lang.String str7 = mongoDBRiverDefinition1.getScript();
        java.lang.String str8 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str9 = mongoDBRiverDefinition1.getSTORE_STATISTICS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str11 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "localhost" + "'", str6, "localhost");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "store_statistics" + "'", str9, "store_statistics");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "parent_types" + "'", str11, "parent_types");
    }

    @Test
    public void test04026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04026");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.getincludeCollection();
        int int8 = builder0.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.connectTimeout(1000);
        builder10.connectTimeout = 'a';
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = builder10.build();
        java.lang.String str14 = builder10.script;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.mongoLocalPassword("gridfs");
        boolean boolean17 = builder10.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder10.script("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder22);
        java.util.Set<java.lang.String> strSet24 = builder22.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject26 = null;
        builder22.setmongoOplogFilter(basicDBObject26);
        boolean boolean28 = builder22.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder22.socketTimeout((int) ' ');
        java.lang.String str31 = builder30.mongoCollection;
        builder30.connectTimeout = 0;
        builder30.indexName = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder30.mongoClientOptions;
        java.lang.String str37 = builder30.getmongoAdminPassword();
        java.util.Set<java.lang.String> strSet38 = builder30.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str40 = builder39.typeName;
        com.mongodb.BasicDBObject basicDBObject41 = null;
        builder39.mongoCollectionFilter = basicDBObject41;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder39.mongoUseSSL(true);
        builder39.connectTimeout = (byte) -1;
        int int47 = builder39.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder39.statisticsIndexName("initial_timestamp");
        java.lang.String str50 = builder49.mongoLocalUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder51);
        java.util.Set<java.lang.String> strSet53 = builder51.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions54 = builder51.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject55 = null;
        builder51.setmongoOplogFilter(basicDBObject55);
        boolean boolean57 = builder51.dropCollection;
        boolean boolean58 = builder51.dropCollection;
        boolean boolean59 = builder51.mongoSecondaryReadPreference;
        int int60 = builder51.throttleSize;
        java.lang.String str61 = builder51.getriverName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition63 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder62);
        java.util.Set<java.lang.String> strSet64 = builder62.includeFields;
        java.lang.String str65 = builder62.mongoAdminUser;
        builder62.setskipInitialImport(true);
        java.lang.String[] strArray78 = new java.lang.String[] { "local", "localhost", "collection", "store_statistics", "index", "local", "concurrent_bulk_requests", "socket_timeout", "localhost", "bulk_size" };
        java.util.LinkedHashSet<java.lang.String> strSet79 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet79, strArray78);
        builder62.parentTypes = strSet79;
        builder51.setincludeFields((java.util.Set<java.lang.String>) strSet79);
        builder49.parentTypes = strSet79;
        builder30.parentTypes = strSet79;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder19.parentTypes((java.util.Set<java.lang.String>) strSet79);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(mongoClientOptions36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(strSet38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNull(strSet53);
        org.junit.Assert.assertNull(mongoClientOptions54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(strSet64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test04027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04027");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.common.settings.Settings settings1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder2.setmongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder2.skipInitialImport(false);
        builder2.skipInitialImport = true;
        boolean boolean11 = builder2.getimportAllCollections();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        org.elasticsearch.common.settings.Settings settings13 = null;
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript14 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript14.setNextScore((float) (byte) 1);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript18 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript18.setNextScore((float) (byte) 1);
        java.lang.Object obj22 = docScoreSearchScript18.unwrap((java.lang.Object) (-1));
        java.lang.Object obj24 = docScoreSearchScript18.unwrap((java.lang.Object) "bulk");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory26 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder28);
        java.util.Set<java.lang.String> strSet30 = builder28.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder28.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject32 = null;
        builder28.setmongoOplogFilter(basicDBObject32);
        com.mongodb.BasicDBObject basicDBObject34 = builder28.getmongoCollectionFilter();
        builder27.mongoCollectionFilter = basicDBObject34;
        org.elasticsearch.script.ExecutableScript executableScript36 = docScoreNativeScriptFactory26.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject34);
        org.elasticsearch.common.settings.Settings settings37 = null;
        org.elasticsearch.common.settings.Settings settings38 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory39 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder41);
        java.util.Set<java.lang.String> strSet43 = builder41.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder41.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject45 = null;
        builder41.setmongoOplogFilter(basicDBObject45);
        com.mongodb.BasicDBObject basicDBObject47 = builder41.getmongoCollectionFilter();
        builder40.mongoCollectionFilter = basicDBObject47;
        org.elasticsearch.script.ExecutableScript executableScript49 = docScoreNativeScriptFactory39.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject47);
        org.elasticsearch.river.RiverSettings riverSettings50 = new org.elasticsearch.river.RiverSettings(settings38, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject47);
        org.elasticsearch.river.RiverSettings riverSettings51 = new org.elasticsearch.river.RiverSettings(settings37, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject47);
        org.elasticsearch.script.ExecutableScript executableScript52 = docScoreNativeScriptFactory26.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject47);
        docScoreSearchScript18.setNextVar("actions", (java.lang.Object) basicDBObject47);
        docScoreSearchScript14.setNextVar("port", (java.lang.Object) docScoreSearchScript18);
        org.elasticsearch.common.settings.Settings settings56 = null;
        org.elasticsearch.common.settings.Settings settings57 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory58 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings59 = null;
        org.elasticsearch.common.settings.Settings settings60 = null;
        org.elasticsearch.common.settings.Settings settings61 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition63 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder62);
        java.util.Set<java.lang.String> strSet64 = builder62.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions65 = builder62.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject66 = null;
        builder62.setmongoOplogFilter(basicDBObject66);
        com.mongodb.BasicDBObject basicDBObject68 = builder62.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings69 = new org.elasticsearch.river.RiverSettings(settings61, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject68);
        org.elasticsearch.river.RiverSettings riverSettings70 = new org.elasticsearch.river.RiverSettings(settings60, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject68);
        org.elasticsearch.river.RiverSettings riverSettings71 = new org.elasticsearch.river.RiverSettings(settings59, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject68);
        org.elasticsearch.script.ExecutableScript executableScript72 = docScoreNativeScriptFactory58.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject68);
        org.elasticsearch.river.RiverSettings riverSettings73 = new org.elasticsearch.river.RiverSettings(settings57, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject68);
        org.elasticsearch.river.RiverSettings riverSettings74 = new org.elasticsearch.river.RiverSettings(settings56, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject68);
        docScoreSearchScript14.setNextVar("exclude_fields", (java.lang.Object) basicDBObject68);
        org.elasticsearch.river.RiverSettings riverSettings76 = new org.elasticsearch.river.RiverSettings(settings13, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject68);
        builder2.setmongoCollectionFilter(basicDBObject68);
        org.elasticsearch.river.RiverSettings riverSettings78 = new org.elasticsearch.river.RiverSettings(settings1, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject68);
        org.elasticsearch.river.RiverSettings riverSettings79 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject68);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + (-1) + "'", obj22, (-1));
        org.junit.Assert.assertEquals("'" + obj24 + "' != '" + "bulk" + "'", obj24, "bulk");
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertNull(mongoClientOptions31);
        org.junit.Assert.assertNotNull(basicDBObject34);
        org.junit.Assert.assertNotNull(executableScript36);
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertNull(mongoClientOptions44);
        org.junit.Assert.assertNotNull(basicDBObject47);
        org.junit.Assert.assertNotNull(executableScript49);
        org.junit.Assert.assertNotNull(executableScript52);
        org.junit.Assert.assertNull(strSet64);
        org.junit.Assert.assertNull(mongoClientOptions65);
        org.junit.Assert.assertNotNull(basicDBObject68);
        org.junit.Assert.assertNotNull(executableScript72);
    }

    @Test
    public void test04028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04028");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.statisticsIndexName("port");
        builder0.setmongoUseSSL(false);
        builder0.setthrottleSize((int) (short) 0);
        builder0.setscriptType("ssl");
        builder0.throttleSize = 1000;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.importAllCollections(false);
        builder0.typeName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test04029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04029");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoAdminPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getCOLLECTION_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition2.getSCRIPT_TYPE_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getSSL_CONNECTION_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "collection" + "'", str4, "collection");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script_type" + "'", str6, "script_type");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ssl" + "'", str7, "ssl");
    }

    @Test
    public void test04030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04030");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getDEFAULT_DB_HOST();
        int int6 = mongoDBRiverDefinition2.socketTimeout;
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition2.getMongoCollectionFilter();
        com.mongodb.BasicDBObject basicDBObject8 = mongoDBRiverDefinition2.getMongoOplogFilter();
        java.lang.String str9 = mongoDBRiverDefinition2.mongoDb;
        java.util.Set<java.lang.String> strSet10 = mongoDBRiverDefinition2.getParentTypes();
        boolean boolean11 = mongoDBRiverDefinition2.getskipInitialImport();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "localhost" + "'", str5, "localhost");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNull(basicDBObject8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test04031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04031");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.skipInitialImport(false);
        builder0.dropCollection = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str10 = mongoDBRiverDefinition9.getCONCURRENT_REQUESTS_FIELD();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_requests" + "'", str10, "concurrent_requests");
    }

    @Test
    public void test04032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04032");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder5.setmongoAdminUser("hi!");
        boolean boolean8 = builder5.disableIndexRefresh;
        int int9 = builder5.getthrottleSize();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str11 = mongoDBRiverDefinition10.getCONCURRENT_REQUESTS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "concurrent_requests" + "'", str11, "concurrent_requests");
    }

    @Test
    public void test04033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04033");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str4 = builder0.statisticsTypeName;
        builder0.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str9 = mongoDBRiverDefinition8.getNAME_FIELD();
        int int10 = mongoDBRiverDefinition8.getSocketTimeout();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "name" + "'", str9, "name");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test04034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04034");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        boolean boolean7 = builder0.dropCollection;
        boolean boolean8 = builder0.mongoSecondaryReadPreference;
        int int9 = builder0.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.scriptType = "exclude_fields";
        java.lang.String str13 = builder0.scriptType;
        boolean boolean14 = builder0.getmongoSSLVerifyCertificate();
        boolean boolean15 = builder0.getdropCollection();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "exclude_fields" + "'", str13, "exclude_fields");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test04035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04035");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory0 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings1 = null;
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        java.util.Set<java.lang.String> strSet5 = builder3.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder3.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject7 = null;
        builder3.setmongoOplogFilter(basicDBObject7);
        com.mongodb.BasicDBObject basicDBObject9 = builder3.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings10 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject9);
        org.elasticsearch.river.RiverSettings riverSettings11 = new org.elasticsearch.river.RiverSettings(settings1, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject9);
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory0.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject9);
        org.elasticsearch.common.settings.Settings settings13 = null;
        org.elasticsearch.common.settings.Settings settings14 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        java.util.Set<java.lang.String> strSet17 = builder15.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder15.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject19 = null;
        builder15.setmongoOplogFilter(basicDBObject19);
        com.mongodb.BasicDBObject basicDBObject21 = builder15.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings22 = new org.elasticsearch.river.RiverSettings(settings14, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject21);
        java.util.Map<java.lang.String, java.lang.Object> strMap23 = riverSettings22.settings();
        org.elasticsearch.river.RiverSettings riverSettings24 = new org.elasticsearch.river.RiverSettings(settings13, strMap23);
        org.elasticsearch.script.ExecutableScript executableScript25 = docScoreNativeScriptFactory0.newScript(strMap23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        java.util.Set<java.lang.String> strSet29 = builder27.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder27.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject31 = null;
        builder27.setmongoOplogFilter(basicDBObject31);
        com.mongodb.BasicDBObject basicDBObject33 = builder27.getmongoCollectionFilter();
        builder26.mongoCollectionFilter = basicDBObject33;
        boolean boolean35 = builder26.disableIndexRefresh;
        org.elasticsearch.common.settings.Settings settings36 = null;
        org.elasticsearch.common.settings.Settings settings37 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str39 = builder38.typeName;
        com.mongodb.BasicDBObject basicDBObject40 = null;
        builder38.mongoCollectionFilter = basicDBObject40;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder38.mongoAdminPassword("db");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory44 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings45 = null;
        org.elasticsearch.common.settings.Settings settings46 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder47);
        java.util.Set<java.lang.String> strSet49 = builder47.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions50 = builder47.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject51 = null;
        builder47.setmongoOplogFilter(basicDBObject51);
        com.mongodb.BasicDBObject basicDBObject53 = builder47.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings54 = new org.elasticsearch.river.RiverSettings(settings46, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject53);
        org.elasticsearch.river.RiverSettings riverSettings55 = new org.elasticsearch.river.RiverSettings(settings45, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject53);
        org.elasticsearch.script.ExecutableScript executableScript56 = docScoreNativeScriptFactory44.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder38.mongoOplogFilter(basicDBObject53);
        org.elasticsearch.river.RiverSettings riverSettings58 = new org.elasticsearch.river.RiverSettings(settings37, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject53);
        org.elasticsearch.river.RiverSettings riverSettings59 = new org.elasticsearch.river.RiverSettings(settings36, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject53);
        builder26.mongoOplogFilter = basicDBObject53;
        org.elasticsearch.script.ExecutableScript executableScript61 = docScoreNativeScriptFactory0.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject53);
        org.elasticsearch.common.settings.Settings settings62 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition65 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder63);
        boolean boolean66 = mongoDBRiverDefinition65.isMongoSecondaryReadPreference();
        java.lang.String str67 = mongoDBRiverDefinition65.getMongoDb();
        java.lang.String str68 = mongoDBRiverDefinition65.getSCRIPT_TYPE_FIELD();
        org.elasticsearch.common.unit.TimeValue timeValue69 = mongoDBRiverDefinition65.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str70 = mongoDBRiverDefinition65.getSCRIPT_TYPE_FIELD();
        boolean boolean71 = mongoDBRiverDefinition65.mongoUseSSL;
        java.util.Set<java.lang.String> strSet72 = mongoDBRiverDefinition65.getExcludeFields();
        java.lang.String str73 = mongoDBRiverDefinition65.getCOLLECTION_FIELD();
        com.mongodb.BasicDBObject basicDBObject74 = mongoDBRiverDefinition65.getMongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings75 = new org.elasticsearch.river.RiverSettings(settings62, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject74);
        org.elasticsearch.script.ExecutableScript executableScript76 = docScoreNativeScriptFactory0.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject74);
        org.elasticsearch.common.settings.Settings settings77 = null;
        org.elasticsearch.common.settings.Settings settings78 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory79 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings80 = null;
        org.elasticsearch.common.settings.Settings settings81 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition83 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder82);
        java.util.Set<java.lang.String> strSet84 = builder82.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions85 = builder82.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject86 = null;
        builder82.setmongoOplogFilter(basicDBObject86);
        com.mongodb.BasicDBObject basicDBObject88 = builder82.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings89 = new org.elasticsearch.river.RiverSettings(settings81, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject88);
        org.elasticsearch.river.RiverSettings riverSettings90 = new org.elasticsearch.river.RiverSettings(settings80, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject88);
        org.elasticsearch.script.ExecutableScript executableScript91 = docScoreNativeScriptFactory79.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject88);
        org.elasticsearch.river.RiverSettings riverSettings92 = new org.elasticsearch.river.RiverSettings(settings78, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject88);
        java.util.Map<java.lang.String, java.lang.Object> strMap93 = riverSettings92.settings();
        org.elasticsearch.river.RiverSettings riverSettings94 = new org.elasticsearch.river.RiverSettings(settings77, strMap93);
        org.elasticsearch.script.ExecutableScript executableScript95 = docScoreNativeScriptFactory0.newScript(strMap93);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(basicDBObject9);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNull(mongoClientOptions18);
        org.junit.Assert.assertNotNull(basicDBObject21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(executableScript25);
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(basicDBObject33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(strSet49);
        org.junit.Assert.assertNull(mongoClientOptions50);
        org.junit.Assert.assertNotNull(basicDBObject53);
        org.junit.Assert.assertNotNull(executableScript56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(executableScript61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "script_type" + "'", str68, "script_type");
        org.junit.Assert.assertNotNull(timeValue69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "script_type" + "'", str70, "script_type");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(strSet72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "collection" + "'", str73, "collection");
        org.junit.Assert.assertNotNull(basicDBObject74);
        org.junit.Assert.assertNotNull(executableScript76);
        org.junit.Assert.assertNull(strSet84);
        org.junit.Assert.assertNull(mongoClientOptions85);
        org.junit.Assert.assertNotNull(basicDBObject88);
        org.junit.Assert.assertNotNull(executableScript91);
        org.junit.Assert.assertNotNull(strMap93);
        org.junit.Assert.assertNotNull(executableScript95);
    }

    @Test
    public void test04036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04036");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.util.Set<java.lang.String> strSet9 = builder8.excludeFields;
        builder8.setriverName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.mongoAdminUser("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.mongoSSLVerifyCertificate(true);
        boolean boolean16 = builder8.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder8.riverIndexName("");
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test04037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04037");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = builder0.mongoServers;
        java.lang.String[] strArray12 = new java.lang.String[] { "connect_timeout", "credentials", "connect_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder0.setparentTypes((java.util.Set<java.lang.String>) strSet13);
        int int16 = builder0.throttleSize;
        java.lang.String str17 = builder0.getmongoDb();
        java.util.Set<java.lang.String> strSet18 = builder0.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder0.typeName("concurrent_requests");
        builder20.setmongoAdminPassword("actions");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(serverAddressList8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test04038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04038");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        builder0.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setscriptType("host");
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
    }

    @Test
    public void test04039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04039");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.getincludeCollection();
        int int8 = builder0.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.connectTimeout(1000);
        builder10.connectTimeout = 'a';
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = builder10.build();
        java.lang.String str14 = mongoDBRiverDefinition13.getIndexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test04040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04040");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        boolean boolean4 = mongoDBRiverDefinition1.importAllCollections;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        boolean boolean6 = mongoDBRiverDefinition1.getstoreStatistics();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoDb();
        java.util.List<com.mongodb.ServerAddress> serverAddressList9 = mongoDBRiverDefinition1.getMongoServers();
        java.lang.String str10 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(serverAddressList9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "gridfs" + "'", str10, "gridfs");
    }

    @Test
    public void test04041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04041");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.statisticsTypeName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoDb("secondary_read_preference");
        java.lang.String str7 = builder0.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        builder9.riverIndexName = "secondary_read_preference";
        java.lang.String str12 = builder9.getmongoLocalPassword();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "bulk_size" + "'", str7, "bulk_size");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test04042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04042");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = mongoDBRiverDefinition1.getExcludeFields();
        java.lang.String str3 = mongoDBRiverDefinition1.getRiverIndexName();
        java.lang.String str4 = mongoDBRiverDefinition1.getIndexName();
        java.lang.String str5 = mongoDBRiverDefinition1.mongoAdminUser;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test04043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04043");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = builder0.getmongoCollectionFilter();
        builder0.setthrottleSize(27017);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.throttleSize((int) (short) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoSecondaryReadPreference(false);
        java.lang.String str13 = builder12.getmongoLocalPassword();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test04044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04044");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str9 = mongoDBRiverDefinition8.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getMongoOplogNamespace();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "include_collection" + "'", str9, "include_collection");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "null.null" + "'", str10, "null.null");
    }

    @Test
    public void test04045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04045");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = mongoDBRiverDefinition2.getDEFAULT_BULK_SIZE();
        java.lang.String str6 = mongoDBRiverDefinition2.indexName;
        java.lang.String str7 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        boolean boolean8 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition2.getMongoCollectionFilter();
        java.lang.String str10 = mongoDBRiverDefinition2.getOPTIONS_FIELD();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition2.mongoCollectionFilter;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertNotNull(byteSizeValue5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "connect_timeout" + "'", str7, "connect_timeout");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(basicDBObject9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "options" + "'", str10, "options");
        org.junit.Assert.assertNotNull(basicDBObject11);
    }

    @Test
    public void test04046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04046");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.statisticsTypeName("bulk_size");
        builder0.includeCollection = "port";
        builder0.mongoAdminPassword = "localhost";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.util.Set<java.lang.String> strSet11 = builder9.includeFields;
        java.lang.String str12 = builder9.getstatisticsIndexName();
        builder9.setsocketTimeout(10);
        builder9.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder9.mongoGridFS(true);
        org.elasticsearch.common.settings.Settings settings19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        java.util.Set<java.lang.String> strSet23 = builder21.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject25 = null;
        builder21.setmongoOplogFilter(basicDBObject25);
        com.mongodb.BasicDBObject basicDBObject27 = builder21.getmongoCollectionFilter();
        builder20.mongoCollectionFilter = basicDBObject27;
        org.elasticsearch.river.RiverSettings riverSettings29 = new org.elasticsearch.river.RiverSettings(settings19, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder9.mongoCollectionFilter(basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder0.mongoOplogFilter(basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder0.mongoSSLVerifyCertificate(false);
        builder33.importAllCollections = false;
        java.util.Set<java.lang.String> strSet36 = builder33.includeFields;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(strSet36);
    }

    @Test
    public void test04047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04047");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        java.lang.String str3 = mongoDBRiverDefinition1.mongoAdminPassword;
        java.lang.String str4 = mongoDBRiverDefinition1.mongoAdminPassword;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = mongoDBRiverDefinition1.getInitialTimestamp();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoAdminPassword();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoDb();
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str9 = mongoDBRiverDefinition1.getLOCAL_DB_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.scriptType;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1000 + "'", int2 == 1000);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "local" + "'", str9, "local");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test04048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04048");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        builder0.setsocketTimeout((int) (short) 1);
        java.lang.String str10 = builder0.getstatisticsTypeName();
        boolean boolean11 = builder0.getmongoGridFS();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.mongoLocalUser("name");
        builder0.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.statisticsTypeName("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder0.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder20.mongoUseSSL(true);
        org.bson.types.Binary binary25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder20.initialTimestamp(binary25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test04049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04049");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        java.lang.String str4 = builder0.mongoCollection;
        builder0.mongoLocalUser = "include_fields";
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test04050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04050");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        builder0.typeName = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        java.util.Set<java.lang.String> strSet15 = builder13.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.statisticsTypeName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        java.util.List<com.mongodb.ServerAddress> serverAddressList19 = mongoDBRiverDefinition18.getMongoServers();
        builder0.mongoServers = serverAddressList19;
        builder0.typeName = "exclude_fields";
        java.util.Set<java.lang.String> strSet23 = builder0.includeFields;
        builder0.dropCollection = false;
        java.lang.String str26 = builder0.getindexName();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(serverAddressList19);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test04051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04051");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.statisticsTypeName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        java.lang.String str6 = mongoDBRiverDefinition5.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition5.getDEFAULT_DB_HOST();
        boolean boolean8 = mongoDBRiverDefinition5.isStoreStatistics();
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition5.parentTypes;
        java.lang.String str10 = mongoDBRiverDefinition5.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition5.mongoDb;
        java.lang.String str12 = mongoDBRiverDefinition5.getBULK_FIELD();
        boolean boolean13 = mongoDBRiverDefinition5.storeStatistics;
        boolean boolean14 = mongoDBRiverDefinition5.isMongoSSLVerifyCertificate();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "bulk_size" + "'", str6, "bulk_size");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "localhost" + "'", str7, "localhost");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "script_type" + "'", str10, "script_type");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "bulk" + "'", str12, "bulk");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test04052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04052");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.lang.String str9 = builder8.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoCollection("drop_collection");
        java.lang.String str12 = builder11.mongoAdminUser;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test04053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04053");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        builder0.setmongoClientOptions(mongoClientOptions9);
        com.mongodb.BasicDBObject basicDBObject11 = builder0.mongoOplogFilter;
        builder0.mongoUseSSL = false;
        builder0.mongoSecondaryReadPreference = true;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(basicDBObject11);
    }

    @Test
    public void test04054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04054");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = builder0.statisticsTypeName;
        boolean boolean4 = builder0.storeStatistics;
        builder0.setriverName("localhost");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test04055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04055");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoAdminPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getCOLLECTION_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition2.getSCRIPT_TYPE_FIELD();
        boolean boolean7 = mongoDBRiverDefinition2.getdropCollection();
        int int8 = mongoDBRiverDefinition2.getSocketTimeout();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "collection" + "'", str4, "collection");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script_type" + "'", str6, "script_type");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test04056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04056");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getDEFAULT_DB_HOST();
        int int6 = mongoDBRiverDefinition2.socketTimeout;
        boolean boolean7 = mongoDBRiverDefinition2.getmongoSecondaryReadPreference();
        java.lang.String str8 = mongoDBRiverDefinition2.getTYPE_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition2.getMongoDb();
        java.util.Set<java.lang.String> strSet10 = mongoDBRiverDefinition2.parentTypes;
        java.lang.String str11 = mongoDBRiverDefinition2.getHOST_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "localhost" + "'", str5, "localhost");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "type" + "'", str8, "type");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
    }

    @Test
    public void test04057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04057");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.typeName;
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder12.mongoCollectionFilter = basicDBObject14;
        java.lang.String str16 = builder12.mongoAdminUser;
        builder12.disableIndexRefresh = false;
        java.lang.String str19 = builder12.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.typeName;
        com.mongodb.BasicDBObject basicDBObject22 = null;
        builder20.mongoCollectionFilter = basicDBObject22;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder20.mongoUseSSL(true);
        java.lang.String[] strArray35 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        builder25.setparentTypes((java.util.Set<java.lang.String>) strSet36);
        builder12.parentTypes = strSet36;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder40.mongoLocalPassword("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.statisticsIndexName("exclude_fields");
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test04058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04058");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.typeName;
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder6.mongoCollectionFilter = basicDBObject8;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoAdminPassword("db");
        docScoreSearchScript0.setNextVar("bulk_size", (java.lang.Object) builder6);
        java.lang.Object obj14 = null;
        docScoreSearchScript0.setNextVar("gridfs", obj14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        java.util.Set<java.lang.String> strSet19 = builder17.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder17.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject21 = null;
        builder17.setmongoOplogFilter(basicDBObject21);
        boolean boolean23 = builder17.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray24 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList25 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList25, serverAddressArray24);
        builder17.mongoServers = serverAddressList25;
        java.lang.String str28 = builder17.mongoAdminPassword;
        java.lang.String str29 = builder17.getscriptType();
        java.lang.String str30 = builder17.gettypeName();
        docScoreSearchScript0.setNextVar("advanced_transformation", (java.lang.Object) builder17);
        docScoreSearchScript0.setNextScore((float) 100L);
        docScoreSearchScript0.setNextScore(10.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double36 = docScoreSearchScript0.runAsDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serverAddressArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test04059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04059");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getDEFAULT_DB_HOST();
        boolean boolean6 = mongoDBRiverDefinition2.isMongoSSLVerifyCertificate();
        java.lang.String str7 = mongoDBRiverDefinition2.getScript();
        java.lang.String str8 = mongoDBRiverDefinition2.getPORT_FIELD();
        boolean boolean9 = mongoDBRiverDefinition2.mongoSecondaryReadPreference;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "localhost" + "'", str5, "localhost");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "port" + "'", str8, "port");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test04060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04060");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.util.Set<java.lang.String> strSet9 = builder8.excludeFields;
        builder8.setriverName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.mongoAdminUser("concurrent_bulk_requests");
        com.mongodb.BasicDBObject basicDBObject14 = builder8.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str16 = builder15.typeName;
        com.mongodb.BasicDBObject basicDBObject17 = null;
        builder15.mongoCollectionFilter = basicDBObject17;
        java.lang.String str19 = builder15.mongoAdminUser;
        builder15.disableIndexRefresh = false;
        java.lang.String str22 = builder15.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder15.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder24);
        java.util.Set<java.lang.String> strSet26 = builder24.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject28 = null;
        builder24.setmongoOplogFilter(basicDBObject28);
        boolean boolean30 = builder24.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray31 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList32 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList32, serverAddressArray31);
        builder24.mongoServers = serverAddressList32;
        java.lang.String str35 = builder24.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str37 = builder36.typeName;
        com.mongodb.BasicDBObject basicDBObject38 = null;
        builder36.mongoCollectionFilter = basicDBObject38;
        java.lang.String str40 = builder36.mongoAdminUser;
        builder36.disableIndexRefresh = false;
        java.lang.String str43 = builder36.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str45 = builder44.typeName;
        com.mongodb.BasicDBObject basicDBObject46 = null;
        builder44.mongoCollectionFilter = basicDBObject46;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder44.mongoUseSSL(true);
        java.lang.String[] strArray59 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        builder49.setparentTypes((java.util.Set<java.lang.String>) strSet60);
        builder36.parentTypes = strSet60;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder24.parentTypes((java.util.Set<java.lang.String>) strSet60);
        builder15.setexcludeFields((java.util.Set<java.lang.String>) strSet60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder8.parentTypes((java.util.Set<java.lang.String>) strSet60);
        boolean boolean67 = builder8.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder8.mongoLocalUser("");
        java.lang.Class<?> wildcardClass70 = builder69.getClass();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(basicDBObject14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(mongoClientOptions23);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(serverAddressArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test04061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04061");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        int int6 = builder0.getsocketTimeout();
        boolean boolean7 = builder0.getmongoGridFS();
        builder0.statisticsTypeName = "size";
        boolean boolean10 = builder0.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.bson.types.BSONTimestamp bSONTimestamp12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.initialTimestamp(bSONTimestamp12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test04062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04062");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        boolean boolean4 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str5 = mongoDBRiverDefinition1.getScriptType();
        boolean boolean6 = mongoDBRiverDefinition1.advancedTransformation;
        java.lang.String str7 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getFILTER_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.isSkipInitialImport();
        boolean boolean10 = mongoDBRiverDefinition1.isSkipInitialImport();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "initial_timestamp" + "'", str7, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "filter" + "'", str8, "filter");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test04063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04063");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        java.lang.String str5 = builder0.getriverName();
        builder0.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.typeName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        int int14 = mongoDBRiverDefinition13.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str15 = mongoDBRiverDefinition13.scriptType;
        boolean boolean16 = mongoDBRiverDefinition13.importAllCollections;
        java.lang.String str17 = mongoDBRiverDefinition13.getCOLLECTION_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList18 = mongoDBRiverDefinition13.mongoServers;
        builder11.setmongoServers(serverAddressList18);
        builder11.statisticsIndexName = "name";
        java.lang.String str22 = builder11.statisticsIndexName;
        java.lang.String str23 = builder11.mongoAdminUser;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "collection" + "'", str17, "collection");
        org.junit.Assert.assertNotNull(serverAddressList18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "name" + "'", str22, "name");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test04064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04064");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.typeName;
        com.mongodb.BasicDBObject basicDBObject5 = null;
        builder3.mongoCollectionFilter = basicDBObject5;
        java.lang.String str7 = builder3.mongoAdminUser;
        builder3.disableIndexRefresh = false;
        java.lang.String str10 = builder3.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder3.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.util.Set<java.lang.String> strSet14 = builder12.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder12.setmongoOplogFilter(basicDBObject16);
        boolean boolean18 = builder12.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray19 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList20 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList20, serverAddressArray19);
        builder12.mongoServers = serverAddressList20;
        java.lang.String str23 = builder12.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str25 = builder24.typeName;
        com.mongodb.BasicDBObject basicDBObject26 = null;
        builder24.mongoCollectionFilter = basicDBObject26;
        java.lang.String str28 = builder24.mongoAdminUser;
        builder24.disableIndexRefresh = false;
        java.lang.String str31 = builder24.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str33 = builder32.typeName;
        com.mongodb.BasicDBObject basicDBObject34 = null;
        builder32.mongoCollectionFilter = basicDBObject34;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder32.mongoUseSSL(true);
        java.lang.String[] strArray47 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        builder37.setparentTypes((java.util.Set<java.lang.String>) strSet48);
        builder24.parentTypes = strSet48;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder12.parentTypes((java.util.Set<java.lang.String>) strSet48);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder0.includeFields((java.util.Set<java.lang.String>) strSet48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.script = "connect_timeout";
        java.lang.String str58 = builder0.getstatisticsIndexName();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(mongoClientOptions11);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(serverAddressArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(str58);
    }

    @Test
    public void test04065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04065");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder1);
        java.util.Set<java.lang.String> strSet3 = builder1.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions4 = builder1.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject5 = null;
        builder1.setmongoOplogFilter(basicDBObject5);
        com.mongodb.BasicDBObject basicDBObject7 = builder1.getmongoCollectionFilter();
        builder0.mongoCollectionFilter = basicDBObject7;
        boolean boolean9 = builder0.disableIndexRefresh;
        boolean boolean10 = builder0.dropCollection;
        builder0.setriverIndexName("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.advancedTransformation(true);
        builder0.setdisableIndexRefresh(false);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(mongoClientOptions4);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test04066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04066");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder1);
        java.util.Set<java.lang.String> strSet3 = builder1.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions4 = builder1.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject5 = null;
        builder1.setmongoOplogFilter(basicDBObject5);
        com.mongodb.BasicDBObject basicDBObject7 = builder1.getmongoCollectionFilter();
        builder1.setskipInitialImport(false);
        java.lang.String str10 = builder1.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder1);
        com.mongodb.BasicDBObject basicDBObject13 = mongoDBRiverDefinition12.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings14 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject13);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(mongoClientOptions4);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(basicDBObject13);
    }

    @Test
    public void test04067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04067");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        builder5.setparentTypes((java.util.Set<java.lang.String>) strSet16);
        builder5.setriverName("index");
        builder5.mongoCollection = "secondary_read_preference";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder5.mongoLocalUser("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        java.util.Set<java.lang.String> strSet27 = builder25.includeFields;
        java.lang.String str28 = builder25.getstatisticsIndexName();
        builder25.setsocketTimeout(10);
        builder25.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder25.mongoGridFS(true);
        org.elasticsearch.common.settings.Settings settings35 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder37);
        java.util.Set<java.lang.String> strSet39 = builder37.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions40 = builder37.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject41 = null;
        builder37.setmongoOplogFilter(basicDBObject41);
        com.mongodb.BasicDBObject basicDBObject43 = builder37.getmongoCollectionFilter();
        builder36.mongoCollectionFilter = basicDBObject43;
        org.elasticsearch.river.RiverSettings riverSettings45 = new org.elasticsearch.river.RiverSettings(settings35, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder25.mongoCollectionFilter(basicDBObject43);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp47 = builder25.getinitialTimestamp();
        boolean boolean48 = builder25.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str50 = builder49.typeName;
        com.mongodb.BasicDBObject basicDBObject51 = null;
        builder49.mongoCollectionFilter = basicDBObject51;
        java.lang.String str53 = builder49.mongoAdminUser;
        java.lang.String str54 = builder49.getriverName();
        builder49.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder49.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder49.typeName("import_all_collections");
        java.util.Set<java.lang.String> strSet61 = builder49.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition63 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder62);
        int int64 = mongoDBRiverDefinition63.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList65 = mongoDBRiverDefinition63.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder49.mongoServers(serverAddressList65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder25.mongoServers(serverAddressList65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder67.mongoSSLVerifyCertificate(false);
        int int70 = builder67.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str72 = builder71.mongoCollection;
        builder71.setmongoUseSSL(false);
        org.elasticsearch.common.settings.Settings settings75 = null;
        org.elasticsearch.common.settings.Settings settings76 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition78 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder77);
        java.util.Set<java.lang.String> strSet79 = builder77.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions80 = builder77.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject81 = null;
        builder77.setmongoOplogFilter(basicDBObject81);
        com.mongodb.BasicDBObject basicDBObject83 = builder77.getmongoCollectionFilter();
        builder77.setskipInitialImport(false);
        java.lang.String str86 = builder77.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder77.connectTimeout((int) ' ');
        com.mongodb.BasicDBObject basicDBObject89 = builder88.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings90 = new org.elasticsearch.river.RiverSettings(settings76, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject89);
        org.elasticsearch.river.RiverSettings riverSettings91 = new org.elasticsearch.river.RiverSettings(settings75, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject89);
        builder71.mongoCollectionFilter = basicDBObject89;
        builder67.setmongoCollectionFilter(basicDBObject89);
        builder24.setmongoOplogFilter(basicDBObject89);
        builder24.setdisableIndexRefresh(false);
        builder24.setscriptType("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition99 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder24);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(strSet39);
        org.junit.Assert.assertNull(mongoClientOptions40);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(wildcardTimestamp47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(strSet61);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 8 + "'", int64 == 8);
        org.junit.Assert.assertNotNull(serverAddressList65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(strSet79);
        org.junit.Assert.assertNull(mongoClientOptions80);
        org.junit.Assert.assertNotNull(basicDBObject83);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(basicDBObject89);
    }

    @Test
    public void test04068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04068");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.common.settings.Settings settings1 = null;
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.common.settings.Settings settings3 = null;
        org.elasticsearch.common.settings.Settings settings4 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory5 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings6 = null;
        org.elasticsearch.common.settings.Settings settings7 = null;
        org.elasticsearch.common.settings.Settings settings8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.util.Set<java.lang.String> strSet11 = builder9.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder9.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject13 = null;
        builder9.setmongoOplogFilter(basicDBObject13);
        com.mongodb.BasicDBObject basicDBObject15 = builder9.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings16 = new org.elasticsearch.river.RiverSettings(settings8, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        org.elasticsearch.river.RiverSettings riverSettings17 = new org.elasticsearch.river.RiverSettings(settings7, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        org.elasticsearch.river.RiverSettings riverSettings18 = new org.elasticsearch.river.RiverSettings(settings6, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        org.elasticsearch.script.ExecutableScript executableScript19 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        org.elasticsearch.river.RiverSettings riverSettings20 = new org.elasticsearch.river.RiverSettings(settings4, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        org.elasticsearch.river.RiverSettings riverSettings21 = new org.elasticsearch.river.RiverSettings(settings3, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        org.elasticsearch.river.RiverSettings riverSettings22 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        java.util.Map<java.lang.String, java.lang.Object> strMap23 = riverSettings22.settings();
        org.elasticsearch.river.RiverSettings riverSettings24 = new org.elasticsearch.river.RiverSettings(settings1, strMap23);
        org.elasticsearch.river.RiverSettings riverSettings25 = new org.elasticsearch.river.RiverSettings(settings0, strMap23);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNull(mongoClientOptions12);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNotNull(executableScript19);
        org.junit.Assert.assertNotNull(strMap23);
    }

    @Test
    public void test04069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04069");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        java.util.Set<java.lang.String> strSet6 = builder5.getincludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.storeStatistics(false);
        java.util.List<com.mongodb.ServerAddress> serverAddressList9 = builder5.mongoServers;
        builder5.setmongoLocalPassword("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.mongoAdminUser("null.null");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp14 = builder13.getinitialTimestamp();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(serverAddressList9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(wildcardTimestamp14);
    }

    @Test
    public void test04070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04070");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        boolean boolean4 = mongoDBRiverDefinition1.importAllCollections;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        java.lang.String str6 = mongoDBRiverDefinition1.getSSL_VERIFY_CERT_FIELD();
        boolean boolean7 = mongoDBRiverDefinition1.isMongoUseSSL();
        boolean boolean8 = mongoDBRiverDefinition1.getmongoUseSSL();
        boolean boolean9 = mongoDBRiverDefinition1.getadvancedTransformation();
        java.util.Set<java.lang.String> strSet10 = mongoDBRiverDefinition1.includeFields;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ssl_verify_certificate" + "'", str6, "ssl_verify_certificate");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
    }

    @Test
    public void test04071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04071");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoAdminPassword;
        int int4 = mongoDBRiverDefinition2.connectTimeout;
        java.lang.String str5 = mongoDBRiverDefinition2.getScriptType();
        org.elasticsearch.common.unit.TimeValue timeValue6 = mongoDBRiverDefinition2.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean7 = mongoDBRiverDefinition2.mongoSecondaryReadPreference;
        java.util.Set<java.lang.String> strSet8 = mongoDBRiverDefinition2.getParentTypes();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strSet8);
    }

    @Test
    public void test04072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04072");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        builder0.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str8 = builder0.includeCollection;
        builder0.mongoLocalUser = "name";
        int int11 = builder0.connectTimeout;
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        builder0.mongoClientOptions = mongoClientOptions12;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test04073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04073");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        int int8 = builder0.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.statisticsIndexName("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.statisticsTypeName("");
        builder12.setstoreStatistics(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test04074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04074");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        java.lang.String str4 = mongoDBRiverDefinition2.getGRIDFS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition2.getStatisticsIndexName();
        java.lang.String str7 = mongoDBRiverDefinition2.getFILTER_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.getMongoAdminPassword();
        boolean boolean9 = mongoDBRiverDefinition2.getmongoSecondaryReadPreference();
        java.lang.String str10 = mongoDBRiverDefinition2.getADMIN_DB_FIELD();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gridfs" + "'", str4, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "filter" + "'", str7, "filter");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
    }

    @Test
    public void test04075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04075");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoAdminPassword;
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition2.excludeFields;
        int int5 = mongoDBRiverDefinition2.getConnectTimeout();
        java.lang.String str6 = mongoDBRiverDefinition2.mongoLocalUser;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test04076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04076");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.typeName("secondary_read_preference");
        boolean boolean10 = builder9.skipInitialImport;
        java.lang.String str11 = builder9.getriverName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.mongoLocalUser("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        boolean boolean15 = builder13.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        builder13.mongoUseSSL = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test04077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04077");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        java.lang.String str4 = mongoDBRiverDefinition2.getGRIDFS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition2.mongoLocalUser;
        java.lang.String str7 = mongoDBRiverDefinition2.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_FIELD();
        boolean boolean9 = mongoDBRiverDefinition2.isMongoUseSSL();
        java.lang.String str10 = mongoDBRiverDefinition2.getRiverName();
        java.lang.String str11 = mongoDBRiverDefinition2.getPORT_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition2.getOPTIONS_FIELD();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gridfs" + "'", str4, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "import_all_collections" + "'", str7, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "initial_timestamp" + "'", str8, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "port" + "'", str11, "port");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "options" + "'", str12, "options");
    }

    @Test
    public void test04078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04078");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        builder0.setsocketTimeout((int) (short) 1);
        java.lang.String str10 = builder0.getstatisticsTypeName();
        boolean boolean11 = builder0.getmongoGridFS();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.dropCollection(false);
        builder13.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.storeStatistics(true);
        java.util.Set<java.lang.String> strSet18 = builder17.getincludeFields();
        builder17.disableIndexRefresh = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder17.statisticsIndexName("collection");
        boolean boolean23 = builder17.getstoreStatistics();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test04079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04079");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        boolean boolean6 = builder0.getmongoGridFS();
        java.lang.String str7 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.riverIndexName("index");
        builder0.setincludeCollection("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.skipInitialImport(false);
        builder13.socketTimeout = '#';
        com.mongodb.BasicDBObject basicDBObject16 = builder13.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        java.lang.String str18 = mongoDBRiverDefinition17.getLOCAL_DB_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition17.getSSL_CONNECTION_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(basicDBObject16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "local" + "'", str18, "local");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ssl" + "'", str19, "ssl");
    }

    @Test
    public void test04080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04080");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.statisticsTypeName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str6 = mongoDBRiverDefinition5.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        int int7 = mongoDBRiverDefinition5.getDEFAULT_DB_PORT();
        com.mongodb.MongoClientOptions mongoClientOptions8 = mongoDBRiverDefinition5.getMongoClientOptions();
        java.lang.String str9 = mongoDBRiverDefinition5.getMongoCollection();
        java.lang.String str10 = mongoDBRiverDefinition5.typeName;
        java.lang.String str11 = mongoDBRiverDefinition5.getCONNECTION_TIMEOUT();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script_type" + "'", str6, "script_type");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "connect_timeout" + "'", str11, "connect_timeout");
    }

    @Test
    public void test04081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04081");
        org.elasticsearch.common.settings.Settings settings4 = null;
        org.elasticsearch.common.settings.Settings settings5 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory6 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings7 = null;
        org.elasticsearch.common.settings.Settings settings8 = null;
        org.elasticsearch.common.settings.Settings settings9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        java.util.Set<java.lang.String> strSet12 = builder10.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder10.setmongoOplogFilter(basicDBObject14);
        com.mongodb.BasicDBObject basicDBObject16 = builder10.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings17 = new org.elasticsearch.river.RiverSettings(settings9, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject16);
        org.elasticsearch.river.RiverSettings riverSettings18 = new org.elasticsearch.river.RiverSettings(settings8, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject16);
        org.elasticsearch.river.RiverSettings riverSettings19 = new org.elasticsearch.river.RiverSettings(settings7, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject16);
        org.elasticsearch.script.ExecutableScript executableScript20 = docScoreNativeScriptFactory6.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject16);
        org.elasticsearch.river.RiverSettings riverSettings21 = new org.elasticsearch.river.RiverSettings(settings5, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject16);
        org.elasticsearch.river.RiverSettings riverSettings22 = new org.elasticsearch.river.RiverSettings(settings4, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject16);
        org.elasticsearch.script.ScriptService scriptService23 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("user", "concurrent_bulk_requests", riverSettings22, scriptService23);
        org.elasticsearch.script.ScriptService scriptService25 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("db", "admin", riverSettings22, scriptService25);
        java.lang.String str27 = mongoDBRiverDefinition26.riverIndexName;
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNotNull(executableScript20);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition24);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "admin" + "'", str27, "admin");
    }

    @Test
    public void test04082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04082");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.typeName("");
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test04083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04083");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        boolean boolean6 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        java.lang.String str7 = mongoDBRiverDefinition1.getFILTER_FIELD();
        boolean boolean8 = mongoDBRiverDefinition1.getdisableIndexRefresh();
        int int9 = mongoDBRiverDefinition1.connectTimeout;
        java.lang.String str10 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.lang.String str11 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "filter" + "'", str7, "filter");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "script" + "'", str11, "script");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "script_type" + "'", str12, "script_type");
    }

    @Test
    public void test04084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04084");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.mongoClientOptions;
        builder0.importAllCollections = false;
        builder0.setmongoSecondaryReadPreference(false);
        builder0.setstatisticsTypeName("exclude_fields");
        com.mongodb.BasicDBObject basicDBObject15 = builder0.mongoOplogFilter;
        boolean boolean16 = builder0.getmongoGridFS();
        builder0.script = "flush_interval";
        java.lang.String str19 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.riverIndexName("concurrent_requests");
        builder21.setdropCollection(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNull(basicDBObject15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test04085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04085");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        java.util.Set<java.lang.String> strSet6 = builder5.getincludeFields();
        builder5.socketTimeout = 10;
        int int9 = builder5.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.riverIndexName("advanced_transformation");
        boolean boolean12 = builder11.skipInitialImport;
        builder11.setdropCollection(false);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder11.getmongoClientOptions();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(mongoClientOptions15);
    }

    @Test
    public void test04086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04086");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.typeName;
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder6.mongoCollectionFilter = basicDBObject8;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoAdminPassword("db");
        docScoreSearchScript0.setNextVar("bulk_size", (java.lang.Object) builder6);
        java.lang.Object obj14 = null;
        docScoreSearchScript0.setNextVar("gridfs", obj14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        boolean boolean20 = builder17.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        java.lang.String str22 = mongoDBRiverDefinition21.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        docScoreSearchScript0.setNextVar("socket_timeout", (java.lang.Object) mongoDBRiverDefinition21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        java.lang.String str28 = mongoDBRiverDefinition27.getCONNECTION_TIMEOUT();
        java.lang.String str29 = mongoDBRiverDefinition27.getCREDENTIALS_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue30 = mongoDBRiverDefinition27.getDEFAULT_BULK_SIZE();
        java.lang.String str31 = mongoDBRiverDefinition27.indexName;
        java.lang.String str32 = mongoDBRiverDefinition27.getBULK_SIZE_FIELD();
        int int33 = mongoDBRiverDefinition27.getDEFAULT_CONCURRENT_REQUESTS();
        boolean boolean34 = mongoDBRiverDefinition27.isAdvancedTransformation();
        docScoreSearchScript0.setNextVar("concurrent_bulk_requests", (java.lang.Object) mongoDBRiverDefinition27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder36);
        java.util.Set<java.lang.String> strSet38 = builder36.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder36.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject40 = null;
        builder36.setmongoOplogFilter(basicDBObject40);
        boolean boolean42 = builder36.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder36.socketTimeout((int) ' ');
        java.lang.String str45 = builder44.getscript();
        java.lang.String str46 = builder44.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder44.connectTimeout((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.mongoLocalUser("bulk");
        boolean boolean51 = builder48.disableIndexRefresh;
        java.lang.Object obj52 = docScoreSearchScript0.unwrap((java.lang.Object) builder48);
        // The following exception was thrown during execution in test generation
        try {
            float float53 = docScoreSearchScript0.runAsFloat();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "script_type" + "'", str22, "script_type");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "connect_timeout" + "'", str28, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "credentials" + "'", str29, "credentials");
        org.junit.Assert.assertNotNull(byteSizeValue30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "bulk_size" + "'", str32, "bulk_size");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(strSet38);
        org.junit.Assert.assertNull(mongoClientOptions39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(obj52);
    }

    @Test
    public void test04087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04087");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = builder0.getmongoCollectionFilter();
        builder0.setskipInitialImport(false);
        java.lang.String str9 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int11 = mongoDBRiverDefinition10.socketTimeout;
        int int12 = mongoDBRiverDefinition10.getThrottleSize();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test04088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04088");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        builder0.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.util.Set<java.lang.String> strSet14 = builder12.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder12.setmongoOplogFilter(basicDBObject16);
        com.mongodb.BasicDBObject basicDBObject18 = builder12.getmongoCollectionFilter();
        builder11.mongoCollectionFilter = basicDBObject18;
        org.elasticsearch.river.RiverSettings riverSettings20 = new org.elasticsearch.river.RiverSettings(settings10, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoCollectionFilter(basicDBObject18);
        java.lang.String str22 = builder21.mongoLocalUser;
        builder21.setdisableIndexRefresh(true);
        builder21.setmongoUseSSL(false);
        builder21.mongoDb = "include_collection.include_collection";
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test04089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04089");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str4 = builder0.statisticsTypeName;
        builder0.setmongoSSLVerifyCertificate(true);
        int int7 = builder0.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.util.Set<java.lang.String> strSet10 = builder8.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.statisticsTypeName("bulk_size");
        builder8.includeCollection = "port";
        builder8.mongoAdminPassword = "localhost";
        builder8.setmongoUseSSL(false);
        com.mongodb.BasicDBObject basicDBObject19 = builder8.mongoCollectionFilter;
        builder0.mongoCollectionFilter = basicDBObject19;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.statisticsIndexName("options");
        com.mongodb.MongoClientOptions mongoClientOptions23 = null;
        builder22.setmongoClientOptions(mongoClientOptions23);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test04090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04090");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.skipInitialImport(false);
        builder0.dropCollection = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str10 = mongoDBRiverDefinition9.getEXCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "exclude_fields" + "'", str10, "exclude_fields");
    }

    @Test
    public void test04091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04091");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        boolean boolean7 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoLocalPassword("");
        boolean boolean10 = builder9.getdropCollection();
        builder9.typeName = "index";
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test04092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04092");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        java.lang.String str5 = builder0.getriverName();
        builder0.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        int int12 = mongoDBRiverDefinition11.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition11.mongoServers;
        boolean boolean14 = mongoDBRiverDefinition11.importAllCollections;
        java.util.List<com.mongodb.ServerAddress> serverAddressList15 = mongoDBRiverDefinition11.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder9.mongoServers(serverAddressList15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        int int19 = mongoDBRiverDefinition18.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList20 = mongoDBRiverDefinition18.mongoServers;
        boolean boolean21 = mongoDBRiverDefinition18.importAllCollections;
        java.util.List<com.mongodb.ServerAddress> serverAddressList22 = mongoDBRiverDefinition18.mongoServers;
        java.util.List<com.mongodb.ServerAddress> serverAddressList23 = mongoDBRiverDefinition18.getMongoServers();
        builder16.mongoServers = serverAddressList23;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        java.util.Set<java.lang.String> strSet27 = builder25.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder25.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject29 = null;
        builder25.setmongoOplogFilter(basicDBObject29);
        com.mongodb.BasicDBObject basicDBObject31 = builder25.getmongoCollectionFilter();
        builder25.setthrottleSize(27017);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder25.throttleSize((int) (short) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder25.mongoSecondaryReadPreference(false);
        boolean boolean38 = builder25.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str40 = builder39.typeName;
        com.mongodb.BasicDBObject basicDBObject41 = null;
        builder39.mongoCollectionFilter = basicDBObject41;
        com.mongodb.BasicDBObject basicDBObject43 = null;
        builder39.mongoOplogFilter = basicDBObject43;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition45 = builder39.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder39.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder47.mongoAdminPassword("concurrent_requests");
        boolean boolean50 = builder47.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str52 = builder51.typeName;
        com.mongodb.BasicDBObject basicDBObject53 = null;
        builder51.mongoCollectionFilter = basicDBObject53;
        com.mongodb.BasicDBObject basicDBObject55 = null;
        builder51.mongoOplogFilter = basicDBObject55;
        builder51.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder51.typeName("secondary_read_preference");
        builder51.mongoSSLVerifyCertificate = false;
        boolean boolean63 = builder51.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder51.script("flush_interval");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str67 = builder66.typeName;
        com.mongodb.BasicDBObject basicDBObject68 = null;
        builder66.mongoCollectionFilter = basicDBObject68;
        com.mongodb.BasicDBObject basicDBObject70 = null;
        builder66.mongoOplogFilter = basicDBObject70;
        builder66.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList74 = builder66.mongoServers;
        java.lang.String[] strArray78 = new java.lang.String[] { "connect_timeout", "credentials", "connect_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet79 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet79, strArray78);
        builder66.setparentTypes((java.util.Set<java.lang.String>) strSet79);
        builder51.setparentTypes((java.util.Set<java.lang.String>) strSet79);
        builder47.includeFields = strSet79;
        builder25.parentTypes = strSet79;
        builder16.setincludeFields((java.util.Set<java.lang.String>) strSet79);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(serverAddressList15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertNotNull(serverAddressList20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(serverAddressList22);
        org.junit.Assert.assertNotNull(serverAddressList23);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertNull(mongoClientOptions28);
        org.junit.Assert.assertNotNull(basicDBObject31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(serverAddressList74);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test04093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04093");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        builder0.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.util.Set<java.lang.String> strSet14 = builder12.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder12.setmongoOplogFilter(basicDBObject16);
        com.mongodb.BasicDBObject basicDBObject18 = builder12.getmongoCollectionFilter();
        builder11.mongoCollectionFilter = basicDBObject18;
        org.elasticsearch.river.RiverSettings riverSettings20 = new org.elasticsearch.river.RiverSettings(settings10, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoCollectionFilter(basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        boolean boolean23 = builder21.getadvancedTransformation();
        builder21.typeName = "socket_timeout";
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test04094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04094");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings4 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.util.Set<java.lang.String> strSet7 = builder5.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder5.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject9 = null;
        builder5.setmongoOplogFilter(basicDBObject9);
        com.mongodb.BasicDBObject basicDBObject11 = builder5.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings12 = new org.elasticsearch.river.RiverSettings(settings4, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = riverSettings12.settings();
        org.elasticsearch.script.ExecutableScript executableScript14 = docScoreNativeScriptFactory3.newScript(strMap13);
        org.elasticsearch.river.RiverSettings riverSettings15 = new org.elasticsearch.river.RiverSettings(settings2, strMap13);
        org.elasticsearch.common.settings.Settings settings16 = riverSettings15.globalSettings();
        org.elasticsearch.script.ScriptService scriptService17 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("password", "admin", riverSettings15, scriptService17);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(executableScript14);
        org.junit.Assert.assertNull(settings16);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition18);
    }

    @Test
    public void test04095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04095");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        java.lang.String str4 = mongoDBRiverDefinition2.getGRIDFS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition2.getINCLUDE_FIELDS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getScriptType();
        java.lang.String str8 = mongoDBRiverDefinition2.getIncludeCollection();
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition2.getParentTypes();
        boolean boolean10 = mongoDBRiverDefinition2.getstoreStatistics();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gridfs" + "'", str4, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_fields" + "'", str6, "include_fields");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test04096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04096");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder1);
        java.util.Set<java.lang.String> strSet3 = builder1.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder1.statisticsTypeName("bulk_size");
        builder1.setdropCollection(false);
        builder1.setstatisticsTypeName("type");
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        java.util.Set<java.lang.String> strSet13 = builder11.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject15 = null;
        builder11.setmongoOplogFilter(basicDBObject15);
        com.mongodb.BasicDBObject basicDBObject17 = builder11.getmongoCollectionFilter();
        builder11.setskipInitialImport(false);
        java.lang.String str20 = builder11.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder11.connectTimeout((int) ' ');
        com.mongodb.BasicDBObject basicDBObject23 = builder22.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings24 = new org.elasticsearch.river.RiverSettings(settings10, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject23);
        builder1.mongoCollectionFilter = basicDBObject23;
        org.elasticsearch.river.RiverSettings riverSettings26 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject23);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(basicDBObject23);
    }

    @Test
    public void test04097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04097");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str3 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str4 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        boolean boolean5 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.Class<?> wildcardClass6 = mongoDBRiverDefinition1.getClass();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "collection" + "'", str4, "collection");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test04098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04098");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        builder0.setsocketTimeout((int) (short) 1);
        java.lang.String str10 = builder0.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.importAllCollections(true);
        builder12.mongoCollection = "concurrent_bulk_requests";
        builder12.mongoLocalPassword = "ssl_verify_certificate";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder12.script("include_collection");
        java.lang.String str19 = builder12.script;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "include_collection" + "'", str19, "include_collection");
    }

    @Test
    public void test04099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04099");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = builder0.getmongoCollectionFilter();
        builder0.setskipInitialImport(false);
        java.lang.String str9 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str11 = mongoDBRiverDefinition10.statisticsTypeName;
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition10.getExcludeFields();
        java.lang.String str13 = mongoDBRiverDefinition10.getDB_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition10.getUSER_FIELD();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "db" + "'", str13, "db");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "user" + "'", str14, "user");
    }

    @Test
    public void test04100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04100");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.removePrefix("", "socket_timeout");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?socket_timeout?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test04101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04101");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.typeName;
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder6.mongoCollectionFilter = basicDBObject8;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoAdminPassword("db");
        docScoreSearchScript0.setNextVar("bulk_size", (java.lang.Object) builder6);
        java.lang.Object obj14 = null;
        docScoreSearchScript0.setNextVar("gridfs", obj14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder16);
        java.util.Set<java.lang.String> strSet18 = builder16.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject20 = null;
        builder16.setmongoOplogFilter(basicDBObject20);
        boolean boolean22 = builder16.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray23 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList24 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList24, serverAddressArray23);
        builder16.mongoServers = serverAddressList24;
        java.lang.String str27 = builder16.mongoAdminPassword;
        java.lang.String str28 = builder16.getscriptType();
        java.lang.String str29 = builder16.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder16.connectTimeout((int) (short) 0);
        builder31.typeName = "credentials";
        java.lang.Object obj34 = docScoreSearchScript0.unwrap((java.lang.Object) builder31);
        // The following exception was thrown during execution in test generation
        try {
            double double35 = docScoreSearchScript0.runAsDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(serverAddressArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(obj34);
    }

    @Test
    public void test04102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04102");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoAdminPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.riverName;
        java.lang.String str5 = mongoDBRiverDefinition2.getADVANCED_TRANSFORMATION_FIELD();
        boolean boolean6 = mongoDBRiverDefinition2.getmongoUseSSL();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "advanced_transformation" + "'", str5, "advanced_transformation");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test04103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04103");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = builder0.getmongoCollectionFilter();
        boolean boolean7 = builder0.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet10 = builder0.parentTypes;
        builder0.setmongoLocalUser("concurrent_bulk_requests");
        boolean boolean13 = builder0.getdisableIndexRefresh();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test04104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04104");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.lang.String str9 = builder8.getscript();
        builder8.setmongoCollection("script");
        builder8.setmongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str15 = mongoDBRiverDefinition14.getRiverIndexName();
        java.lang.String str16 = mongoDBRiverDefinition14.getSCRIPT_TYPE_FIELD();
        org.elasticsearch.common.unit.TimeValue timeValue17 = mongoDBRiverDefinition14.getDEFAULT_FLUSH_INTERVAL();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "script_type" + "'", str16, "script_type");
        org.junit.Assert.assertNotNull(timeValue17);
    }

    @Test
    public void test04105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04105");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.statisticsTypeName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoLocalUser("exclude_fields");
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        builder0.mongoClientOptions = mongoClientOptions7;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test04106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04106");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        builder0.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        java.util.Set<java.lang.String> strSet8 = builder7.excludeFields;
        java.lang.String str9 = builder7.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        java.lang.String str11 = mongoDBRiverDefinition10.statisticsTypeName;
        java.lang.String str12 = mongoDBRiverDefinition10.indexName;
        java.lang.String str13 = mongoDBRiverDefinition10.getHOST_FIELD();
        int int14 = mongoDBRiverDefinition10.getSocketTimeout();
        java.util.List<com.mongodb.ServerAddress> serverAddressList15 = mongoDBRiverDefinition10.getMongoServers();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "host" + "'", str13, "host");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(serverAddressList15);
    }

    @Test
    public void test04107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04107");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = builder0.getmongoCollectionFilter();
        builder0.setskipInitialImport(false);
        java.lang.String str9 = builder0.statisticsIndexName;
        java.lang.String str10 = builder0.scriptType;
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = builder0.getmongoServers();
        boolean boolean12 = builder0.getmongoGridFS();
        java.lang.String str13 = builder0.getmongoDb();
        builder0.throttleSize = (byte) 0;
        builder0.connectTimeout = '#';
        java.util.Set<java.lang.String> strSet18 = builder0.getexcludeFields();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(strSet18);
    }

    @Test
    public void test04108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04108");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        boolean boolean7 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        java.util.Set<java.lang.String> strSet12 = builder10.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder10.setmongoOplogFilter(basicDBObject14);
        boolean boolean16 = builder10.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray17 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList18 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList18, serverAddressArray17);
        builder10.mongoServers = serverAddressList18;
        java.lang.String str21 = builder10.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str23 = builder22.typeName;
        com.mongodb.BasicDBObject basicDBObject24 = null;
        builder22.mongoCollectionFilter = basicDBObject24;
        java.lang.String str26 = builder22.mongoAdminUser;
        builder22.disableIndexRefresh = false;
        java.lang.String str29 = builder22.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str31 = builder30.typeName;
        com.mongodb.BasicDBObject basicDBObject32 = null;
        builder30.mongoCollectionFilter = basicDBObject32;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder30.mongoUseSSL(true);
        java.lang.String[] strArray45 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        builder35.setparentTypes((java.util.Set<java.lang.String>) strSet46);
        builder22.parentTypes = strSet46;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder10.parentTypes((java.util.Set<java.lang.String>) strSet46);
        builder9.setparentTypes((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder9.mongoAdminPassword("");
        java.util.Set<java.lang.String> strSet54 = null;
        builder9.excludeFields = strSet54;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder9.mongoSecondaryReadPreference(false);
        int int58 = builder57.connectTimeout;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(serverAddressArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test04109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04109");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        builder0.dropCollection = false;
        boolean boolean14 = builder0.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.indexName("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        java.lang.String str20 = builder17.statisticsTypeName;
        builder17.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        java.util.Set<java.lang.String> strSet25 = builder23.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.getmongoClientOptions();
        builder23.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str33 = builder32.typeName;
        com.mongodb.BasicDBObject basicDBObject34 = null;
        builder32.mongoCollectionFilter = basicDBObject34;
        java.lang.String str36 = builder32.mongoAdminUser;
        java.lang.String str37 = builder32.getriverName();
        builder32.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder32.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder32.typeName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder44);
        int int46 = mongoDBRiverDefinition45.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str47 = mongoDBRiverDefinition45.scriptType;
        boolean boolean48 = mongoDBRiverDefinition45.importAllCollections;
        java.lang.String str49 = mongoDBRiverDefinition45.getCOLLECTION_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList50 = mongoDBRiverDefinition45.mongoServers;
        builder43.setmongoServers(serverAddressList50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder52);
        java.util.Set<java.lang.String> strSet54 = builder52.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions55 = builder52.getmongoClientOptions();
        builder52.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str60 = builder59.typeName;
        com.mongodb.BasicDBObject basicDBObject61 = null;
        builder59.mongoCollectionFilter = basicDBObject61;
        java.lang.String str63 = builder59.mongoAdminUser;
        builder59.disableIndexRefresh = false;
        java.lang.String str66 = builder59.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str68 = builder67.typeName;
        com.mongodb.BasicDBObject basicDBObject69 = null;
        builder67.mongoCollectionFilter = basicDBObject69;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder67.mongoUseSSL(true);
        java.lang.String[] strArray82 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet83 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet83, strArray82);
        builder72.setparentTypes((java.util.Set<java.lang.String>) strSet83);
        builder59.parentTypes = strSet83;
        builder52.excludeFields = strSet83;
        builder43.setincludeFields((java.util.Set<java.lang.String>) strSet83);
        builder23.setexcludeFields((java.util.Set<java.lang.String>) strSet83);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder17.parentTypes((java.util.Set<java.lang.String>) strSet83);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder91 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet83);
        java.lang.String str92 = builder91.mongoCollection;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNull(mongoClientOptions26);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 8 + "'", int46 == 8);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "collection" + "'", str49, "collection");
        org.junit.Assert.assertNotNull(serverAddressList50);
        org.junit.Assert.assertNull(strSet54);
        org.junit.Assert.assertNull(mongoClientOptions55);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNull(str92);
    }

    @Test
    public void test04110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04110");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = builder0.statisticsTypeName;
        builder0.settypeName("script");
        builder0.disableIndexRefresh = false;
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test04111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04111");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.statisticsTypeName("bulk_size");
        builder0.includeCollection = "port";
        builder0.setmongoGridFS(false);
        java.lang.String str9 = builder0.getriverIndexName();
        builder0.setstatisticsTypeName("port");
        java.lang.String str12 = builder0.getmongoAdminPassword();
        builder0.disableIndexRefresh = true;
        boolean boolean15 = builder0.getimportAllCollections();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test04112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04112");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str3 = mongoDBRiverDefinition1.getDEFAULT_DB_HOST();
        java.lang.String str4 = mongoDBRiverDefinition1.getLOCAL_DB_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "localhost" + "'", str3, "localhost");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "local" + "'", str4, "local");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "concurrent_bulk_requests" + "'", str5, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "advanced_transformation" + "'", str6, "advanced_transformation");
    }

    @Test
    public void test04113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04113");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        builder0.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.MongoClientOptions mongoClientOptions9 = mongoDBRiverDefinition8.getMongoClientOptions();
        java.lang.String str10 = mongoDBRiverDefinition8.getFLUSH_INTERVAL_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition8.mongoAdminUser;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNull(mongoClientOptions9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "flush_interval" + "'", str10, "flush_interval");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test04114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04114");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoAdminPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.riverName;
        java.lang.String str5 = mongoDBRiverDefinition2.getADVANCED_TRANSFORMATION_FIELD();
        int int6 = mongoDBRiverDefinition2.getThrottleSize();
        int int7 = mongoDBRiverDefinition2.getDEFAULT_CONCURRENT_REQUESTS();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "advanced_transformation" + "'", str5, "advanced_transformation");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
    }

    @Test
    public void test04115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04115");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        java.lang.String str12 = builder0.getscriptType();
        java.lang.String str13 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.scriptType("throttle_size");
        boolean boolean16 = builder0.getmongoSSLVerifyCertificate();
        builder0.setmongoLocalPassword("secondary_read_preference");
        builder0.connectTimeout = 'a';
        boolean boolean21 = builder0.getstoreStatistics();
        boolean boolean22 = builder0.getdropCollection();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test04116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04116");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.isMongoSecondaryReadPreference();
        java.lang.String str4 = mongoDBRiverDefinition2.getMongoDb();
        java.lang.String str5 = mongoDBRiverDefinition2.getSCRIPT_TYPE_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getMongoDb();
        boolean boolean7 = mongoDBRiverDefinition2.getstoreStatistics();
        java.lang.String str8 = mongoDBRiverDefinition2.typeName;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "script_type" + "'", str5, "script_type");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test04117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04117");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("include_fields", "drop_collection");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?drop_collection?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test04118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04118");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.statisticsTypeName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        java.lang.String str6 = mongoDBRiverDefinition5.getSIZE_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition5.getHOST_FIELD();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "size" + "'", str6, "size");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "host" + "'", str7, "host");
    }

    @Test
    public void test04119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04119");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.skipInitialImport(true);
        builder0.mongoAdminUser = "options";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory18 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings19 = null;
        org.elasticsearch.common.settings.Settings settings20 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder22);
        java.util.Set<java.lang.String> strSet24 = builder22.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject26 = null;
        builder22.setmongoOplogFilter(basicDBObject26);
        com.mongodb.BasicDBObject basicDBObject28 = builder22.getmongoCollectionFilter();
        builder21.mongoCollectionFilter = basicDBObject28;
        org.elasticsearch.river.RiverSettings riverSettings30 = new org.elasticsearch.river.RiverSettings(settings20, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject28);
        org.elasticsearch.river.RiverSettings riverSettings31 = new org.elasticsearch.river.RiverSettings(settings19, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject28);
        org.elasticsearch.script.ExecutableScript executableScript32 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder33);
        java.util.Set<java.lang.String> strSet35 = builder33.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder33.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject37 = null;
        builder33.setmongoOplogFilter(basicDBObject37);
        boolean boolean39 = builder33.dropCollection;
        boolean boolean40 = builder33.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder33.mongoLocalPassword("");
        boolean boolean43 = builder42.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder44);
        java.util.Set<java.lang.String> strSet46 = builder44.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions47 = builder44.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject48 = null;
        builder44.setmongoOplogFilter(basicDBObject48);
        boolean boolean50 = builder44.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray51 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList52 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList52, serverAddressArray51);
        builder44.mongoServers = serverAddressList52;
        java.lang.String str55 = builder44.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str57 = builder56.typeName;
        com.mongodb.BasicDBObject basicDBObject58 = null;
        builder56.mongoCollectionFilter = basicDBObject58;
        java.lang.String str60 = builder56.mongoAdminUser;
        builder56.disableIndexRefresh = false;
        java.lang.String str63 = builder56.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str65 = builder64.typeName;
        com.mongodb.BasicDBObject basicDBObject66 = null;
        builder64.mongoCollectionFilter = basicDBObject66;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder64.mongoUseSSL(true);
        java.lang.String[] strArray79 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet80 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet80, strArray79);
        builder69.setparentTypes((java.util.Set<java.lang.String>) strSet80);
        builder56.parentTypes = strSet80;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder44.parentTypes((java.util.Set<java.lang.String>) strSet80);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder84.mongoGridFS(true);
        com.mongodb.BasicDBObject basicDBObject87 = builder84.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder42.mongoOplogFilter(basicDBObject87);
        org.elasticsearch.script.ExecutableScript executableScript89 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject87);
        builder0.setmongoCollectionFilter(basicDBObject87);
        builder0.setmongoLocalUser("port");
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertNotNull(executableScript32);
        org.junit.Assert.assertNull(strSet35);
        org.junit.Assert.assertNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertNull(mongoClientOptions47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(serverAddressArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(basicDBObject87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(executableScript89);
    }

    @Test
    public void test04120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04120");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.typeName;
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder12.mongoCollectionFilter = basicDBObject14;
        java.lang.String str16 = builder12.mongoAdminUser;
        builder12.disableIndexRefresh = false;
        java.lang.String str19 = builder12.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.typeName;
        com.mongodb.BasicDBObject basicDBObject22 = null;
        builder20.mongoCollectionFilter = basicDBObject22;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder20.mongoUseSSL(true);
        java.lang.String[] strArray35 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        builder25.setparentTypes((java.util.Set<java.lang.String>) strSet36);
        builder12.parentTypes = strSet36;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder0.includeCollection("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder0.indexName("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder0.riverName("");
        com.mongodb.BasicDBObject basicDBObject47 = builder46.getmongoCollectionFilter();
        builder46.mongoDb = "socket_timeout";
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(basicDBObject47);
    }

    @Test
    public void test04121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04121");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getDEFAULT_DB_HOST();
        int int6 = mongoDBRiverDefinition2.socketTimeout;
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition2.getMongoCollectionFilter();
        com.mongodb.BasicDBObject basicDBObject8 = mongoDBRiverDefinition2.getMongoOplogFilter();
        java.lang.String str9 = mongoDBRiverDefinition2.getCONCURRENT_REQUESTS_FIELD();
        boolean boolean10 = mongoDBRiverDefinition2.getskipInitialImport();
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition2.parentTypes;
        boolean boolean12 = mongoDBRiverDefinition2.advancedTransformation;
        java.lang.String str13 = mongoDBRiverDefinition2.getMongoLocalPassword();
        boolean boolean14 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str15 = mongoDBRiverDefinition2.getMongoAdminPassword();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "localhost" + "'", str5, "localhost");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNull(basicDBObject8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "concurrent_requests" + "'", str9, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test04122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04122");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        builder0.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        builder0.mongoClientOptions = mongoClientOptions7;
        builder0.mongoLocalUser = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str12 = builder11.typeName;
        com.mongodb.BasicDBObject basicDBObject13 = null;
        builder11.mongoCollectionFilter = basicDBObject13;
        java.lang.String str15 = builder11.mongoAdminUser;
        builder11.setstoreStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str19 = builder18.typeName;
        com.mongodb.BasicDBObject basicDBObject20 = null;
        builder18.mongoCollectionFilter = basicDBObject20;
        com.mongodb.BasicDBObject basicDBObject22 = null;
        builder18.mongoOplogFilter = basicDBObject22;
        builder18.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList26 = builder18.mongoServers;
        java.lang.String[] strArray30 = new java.lang.String[] { "connect_timeout", "credentials", "connect_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        builder18.setparentTypes((java.util.Set<java.lang.String>) strSet31);
        boolean boolean34 = builder18.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder18.mongoSSLVerifyCertificate(true);
        int int37 = builder18.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder18.mongoAdminPassword("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder40);
        java.util.Set<java.lang.String> strSet42 = builder40.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder40.statisticsTypeName("bulk_size");
        builder40.setdropCollection(false);
        builder40.setstatisticsTypeName("type");
        java.lang.String[] strArray78 = new java.lang.String[] { "include_collection", "script", "name", "actions", "bulk_size", "throttle_size", "name", "parent_types", "connect_timeout", "bulk_size", "initial_timestamp", "hi!", "password", "name", "port", "throttle_size", "filter", "name", "advanced_transformation", "gridfs", "user", "host", "filter", "filter", "include_collection", "concurrent_bulk_requests", "concurrent_requests", "db", "name" };
        java.util.LinkedHashSet<java.lang.String> strSet79 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet79, strArray78);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder40.excludeFields((java.util.Set<java.lang.String>) strSet79);
        builder18.excludeFields = strSet79;
        builder11.excludeFields = strSet79;
        builder0.parentTypes = strSet79;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(serverAddressList26);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(strSet42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test04123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04123");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        builder0.setsocketTimeout((int) (short) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoAdminUser("import_all_collections");
        boolean boolean12 = builder11.getmongoSecondaryReadPreference();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04124");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.typeName;
        com.mongodb.BasicDBObject basicDBObject7 = null;
        builder5.mongoCollectionFilter = basicDBObject7;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoAdminPassword("db");
        org.elasticsearch.common.settings.Settings settings11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.typeName;
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder12.mongoCollectionFilter = basicDBObject14;
        java.lang.String str16 = builder12.mongoAdminUser;
        builder12.disableIndexRefresh = false;
        java.lang.String str19 = builder12.getincludeCollection();
        org.elasticsearch.common.settings.Settings settings20 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        java.util.Set<java.lang.String> strSet23 = builder21.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject25 = null;
        builder21.setmongoOplogFilter(basicDBObject25);
        com.mongodb.BasicDBObject basicDBObject27 = builder21.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings28 = new org.elasticsearch.river.RiverSettings(settings20, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        builder12.setmongoOplogFilter(basicDBObject27);
        org.elasticsearch.river.RiverSettings riverSettings30 = new org.elasticsearch.river.RiverSettings(settings11, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder5.mongoOplogFilter(basicDBObject27);
        builder31.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str35 = builder34.typeName;
        builder34.setsocketTimeout(0);
        boolean boolean38 = builder34.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str41 = builder40.typeName;
        com.mongodb.BasicDBObject basicDBObject42 = null;
        builder40.mongoCollectionFilter = basicDBObject42;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder40.mongoUseSSL(true);
        java.lang.String[] strArray55 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        builder45.setparentTypes((java.util.Set<java.lang.String>) strSet56);
        builder34.setparentTypes((java.util.Set<java.lang.String>) strSet56);
        java.lang.String str60 = builder34.statisticsIndexName;
        builder34.advancedTransformation = false;
        java.lang.String str63 = builder34.mongoDb;
        java.util.List<com.mongodb.ServerAddress> serverAddressList64 = builder34.getmongoServers();
        java.lang.String str65 = builder34.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition66 = builder34.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str68 = builder67.typeName;
        com.mongodb.BasicDBObject basicDBObject69 = null;
        builder67.mongoCollectionFilter = basicDBObject69;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder67.mongoUseSSL(true);
        java.lang.String[] strArray82 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet83 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet83, strArray82);
        builder72.setparentTypes((java.util.Set<java.lang.String>) strSet83);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder34.parentTypes((java.util.Set<java.lang.String>) strSet83);
        builder31.setparentTypes((java.util.Set<java.lang.String>) strSet83);
        builder0.excludeFields = strSet83;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(serverAddressList64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition66);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test04125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04125");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        java.lang.String str4 = mongoDBRiverDefinition2.getGRIDFS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition2.getStatisticsIndexName();
        java.lang.String str7 = mongoDBRiverDefinition2.getTypeName();
        boolean boolean8 = mongoDBRiverDefinition2.isDropCollection();
        java.lang.String str9 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition2.getEXCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gridfs" + "'", str4, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "initial_timestamp" + "'", str9, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "script" + "'", str10, "script");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "exclude_fields" + "'", str11, "exclude_fields");
    }

    @Test
    public void test04126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04126");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = builder0.getmongoCollectionFilter();
        builder0.setskipInitialImport(false);
        builder0.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str12 = builder11.typeName;
        com.mongodb.BasicDBObject basicDBObject13 = null;
        builder11.mongoCollectionFilter = basicDBObject13;
        java.lang.String str15 = builder11.mongoAdminUser;
        builder11.disableIndexRefresh = false;
        java.lang.String str18 = builder11.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str20 = builder19.typeName;
        com.mongodb.BasicDBObject basicDBObject21 = null;
        builder19.mongoCollectionFilter = basicDBObject21;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder19.mongoUseSSL(true);
        java.lang.String[] strArray34 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        builder24.setparentTypes((java.util.Set<java.lang.String>) strSet35);
        builder11.parentTypes = strSet35;
        builder0.includeFields = strSet35;
        builder0.socketTimeout = 27017;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder0.riverIndexName("localhost");
        java.lang.String str44 = builder43.getstatisticsTypeName();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test04127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04127");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoAdminPassword;
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition2.excludeFields;
        java.lang.String str5 = mongoDBRiverDefinition2.getSCRIPT_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getINCLUDE_FIELDS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getINCLUDE_FIELDS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.getIncludeCollection();
        java.lang.String str9 = mongoDBRiverDefinition2.getSSL_CONNECTION_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "script" + "'", str5, "script");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_fields" + "'", str6, "include_fields");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "include_fields" + "'", str7, "include_fields");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ssl" + "'", str9, "ssl");
    }

    @Test
    public void test04128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04128");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        java.lang.String str5 = builder0.getriverName();
        builder0.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.typeName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        int int14 = mongoDBRiverDefinition13.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str15 = mongoDBRiverDefinition13.scriptType;
        boolean boolean16 = mongoDBRiverDefinition13.importAllCollections;
        java.lang.String str17 = mongoDBRiverDefinition13.getCOLLECTION_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList18 = mongoDBRiverDefinition13.mongoServers;
        builder11.setmongoServers(serverAddressList18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        java.util.Set<java.lang.String> strSet22 = builder20.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder20.getmongoClientOptions();
        builder20.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str28 = builder27.typeName;
        com.mongodb.BasicDBObject basicDBObject29 = null;
        builder27.mongoCollectionFilter = basicDBObject29;
        java.lang.String str31 = builder27.mongoAdminUser;
        builder27.disableIndexRefresh = false;
        java.lang.String str34 = builder27.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str36 = builder35.typeName;
        com.mongodb.BasicDBObject basicDBObject37 = null;
        builder35.mongoCollectionFilter = basicDBObject37;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder35.mongoUseSSL(true);
        java.lang.String[] strArray50 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        builder40.setparentTypes((java.util.Set<java.lang.String>) strSet51);
        builder27.parentTypes = strSet51;
        builder20.excludeFields = strSet51;
        builder11.setincludeFields((java.util.Set<java.lang.String>) strSet51);
        builder11.setriverName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder11.riverName("skip_initial_import");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "collection" + "'", str17, "collection");
        org.junit.Assert.assertNotNull(serverAddressList18);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNull(mongoClientOptions23);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test04129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04129");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str3 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str4 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        boolean boolean5 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        int int6 = mongoDBRiverDefinition1.throttleSize;
        boolean boolean7 = mongoDBRiverDefinition1.skipInitialImport;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test04130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04130");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        int int4 = mongoDBRiverDefinition2.getConnectTimeout();
        boolean boolean5 = mongoDBRiverDefinition2.getmongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition2.getACTIONS_FIELD();
        java.util.Set<java.lang.String> strSet7 = mongoDBRiverDefinition2.parentTypes;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "actions" + "'", str6, "actions");
        org.junit.Assert.assertNull(strSet7);
    }

    @Test
    public void test04131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04131");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getPORT_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition2.getScriptType();
        boolean boolean5 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition2.includeFields;
        java.lang.String str7 = mongoDBRiverDefinition2.getHOST_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.getTypeName();
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition2.excludeFields;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "port" + "'", str3, "port");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "host" + "'", str7, "host");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strSet9);
    }

    @Test
    public void test04132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04132");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        java.lang.String str3 = mongoDBRiverDefinition1.mongoAdminPassword;
        java.lang.String str4 = mongoDBRiverDefinition1.mongoAdminPassword;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = mongoDBRiverDefinition1.getInitialTimestamp();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoAdminPassword();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoDb();
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoLocalPassword();
        boolean boolean9 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int10 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1000 + "'", int2 == 1000);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 27017 + "'", int10 == 27017);
    }

    @Test
    public void test04133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04133");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.lang.String str9 = builder8.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.typeName("bulk_size");
        java.util.Set<java.lang.String> strSet12 = builder8.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.bson.types.BSONTimestamp bSONTimestamp14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.initialTimestamp(bSONTimestamp14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet12);
    }

    @Test
    public void test04134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04134");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.util.Set<java.lang.String> strSet9 = builder8.excludeFields;
        builder8.setriverName("hi!");
        builder8.setmongoGridFS(true);
        builder8.setmongoCollection("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder8.mongoAdminPassword("admin");
        java.lang.String str18 = builder17.getscript();
        builder17.setscript("concurrent_requests");
        builder17.setriverIndexName("include_collection");
        org.elasticsearch.common.settings.Settings settings23 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory24 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings25 = null;
        org.elasticsearch.common.settings.Settings settings26 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        java.util.Set<java.lang.String> strSet29 = builder27.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder27.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject31 = null;
        builder27.setmongoOplogFilter(basicDBObject31);
        com.mongodb.BasicDBObject basicDBObject33 = builder27.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings34 = new org.elasticsearch.river.RiverSettings(settings26, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        org.elasticsearch.river.RiverSettings riverSettings35 = new org.elasticsearch.river.RiverSettings(settings25, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        org.elasticsearch.script.ExecutableScript executableScript36 = docScoreNativeScriptFactory24.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        org.elasticsearch.river.RiverSettings riverSettings37 = new org.elasticsearch.river.RiverSettings(settings23, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        builder17.setmongoOplogFilter(basicDBObject33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        java.lang.String str40 = mongoDBRiverDefinition39.getBULK_TIMEOUT_FIELD();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(basicDBObject33);
        org.junit.Assert.assertNotNull(executableScript36);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "bulk_timeout" + "'", str40, "bulk_timeout");
    }

    @Test
    public void test04135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04135");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        int int9 = builder0.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str11 = builder0.getmongoCollection();
        boolean boolean12 = builder0.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = builder0.build();
        java.lang.String str14 = mongoDBRiverDefinition13.getSECONDARY_READ_PREFERENCE_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "secondary_read_preference" + "'", str14, "secondary_read_preference");
    }

    @Test
    public void test04136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04136");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.mongoClientOptions;
        builder0.importAllCollections = false;
        builder0.setmongoSecondaryReadPreference(false);
        java.lang.String str13 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test04137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04137");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        builder5.importAllCollections = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.connectTimeout(1);
        boolean boolean10 = builder9.getadvancedTransformation();
        java.lang.String str11 = builder9.statisticsIndexName;
        boolean boolean12 = builder9.storeStatistics;
        builder9.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04138");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getstatisticsTypeName();
        builder0.setstatisticsTypeName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.disableIndexRefresh(false);
        builder0.throttleSize = 'a';
        builder0.setmongoDb("options");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test04139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04139");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition2.getIncludeFields();
        java.lang.String str4 = mongoDBRiverDefinition2.getRiverName();
        boolean boolean5 = mongoDBRiverDefinition2.disableIndexRefresh;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test04140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04140");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        java.lang.Object obj6 = docScoreSearchScript0.unwrap((java.lang.Object) "bulk");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory8 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        java.util.Set<java.lang.String> strSet12 = builder10.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder10.setmongoOplogFilter(basicDBObject14);
        com.mongodb.BasicDBObject basicDBObject16 = builder10.getmongoCollectionFilter();
        builder9.mongoCollectionFilter = basicDBObject16;
        org.elasticsearch.script.ExecutableScript executableScript18 = docScoreNativeScriptFactory8.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject16);
        org.elasticsearch.common.settings.Settings settings19 = null;
        org.elasticsearch.common.settings.Settings settings20 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory21 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        java.util.Set<java.lang.String> strSet25 = builder23.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject27 = null;
        builder23.setmongoOplogFilter(basicDBObject27);
        com.mongodb.BasicDBObject basicDBObject29 = builder23.getmongoCollectionFilter();
        builder22.mongoCollectionFilter = basicDBObject29;
        org.elasticsearch.script.ExecutableScript executableScript31 = docScoreNativeScriptFactory21.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject29);
        org.elasticsearch.river.RiverSettings riverSettings32 = new org.elasticsearch.river.RiverSettings(settings20, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject29);
        org.elasticsearch.river.RiverSettings riverSettings33 = new org.elasticsearch.river.RiverSettings(settings19, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject29);
        org.elasticsearch.script.ExecutableScript executableScript34 = docScoreNativeScriptFactory8.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject29);
        docScoreSearchScript0.setNextVar("actions", (java.lang.Object) basicDBObject29);
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextDocId(32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + "bulk" + "'", obj6, "bulk");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNotNull(executableScript18);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(basicDBObject29);
        org.junit.Assert.assertNotNull(executableScript31);
        org.junit.Assert.assertNotNull(executableScript34);
    }

    @Test
    public void test04141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04141");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        java.lang.String str4 = mongoDBRiverDefinition2.getGRIDFS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition2.getMongoOplogNamespace();
        boolean boolean7 = mongoDBRiverDefinition2.isMongoGridFS();
        java.lang.String str8 = mongoDBRiverDefinition2.getMongoDb();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gridfs" + "'", str4, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "null.null" + "'", str6, "null.null");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test04142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04142");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.connectTimeout((int) '#');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.riverIndexName("flush_interval");
        builder13.throttleSize = '4';
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test04143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04143");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        builder0.setsocketTimeout((int) (short) 1);
        java.lang.String str10 = builder0.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.connectTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.riverIndexName("admin");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test04144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04144");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.typeName;
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder6.mongoCollectionFilter = basicDBObject8;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoAdminPassword("db");
        docScoreSearchScript0.setNextVar("bulk_size", (java.lang.Object) builder6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        java.util.Set<java.lang.String> strSet16 = builder14.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder14.setmongoOplogFilter(basicDBObject18);
        boolean boolean20 = builder14.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray21 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList22 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList22, serverAddressArray21);
        builder14.mongoServers = serverAddressList22;
        java.lang.String str25 = builder14.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder14.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder14.skipInitialImport(true);
        docScoreSearchScript0.setNextVar("credentials", (java.lang.Object) true);
        docScoreSearchScript0.setNextScore((float) (byte) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder34.setmongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder34.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder38.mongoGridFS(true);
        builder38.setmongoCollection("drop_collection");
        docScoreSearchScript0.setNextVar("host", (java.lang.Object) builder38);
        org.apache.lucene.search.Scorer scorer44 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setScorer(scorer44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serverAddressArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test04145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04145");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        boolean boolean6 = builder0.getmongoGridFS();
        builder0.setmongoLocalPassword("port");
        java.lang.String str9 = builder0.getscript();
        builder0.mongoSecondaryReadPreference = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test04146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04146");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        builder0.setsocketTimeout((int) (short) 1);
        java.lang.String str10 = builder0.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.importAllCollections(true);
        builder0.dropCollection = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.mongoUseSSL(true);
        java.lang.String str17 = builder16.mongoAdminPassword;
        com.mongodb.BasicDBObject basicDBObject18 = builder16.getmongoCollectionFilter();
        builder16.setthrottleSize((int) (short) -1);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(basicDBObject18);
    }

    @Test
    public void test04147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04147");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        java.lang.String str4 = mongoDBRiverDefinition2.getGRIDFS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition2.getINCLUDE_FIELDS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getCONCURRENT_BULK_REQUESTS_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.skipInitialImport;
        boolean boolean9 = mongoDBRiverDefinition2.isDropCollection();
        boolean boolean10 = mongoDBRiverDefinition2.isMongoSSLVerifyCertificate();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition2.getMongoCollectionFilter();
        java.lang.String str12 = mongoDBRiverDefinition2.getBULK_SIZE_FIELD();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gridfs" + "'", str4, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_fields" + "'", str6, "include_fields");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "concurrent_bulk_requests" + "'", str7, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "bulk_size" + "'", str12, "bulk_size");
    }

    @Test
    public void test04148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04148");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getStatisticsIndexName();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition2.getIncludeFields();
        java.util.List<com.mongodb.ServerAddress> serverAddressList7 = mongoDBRiverDefinition2.mongoServers;
        boolean boolean8 = mongoDBRiverDefinition2.isDropCollection();
        java.lang.String str9 = mongoDBRiverDefinition2.getUSER_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition2.getIndexName();
        boolean boolean11 = mongoDBRiverDefinition2.mongoSecondaryReadPreference;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(serverAddressList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "user" + "'", str9, "user");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test04149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04149");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str3 = mongoDBRiverDefinition1.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str5 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        java.lang.String str7 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "null.null" + "'", str5, "null.null");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "null.null" + "'", str6, "null.null");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "password" + "'", str7, "password");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "collection" + "'", str8, "collection");
    }

    @Test
    public void test04150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04150");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        builder0.setsocketTimeout((int) (short) 1);
        java.lang.String str10 = builder0.getstatisticsTypeName();
        java.lang.String str11 = builder0.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.mongoLocalPassword("include_collection.include_collection");
        boolean boolean15 = builder0.getskipInitialImport();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test04151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04151");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        java.lang.String str5 = builder0.getriverName();
        builder0.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.typeName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        int int14 = mongoDBRiverDefinition13.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str15 = mongoDBRiverDefinition13.scriptType;
        boolean boolean16 = mongoDBRiverDefinition13.importAllCollections;
        java.lang.String str17 = mongoDBRiverDefinition13.getCOLLECTION_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList18 = mongoDBRiverDefinition13.mongoServers;
        builder11.setmongoServers(serverAddressList18);
        builder11.statisticsIndexName = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder22);
        java.lang.String str25 = mongoDBRiverDefinition24.getCONNECTION_TIMEOUT();
        java.lang.String str26 = mongoDBRiverDefinition24.getCREDENTIALS_FIELD();
        java.lang.String str27 = mongoDBRiverDefinition24.getStatisticsIndexName();
        java.util.Set<java.lang.String> strSet28 = mongoDBRiverDefinition24.getIncludeFields();
        java.util.List<com.mongodb.ServerAddress> serverAddressList29 = mongoDBRiverDefinition24.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder11.mongoServers(serverAddressList29);
        builder11.mongoSSLVerifyCertificate = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "collection" + "'", str17, "collection");
        org.junit.Assert.assertNotNull(serverAddressList18);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "connect_timeout" + "'", str25, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "credentials" + "'", str26, "credentials");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNotNull(serverAddressList29);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test04152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04152");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = builder0.mongoServers;
        boolean boolean9 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.throttleSize = (short) 10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str14 = mongoDBRiverDefinition13.getGRIDFS_FIELD();
        com.mongodb.BasicDBObject basicDBObject15 = mongoDBRiverDefinition13.getMongoCollectionFilter();
        boolean boolean16 = mongoDBRiverDefinition13.getadvancedTransformation();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(serverAddressList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gridfs" + "'", str14, "gridfs");
        org.junit.Assert.assertNull(basicDBObject15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test04153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04153");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.typeName;
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder12.mongoCollectionFilter = basicDBObject14;
        java.lang.String str16 = builder12.mongoAdminUser;
        builder12.disableIndexRefresh = false;
        java.lang.String str19 = builder12.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.typeName;
        com.mongodb.BasicDBObject basicDBObject22 = null;
        builder20.mongoCollectionFilter = basicDBObject22;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder20.mongoUseSSL(true);
        java.lang.String[] strArray35 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        builder25.setparentTypes((java.util.Set<java.lang.String>) strSet36);
        builder12.parentTypes = strSet36;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.mongoGridFS(true);
        com.mongodb.BasicDBObject basicDBObject43 = builder40.mongoCollectionFilter;
        org.elasticsearch.common.settings.Settings settings44 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder45);
        java.util.Set<java.lang.String> strSet47 = builder45.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder45.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject49 = null;
        builder45.setmongoOplogFilter(basicDBObject49);
        com.mongodb.BasicDBObject basicDBObject51 = builder45.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings52 = new org.elasticsearch.river.RiverSettings(settings44, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject51);
        builder40.setmongoOplogFilter(basicDBObject51);
        builder40.settypeName("include_collection");
        int int56 = builder40.getsocketTimeout();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertNull(strSet47);
        org.junit.Assert.assertNull(mongoClientOptions48);
        org.junit.Assert.assertNotNull(basicDBObject51);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test04154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04154");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = builder0.getmongoCollectionFilter();
        builder0.script = "parent_types";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str10 = mongoDBRiverDefinition9.getMongoLocalPassword();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test04155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04155");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        builder5.mongoClientOptions = mongoClientOptions6;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.connectTimeout((int) (short) 0);
        builder5.connectTimeout = 27017;
        java.lang.String str12 = builder5.scriptType;
        builder5.setstatisticsIndexName("options");
        builder5.skipInitialImport = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test04156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04156");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str3 = builder2.typeName;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder2.mongoCollectionFilter = basicDBObject4;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.mongoUseSSL(true);
        java.lang.String[] strArray17 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        builder7.setparentTypes((java.util.Set<java.lang.String>) strSet18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder7.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str24 = builder23.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str26 = builder25.typeName;
        com.mongodb.BasicDBObject basicDBObject27 = null;
        builder25.mongoCollectionFilter = basicDBObject27;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder25.mongoUseSSL(true);
        java.lang.String[] strArray40 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        builder30.setparentTypes((java.util.Set<java.lang.String>) strSet41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder23.parentTypes((java.util.Set<java.lang.String>) strSet41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder22.parentTypes((java.util.Set<java.lang.String>) strSet41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet41);
        builder46.statisticsTypeName = "bulk_size";
        builder46.setriverIndexName("flush_interval");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test04157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04157");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        boolean boolean7 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoLocalPassword("");
        builder9.mongoCollection = "flush_interval";
        builder9.setmongoAdminUser("bulk_timeout");
        java.util.Set<java.lang.String> strSet14 = builder9.getincludeFields();
        builder9.storeStatistics = true;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet14);
    }

    @Test
    public void test04158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04158");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.mongoAdminUser;
        builder0.setskipInitialImport(true);
        builder0.mongoLocalPassword = "options";
        builder0.setscript("disable_index_refresh");
        builder0.mongoLocalUser = "include_collection";
        builder0.connectTimeout = 1;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test04159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04159");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.statisticsIndexName("port");
        builder0.setmongoUseSSL(false);
        builder0.setthrottleSize((int) (short) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder0.mongoClientOptions;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.skipInitialImport(true);
        builder0.setmongoLocalPassword("gridfs");
        java.lang.String str18 = builder0.getindexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test04160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04160");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        java.lang.String str3 = mongoDBRiverDefinition1.mongoAdminPassword;
        java.lang.String str4 = mongoDBRiverDefinition1.getSTORE_STATISTICS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getTYPE_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1000 + "'", int2 == 1000);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "store_statistics" + "'", str4, "store_statistics");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "type" + "'", str5, "type");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "skip_initial_import" + "'", str7, "skip_initial_import");
    }

    @Test
    public void test04161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04161");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoCollection;
        builder0.setmongoUseSSL(false);
        builder0.setconnectTimeout(0);
        boolean boolean6 = builder0.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminPassword("exclude_fields");
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.mongoClientOptions;
        boolean boolean10 = builder8.getmongoUseSSL();
        builder8.disableIndexRefresh = false;
        builder8.setstatisticsIndexName("concurrent_requests");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test04162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04162");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str3 = mongoDBRiverDefinition1.getDEFAULT_DB_HOST();
        java.lang.String str4 = mongoDBRiverDefinition1.getLOCAL_DB_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getUSER_FIELD();
        boolean boolean6 = mongoDBRiverDefinition1.isStoreStatistics();
        java.lang.String str7 = mongoDBRiverDefinition1.getDROP_COLLECTION_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "localhost" + "'", str3, "localhost");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "local" + "'", str4, "local");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "user" + "'", str5, "user");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "drop_collection" + "'", str7, "drop_collection");
    }

    @Test
    public void test04163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04163");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.statisticsTypeName("bulk_size");
        builder0.includeCollection = "port";
        builder0.setmongoCollection("initial_timestamp");
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        builder0.mongoClientOptions = mongoClientOptions9;
        builder0.riverName = "index";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.advancedTransformation(false);
        builder14.connectTimeout = 'a';
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test04164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04164");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = builder0.getmongoCollectionFilter();
        builder0.setskipInitialImport(false);
        java.lang.String str9 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int11 = mongoDBRiverDefinition10.socketTimeout;
        java.lang.String str12 = mongoDBRiverDefinition10.getDEFAULT_DB_HOST();
        boolean boolean13 = mongoDBRiverDefinition10.isMongoGridFS();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "localhost" + "'", str12, "localhost");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test04165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04165");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str2 = builder1.mongoCollection;
        builder1.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder1.script("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.advancedTransformation(true);
        com.mongodb.BasicDBObject basicDBObject9 = builder8.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings10 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject9);
        org.elasticsearch.common.settings.Settings settings11 = riverSettings10.globalSettings();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(basicDBObject9);
        org.junit.Assert.assertNull(settings11);
    }

    @Test
    public void test04166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04166");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.mongoClientOptions;
        builder0.importAllCollections = false;
        boolean boolean11 = builder0.storeStatistics;
        builder0.statisticsIndexName = "flush_interval";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test04167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04167");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.util.Set<java.lang.String> strSet9 = builder8.excludeFields;
        builder8.setriverName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.mongoAdminUser("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.mongoSSLVerifyCertificate(true);
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = builder8.getmongoServers();
        java.lang.String str17 = builder8.getriverIndexName();
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder8.getmongoClientOptions();
        int int19 = builder8.getconnectTimeout();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test04168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04168");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.util.Set<java.lang.String> strSet9 = builder8.excludeFields;
        builder8.setriverName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.mongoAdminUser("concurrent_bulk_requests");
        com.mongodb.BasicDBObject basicDBObject14 = builder8.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str16 = builder15.typeName;
        com.mongodb.BasicDBObject basicDBObject17 = null;
        builder15.mongoCollectionFilter = basicDBObject17;
        java.lang.String str19 = builder15.mongoAdminUser;
        builder15.disableIndexRefresh = false;
        java.lang.String str22 = builder15.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder15.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder24);
        java.util.Set<java.lang.String> strSet26 = builder24.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject28 = null;
        builder24.setmongoOplogFilter(basicDBObject28);
        boolean boolean30 = builder24.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray31 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList32 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList32, serverAddressArray31);
        builder24.mongoServers = serverAddressList32;
        java.lang.String str35 = builder24.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str37 = builder36.typeName;
        com.mongodb.BasicDBObject basicDBObject38 = null;
        builder36.mongoCollectionFilter = basicDBObject38;
        java.lang.String str40 = builder36.mongoAdminUser;
        builder36.disableIndexRefresh = false;
        java.lang.String str43 = builder36.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str45 = builder44.typeName;
        com.mongodb.BasicDBObject basicDBObject46 = null;
        builder44.mongoCollectionFilter = basicDBObject46;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder44.mongoUseSSL(true);
        java.lang.String[] strArray59 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        builder49.setparentTypes((java.util.Set<java.lang.String>) strSet60);
        builder36.parentTypes = strSet60;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder24.parentTypes((java.util.Set<java.lang.String>) strSet60);
        builder15.setexcludeFields((java.util.Set<java.lang.String>) strSet60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder8.parentTypes((java.util.Set<java.lang.String>) strSet60);
        boolean boolean67 = builder8.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition68 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str69 = mongoDBRiverDefinition68.mongoAdminPassword;
        com.mongodb.MongoClientOptions mongoClientOptions70 = mongoDBRiverDefinition68.getMongoClientOptions();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(basicDBObject14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(mongoClientOptions23);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(serverAddressArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNull(mongoClientOptions70);
    }

    @Test
    public void test04169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04169");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        boolean boolean4 = mongoDBRiverDefinition1.importAllCollections;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        boolean boolean6 = mongoDBRiverDefinition1.getstoreStatistics();
        java.lang.String str7 = mongoDBRiverDefinition1.getIndexName();
        java.lang.String str8 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.storeStatistics;
        java.lang.String str10 = mongoDBRiverDefinition1.getMongoLocalPassword();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "throttle_size" + "'", str8, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test04170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04170");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        builder5.importAllCollections = false;
        java.util.Set<java.lang.String> strSet8 = builder5.parentTypes;
        com.mongodb.BasicDBObject basicDBObject9 = builder5.mongoOplogFilter;
        builder5.riverName = "user";
        boolean boolean12 = builder5.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(basicDBObject9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04171");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        boolean boolean6 = builder0.getmongoGridFS();
        java.lang.String str7 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.riverIndexName("index");
        builder0.setincludeCollection("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.skipInitialImport(false);
        builder13.socketTimeout = '#';
        com.mongodb.BasicDBObject basicDBObject16 = builder13.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(basicDBObject16);
    }

    @Test
    public void test04172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04172");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = builder0.mongoServers;
        java.lang.String[] strArray12 = new java.lang.String[] { "connect_timeout", "credentials", "connect_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder0.setparentTypes((java.util.Set<java.lang.String>) strSet13);
        boolean boolean16 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str20 = mongoDBRiverDefinition19.getDEFAULT_DB_HOST();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(serverAddressList8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "localhost" + "'", str20, "localhost");
    }

    @Test
    public void test04173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04173");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        java.lang.String str12 = builder0.getscriptType();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.connectTimeout(27017);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str16 = builder15.typeName;
        com.mongodb.BasicDBObject basicDBObject17 = null;
        builder15.mongoCollectionFilter = basicDBObject17;
        java.lang.String str19 = builder15.mongoAdminUser;
        java.lang.String str20 = builder15.getriverName();
        builder15.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str24 = builder23.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str27 = builder26.typeName;
        com.mongodb.BasicDBObject basicDBObject28 = null;
        builder26.mongoCollectionFilter = basicDBObject28;
        com.mongodb.BasicDBObject basicDBObject30 = null;
        builder26.mongoOplogFilter = basicDBObject30;
        builder26.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList34 = builder26.mongoServers;
        java.lang.String[] strArray38 = new java.lang.String[] { "connect_timeout", "credentials", "connect_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        builder26.setparentTypes((java.util.Set<java.lang.String>) strSet39);
        builder23.parentTypes = strSet39;
        builder15.excludeFields = strSet39;
        builder14.includeFields = strSet39;
        java.util.Set<java.lang.String> strSet45 = builder14.excludeFields;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(serverAddressList34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(strSet45);
    }

    @Test
    public void test04174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04174");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        java.lang.String str4 = mongoDBRiverDefinition2.getGRIDFS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition2.mongoLocalUser;
        java.lang.String str7 = mongoDBRiverDefinition2.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.statisticsTypeName;
        java.lang.String str9 = mongoDBRiverDefinition2.getFILTER_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList10 = mongoDBRiverDefinition2.getMongoServers();
        boolean boolean11 = mongoDBRiverDefinition2.isMongoSSLVerifyCertificate();
        com.mongodb.MongoClientOptions mongoClientOptions12 = mongoDBRiverDefinition2.mongoClientOptions;
        java.lang.String str13 = mongoDBRiverDefinition2.getRiverIndexName();
        java.lang.String str14 = mongoDBRiverDefinition2.getStatisticsIndexName();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gridfs" + "'", str4, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "import_all_collections" + "'", str7, "import_all_collections");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "filter" + "'", str9, "filter");
        org.junit.Assert.assertNotNull(serverAddressList10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(mongoClientOptions12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test04175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04175");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        int int9 = builder0.connectTimeout;
        boolean boolean10 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.riverName("host");
        java.lang.String str15 = builder14.getriverIndexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test04176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04176");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getStatisticsIndexName();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition2.getIncludeFields();
        java.util.List<com.mongodb.ServerAddress> serverAddressList7 = mongoDBRiverDefinition2.mongoServers;
        boolean boolean8 = mongoDBRiverDefinition2.isDropCollection();
        boolean boolean9 = mongoDBRiverDefinition2.getmongoSecondaryReadPreference();
        boolean boolean10 = mongoDBRiverDefinition2.getstoreStatistics();
        java.lang.String str11 = mongoDBRiverDefinition2.getSCRIPT_TYPE_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        boolean boolean13 = mongoDBRiverDefinition2.dropCollection;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(serverAddressList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "script_type" + "'", str11, "script_type");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "connect_timeout" + "'", str12, "connect_timeout");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test04177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04177");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int3 = mongoDBRiverDefinition2.getConnectTimeout();
        boolean boolean4 = mongoDBRiverDefinition2.disableIndexRefresh;
        java.lang.String str5 = mongoDBRiverDefinition2.statisticsTypeName;
        java.lang.String str6 = mongoDBRiverDefinition2.getMongoDb();
        java.lang.String str7 = mongoDBRiverDefinition2.getStatisticsTypeName();
        java.lang.String str8 = mongoDBRiverDefinition2.getTHROTTLE_SIZE_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "throttle_size" + "'", str8, "throttle_size");
    }

    @Test
    public void test04178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04178");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.statisticsTypeName("bulk_size");
        builder0.includeCollection = "port";
        builder0.riverName = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.util.Set<java.lang.String> strSet11 = builder9.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.statisticsTypeName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.util.List<com.mongodb.ServerAddress> serverAddressList15 = mongoDBRiverDefinition14.getMongoServers();
        builder0.setmongoServers(serverAddressList15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.mongoLocalUser("null.null");
        java.lang.String str19 = builder18.statisticsIndexName;
        java.lang.String str20 = builder18.includeCollection;
        boolean boolean21 = builder18.getdropCollection();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(serverAddressList15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "port" + "'", str20, "port");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test04179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04179");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        builder0.setsocketTimeout((int) (short) 1);
        java.lang.String str10 = builder0.getstatisticsTypeName();
        java.lang.String str11 = builder0.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory15 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings16 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        java.util.Set<java.lang.String> strSet19 = builder17.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder17.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject21 = null;
        builder17.setmongoOplogFilter(basicDBObject21);
        boolean boolean23 = builder17.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder17.socketTimeout((int) ' ');
        java.lang.String str26 = builder25.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.mongoCollection("drop_collection");
        com.mongodb.BasicDBObject basicDBObject29 = builder25.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings30 = new org.elasticsearch.river.RiverSettings(settings16, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject29);
        org.elasticsearch.script.ExecutableScript executableScript31 = docScoreNativeScriptFactory15.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject29);
        builder13.mongoCollectionFilter = basicDBObject29;
        java.util.List<com.mongodb.ServerAddress> serverAddressList33 = builder13.getmongoServers();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(basicDBObject29);
        org.junit.Assert.assertNotNull(executableScript31);
        org.junit.Assert.assertNotNull(serverAddressList33);
    }

    @Test
    public void test04180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04180");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoCollection;
        builder0.setmongoUseSSL(false);
        builder0.setconnectTimeout(0);
        boolean boolean6 = builder0.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition8.getParentTypes();
        boolean boolean10 = mongoDBRiverDefinition8.isSkipInitialImport();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test04181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04181");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.skipInitialImport(true);
        builder0.connectTimeout = 32;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.riverIndexName("ssl_verify_certificate");
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test04182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04182");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoAdminPassword;
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition2.excludeFields;
        java.lang.String str5 = mongoDBRiverDefinition2.getSCRIPT_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getINCLUDE_FIELDS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getINCLUDE_FIELDS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.getIncludeCollection();
        boolean boolean9 = mongoDBRiverDefinition2.mongoUseSSL;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "script" + "'", str5, "script");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_fields" + "'", str6, "include_fields");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "include_fields" + "'", str7, "include_fields");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test04183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04183");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        int int8 = builder0.socketTimeout;
        java.lang.String str9 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoAdminPassword("local");
        java.lang.String str12 = builder11.getmongoLocalPassword();
        java.util.Set<java.lang.String> strSet13 = builder11.includeFields;
        builder11.connectTimeout = (short) 100;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder11.mongoAdminPassword("script_type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        java.lang.String str19 = mongoDBRiverDefinition18.getMongoLocalUser();
        java.lang.String str20 = mongoDBRiverDefinition18.getFLUSH_INTERVAL_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "flush_interval" + "'", str20, "flush_interval");
    }

    @Test
    public void test04184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04184");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.statisticsTypeName("bulk_size");
        boolean boolean5 = builder0.getdisableIndexRefresh();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test04185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04185");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getStatisticsIndexName();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition2.getIncludeFields();
        java.lang.String str7 = mongoDBRiverDefinition2.getRiverName();
        boolean boolean8 = mongoDBRiverDefinition2.isMongoUseSSL();
        java.lang.String str9 = mongoDBRiverDefinition2.getBULK_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition2.getSSL_VERIFY_CERT_FIELD();
        boolean boolean11 = mongoDBRiverDefinition2.mongoGridFS;
        java.lang.String str12 = mongoDBRiverDefinition2.getFLUSH_INTERVAL_FIELD();
        boolean boolean13 = mongoDBRiverDefinition2.getmongoSSLVerifyCertificate();
        java.lang.String str14 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "bulk" + "'", str9, "bulk");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ssl_verify_certificate" + "'", str10, "ssl_verify_certificate");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "flush_interval" + "'", str12, "flush_interval");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script" + "'", str14, "script");
    }

    @Test
    public void test04186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04186");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str5 = mongoDBRiverDefinition4.getNAME_FIELD();
        boolean boolean6 = mongoDBRiverDefinition4.mongoGridFS;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "name" + "'", str5, "name");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test04187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04187");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str11 = mongoDBRiverDefinition10.getCONNECTION_TIMEOUT();
        java.lang.String str12 = mongoDBRiverDefinition10.getCREDENTIALS_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition10.getDEFAULT_DB_HOST();
        com.mongodb.BasicDBObject basicDBObject14 = mongoDBRiverDefinition10.getMongoCollectionFilter();
        builder0.mongoCollectionFilter = basicDBObject14;
        int int16 = builder0.throttleSize;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "connect_timeout" + "'", str11, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "credentials" + "'", str12, "credentials");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "localhost" + "'", str13, "localhost");
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test04188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04188");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        builder0.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str8 = builder0.includeCollection;
        builder0.mongoLocalUser = "name";
        int int11 = builder0.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.statisticsIndexName("options");
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test04189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04189");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.statisticsTypeName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str6 = mongoDBRiverDefinition5.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        int int7 = mongoDBRiverDefinition5.getDEFAULT_DB_PORT();
        com.mongodb.MongoClientOptions mongoClientOptions8 = mongoDBRiverDefinition5.getMongoClientOptions();
        java.lang.String str9 = mongoDBRiverDefinition5.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject10 = mongoDBRiverDefinition5.mongoOplogFilter;
        java.lang.String str11 = mongoDBRiverDefinition5.getStatisticsIndexName();
        java.lang.String str12 = mongoDBRiverDefinition5.getStatisticsIndexName();
        java.lang.String str13 = mongoDBRiverDefinition5.mongoCollection;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script_type" + "'", str6, "script_type");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test04190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04190");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getOPTIONS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.isMongoGridFS();
        com.mongodb.MongoClientOptions mongoClientOptions6 = mongoDBRiverDefinition2.getMongoClientOptions();
        int int7 = mongoDBRiverDefinition2.getThrottleSize();
        java.lang.String str8 = mongoDBRiverDefinition2.getUSER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition2.getFLUSH_INTERVAL_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition2.getBULK_SIZE_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "options" + "'", str4, "options");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(mongoClientOptions6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "flush_interval" + "'", str9, "flush_interval");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "bulk_size" + "'", str10, "bulk_size");
    }

    @Test
    public void test04191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04191");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.getincludeCollection();
        int int8 = builder0.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.connectTimeout(1000);
        java.lang.String str11 = builder0.getmongoAdminPassword();
        builder0.setincludeCollection("gridfs");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test04192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04192");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoAdminPassword;
        org.elasticsearch.common.unit.TimeValue timeValue4 = mongoDBRiverDefinition2.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str5 = mongoDBRiverDefinition2.getRiverIndexName();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition2.getExcludeFields();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(timeValue4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strSet6);
    }

    @Test
    public void test04193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04193");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.mongoAdminUser;
        builder0.setskipInitialImport(true);
        java.lang.String[] strArray16 = new java.lang.String[] { "local", "localhost", "collection", "store_statistics", "index", "local", "concurrent_bulk_requests", "socket_timeout", "localhost", "bulk_size" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        builder0.parentTypes = strSet17;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.includeCollection("initial_timestamp");
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test04194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04194");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        builder5.mongoClientOptions = mongoClientOptions6;
        builder5.setmongoCollection("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoDb("store_statistics");
        int int14 = builder11.socketTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test04195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04195");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.statisticsIndexName("port");
        boolean boolean9 = builder0.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.includeCollection("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.util.Set<java.lang.String> strSet14 = builder12.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder12.setmongoOplogFilter(basicDBObject16);
        boolean boolean18 = builder12.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder12.socketTimeout((int) ' ');
        java.util.Set<java.lang.String> strSet21 = builder20.excludeFields;
        builder20.setriverName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder20.mongoAdminUser("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder20.mongoSSLVerifyCertificate(true);
        java.util.List<com.mongodb.ServerAddress> serverAddressList28 = builder20.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder0.mongoServers(serverAddressList28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str31 = builder0.getriverIndexName();
        builder0.statisticsTypeName = "null.null";
        boolean boolean34 = builder0.mongoSSLVerifyCertificate;
        java.util.Set<java.lang.String> strSet35 = builder0.includeFields;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(serverAddressList28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(strSet35);
    }

    @Test
    public void test04196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04196");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        builder0.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str11 = mongoDBRiverDefinition10.riverIndexName;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test04197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04197");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        boolean boolean9 = builder0.getmongoGridFS();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoDb("script");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test04198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04198");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.statisticsTypeName("bulk_size");
        builder0.includeCollection = "port";
        builder0.setmongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str10 = mongoDBRiverDefinition9.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition9.getBULK_SIZE_FIELD();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "advanced_transformation" + "'", str10, "advanced_transformation");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "bulk_size" + "'", str11, "bulk_size");
    }

    @Test
    public void test04199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04199");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        int int4 = mongoDBRiverDefinition2.getConnectTimeout();
        java.lang.String str5 = mongoDBRiverDefinition2.riverIndexName;
        java.lang.String str6 = mongoDBRiverDefinition2.getPARENT_TYPES_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getDROP_COLLECTION_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.isAdvancedTransformation();
        java.lang.String str9 = mongoDBRiverDefinition2.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition2.statisticsTypeName;
        java.lang.String str11 = mongoDBRiverDefinition2.getFILTER_FIELD();
        boolean boolean12 = mongoDBRiverDefinition2.isMongoUseSSL();
        com.mongodb.MongoClientOptions mongoClientOptions13 = mongoDBRiverDefinition2.mongoClientOptions;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "parent_types" + "'", str6, "parent_types");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "drop_collection" + "'", str7, "drop_collection");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "concurrent_requests" + "'", str9, "concurrent_requests");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "filter" + "'", str11, "filter");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(mongoClientOptions13);
    }

    @Test
    public void test04200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04200");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        boolean boolean6 = builder5.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        builder5.setmongoCollection("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.mongoCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.advancedTransformation(false);
        java.lang.String str16 = builder13.getindexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test04201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04201");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        builder5.disableIndexRefresh = true;
        builder5.setconnectTimeout(1000);
        builder5.setriverIndexName("skip_initial_import");
        builder5.includeCollection = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        java.util.Set<java.lang.String> strSet16 = builder14.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder14.setmongoOplogFilter(basicDBObject18);
        boolean boolean20 = builder14.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder14.socketTimeout((int) ' ');
        java.lang.String str23 = builder22.mongoCollection;
        int int24 = builder22.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str26 = builder25.typeName;
        com.mongodb.BasicDBObject basicDBObject27 = null;
        builder25.mongoCollectionFilter = basicDBObject27;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder25.mongoUseSSL(true);
        builder25.connectTimeout = (byte) -1;
        builder25.setsocketTimeout((int) (short) 1);
        java.lang.String str35 = builder25.getstatisticsTypeName();
        builder25.setincludeCollection("script");
        builder25.setmongoDb("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str41 = builder40.typeName;
        com.mongodb.BasicDBObject basicDBObject42 = null;
        builder40.mongoCollectionFilter = basicDBObject42;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder40.mongoAdminPassword("db");
        builder45.importAllCollections = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        int int50 = mongoDBRiverDefinition49.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList51 = mongoDBRiverDefinition49.mongoServers;
        boolean boolean52 = mongoDBRiverDefinition49.importAllCollections;
        java.lang.String str53 = mongoDBRiverDefinition49.getScriptType();
        java.lang.String str54 = mongoDBRiverDefinition49.getSCRIPT_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList55 = mongoDBRiverDefinition49.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder45.mongoServers(serverAddressList55);
        builder25.mongoServers = serverAddressList55;
        builder22.setmongoServers(serverAddressList55);
        builder5.setmongoServers(serverAddressList55);
        boolean boolean60 = builder5.mongoUseSSL;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8 + "'", int50 == 8);
        org.junit.Assert.assertNotNull(serverAddressList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "script" + "'", str54, "script");
        org.junit.Assert.assertNotNull(serverAddressList55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test04202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04202");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = builder0.mongoServers;
        boolean boolean9 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean11 = mongoDBRiverDefinition10.storeStatistics;
        boolean boolean12 = mongoDBRiverDefinition10.dropCollection;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = mongoDBRiverDefinition10.getInitialTimestamp();
        java.lang.String str14 = mongoDBRiverDefinition10.getStatisticsIndexName();
        boolean boolean15 = mongoDBRiverDefinition10.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(serverAddressList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test04203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04203");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        java.lang.String str5 = builder0.getriverName();
        builder0.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        int int12 = mongoDBRiverDefinition11.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition11.mongoServers;
        boolean boolean14 = mongoDBRiverDefinition11.importAllCollections;
        java.util.List<com.mongodb.ServerAddress> serverAddressList15 = mongoDBRiverDefinition11.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder9.mongoServers(serverAddressList15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        int int19 = mongoDBRiverDefinition18.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList20 = mongoDBRiverDefinition18.mongoServers;
        boolean boolean21 = mongoDBRiverDefinition18.importAllCollections;
        java.util.List<com.mongodb.ServerAddress> serverAddressList22 = mongoDBRiverDefinition18.mongoServers;
        java.util.List<com.mongodb.ServerAddress> serverAddressList23 = mongoDBRiverDefinition18.getMongoServers();
        builder16.mongoServers = serverAddressList23;
        org.elasticsearch.common.settings.Settings settings25 = null;
        org.elasticsearch.common.settings.Settings settings26 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory27 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings28 = null;
        org.elasticsearch.common.settings.Settings settings29 = null;
        org.elasticsearch.common.settings.Settings settings30 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder31);
        java.util.Set<java.lang.String> strSet33 = builder31.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder31.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject35 = null;
        builder31.setmongoOplogFilter(basicDBObject35);
        com.mongodb.BasicDBObject basicDBObject37 = builder31.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings38 = new org.elasticsearch.river.RiverSettings(settings30, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject37);
        org.elasticsearch.river.RiverSettings riverSettings39 = new org.elasticsearch.river.RiverSettings(settings29, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject37);
        org.elasticsearch.river.RiverSettings riverSettings40 = new org.elasticsearch.river.RiverSettings(settings28, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject37);
        org.elasticsearch.script.ExecutableScript executableScript41 = docScoreNativeScriptFactory27.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject37);
        org.elasticsearch.river.RiverSettings riverSettings42 = new org.elasticsearch.river.RiverSettings(settings26, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject37);
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings25, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder16.mongoCollectionFilter(basicDBObject37);
        builder44.setconnectTimeout((int) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder44.socketTimeout(0);
        builder44.setconnectTimeout((int) 'a');
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(serverAddressList15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertNotNull(serverAddressList20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(serverAddressList22);
        org.junit.Assert.assertNotNull(serverAddressList23);
        org.junit.Assert.assertNull(strSet33);
        org.junit.Assert.assertNull(mongoClientOptions34);
        org.junit.Assert.assertNotNull(basicDBObject37);
        org.junit.Assert.assertNotNull(executableScript41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test04204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04204");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = builder0.getmongoCollectionFilter();
        builder0.setskipInitialImport(false);
        java.lang.String str9 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str11 = mongoDBRiverDefinition10.getSKIP_INITIAL_IMPORT_FIELD();
        boolean boolean12 = mongoDBRiverDefinition10.mongoSSLVerifyCertificate;
        int int13 = mongoDBRiverDefinition10.connectTimeout;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "skip_initial_import" + "'", str11, "skip_initial_import");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test04205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04205");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.typeName;
        com.mongodb.BasicDBObject basicDBObject12 = null;
        builder10.mongoCollectionFilter = basicDBObject12;
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder10.mongoOplogFilter = basicDBObject14;
        builder10.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList18 = builder10.mongoServers;
        java.lang.String[] strArray22 = new java.lang.String[] { "connect_timeout", "credentials", "connect_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        builder10.setparentTypes((java.util.Set<java.lang.String>) strSet23);
        builder7.parentTypes = strSet23;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder4.excludeFields((java.util.Set<java.lang.String>) strSet23);
        java.lang.String str28 = builder27.getscript();
        org.elasticsearch.common.settings.Settings settings29 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder30);
        java.lang.String str33 = mongoDBRiverDefinition32.getCONNECTION_TIMEOUT();
        java.lang.String str34 = mongoDBRiverDefinition32.getCREDENTIALS_FIELD();
        java.lang.String str35 = mongoDBRiverDefinition32.getCONCURRENT_BULK_REQUESTS_FIELD();
        com.mongodb.BasicDBObject basicDBObject36 = mongoDBRiverDefinition32.getMongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings37 = new org.elasticsearch.river.RiverSettings(settings29, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder27.mongoCollectionFilter(basicDBObject36);
        boolean boolean39 = builder38.dropCollection;
        builder38.skipInitialImport = false;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(serverAddressList18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "connect_timeout" + "'", str33, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "credentials" + "'", str34, "credentials");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "concurrent_bulk_requests" + "'", str35, "concurrent_bulk_requests");
        org.junit.Assert.assertNotNull(basicDBObject36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test04206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04206");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.util.Set<java.lang.String> strSet9 = builder8.excludeFields;
        builder8.setmongoAdminUser("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.advancedTransformation(false);
        boolean boolean14 = builder13.getmongoUseSSL();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test04207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04207");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.common.settings.Settings settings1 = null;
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.common.settings.Settings settings3 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str5 = builder4.typeName;
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder4.mongoCollectionFilter = basicDBObject6;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder4.mongoUseSSL(true);
        builder4.connectTimeout = (byte) -1;
        int int12 = builder4.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder4.statisticsIndexName("initial_timestamp");
        java.lang.String str15 = builder14.mongoLocalUser;
        org.elasticsearch.common.settings.Settings settings16 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        java.util.Set<java.lang.String> strSet19 = builder17.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder17.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject21 = null;
        builder17.setmongoOplogFilter(basicDBObject21);
        com.mongodb.BasicDBObject basicDBObject23 = builder17.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings24 = new org.elasticsearch.river.RiverSettings(settings16, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder14.mongoCollectionFilter(basicDBObject23);
        org.elasticsearch.river.RiverSettings riverSettings26 = new org.elasticsearch.river.RiverSettings(settings3, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject23);
        org.elasticsearch.river.RiverSettings riverSettings27 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject23);
        java.util.Map<java.lang.String, java.lang.Object> strMap28 = riverSettings27.settings();
        org.elasticsearch.river.RiverSettings riverSettings29 = new org.elasticsearch.river.RiverSettings(settings1, strMap28);
        java.util.Map<java.lang.String, java.lang.Object> strMap30 = riverSettings29.settings();
        org.elasticsearch.river.RiverSettings riverSettings31 = new org.elasticsearch.river.RiverSettings(settings0, strMap30);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNull(mongoClientOptions20);
        org.junit.Assert.assertNotNull(basicDBObject23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap30);
    }

    @Test
    public void test04208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04208");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        builder5.importAllCollections = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        int int10 = mongoDBRiverDefinition9.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = mongoDBRiverDefinition9.mongoServers;
        boolean boolean12 = mongoDBRiverDefinition9.importAllCollections;
        java.lang.String str13 = mongoDBRiverDefinition9.getScriptType();
        java.lang.String str14 = mongoDBRiverDefinition9.getSCRIPT_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList15 = mongoDBRiverDefinition9.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder5.mongoServers(serverAddressList15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoGridFS(true);
        java.lang.String str19 = builder16.statisticsTypeName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script" + "'", str14, "script");
        org.junit.Assert.assertNotNull(serverAddressList15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test04209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04209");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        int int9 = builder0.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str11 = mongoDBRiverDefinition10.getPASSWORD_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition10.indexName;
        boolean boolean13 = mongoDBRiverDefinition10.getimportAllCollections();
        java.lang.String str14 = mongoDBRiverDefinition10.getADMIN_DB_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "password" + "'", str11, "password");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "admin" + "'", str14, "admin");
    }

    @Test
    public void test04210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04210");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        java.lang.String str5 = builder0.getriverName();
        builder0.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.typeName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        int int14 = mongoDBRiverDefinition13.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str15 = mongoDBRiverDefinition13.scriptType;
        boolean boolean16 = mongoDBRiverDefinition13.importAllCollections;
        java.lang.String str17 = mongoDBRiverDefinition13.getCOLLECTION_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList18 = mongoDBRiverDefinition13.mongoServers;
        builder11.setmongoServers(serverAddressList18);
        boolean boolean20 = builder11.getimportAllCollections();
        builder11.setmongoGridFS(false);
        java.util.Set<java.lang.String> strSet23 = builder11.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder11.mongoLocalUser("drop_collection");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "collection" + "'", str17, "collection");
        org.junit.Assert.assertNotNull(serverAddressList18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test04211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04211");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        java.lang.String str12 = builder0.getscriptType();
        java.lang.String str13 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.scriptType("throttle_size");
        boolean boolean16 = builder0.getmongoSSLVerifyCertificate();
        builder0.setmongoDb("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder0.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.typeName;
        com.mongodb.BasicDBObject basicDBObject23 = null;
        builder21.mongoCollectionFilter = basicDBObject23;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder21.mongoUseSSL(true);
        builder21.connectTimeout = (byte) -1;
        int int29 = builder21.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder21.statisticsIndexName("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.statisticsTypeName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str35 = builder34.typeName;
        com.mongodb.BasicDBObject basicDBObject36 = null;
        builder34.mongoCollectionFilter = basicDBObject36;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder34.mongoAdminPassword("db");
        boolean boolean40 = builder34.getmongoGridFS();
        java.lang.String str41 = builder34.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder34.riverIndexName("index");
        org.elasticsearch.common.settings.Settings settings44 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder45);
        java.util.Set<java.lang.String> strSet47 = builder45.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder45.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject49 = null;
        builder45.setmongoOplogFilter(basicDBObject49);
        com.mongodb.BasicDBObject basicDBObject51 = builder45.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings52 = new org.elasticsearch.river.RiverSettings(settings44, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject51);
        builder43.setmongoOplogFilter(basicDBObject51);
        builder31.setmongoOplogFilter(basicDBObject51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder0.mongoOplogFilter(basicDBObject51);
        builder0.mongoDb = "user";
        java.lang.String str58 = builder0.statisticsIndexName;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(strSet47);
        org.junit.Assert.assertNull(mongoClientOptions48);
        org.junit.Assert.assertNotNull(basicDBObject51);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(str58);
    }

    @Test
    public void test04212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04212");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        boolean boolean6 = builder0.getmongoGridFS();
        java.lang.String str7 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.riverIndexName("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean11 = mongoDBRiverDefinition10.getmongoUseSSL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList12 = mongoDBRiverDefinition10.mongoServers;
        boolean boolean13 = mongoDBRiverDefinition10.getadvancedTransformation();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(serverAddressList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test04213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04213");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.script("hi!");
        builder0.statisticsIndexName = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str21 = mongoDBRiverDefinition20.riverName;
        com.mongodb.BasicDBObject basicDBObject22 = mongoDBRiverDefinition20.mongoCollectionFilter;
        org.elasticsearch.common.unit.TimeValue timeValue23 = mongoDBRiverDefinition20.getDEFAULT_FLUSH_INTERVAL();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(basicDBObject22);
        org.junit.Assert.assertNotNull(timeValue23);
    }

    @Test
    public void test04214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04214");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        int int8 = builder0.socketTimeout;
        java.lang.String str9 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoAdminPassword("local");
        java.lang.String str12 = builder11.getmongoLocalPassword();
        java.util.Set<java.lang.String> strSet13 = builder11.includeFields;
        com.mongodb.BasicDBObject basicDBObject14 = builder11.getmongoCollectionFilter();
        builder11.throttleSize = 1000;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNull(basicDBObject14);
    }

    @Test
    public void test04215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04215");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        builder5.setparentTypes((java.util.Set<java.lang.String>) strSet16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder5.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str24 = builder23.typeName;
        com.mongodb.BasicDBObject basicDBObject25 = null;
        builder23.mongoCollectionFilter = basicDBObject25;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder23.mongoUseSSL(true);
        java.lang.String[] strArray38 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        builder28.setparentTypes((java.util.Set<java.lang.String>) strSet39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder21.parentTypes((java.util.Set<java.lang.String>) strSet39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder20.parentTypes((java.util.Set<java.lang.String>) strSet39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder20.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder20.includeCollection("drop_collection");
        org.elasticsearch.common.settings.Settings settings48 = null;
        org.elasticsearch.common.settings.Settings settings49 = null;
        org.elasticsearch.common.settings.Settings settings50 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder51);
        java.util.Set<java.lang.String> strSet53 = builder51.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions54 = builder51.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject55 = null;
        builder51.setmongoOplogFilter(basicDBObject55);
        boolean boolean57 = builder51.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder51.socketTimeout((int) ' ');
        java.util.Set<java.lang.String> strSet60 = builder59.excludeFields;
        builder59.setriverName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder59.mongoAdminUser("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder59.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str68 = builder67.typeName;
        com.mongodb.BasicDBObject basicDBObject69 = null;
        builder67.mongoCollectionFilter = basicDBObject69;
        java.lang.String str71 = builder67.mongoAdminUser;
        builder67.disableIndexRefresh = false;
        java.lang.String str74 = builder67.getincludeCollection();
        org.elasticsearch.common.settings.Settings settings75 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition77 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder76);
        java.util.Set<java.lang.String> strSet78 = builder76.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions79 = builder76.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject80 = null;
        builder76.setmongoOplogFilter(basicDBObject80);
        com.mongodb.BasicDBObject basicDBObject82 = builder76.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings83 = new org.elasticsearch.river.RiverSettings(settings75, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject82);
        builder67.setmongoOplogFilter(basicDBObject82);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder59.mongoCollectionFilter(basicDBObject82);
        org.elasticsearch.river.RiverSettings riverSettings86 = new org.elasticsearch.river.RiverSettings(settings50, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject82);
        org.elasticsearch.river.RiverSettings riverSettings87 = new org.elasticsearch.river.RiverSettings(settings49, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject82);
        org.elasticsearch.river.RiverSettings riverSettings88 = new org.elasticsearch.river.RiverSettings(settings48, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject82);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder89 = builder47.mongoOplogFilter(basicDBObject82);
        boolean boolean90 = builder89.getskipInitialImport();
        java.lang.String str91 = builder89.mongoLocalPassword;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(strSet53);
        org.junit.Assert.assertNull(mongoClientOptions54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(strSet60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNull(strSet78);
        org.junit.Assert.assertNull(mongoClientOptions79);
        org.junit.Assert.assertNotNull(basicDBObject82);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
    }

    @Test
    public void test04216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04216");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.common.settings.Settings settings3 = null;
        org.elasticsearch.common.settings.Settings settings4 = null;
        org.elasticsearch.common.settings.Settings settings5 = null;
        org.elasticsearch.common.settings.Settings settings6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        java.util.Set<java.lang.String> strSet9 = builder7.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject11 = null;
        builder7.setmongoOplogFilter(basicDBObject11);
        com.mongodb.BasicDBObject basicDBObject13 = builder7.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings14 = new org.elasticsearch.river.RiverSettings(settings6, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject13);
        java.util.Map<java.lang.String, java.lang.Object> strMap15 = riverSettings14.settings();
        org.elasticsearch.river.RiverSettings riverSettings16 = new org.elasticsearch.river.RiverSettings(settings5, strMap15);
        org.elasticsearch.river.RiverSettings riverSettings17 = new org.elasticsearch.river.RiverSettings(settings4, strMap15);
        org.elasticsearch.river.RiverSettings riverSettings18 = new org.elasticsearch.river.RiverSettings(settings3, strMap15);
        org.elasticsearch.river.RiverSettings riverSettings19 = new org.elasticsearch.river.RiverSettings(settings2, strMap15);
        org.elasticsearch.script.ScriptService scriptService20 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("ssl", "options", riverSettings19, scriptService20);
        java.lang.String str22 = mongoDBRiverDefinition21.getSSL_VERIFY_CERT_FIELD();
        boolean boolean23 = mongoDBRiverDefinition21.isMongoUseSSL();
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ssl_verify_certificate" + "'", str22, "ssl_verify_certificate");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test04217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04217");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        builder0.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.advancedTransformation(true);
        builder0.mongoSSLVerifyCertificate = false;
        builder0.setscript("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.connectTimeout(1000);
        builder15.setstatisticsIndexName("flush_interval");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder15.script("index");
        builder15.storeStatistics = false;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test04218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04218");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        builder0.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean8 = builder0.skipInitialImport;
        builder0.socketTimeout = (short) -1;
        builder0.setdisableIndexRefresh(true);
        java.lang.String str13 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.skipInitialImport(true);
        boolean boolean16 = builder0.getadvancedTransformation();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test04219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04219");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        java.lang.String str6 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean7 = mongoDBRiverDefinition1.isSkipInitialImport();
        boolean boolean8 = mongoDBRiverDefinition1.getdisableIndexRefresh();
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition1.getParentTypes();
        java.lang.String str10 = mongoDBRiverDefinition1.includeCollection;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ssl" + "'", str6, "ssl");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test04220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04220");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        builder0.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        builder0.mongoClientOptions = mongoClientOptions7;
        builder0.mongoLocalUser = "socket_timeout";
        builder0.dropCollection = true;
        org.bson.types.BSONTimestamp bSONTimestamp13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.initialTimestamp(bSONTimestamp13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
    }

    @Test
    public void test04221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04221");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str5 = mongoDBRiverDefinition1.getTypeName();
        com.mongodb.MongoClientOptions mongoClientOptions6 = mongoDBRiverDefinition1.getMongoClientOptions();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        boolean boolean8 = mongoDBRiverDefinition1.importAllCollections;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(mongoClientOptions6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "null.null" + "'", str7, "null.null");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test04222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04222");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.statisticsTypeName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = builder4.build();
        java.lang.String str6 = mongoDBRiverDefinition5.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition5.includeCollection;
        boolean boolean8 = mongoDBRiverDefinition5.isSkipInitialImport();
        boolean boolean9 = mongoDBRiverDefinition5.isAdvancedTransformation();
        java.util.Set<java.lang.String> strSet10 = mongoDBRiverDefinition5.excludeFields;
        com.mongodb.MongoClientOptions mongoClientOptions11 = mongoDBRiverDefinition5.mongoClientOptions;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "concurrent_bulk_requests" + "'", str6, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNull(mongoClientOptions11);
    }

    @Test
    public void test04223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04223");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        java.lang.String str4 = mongoDBRiverDefinition2.getGRIDFS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition2.getINCLUDE_FIELDS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getScriptType();
        boolean boolean8 = mongoDBRiverDefinition2.getadvancedTransformation();
        java.lang.String str9 = mongoDBRiverDefinition2.script;
        boolean boolean10 = mongoDBRiverDefinition2.skipInitialImport;
        java.lang.String str11 = mongoDBRiverDefinition2.getSSL_VERIFY_CERT_FIELD();
        boolean boolean12 = mongoDBRiverDefinition2.getimportAllCollections();
        java.lang.String str13 = mongoDBRiverDefinition2.getMongoCollection();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gridfs" + "'", str4, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_fields" + "'", str6, "include_fields");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ssl_verify_certificate" + "'", str11, "ssl_verify_certificate");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test04224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04224");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.getincludeCollection();
        int int8 = builder0.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.connectTimeout(1000);
        builder10.connectTimeout = 'a';
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = builder10.build();
        java.lang.String str14 = builder10.script;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.mongoLocalPassword("gridfs");
        builder16.mongoCollection = "host";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.statisticsIndexName("user");
        com.mongodb.BasicDBObject basicDBObject21 = builder16.getmongoCollectionFilter();
        com.mongodb.MongoClientOptions mongoClientOptions22 = null;
        builder16.setmongoClientOptions(mongoClientOptions22);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(basicDBObject21);
    }

    @Test
    public void test04225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04225");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.typeName("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "localhost";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test04226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04226");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = builder0.getmongoCollectionFilter();
        builder0.setskipInitialImport(false);
        builder0.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str12 = builder11.typeName;
        com.mongodb.BasicDBObject basicDBObject13 = null;
        builder11.mongoCollectionFilter = basicDBObject13;
        java.lang.String str15 = builder11.mongoAdminUser;
        builder11.disableIndexRefresh = false;
        java.lang.String str18 = builder11.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder11.getmongoClientOptions();
        int int20 = builder11.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder22);
        java.util.Set<java.lang.String> strSet24 = builder22.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject26 = null;
        builder22.setmongoOplogFilter(basicDBObject26);
        boolean boolean28 = builder22.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder22.socketTimeout((int) ' ');
        java.util.Set<java.lang.String> strSet31 = builder30.excludeFields;
        builder30.setriverName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder30.mongoAdminUser("concurrent_bulk_requests");
        com.mongodb.BasicDBObject basicDBObject36 = builder30.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str38 = builder37.typeName;
        com.mongodb.BasicDBObject basicDBObject39 = null;
        builder37.mongoCollectionFilter = basicDBObject39;
        java.lang.String str41 = builder37.mongoAdminUser;
        builder37.disableIndexRefresh = false;
        java.lang.String str44 = builder37.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder37.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder46);
        java.util.Set<java.lang.String> strSet48 = builder46.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions49 = builder46.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject50 = null;
        builder46.setmongoOplogFilter(basicDBObject50);
        boolean boolean52 = builder46.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray53 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList54 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList54, serverAddressArray53);
        builder46.mongoServers = serverAddressList54;
        java.lang.String str57 = builder46.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str59 = builder58.typeName;
        com.mongodb.BasicDBObject basicDBObject60 = null;
        builder58.mongoCollectionFilter = basicDBObject60;
        java.lang.String str62 = builder58.mongoAdminUser;
        builder58.disableIndexRefresh = false;
        java.lang.String str65 = builder58.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str67 = builder66.typeName;
        com.mongodb.BasicDBObject basicDBObject68 = null;
        builder66.mongoCollectionFilter = basicDBObject68;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder66.mongoUseSSL(true);
        java.lang.String[] strArray81 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet82 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet82, strArray81);
        builder71.setparentTypes((java.util.Set<java.lang.String>) strSet82);
        builder58.parentTypes = strSet82;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder46.parentTypes((java.util.Set<java.lang.String>) strSet82);
        builder37.setexcludeFields((java.util.Set<java.lang.String>) strSet82);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder30.parentTypes((java.util.Set<java.lang.String>) strSet82);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder89 = builder11.includeFields((java.util.Set<java.lang.String>) strSet82);
        builder0.setexcludeFields((java.util.Set<java.lang.String>) strSet82);
        java.lang.String str91 = builder0.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder93 = builder0.advancedTransformation(false);
        java.lang.String str94 = builder93.mongoAdminUser;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(basicDBObject36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(mongoClientOptions45);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNull(mongoClientOptions49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(serverAddressArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
    }

    @Test
    public void test04227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04227");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        boolean boolean7 = builder0.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.scriptType("ssl_verify_certificate");
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test04228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04228");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory6 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings7 = null;
        org.elasticsearch.common.settings.Settings settings8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.util.Set<java.lang.String> strSet11 = builder9.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder9.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject13 = null;
        builder9.setmongoOplogFilter(basicDBObject13);
        com.mongodb.BasicDBObject basicDBObject15 = builder9.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings16 = new org.elasticsearch.river.RiverSettings(settings8, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        org.elasticsearch.river.RiverSettings riverSettings17 = new org.elasticsearch.river.RiverSettings(settings7, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        org.elasticsearch.script.ExecutableScript executableScript18 = docScoreNativeScriptFactory6.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.mongoOplogFilter(basicDBObject15);
        java.lang.String str20 = builder0.typeName;
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        builder0.mongoClientOptions = mongoClientOptions21;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder0.mongoGridFS(true);
        java.lang.String str25 = builder0.getriverIndexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNull(mongoClientOptions12);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNotNull(executableScript18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test04229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04229");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        builder0.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        com.mongodb.BasicDBObject basicDBObject10 = null;
        builder0.mongoCollectionFilter = basicDBObject10;
        builder0.setdisableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoAdminPassword("port");
        builder0.disableIndexRefresh = true;
        builder0.riverIndexName = "";
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test04230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04230");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.isMongoSecondaryReadPreference();
        java.lang.String str4 = mongoDBRiverDefinition2.getMongoDb();
        java.lang.String str5 = mongoDBRiverDefinition2.getSCRIPT_TYPE_FIELD();
        boolean boolean6 = mongoDBRiverDefinition2.getadvancedTransformation();
        java.lang.String str7 = mongoDBRiverDefinition2.getIndexName();
        org.elasticsearch.common.unit.TimeValue timeValue8 = mongoDBRiverDefinition2.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str9 = mongoDBRiverDefinition2.getScriptType();
        java.lang.String str10 = mongoDBRiverDefinition2.getHOST_FIELD();
        boolean boolean11 = mongoDBRiverDefinition2.getskipInitialImport();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "script_type" + "'", str5, "script_type");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(timeValue8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "host" + "'", str10, "host");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test04231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04231");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoAdminPassword;
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition2.excludeFields;
        java.lang.String str5 = mongoDBRiverDefinition2.mongoAdminUser;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue6 = mongoDBRiverDefinition2.getDEFAULT_BULK_SIZE();
        java.lang.String str7 = mongoDBRiverDefinition2.script;
        java.lang.String str8 = mongoDBRiverDefinition2.typeName;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(byteSizeValue6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test04232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04232");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        java.util.Set<java.lang.String> strSet6 = builder5.getincludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.storeStatistics(false);
        java.util.List<com.mongodb.ServerAddress> serverAddressList9 = builder5.mongoServers;
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder5.getmongoClientOptions();
        boolean boolean11 = builder5.mongoSecondaryReadPreference;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(serverAddressList9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test04233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04233");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        builder5.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoLocalUser("size");
        boolean boolean10 = builder5.getmongoSecondaryReadPreference();
        java.lang.String str11 = builder5.getindexName();
        boolean boolean12 = builder5.getskipInitialImport();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04234");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        int int6 = builder0.getsocketTimeout();
        boolean boolean7 = builder0.getmongoGridFS();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str9 = mongoDBRiverDefinition8.getDROP_COLLECTION_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getadvancedTransformation();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "drop_collection" + "'", str9, "drop_collection");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test04235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04235");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.common.settings.Settings settings3 = null;
        org.elasticsearch.common.settings.Settings settings4 = null;
        org.elasticsearch.common.settings.Settings settings5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        java.util.Set<java.lang.String> strSet8 = builder6.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder6.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject10 = null;
        builder6.setmongoOplogFilter(basicDBObject10);
        com.mongodb.BasicDBObject basicDBObject12 = builder6.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings13 = new org.elasticsearch.river.RiverSettings(settings5, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject12);
        org.elasticsearch.river.RiverSettings riverSettings14 = new org.elasticsearch.river.RiverSettings(settings4, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject12);
        org.elasticsearch.river.RiverSettings riverSettings15 = new org.elasticsearch.river.RiverSettings(settings3, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject12);
        org.elasticsearch.river.RiverSettings riverSettings16 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject12);
        org.elasticsearch.script.ScriptService scriptService17 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("name", "servers", riverSettings16, scriptService17);
        java.lang.String str19 = mongoDBRiverDefinition18.getSCRIPT_FIELD();
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(mongoClientOptions9);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "script" + "'", str19, "script");
    }

    @Test
    public void test04236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04236");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        builder0.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        java.util.Set<java.lang.String> strSet10 = builder0.parentTypes;
        boolean boolean11 = builder0.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.throttleSize((int) '#');
        int int14 = builder13.getthrottleSize();
        org.elasticsearch.common.settings.Settings settings15 = null;
        org.elasticsearch.common.settings.Settings settings16 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        java.util.Set<java.lang.String> strSet19 = builder17.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder17.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject21 = null;
        builder17.setmongoOplogFilter(basicDBObject21);
        boolean boolean23 = builder17.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray24 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList25 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList25, serverAddressArray24);
        builder17.mongoServers = serverAddressList25;
        java.lang.String str28 = builder17.mongoAdminPassword;
        java.lang.String str29 = builder17.getscriptType();
        java.lang.String str30 = builder17.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder17.scriptType("throttle_size");
        boolean boolean33 = builder32.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder32.mongoCollection("host");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory36 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings37 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.util.Set<java.lang.String> strSet40 = builder38.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder38.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject42 = null;
        builder38.setmongoOplogFilter(basicDBObject42);
        boolean boolean44 = builder38.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder38.socketTimeout((int) ' ');
        java.lang.String str47 = builder46.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder46.mongoCollection("drop_collection");
        com.mongodb.BasicDBObject basicDBObject50 = builder46.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings51 = new org.elasticsearch.river.RiverSettings(settings37, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject50);
        org.elasticsearch.script.ExecutableScript executableScript52 = docScoreNativeScriptFactory36.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject50);
        builder35.setmongoCollectionFilter(basicDBObject50);
        org.elasticsearch.river.RiverSettings riverSettings54 = new org.elasticsearch.river.RiverSettings(settings16, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject50);
        org.elasticsearch.river.RiverSettings riverSettings55 = new org.elasticsearch.river.RiverSettings(settings15, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder13.mongoOplogFilter(basicDBObject50);
        builder56.setthrottleSize(100);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serverAddressArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertNull(mongoClientOptions41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(basicDBObject50);
        org.junit.Assert.assertNotNull(executableScript52);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test04237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04237");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.common.settings.Settings settings3 = null;
        org.elasticsearch.common.settings.Settings settings4 = null;
        org.elasticsearch.common.settings.Settings settings5 = null;
        org.elasticsearch.common.settings.Settings settings6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        java.lang.String str10 = mongoDBRiverDefinition9.getCONNECTION_TIMEOUT();
        java.lang.String str11 = mongoDBRiverDefinition9.getCREDENTIALS_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getCONCURRENT_BULK_REQUESTS_FIELD();
        com.mongodb.BasicDBObject basicDBObject13 = mongoDBRiverDefinition9.getMongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings14 = new org.elasticsearch.river.RiverSettings(settings6, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject13);
        org.elasticsearch.river.RiverSettings riverSettings15 = new org.elasticsearch.river.RiverSettings(settings5, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject13);
        org.elasticsearch.river.RiverSettings riverSettings16 = new org.elasticsearch.river.RiverSettings(settings4, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject13);
        org.elasticsearch.river.RiverSettings riverSettings17 = new org.elasticsearch.river.RiverSettings(settings3, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject13);
        org.elasticsearch.river.RiverSettings riverSettings18 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject13);
        org.elasticsearch.script.ScriptService scriptService19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("secondary_read_preference", "socket_timeout", riverSettings18, scriptService19);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "connect_timeout" + "'", str10, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "credentials" + "'", str11, "credentials");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "concurrent_bulk_requests" + "'", str12, "concurrent_bulk_requests");
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition20);
    }

    @Test
    public void test04238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04238");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = builder0.mongoServers;
        boolean boolean9 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean11 = mongoDBRiverDefinition10.storeStatistics;
        boolean boolean12 = mongoDBRiverDefinition10.dropCollection;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = mongoDBRiverDefinition10.getInitialTimestamp();
        boolean boolean14 = mongoDBRiverDefinition10.isMongoGridFS();
        boolean boolean15 = mongoDBRiverDefinition10.getdisableIndexRefresh();
        int int16 = mongoDBRiverDefinition10.socketTimeout;
        com.mongodb.BasicDBObject basicDBObject17 = mongoDBRiverDefinition10.mongoCollectionFilter;
        java.lang.String str18 = mongoDBRiverDefinition10.getDROP_COLLECTION_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(serverAddressList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(basicDBObject17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "drop_collection" + "'", str18, "drop_collection");
    }

    @Test
    public void test04239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04239");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        java.lang.String str5 = builder0.getriverName();
        builder0.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.typeName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        int int14 = mongoDBRiverDefinition13.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str15 = mongoDBRiverDefinition13.scriptType;
        boolean boolean16 = mongoDBRiverDefinition13.importAllCollections;
        java.lang.String str17 = mongoDBRiverDefinition13.getCOLLECTION_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList18 = mongoDBRiverDefinition13.mongoServers;
        builder11.setmongoServers(serverAddressList18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        java.util.Set<java.lang.String> strSet22 = builder20.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder20.getmongoClientOptions();
        builder20.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str28 = builder27.typeName;
        com.mongodb.BasicDBObject basicDBObject29 = null;
        builder27.mongoCollectionFilter = basicDBObject29;
        java.lang.String str31 = builder27.mongoAdminUser;
        builder27.disableIndexRefresh = false;
        java.lang.String str34 = builder27.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str36 = builder35.typeName;
        com.mongodb.BasicDBObject basicDBObject37 = null;
        builder35.mongoCollectionFilter = basicDBObject37;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder35.mongoUseSSL(true);
        java.lang.String[] strArray50 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        builder40.setparentTypes((java.util.Set<java.lang.String>) strSet51);
        builder27.parentTypes = strSet51;
        builder20.excludeFields = strSet51;
        builder11.setincludeFields((java.util.Set<java.lang.String>) strSet51);
        builder11.setriverName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        java.lang.String str60 = builder11.getmongoLocalUser();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "collection" + "'", str17, "collection");
        org.junit.Assert.assertNotNull(serverAddressList18);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNull(mongoClientOptions23);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "options" + "'", str60, "options");
    }

    @Test
    public void test04240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04240");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.lang.String str9 = builder8.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.typeName("bulk_size");
        java.lang.String str12 = builder11.getmongoLocalUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.scriptType("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder11.mongoSecondaryReadPreference(true);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test04241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04241");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getStatisticsIndexName();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition2.getIncludeFields();
        java.lang.String str7 = mongoDBRiverDefinition2.mongoLocalUser;
        boolean boolean8 = mongoDBRiverDefinition2.getmongoSecondaryReadPreference();
        java.lang.String str9 = mongoDBRiverDefinition2.getSCRIPT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition2.getSCRIPT_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script" + "'", str9, "script");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "script" + "'", str10, "script");
    }

    @Test
    public void test04242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04242");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = mongoDBRiverDefinition2.getDEFAULT_BULK_SIZE();
        java.lang.String str6 = mongoDBRiverDefinition2.indexName;
        java.lang.String str7 = mongoDBRiverDefinition2.getBULK_SIZE_FIELD();
        int int8 = mongoDBRiverDefinition2.getDEFAULT_CONCURRENT_REQUESTS();
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition2.getMongoOplogFilter();
        java.lang.String str10 = mongoDBRiverDefinition2.getFLUSH_INTERVAL_FIELD();
        boolean boolean11 = mongoDBRiverDefinition2.getstoreStatistics();
        boolean boolean12 = mongoDBRiverDefinition2.getskipInitialImport();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertNotNull(byteSizeValue5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "bulk_size" + "'", str7, "bulk_size");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNull(basicDBObject9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "flush_interval" + "'", str10, "flush_interval");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04243");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getDEFAULT_DB_HOST();
        int int6 = mongoDBRiverDefinition2.socketTimeout;
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition2.getMongoCollectionFilter();
        com.mongodb.BasicDBObject basicDBObject8 = mongoDBRiverDefinition2.getMongoOplogFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList9 = mongoDBRiverDefinition2.mongoServers;
        java.lang.String str10 = mongoDBRiverDefinition2.getScriptType();
        java.lang.String str11 = mongoDBRiverDefinition2.getUSER_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition2.getINCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "localhost" + "'", str5, "localhost");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNull(basicDBObject8);
        org.junit.Assert.assertNotNull(serverAddressList9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "user" + "'", str11, "user");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "include_fields" + "'", str12, "include_fields");
    }

    @Test
    public void test04244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04244");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.common.settings.Settings settings1 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory2 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        java.util.Set<java.lang.String> strSet6 = builder4.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder4.setmongoOplogFilter(basicDBObject8);
        com.mongodb.BasicDBObject basicDBObject10 = builder4.getmongoCollectionFilter();
        builder3.mongoCollectionFilter = basicDBObject10;
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory2.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject10);
        org.elasticsearch.common.settings.Settings settings13 = null;
        org.elasticsearch.common.settings.Settings settings14 = null;
        org.elasticsearch.common.settings.Settings settings15 = null;
        org.elasticsearch.common.settings.Settings settings16 = null;
        org.elasticsearch.common.settings.Settings settings17 = null;
        org.elasticsearch.common.settings.Settings settings18 = null;
        org.elasticsearch.common.settings.Settings settings19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        java.util.Set<java.lang.String> strSet22 = builder20.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder20.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject24 = null;
        builder20.setmongoOplogFilter(basicDBObject24);
        com.mongodb.BasicDBObject basicDBObject26 = builder20.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings27 = new org.elasticsearch.river.RiverSettings(settings19, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject26);
        java.util.Map<java.lang.String, java.lang.Object> strMap28 = riverSettings27.settings();
        org.elasticsearch.river.RiverSettings riverSettings29 = new org.elasticsearch.river.RiverSettings(settings18, strMap28);
        org.elasticsearch.river.RiverSettings riverSettings30 = new org.elasticsearch.river.RiverSettings(settings17, strMap28);
        org.elasticsearch.river.RiverSettings riverSettings31 = new org.elasticsearch.river.RiverSettings(settings16, strMap28);
        org.elasticsearch.river.RiverSettings riverSettings32 = new org.elasticsearch.river.RiverSettings(settings15, strMap28);
        org.elasticsearch.river.RiverSettings riverSettings33 = new org.elasticsearch.river.RiverSettings(settings14, strMap28);
        org.elasticsearch.river.RiverSettings riverSettings34 = new org.elasticsearch.river.RiverSettings(settings13, strMap28);
        org.elasticsearch.script.ExecutableScript executableScript35 = docScoreNativeScriptFactory2.newScript(strMap28);
        org.elasticsearch.common.settings.Settings settings36 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str38 = builder37.typeName;
        com.mongodb.BasicDBObject basicDBObject39 = null;
        builder37.mongoCollectionFilter = basicDBObject39;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder37.mongoUseSSL(true);
        builder37.connectTimeout = (byte) -1;
        builder37.setsocketTimeout((int) (short) 1);
        java.lang.String str47 = builder37.getstatisticsTypeName();
        boolean boolean48 = builder37.getmongoGridFS();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder37.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder51);
        java.util.Set<java.lang.String> strSet53 = builder51.includeFields;
        java.lang.String str54 = builder51.mongoAdminUser;
        java.lang.String str55 = builder51.statisticsTypeName;
        com.mongodb.BasicDBObject basicDBObject56 = builder51.mongoCollectionFilter;
        builder37.setmongoCollectionFilter(basicDBObject56);
        org.elasticsearch.river.RiverSettings riverSettings58 = new org.elasticsearch.river.RiverSettings(settings36, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        java.util.Map<java.lang.String, java.lang.Object> strMap59 = riverSettings58.settings();
        org.elasticsearch.script.ExecutableScript executableScript60 = docScoreNativeScriptFactory2.newScript(strMap59);
        org.elasticsearch.river.RiverSettings riverSettings61 = new org.elasticsearch.river.RiverSettings(settings1, strMap59);
        org.elasticsearch.river.RiverSettings riverSettings62 = new org.elasticsearch.river.RiverSettings(settings0, strMap59);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(executableScript35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(strSet53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(basicDBObject56);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNotNull(executableScript60);
    }

    @Test
    public void test04245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04245");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.common.settings.Settings settings1 = null;
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.common.settings.Settings settings3 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str5 = builder4.typeName;
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder4.mongoCollectionFilter = basicDBObject6;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder4.mongoUseSSL(true);
        builder4.connectTimeout = (byte) -1;
        int int12 = builder4.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder4.statisticsIndexName("initial_timestamp");
        java.lang.String str15 = builder14.mongoLocalUser;
        org.elasticsearch.common.settings.Settings settings16 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        java.util.Set<java.lang.String> strSet19 = builder17.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder17.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject21 = null;
        builder17.setmongoOplogFilter(basicDBObject21);
        com.mongodb.BasicDBObject basicDBObject23 = builder17.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings24 = new org.elasticsearch.river.RiverSettings(settings16, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder14.mongoCollectionFilter(basicDBObject23);
        org.elasticsearch.river.RiverSettings riverSettings26 = new org.elasticsearch.river.RiverSettings(settings3, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject23);
        org.elasticsearch.river.RiverSettings riverSettings27 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject23);
        java.util.Map<java.lang.String, java.lang.Object> strMap28 = riverSettings27.settings();
        org.elasticsearch.river.RiverSettings riverSettings29 = new org.elasticsearch.river.RiverSettings(settings1, strMap28);
        org.elasticsearch.river.RiverSettings riverSettings30 = new org.elasticsearch.river.RiverSettings(settings0, strMap28);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNull(mongoClientOptions20);
        org.junit.Assert.assertNotNull(basicDBObject23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strMap28);
    }

    @Test
    public void test04246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04246");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        int int8 = builder0.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.statisticsIndexName("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.statisticsTypeName("");
        java.lang.String str13 = builder10.getmongoLocalUser();
        java.lang.String str14 = builder10.getmongoLocalPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test04247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04247");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        docScoreSearchScript0.setNextScore(100.0f);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        java.util.Set<java.lang.String> strSet8 = builder6.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder6.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject10 = null;
        builder6.setmongoOplogFilter(basicDBObject10);
        boolean boolean12 = builder6.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder6.socketTimeout((int) ' ');
        java.util.Set<java.lang.String> strSet15 = builder14.excludeFields;
        builder14.setriverName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.mongoAdminUser("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder14.mongoDb("size");
        docScoreSearchScript0.setNextVar("advanced_transformation", (java.lang.Object) builder14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        java.lang.String str26 = mongoDBRiverDefinition25.mongoAdminPassword;
        int int27 = mongoDBRiverDefinition25.connectTimeout;
        java.lang.String str28 = mongoDBRiverDefinition25.getScriptType();
        java.lang.Object obj29 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str31 = builder30.typeName;
        com.mongodb.BasicDBObject basicDBObject32 = null;
        builder30.mongoCollectionFilter = basicDBObject32;
        java.lang.String str34 = builder30.mongoAdminUser;
        builder30.disableIndexRefresh = false;
        java.lang.String str37 = builder30.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder30.mongoClientOptions;
        builder30.dropCollection = false;
        java.lang.Object obj41 = docScoreSearchScript0.unwrap((java.lang.Object) false);
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextDocId(35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(mongoClientOptions38);
        org.junit.Assert.assertEquals("'" + obj41 + "' != '" + false + "'", obj41, false);
    }

    @Test
    public void test04248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04248");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        int int8 = builder0.socketTimeout;
        java.lang.String str9 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoAdminPassword("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        java.lang.String str13 = mongoDBRiverDefinition12.mongoAdminPassword;
        java.lang.String str14 = mongoDBRiverDefinition12.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        boolean boolean15 = mongoDBRiverDefinition12.mongoGridFS;
        java.lang.String str16 = mongoDBRiverDefinition12.getUSER_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition12.mongoAdminUser;
        java.util.Set<java.lang.String> strSet18 = mongoDBRiverDefinition12.includeFields;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "local" + "'", str13, "local");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script_type" + "'", str14, "script_type");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "user" + "'", str16, "user");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(strSet18);
    }

    @Test
    public void test04249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04249");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoAdminPassword;
        int int4 = mongoDBRiverDefinition2.connectTimeout;
        java.lang.String str5 = mongoDBRiverDefinition2.getCONCURRENT_REQUESTS_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "concurrent_requests" + "'", str5, "concurrent_requests");
    }

    @Test
    public void test04250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04250");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = builder0.getmongoCollectionFilter();
        builder0.setskipInitialImport(false);
        java.lang.String str9 = builder0.statisticsIndexName;
        java.lang.String str10 = builder0.scriptType;
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = builder0.getmongoServers();
        boolean boolean12 = builder0.getmongoGridFS();
        boolean boolean13 = builder0.storeStatistics;
        builder0.setmongoUseSSL(false);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test04251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04251");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.statisticsIndexName("port");
        builder0.setmongoUseSSL(false);
        builder0.mongoLocalPassword = "local";
        builder0.setmongoLocalUser("exclude_fields");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test04252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04252");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        java.lang.Object obj6 = docScoreSearchScript0.unwrap((java.lang.Object) "bulk");
        docScoreSearchScript0.setNextScore((float) 0L);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        java.lang.String str13 = mongoDBRiverDefinition12.mongoAdminPassword;
        java.util.Set<java.lang.String> strSet14 = mongoDBRiverDefinition12.excludeFields;
        java.lang.String str15 = mongoDBRiverDefinition12.mongoAdminUser;
        docScoreSearchScript0.setNextVar("exclude_fields", (java.lang.Object) mongoDBRiverDefinition12);
        java.util.Set<java.lang.String> strSet17 = mongoDBRiverDefinition12.getParentTypes();
        java.lang.String str18 = mongoDBRiverDefinition12.getFILTER_FIELD();
        boolean boolean19 = mongoDBRiverDefinition12.isMongoSecondaryReadPreference();
        boolean boolean20 = mongoDBRiverDefinition12.getstoreStatistics();
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + "bulk" + "'", obj6, "bulk");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "filter" + "'", str18, "filter");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test04253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04253");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = builder0.mongoServers;
        boolean boolean9 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean11 = mongoDBRiverDefinition10.storeStatistics;
        java.lang.String str12 = mongoDBRiverDefinition10.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition10.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.util.Set<java.lang.String> strSet14 = mongoDBRiverDefinition10.getExcludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(serverAddressList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "exclude_fields" + "'", str12, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "script" + "'", str13, "script");
        org.junit.Assert.assertNull(strSet14);
    }

    @Test
    public void test04254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04254");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        builder0.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.MongoClientOptions mongoClientOptions9 = mongoDBRiverDefinition8.getMongoClientOptions();
        java.lang.String str10 = mongoDBRiverDefinition8.getFLUSH_INTERVAL_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition8.mongoLocalPassword;
        java.lang.String str12 = mongoDBRiverDefinition8.getCONNECTION_TIMEOUT();
        java.lang.String str13 = mongoDBRiverDefinition8.getFILTER_FIELD();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNull(mongoClientOptions9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "flush_interval" + "'", str10, "flush_interval");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "connect_timeout" + "'", str12, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "filter" + "'", str13, "filter");
    }

    @Test
    public void test04255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04255");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        java.lang.String str4 = mongoDBRiverDefinition2.getGRIDFS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition2.getINCLUDE_FIELDS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getCONCURRENT_BULK_REQUESTS_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.skipInitialImport;
        boolean boolean9 = mongoDBRiverDefinition2.isDropCollection();
        boolean boolean10 = mongoDBRiverDefinition2.isMongoSSLVerifyCertificate();
        java.lang.String str11 = mongoDBRiverDefinition2.getDEFAULT_DB_HOST();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gridfs" + "'", str4, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_fields" + "'", str6, "include_fields");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "concurrent_bulk_requests" + "'", str7, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "localhost" + "'", str11, "localhost");
    }

    @Test
    public void test04256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04256");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = mongoDBRiverDefinition2.getDEFAULT_BULK_SIZE();
        java.lang.String str6 = mongoDBRiverDefinition2.indexName;
        java.lang.String str7 = mongoDBRiverDefinition2.getBULK_SIZE_FIELD();
        int int8 = mongoDBRiverDefinition2.getDEFAULT_CONCURRENT_REQUESTS();
        boolean boolean9 = mongoDBRiverDefinition2.isAdvancedTransformation();
        java.lang.String str10 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition2.getIncludeCollection();
        java.lang.String str12 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        boolean boolean13 = mongoDBRiverDefinition2.disableIndexRefresh;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertNotNull(byteSizeValue5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "bulk_size" + "'", str7, "bulk_size");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "script_type" + "'", str10, "script_type");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "script" + "'", str12, "script");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test04257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04257");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str3 = builder2.typeName;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder2.mongoCollectionFilter = basicDBObject4;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.mongoUseSSL(true);
        java.lang.String[] strArray17 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        builder7.setparentTypes((java.util.Set<java.lang.String>) strSet18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet18);
        builder0.setdisableIndexRefresh(false);
        com.mongodb.MongoClientOptions mongoClientOptions24 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder0.mongoClientOptions(mongoClientOptions24);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp26 = builder25.getinitialTimestamp();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(wildcardTimestamp26);
    }

    @Test
    public void test04258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04258");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        builder0.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.advancedTransformation(true);
        builder0.mongoSSLVerifyCertificate = false;
        builder0.setscript("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.connectTimeout(1000);
        builder15.setstatisticsIndexName("flush_interval");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder15.script("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder15.mongoAdminUser("advanced_transformation");
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test04259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04259");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str3 = mongoDBRiverDefinition1.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str5 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        int int7 = mongoDBRiverDefinition1.socketTimeout;
        com.mongodb.BasicDBObject basicDBObject8 = mongoDBRiverDefinition1.getMongoOplogFilter();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "null.null" + "'", str5, "null.null");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "null.null" + "'", str6, "null.null");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(basicDBObject8);
    }

    @Test
    public void test04260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04260");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.statisticsTypeName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        java.lang.String str6 = mongoDBRiverDefinition5.getSIZE_FIELD();
        org.elasticsearch.common.unit.TimeValue timeValue7 = mongoDBRiverDefinition5.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str8 = mongoDBRiverDefinition5.getSSL_CONNECTION_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition5.getCONNECTION_TIMEOUT();
        boolean boolean10 = mongoDBRiverDefinition5.disableIndexRefresh;
        java.lang.String str11 = mongoDBRiverDefinition5.getINDEX_OBJECT();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "size" + "'", str6, "size");
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ssl" + "'", str8, "ssl");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "connect_timeout" + "'", str9, "connect_timeout");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "index" + "'", str11, "index");
    }

    @Test
    public void test04261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04261");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.mongoClientOptions;
        builder0.importAllCollections = false;
        builder0.setmongoSecondaryReadPreference(false);
        builder0.setstatisticsTypeName("exclude_fields");
        com.mongodb.BasicDBObject basicDBObject15 = builder0.mongoOplogFilter;
        boolean boolean16 = builder0.getmongoGridFS();
        builder0.script = "flush_interval";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str20 = builder19.typeName;
        com.mongodb.BasicDBObject basicDBObject21 = null;
        builder19.mongoCollectionFilter = basicDBObject21;
        java.lang.String str23 = builder19.mongoAdminUser;
        java.lang.String str24 = builder19.getriverName();
        builder19.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder19.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder19.typeName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder31);
        int int33 = mongoDBRiverDefinition32.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str34 = mongoDBRiverDefinition32.scriptType;
        boolean boolean35 = mongoDBRiverDefinition32.importAllCollections;
        java.lang.String str36 = mongoDBRiverDefinition32.getCOLLECTION_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList37 = mongoDBRiverDefinition32.mongoServers;
        builder30.setmongoServers(serverAddressList37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder39);
        java.util.Set<java.lang.String> strSet41 = builder39.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder39.getmongoClientOptions();
        builder39.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str47 = builder46.typeName;
        com.mongodb.BasicDBObject basicDBObject48 = null;
        builder46.mongoCollectionFilter = basicDBObject48;
        java.lang.String str50 = builder46.mongoAdminUser;
        builder46.disableIndexRefresh = false;
        java.lang.String str53 = builder46.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str55 = builder54.typeName;
        com.mongodb.BasicDBObject basicDBObject56 = null;
        builder54.mongoCollectionFilter = basicDBObject56;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder54.mongoUseSSL(true);
        java.lang.String[] strArray69 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet70 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet70, strArray69);
        builder59.setparentTypes((java.util.Set<java.lang.String>) strSet70);
        builder46.parentTypes = strSet70;
        builder39.excludeFields = strSet70;
        builder30.setincludeFields((java.util.Set<java.lang.String>) strSet70);
        builder0.setexcludeFields((java.util.Set<java.lang.String>) strSet70);
        builder0.setstatisticsIndexName("parent_types");
        boolean boolean79 = builder0.getstoreStatistics();
        builder0.setadvancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder0.script("include_collection");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNull(basicDBObject15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "collection" + "'", str36, "collection");
        org.junit.Assert.assertNotNull(serverAddressList37);
        org.junit.Assert.assertNull(strSet41);
        org.junit.Assert.assertNull(mongoClientOptions42);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test04262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04262");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        builder0.setsocketTimeout((int) (short) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoAdminUser("hi!");
        boolean boolean12 = builder0.getadvancedTransformation();
        builder0.setmongoLocalUser("password");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04263");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.statisticsIndexName("port");
        builder0.setskipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = builder0.build();
        java.lang.String str13 = mongoDBRiverDefinition12.getCREDENTIALS_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition12.getRiverName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "credentials" + "'", str13, "credentials");
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test04264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04264");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        java.lang.String str12 = builder0.getscriptType();
        java.lang.String str13 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.scriptType("throttle_size");
        java.lang.String str16 = builder0.getmongoLocalPassword();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test04265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04265");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoAdminPassword;
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition2.excludeFields;
        java.lang.String str5 = mongoDBRiverDefinition2.getFILTER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getMongoLocalUser();
        java.lang.String str7 = mongoDBRiverDefinition2.getDB_FIELD();
        int int8 = mongoDBRiverDefinition2.getThrottleSize();
        boolean boolean9 = mongoDBRiverDefinition2.advancedTransformation;
        com.mongodb.MongoClientOptions mongoClientOptions10 = mongoDBRiverDefinition2.mongoClientOptions;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "filter" + "'", str5, "filter");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "db" + "'", str7, "db");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(mongoClientOptions10);
    }

    @Test
    public void test04266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04266");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = builder0.build();
        org.elasticsearch.common.unit.TimeValue timeValue7 = mongoDBRiverDefinition6.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str8 = mongoDBRiverDefinition6.getLOCAL_DB_FIELD();
        boolean boolean9 = mongoDBRiverDefinition6.dropCollection;
        java.lang.String str10 = mongoDBRiverDefinition6.getSTORE_STATISTICS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition6.typeName;
        java.lang.String str12 = mongoDBRiverDefinition6.getLOCAL_DB_FIELD();
        int int13 = mongoDBRiverDefinition6.getThrottleSize();
        boolean boolean14 = mongoDBRiverDefinition6.advancedTransformation;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition6);
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "local" + "'", str8, "local");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "store_statistics" + "'", str10, "store_statistics");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "local" + "'", str12, "local");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test04267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04267");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.typeName("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoUseSSL = true;
        java.lang.String str13 = builder0.includeCollection;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test04268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04268");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        int int8 = builder0.socketTimeout;
        java.lang.String str9 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoAdminPassword("local");
        java.lang.String str12 = builder11.mongoLocalPassword;
        java.util.Set<java.lang.String> strSet13 = builder11.getincludeFields();
        boolean boolean14 = builder11.dropCollection;
        builder11.mongoLocalPassword = "drop_collection";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test04269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04269");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.typeName;
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder12.mongoCollectionFilter = basicDBObject14;
        java.lang.String str16 = builder12.mongoAdminUser;
        builder12.disableIndexRefresh = false;
        java.lang.String str19 = builder12.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.typeName;
        com.mongodb.BasicDBObject basicDBObject22 = null;
        builder20.mongoCollectionFilter = basicDBObject22;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder20.mongoUseSSL(true);
        java.lang.String[] strArray35 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        builder25.setparentTypes((java.util.Set<java.lang.String>) strSet36);
        builder12.parentTypes = strSet36;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder0.includeCollection("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder0.indexName("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp45 = builder44.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder44.statisticsTypeName("bulk_size");
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(wildcardTimestamp45);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test04270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04270");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        boolean boolean4 = mongoDBRiverDefinition1.importAllCollections;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        boolean boolean6 = mongoDBRiverDefinition1.getstoreStatistics();
        java.lang.String str7 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean8 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        java.lang.String str9 = mongoDBRiverDefinition1.getSTORE_STATISTICS_FIELD();
        boolean boolean10 = mongoDBRiverDefinition1.isDropCollection();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "store_statistics" + "'", str9, "store_statistics");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test04271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04271");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        int int4 = mongoDBRiverDefinition2.getConnectTimeout();
        java.lang.String str5 = mongoDBRiverDefinition2.riverIndexName;
        java.lang.String str6 = mongoDBRiverDefinition2.getPARENT_TYPES_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getDROP_COLLECTION_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.isAdvancedTransformation();
        java.lang.String str9 = mongoDBRiverDefinition2.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition2.statisticsTypeName;
        java.lang.String str11 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        boolean boolean12 = mongoDBRiverDefinition2.getmongoUseSSL();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition2.includeFields;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "parent_types" + "'", str6, "parent_types");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "drop_collection" + "'", str7, "drop_collection");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "concurrent_requests" + "'", str9, "concurrent_requests");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "script" + "'", str11, "script");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet13);
    }

    @Test
    public void test04272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04272");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.typeName;
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder12.mongoCollectionFilter = basicDBObject14;
        java.lang.String str16 = builder12.mongoAdminUser;
        builder12.disableIndexRefresh = false;
        java.lang.String str19 = builder12.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.typeName;
        com.mongodb.BasicDBObject basicDBObject22 = null;
        builder20.mongoCollectionFilter = basicDBObject22;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder20.mongoUseSSL(true);
        java.lang.String[] strArray35 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        builder25.setparentTypes((java.util.Set<java.lang.String>) strSet36);
        builder12.parentTypes = strSet36;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.mongoUseSSL(false);
        builder44.mongoCollection = "user";
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test04273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04273");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        boolean boolean7 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        java.util.Set<java.lang.String> strSet12 = builder10.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder10.setmongoOplogFilter(basicDBObject14);
        boolean boolean16 = builder10.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray17 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList18 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList18, serverAddressArray17);
        builder10.mongoServers = serverAddressList18;
        java.lang.String str21 = builder10.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str23 = builder22.typeName;
        com.mongodb.BasicDBObject basicDBObject24 = null;
        builder22.mongoCollectionFilter = basicDBObject24;
        java.lang.String str26 = builder22.mongoAdminUser;
        builder22.disableIndexRefresh = false;
        java.lang.String str29 = builder22.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str31 = builder30.typeName;
        com.mongodb.BasicDBObject basicDBObject32 = null;
        builder30.mongoCollectionFilter = basicDBObject32;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder30.mongoUseSSL(true);
        java.lang.String[] strArray45 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        builder35.setparentTypes((java.util.Set<java.lang.String>) strSet46);
        builder22.parentTypes = strSet46;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder10.parentTypes((java.util.Set<java.lang.String>) strSet46);
        builder9.setparentTypes((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder9.mongoAdminPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder9.riverIndexName("drop_collection");
        int int56 = builder9.connectTimeout;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(serverAddressArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test04274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04274");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("include_fields", "gridfs", true);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?gridfs?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test04275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04275");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        boolean boolean3 = mongoDBRiverDefinition1.getdropCollection();
        java.lang.String str4 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.mongoDb;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = mongoDBRiverDefinition1.initialTimestamp;
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "servers" + "'", str4, "servers");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "null.null" + "'", str7, "null.null");
    }

    @Test
    public void test04276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04276");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoDb("initial_timestamp");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings4 = null;
        org.elasticsearch.common.settings.Settings settings5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        java.util.Set<java.lang.String> strSet8 = builder6.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder6.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject10 = null;
        builder6.setmongoOplogFilter(basicDBObject10);
        com.mongodb.BasicDBObject basicDBObject12 = builder6.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings13 = new org.elasticsearch.river.RiverSettings(settings5, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject12);
        org.elasticsearch.river.RiverSettings riverSettings14 = new org.elasticsearch.river.RiverSettings(settings4, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject12);
        org.elasticsearch.script.ExecutableScript executableScript15 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject12);
        builder0.setmongoCollectionFilter(basicDBObject12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setstoreStatistics(true);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(mongoClientOptions9);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(executableScript15);
    }

    @Test
    public void test04277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04277");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        builder0.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.mongoDb("throttle_size");
        java.lang.String str12 = builder11.indexName;
        builder11.setstoreStatistics(true);
        boolean boolean15 = builder11.storeStatistics;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test04278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04278");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        builder0.setsocketTimeout(0);
        boolean boolean4 = builder0.getmongoUseSSL();
        builder0.settypeName("bulk_size");
        java.lang.String str7 = builder0.getriverIndexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test04279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04279");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.BasicDBObject basicDBObject1 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("secondary_read_preference");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?secondary_read_preference?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test04280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04280");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        boolean boolean7 = builder0.getstoreStatistics();
        java.lang.String str8 = builder0.getriverName();
        builder0.setthrottleSize((int) 'a');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.socketTimeout((int) (byte) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test04281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04281");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder1);
        java.lang.String str4 = mongoDBRiverDefinition3.getCONNECTION_TIMEOUT();
        java.lang.String str5 = mongoDBRiverDefinition3.getCREDENTIALS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition3.getSOCKET_TIMEOUT();
        java.lang.String str7 = mongoDBRiverDefinition3.getSCRIPT_FIELD();
        org.elasticsearch.common.logging.ESLogger eSLogger8 = mongoDBRiverDefinition3.getlogger();
        java.lang.String str9 = mongoDBRiverDefinition3.getPASSWORD_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition3.getTYPE_FIELD();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition3.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings12 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "connect_timeout" + "'", str4, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "credentials" + "'", str5, "credentials");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "socket_timeout" + "'", str6, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "script" + "'", str7, "script");
        org.junit.Assert.assertNotNull(eSLogger8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "password" + "'", str9, "password");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "type" + "'", str10, "type");
        org.junit.Assert.assertNotNull(basicDBObject11);
    }

    @Test
    public void test04282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04282");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        boolean boolean7 = mongoDBRiverDefinition2.disableIndexRefresh;
        com.mongodb.BasicDBObject basicDBObject8 = mongoDBRiverDefinition2.mongoOplogFilter;
        java.lang.String str9 = mongoDBRiverDefinition2.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition2.getMongoAdminUser();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script_type" + "'", str6, "script_type");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(basicDBObject8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "advanced_transformation" + "'", str9, "advanced_transformation");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test04283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04283");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        builder5.importAllCollections = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.connectTimeout(1);
        boolean boolean10 = builder9.getadvancedTransformation();
        builder9.setmongoAdminPassword("bulk_timeout");
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder9.mongoClientOptions(mongoClientOptions13);
        java.lang.String str15 = builder14.getmongoAdminUser();
        builder14.mongoLocalUser = "password";
        builder14.mongoDb = "store_statistics";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test04284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04284");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        java.lang.Object obj6 = docScoreSearchScript0.unwrap((java.lang.Object) "bulk");
        docScoreSearchScript0.setNextScore((float) 0L);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.util.Set<java.lang.String> strSet11 = builder9.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder9.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject13 = null;
        builder9.setmongoOplogFilter(basicDBObject13);
        boolean boolean15 = builder9.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder9.mongoGridFS(true);
        builder9.setstatisticsTypeName("servers");
        java.lang.Object obj20 = docScoreSearchScript0.unwrap((java.lang.Object) "servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        java.util.Set<java.lang.String> strSet23 = builder21.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder21.statisticsTypeName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        java.lang.String str27 = mongoDBRiverDefinition26.getSIZE_FIELD();
        org.elasticsearch.common.unit.TimeValue timeValue28 = mongoDBRiverDefinition26.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str29 = mongoDBRiverDefinition26.getSSL_CONNECTION_FIELD();
        java.lang.String str30 = mongoDBRiverDefinition26.getCONNECTION_TIMEOUT();
        boolean boolean31 = mongoDBRiverDefinition26.getmongoUseSSL();
        java.lang.Object obj32 = docScoreSearchScript0.unwrap((java.lang.Object) boolean31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        java.lang.String str36 = mongoDBRiverDefinition35.getMongoCollection();
        java.lang.String str37 = mongoDBRiverDefinition35.scriptType;
        java.lang.String str38 = mongoDBRiverDefinition35.getCOLLECTION_FIELD();
        java.lang.String str39 = mongoDBRiverDefinition35.getINCLUDE_COLLECTION_FIELD();
        int int40 = mongoDBRiverDefinition35.getSocketTimeout();
        docScoreSearchScript0.setNextVar("local", (java.lang.Object) int40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str43 = builder42.typeName;
        com.mongodb.BasicDBObject basicDBObject44 = null;
        builder42.mongoCollectionFilter = basicDBObject44;
        java.lang.String str46 = builder42.mongoAdminUser;
        builder42.disableIndexRefresh = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder42.statisticsIndexName("port");
        boolean boolean51 = builder42.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder42.mongoCollection("include_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder42.includeCollection("type");
        java.lang.Object obj56 = docScoreSearchScript0.unwrap((java.lang.Object) builder42);
        // The following exception was thrown during execution in test generation
        try {
            long long57 = docScoreSearchScript0.runAsLong();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + "bulk" + "'", obj6, "bulk");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + "servers" + "'", obj20, "servers");
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "size" + "'", str27, "size");
        org.junit.Assert.assertNotNull(timeValue28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ssl" + "'", str29, "ssl");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "connect_timeout" + "'", str30, "connect_timeout");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + obj32 + "' != '" + false + "'", obj32, false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "collection" + "'", str38, "collection");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "include_collection" + "'", str39, "include_collection");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(obj56);
    }

    @Test
    public void test04285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04285");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.typeName("secondary_read_preference");
        boolean boolean10 = builder9.skipInitialImport;
        java.lang.String str11 = builder9.getriverName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.mongoLocalUser("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str19 = builder18.typeName;
        com.mongodb.BasicDBObject basicDBObject20 = null;
        builder18.mongoCollectionFilter = basicDBObject20;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder18.mongoAdminPassword("db");
        builder23.importAllCollections = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder23.connectTimeout(1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder23.importAllCollections(false);
        org.elasticsearch.common.settings.Settings settings30 = null;
        org.elasticsearch.common.settings.Settings settings31 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder32);
        java.util.Set<java.lang.String> strSet34 = builder32.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder32.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject36 = null;
        builder32.setmongoOplogFilter(basicDBObject36);
        boolean boolean38 = builder32.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder32.socketTimeout((int) ' ');
        java.util.Set<java.lang.String> strSet41 = builder40.excludeFields;
        builder40.setriverName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder40.mongoAdminUser("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder40.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str49 = builder48.typeName;
        com.mongodb.BasicDBObject basicDBObject50 = null;
        builder48.mongoCollectionFilter = basicDBObject50;
        java.lang.String str52 = builder48.mongoAdminUser;
        builder48.disableIndexRefresh = false;
        java.lang.String str55 = builder48.getincludeCollection();
        org.elasticsearch.common.settings.Settings settings56 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder57);
        java.util.Set<java.lang.String> strSet59 = builder57.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions60 = builder57.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject61 = null;
        builder57.setmongoOplogFilter(basicDBObject61);
        com.mongodb.BasicDBObject basicDBObject63 = builder57.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings64 = new org.elasticsearch.river.RiverSettings(settings56, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject63);
        builder48.setmongoOplogFilter(basicDBObject63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder40.mongoCollectionFilter(basicDBObject63);
        org.elasticsearch.river.RiverSettings riverSettings67 = new org.elasticsearch.river.RiverSettings(settings31, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject63);
        org.elasticsearch.river.RiverSettings riverSettings68 = new org.elasticsearch.river.RiverSettings(settings30, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject63);
        builder23.mongoCollectionFilter = basicDBObject63;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder17.mongoOplogFilter(basicDBObject63);
        builder17.script = "ssl";
        builder17.mongoDb = "type";
        boolean boolean75 = builder17.importAllCollections;
        builder17.mongoAdminPassword = "gridfs";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(strSet34);
        org.junit.Assert.assertNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(strSet41);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNull(strSet59);
        org.junit.Assert.assertNull(mongoClientOptions60);
        org.junit.Assert.assertNotNull(basicDBObject63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test04286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04286");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.statisticsTypeName("bulk_size");
        builder0.includeCollection = "port";
        builder0.setmongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.riverIndexName("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.typeName;
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder12.mongoCollectionFilter = basicDBObject14;
        java.lang.String str16 = builder12.mongoAdminUser;
        builder12.disableIndexRefresh = false;
        java.lang.String str19 = builder12.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder12.mongoClientOptions;
        builder12.importAllCollections = false;
        builder12.setmongoSecondaryReadPreference(false);
        builder12.setstatisticsTypeName("exclude_fields");
        com.mongodb.BasicDBObject basicDBObject27 = builder12.mongoOplogFilter;
        boolean boolean28 = builder12.getmongoGridFS();
        builder12.script = "flush_interval";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str32 = builder31.typeName;
        com.mongodb.BasicDBObject basicDBObject33 = null;
        builder31.mongoCollectionFilter = basicDBObject33;
        java.lang.String str35 = builder31.mongoAdminUser;
        java.lang.String str36 = builder31.getriverName();
        builder31.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder31.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder31.typeName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder43);
        int int45 = mongoDBRiverDefinition44.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str46 = mongoDBRiverDefinition44.scriptType;
        boolean boolean47 = mongoDBRiverDefinition44.importAllCollections;
        java.lang.String str48 = mongoDBRiverDefinition44.getCOLLECTION_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList49 = mongoDBRiverDefinition44.mongoServers;
        builder42.setmongoServers(serverAddressList49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder51);
        java.util.Set<java.lang.String> strSet53 = builder51.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions54 = builder51.getmongoClientOptions();
        builder51.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str59 = builder58.typeName;
        com.mongodb.BasicDBObject basicDBObject60 = null;
        builder58.mongoCollectionFilter = basicDBObject60;
        java.lang.String str62 = builder58.mongoAdminUser;
        builder58.disableIndexRefresh = false;
        java.lang.String str65 = builder58.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str67 = builder66.typeName;
        com.mongodb.BasicDBObject basicDBObject68 = null;
        builder66.mongoCollectionFilter = basicDBObject68;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder66.mongoUseSSL(true);
        java.lang.String[] strArray81 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet82 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet82, strArray81);
        builder71.setparentTypes((java.util.Set<java.lang.String>) strSet82);
        builder58.parentTypes = strSet82;
        builder51.excludeFields = strSet82;
        builder42.setincludeFields((java.util.Set<java.lang.String>) strSet82);
        builder12.setexcludeFields((java.util.Set<java.lang.String>) strSet82);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder89 = builder10.excludeFields((java.util.Set<java.lang.String>) strSet82);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(mongoClientOptions20);
        org.junit.Assert.assertNull(basicDBObject27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "collection" + "'", str48, "collection");
        org.junit.Assert.assertNotNull(serverAddressList49);
        org.junit.Assert.assertNull(strSet53);
        org.junit.Assert.assertNull(mongoClientOptions54);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test04287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04287");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        java.lang.String str5 = builder0.getriverName();
        builder0.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.typeName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        int int14 = mongoDBRiverDefinition13.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str15 = mongoDBRiverDefinition13.scriptType;
        boolean boolean16 = mongoDBRiverDefinition13.importAllCollections;
        java.lang.String str17 = mongoDBRiverDefinition13.getCOLLECTION_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList18 = mongoDBRiverDefinition13.mongoServers;
        builder11.setmongoServers(serverAddressList18);
        builder11.statisticsIndexName = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder11.statisticsIndexName("script");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "collection" + "'", str17, "collection");
        org.junit.Assert.assertNotNull(serverAddressList18);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test04288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04288");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition2.getMongoCollection();
        java.lang.String str7 = mongoDBRiverDefinition2.getSERVERS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.indexName;
        int int9 = mongoDBRiverDefinition2.getDEFAULT_DB_PORT();
        java.util.List<com.mongodb.ServerAddress> serverAddressList10 = mongoDBRiverDefinition2.mongoServers;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "servers" + "'", str7, "servers");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 27017 + "'", int9 == 27017);
        org.junit.Assert.assertNotNull(serverAddressList10);
    }

    @Test
    public void test04289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04289");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.typeName("secondary_read_preference");
        boolean boolean10 = builder9.skipInitialImport;
        java.lang.String str11 = builder9.getriverName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.mongoLocalUser("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        boolean boolean15 = builder13.getadvancedTransformation();
        boolean boolean16 = builder13.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder13.indexName("options");
        java.lang.String str19 = builder13.getscriptType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test04290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04290");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        java.lang.String str12 = builder0.getscriptType();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.connectTimeout(27017);
        boolean boolean15 = builder14.disableIndexRefresh;
        int int16 = builder14.socketTimeout;
        builder14.settypeName("bulk");
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test04291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04291");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.isMongoSecondaryReadPreference();
        java.lang.String str4 = mongoDBRiverDefinition2.getMongoDb();
        java.lang.String str5 = mongoDBRiverDefinition2.getSCRIPT_TYPE_FIELD();
        org.elasticsearch.common.unit.TimeValue timeValue6 = mongoDBRiverDefinition2.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str7 = mongoDBRiverDefinition2.getFILTER_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.scriptType;
        java.lang.String str9 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.util.List<com.mongodb.ServerAddress> serverAddressList10 = mongoDBRiverDefinition2.getMongoServers();
        java.lang.String str11 = mongoDBRiverDefinition2.getBULK_SIZE_FIELD();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "script_type" + "'", str5, "script_type");
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "filter" + "'", str7, "filter");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(serverAddressList10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "bulk_size" + "'", str11, "bulk_size");
    }

    @Test
    public void test04292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04292");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str4 = mongoDBRiverDefinition1.getNAME_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getBULK_FIELD();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        boolean boolean7 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str8 = mongoDBRiverDefinition1.getLOCAL_DB_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.indexName;
        java.util.Set<java.lang.String> strSet10 = mongoDBRiverDefinition1.getParentTypes();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "name" + "'", str4, "name");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bulk" + "'", str5, "bulk");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "local" + "'", str8, "local");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strSet10);
    }

    @Test
    public void test04293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04293");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        boolean boolean4 = mongoDBRiverDefinition1.importAllCollections;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        boolean boolean6 = mongoDBRiverDefinition1.getstoreStatistics();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "include_fields" + "'", str8, "include_fields");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "parent_types" + "'", str9, "parent_types");
    }

    @Test
    public void test04294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04294");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.storeStatistics(false);
        java.lang.String str9 = builder8.getriverIndexName();
        builder8.setsocketTimeout(0);
        boolean boolean12 = builder8.getadvancedTransformation();
        builder8.setscriptType("parent_types");
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04295");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str4 = mongoDBRiverDefinition3.getTHROTTLE_SIZE_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition3.getSKIP_INITIAL_IMPORT_FIELD();
        boolean boolean6 = mongoDBRiverDefinition3.isDropCollection();
        java.lang.String str7 = mongoDBRiverDefinition3.mongoCollection;
        java.lang.String str8 = mongoDBRiverDefinition3.getDEFAULT_DB_HOST();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "throttle_size" + "'", str4, "throttle_size");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "skip_initial_import" + "'", str5, "skip_initial_import");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "localhost" + "'", str8, "localhost");
    }

    @Test
    public void test04296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04296");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setriverIndexName("local");
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        builder0.mongoClientOptions = mongoClientOptions9;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.riverIndexName("null.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.storeStatistics(false);
        java.lang.String str15 = builder14.getstatisticsIndexName();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test04297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04297");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str3 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str4 = mongoDBRiverDefinition1.mongoLocalUser;
        boolean boolean5 = mongoDBRiverDefinition1.getdropCollection();
        java.lang.String str6 = mongoDBRiverDefinition1.mongoCollection;
        java.lang.String str7 = mongoDBRiverDefinition1.mongoDb;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test04298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04298");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.lang.String str9 = builder8.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoCollection("drop_collection");
        builder8.setincludeCollection("parent_types");
        builder8.setconnectTimeout((int) (short) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str17 = builder16.typeName;
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder16.mongoCollectionFilter = basicDBObject18;
        com.mongodb.BasicDBObject basicDBObject20 = null;
        builder16.mongoOplogFilter = basicDBObject20;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = builder16.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder16.advancedTransformation(false);
        builder24.setmongoAdminUser("bulk");
        builder24.setskipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder29);
        java.util.Set<java.lang.String> strSet31 = builder29.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder29.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject33 = null;
        builder29.setmongoOplogFilter(basicDBObject33);
        boolean boolean35 = builder29.dropCollection;
        boolean boolean36 = builder29.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder29.mongoLocalPassword("");
        boolean boolean39 = builder38.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder40);
        java.util.Set<java.lang.String> strSet42 = builder40.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions43 = builder40.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject44 = null;
        builder40.setmongoOplogFilter(basicDBObject44);
        boolean boolean46 = builder40.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray47 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList48 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList48, serverAddressArray47);
        builder40.mongoServers = serverAddressList48;
        java.lang.String str51 = builder40.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str53 = builder52.typeName;
        com.mongodb.BasicDBObject basicDBObject54 = null;
        builder52.mongoCollectionFilter = basicDBObject54;
        java.lang.String str56 = builder52.mongoAdminUser;
        builder52.disableIndexRefresh = false;
        java.lang.String str59 = builder52.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str61 = builder60.typeName;
        com.mongodb.BasicDBObject basicDBObject62 = null;
        builder60.mongoCollectionFilter = basicDBObject62;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder60.mongoUseSSL(true);
        java.lang.String[] strArray75 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet76 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet76, strArray75);
        builder65.setparentTypes((java.util.Set<java.lang.String>) strSet76);
        builder52.parentTypes = strSet76;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder40.parentTypes((java.util.Set<java.lang.String>) strSet76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder80.mongoGridFS(true);
        com.mongodb.BasicDBObject basicDBObject83 = builder80.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder38.mongoOplogFilter(basicDBObject83);
        builder84.mongoAdminUser = "advanced_transformation";
        com.mongodb.BasicDBObject basicDBObject87 = builder84.mongoOplogFilter;
        builder24.setmongoOplogFilter(basicDBObject87);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder89 = builder8.mongoCollectionFilter(basicDBObject87);
        java.lang.String str90 = builder89.gettypeName();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(strSet42);
        org.junit.Assert.assertNull(mongoClientOptions43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(serverAddressArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(basicDBObject83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(basicDBObject87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNull(str90);
    }

    @Test
    public void test04299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04299");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.typeName;
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder6.mongoCollectionFilter = basicDBObject8;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoAdminPassword("db");
        docScoreSearchScript0.setNextVar("bulk_size", (java.lang.Object) builder6);
        java.lang.Object obj14 = null;
        docScoreSearchScript0.setNextVar("gridfs", obj14);
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextDocId((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test04300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04300");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        int int8 = builder0.socketTimeout;
        java.lang.String str9 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoAdminPassword("local");
        java.lang.String str12 = builder0.mongoLocalUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.scriptType = "throttle_size";
        int int16 = builder0.getthrottleSize();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test04301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04301");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        int int6 = builder0.getsocketTimeout();
        builder0.socketTimeout = (short) 10;
        java.lang.String str9 = builder0.getstatisticsIndexName();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test04302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04302");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.typeName;
        com.mongodb.BasicDBObject basicDBObject5 = null;
        builder3.mongoCollectionFilter = basicDBObject5;
        java.lang.String str7 = builder3.mongoAdminUser;
        builder3.disableIndexRefresh = false;
        java.lang.String str10 = builder3.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder3.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.util.Set<java.lang.String> strSet14 = builder12.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder12.setmongoOplogFilter(basicDBObject16);
        boolean boolean18 = builder12.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray19 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList20 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList20, serverAddressArray19);
        builder12.mongoServers = serverAddressList20;
        java.lang.String str23 = builder12.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str25 = builder24.typeName;
        com.mongodb.BasicDBObject basicDBObject26 = null;
        builder24.mongoCollectionFilter = basicDBObject26;
        java.lang.String str28 = builder24.mongoAdminUser;
        builder24.disableIndexRefresh = false;
        java.lang.String str31 = builder24.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str33 = builder32.typeName;
        com.mongodb.BasicDBObject basicDBObject34 = null;
        builder32.mongoCollectionFilter = basicDBObject34;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder32.mongoUseSSL(true);
        java.lang.String[] strArray47 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        builder37.setparentTypes((java.util.Set<java.lang.String>) strSet48);
        builder24.parentTypes = strSet48;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder12.parentTypes((java.util.Set<java.lang.String>) strSet48);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder0.includeFields((java.util.Set<java.lang.String>) strSet48);
        builder0.settypeName("secondary_read_preference");
        builder0.mongoLocalUser = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean60 = mongoDBRiverDefinition59.getmongoUseSSL();
        boolean boolean61 = mongoDBRiverDefinition59.isMongoSSLVerifyCertificate();
        boolean boolean62 = mongoDBRiverDefinition59.getmongoGridFS();
        boolean boolean63 = mongoDBRiverDefinition59.isMongoGridFS();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(mongoClientOptions11);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(serverAddressArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test04303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04303");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoGridFS(true);
        java.lang.String str9 = builder0.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setconnectTimeout(100);
        java.util.Set<java.lang.String> strSet13 = builder0.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str15 = mongoDBRiverDefinition14.getMongoLocalPassword();
        boolean boolean16 = mongoDBRiverDefinition14.isAdvancedTransformation();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test04304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04304");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoAdminPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.riverName;
        java.lang.String str5 = mongoDBRiverDefinition2.riverIndexName;
        java.lang.String str6 = mongoDBRiverDefinition2.getFLUSH_INTERVAL_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.riverIndexName;
        java.lang.String str8 = mongoDBRiverDefinition2.getPARENT_TYPES_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition2.getUSER_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "flush_interval" + "'", str6, "flush_interval");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "parent_types" + "'", str8, "parent_types");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "user" + "'", str9, "user");
    }

    @Test
    public void test04305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04305");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        boolean boolean4 = mongoDBRiverDefinition1.importAllCollections;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        boolean boolean6 = mongoDBRiverDefinition1.getstoreStatistics();
        java.lang.String str7 = mongoDBRiverDefinition1.mongoAdminPassword;
        boolean boolean8 = mongoDBRiverDefinition1.isMongoUseSSL();
        org.elasticsearch.common.unit.TimeValue timeValue9 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean10 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition1.excludeFields;
        java.util.List<com.mongodb.ServerAddress> serverAddressList12 = mongoDBRiverDefinition1.getMongoServers();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(serverAddressList12);
    }

    @Test
    public void test04306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04306");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str4 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.lang.String str6 = mongoDBRiverDefinition1.getBULK_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp7 = mongoDBRiverDefinition1.getInitialTimestamp();
        boolean boolean8 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str9 = mongoDBRiverDefinition1.getIncludeCollection();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "initial_timestamp" + "'", str4, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "bulk" + "'", str6, "bulk");
        org.junit.Assert.assertNull(wildcardTimestamp7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test04307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04307");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        int int6 = builder0.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder7.setmongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str15 = builder14.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str18 = builder17.typeName;
        com.mongodb.BasicDBObject basicDBObject19 = null;
        builder17.mongoCollectionFilter = basicDBObject19;
        com.mongodb.BasicDBObject basicDBObject21 = null;
        builder17.mongoOplogFilter = basicDBObject21;
        builder17.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList25 = builder17.mongoServers;
        java.lang.String[] strArray29 = new java.lang.String[] { "connect_timeout", "credentials", "connect_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        builder17.setparentTypes((java.util.Set<java.lang.String>) strSet30);
        builder14.parentTypes = strSet30;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.connectTimeout((int) '#');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.mongoAdminUser("credentials");
        boolean boolean40 = builder39.importAllCollections;
        builder39.mongoSecondaryReadPreference = true;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(serverAddressList25);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test04308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04308");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.util.Set<java.lang.String> strSet11 = builder9.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder9.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject13 = null;
        builder9.setmongoOplogFilter(basicDBObject13);
        boolean boolean15 = builder9.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray16 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList17 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList17, serverAddressArray16);
        builder9.mongoServers = serverAddressList17;
        java.lang.String str20 = builder9.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.typeName;
        com.mongodb.BasicDBObject basicDBObject23 = null;
        builder21.mongoCollectionFilter = basicDBObject23;
        java.lang.String str25 = builder21.mongoAdminUser;
        builder21.disableIndexRefresh = false;
        java.lang.String str28 = builder21.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str30 = builder29.typeName;
        com.mongodb.BasicDBObject basicDBObject31 = null;
        builder29.mongoCollectionFilter = basicDBObject31;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder29.mongoUseSSL(true);
        java.lang.String[] strArray44 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        builder34.setparentTypes((java.util.Set<java.lang.String>) strSet45);
        builder21.parentTypes = strSet45;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder9.parentTypes((java.util.Set<java.lang.String>) strSet45);
        builder0.setexcludeFields((java.util.Set<java.lang.String>) strSet45);
        boolean boolean51 = builder0.getimportAllCollections();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(serverAddressArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test04309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04309");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        builder0.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        com.mongodb.BasicDBObject basicDBObject10 = null;
        builder0.mongoCollectionFilter = basicDBObject10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.riverName("concurrent_requests");
        builder0.setscriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.util.Set<java.lang.String> strSet20 = builder18.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder18.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject22 = null;
        builder18.setmongoOplogFilter(basicDBObject22);
        boolean boolean24 = builder18.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray25 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList26 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList26, serverAddressArray25);
        builder18.mongoServers = serverAddressList26;
        java.lang.String str29 = builder18.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder18.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder18.script("hi!");
        builder33.mongoAdminPassword = "bulk_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder33.mongoLocalUser("password");
        boolean boolean38 = builder37.mongoUseSSL;
        builder37.setmongoAdminUser("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder41);
        java.util.Set<java.lang.String> strSet43 = builder41.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder41.getmongoClientOptions();
        builder41.setriverName("");
        builder41.setmongoAdminUser("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str50 = builder49.typeName;
        com.mongodb.BasicDBObject basicDBObject51 = null;
        builder49.mongoCollectionFilter = basicDBObject51;
        com.mongodb.BasicDBObject basicDBObject53 = null;
        builder49.mongoOplogFilter = basicDBObject53;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition55 = builder49.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder49.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder57.socketTimeout((int) (short) 0);
        java.lang.String str60 = builder57.indexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder61.setmongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder61.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder61.skipInitialImport(false);
        builder61.skipInitialImport = true;
        com.mongodb.MongoClientOptions mongoClientOptions70 = null;
        builder61.mongoClientOptions = mongoClientOptions70;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str73 = builder72.typeName;
        com.mongodb.BasicDBObject basicDBObject74 = null;
        builder72.mongoCollectionFilter = basicDBObject74;
        com.mongodb.BasicDBObject basicDBObject76 = null;
        builder72.mongoOplogFilter = basicDBObject76;
        builder72.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList80 = builder72.mongoServers;
        java.lang.String[] strArray84 = new java.lang.String[] { "connect_timeout", "credentials", "connect_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet85 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet85, strArray84);
        builder72.setparentTypes((java.util.Set<java.lang.String>) strSet85);
        int int88 = builder72.throttleSize;
        java.lang.String str89 = builder72.getmongoDb();
        java.util.Set<java.lang.String> strSet90 = builder72.parentTypes;
        builder61.includeFields = strSet90;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder92 = builder57.includeFields(strSet90);
        builder41.setparentTypes(strSet90);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder94 = builder37.parentTypes(strSet90);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder95 = builder0.excludeFields(strSet90);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder97 = builder0.indexName("local");
        builder97.setstatisticsIndexName("filter");
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(serverAddressArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertNull(mongoClientOptions44);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(serverAddressList80);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNotNull(strSet90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test04310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04310");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = builder0.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.advancedTransformation(false);
        builder8.setmongoAdminUser("bulk");
        builder8.setmongoGridFS(false);
        com.mongodb.BasicDBObject basicDBObject13 = builder8.mongoCollectionFilter;
        boolean boolean14 = builder8.skipInitialImport;
        builder8.setstatisticsTypeName("drop_collection");
        boolean boolean17 = builder8.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str19 = mongoDBRiverDefinition18.getDEFAULT_DB_HOST();
        java.lang.String str20 = mongoDBRiverDefinition18.getTYPE_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(basicDBObject13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "localhost" + "'", str19, "localhost");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "type" + "'", str20, "type");
    }

    @Test
    public void test04311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04311");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        builder5.importAllCollections = false;
        com.mongodb.BasicDBObject basicDBObject8 = builder5.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.indexName("");
        java.util.Set<java.lang.String> strSet11 = builder5.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        boolean boolean13 = mongoDBRiverDefinition12.getdisableIndexRefresh();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(basicDBObject8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test04312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04312");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoSecondaryReadPreference(false);
        boolean boolean10 = builder9.dropCollection;
        boolean boolean11 = builder9.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.connectTimeout((int) (short) -1);
        builder13.setscript("exclude_fields");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test04313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04313");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        java.lang.String str5 = builder0.getriverName();
        builder0.setscriptType("connect_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoLocalUser("advanced_transformation");
        builder0.statisticsTypeName = "parent_types";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test04314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04314");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.typeName;
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder6.mongoCollectionFilter = basicDBObject8;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoAdminPassword("db");
        docScoreSearchScript0.setNextVar("bulk_size", (java.lang.Object) builder6);
        java.lang.Object obj14 = null;
        docScoreSearchScript0.setNextVar("gridfs", obj14);
        docScoreSearchScript0.setNextScore((float) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj18 = docScoreSearchScript0.run();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test04315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04315");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        java.lang.String str6 = mongoDBRiverDefinition5.getCONNECTION_TIMEOUT();
        int int7 = mongoDBRiverDefinition5.getConnectTimeout();
        java.lang.String str8 = mongoDBRiverDefinition5.getSTORE_STATISTICS_FIELD();
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition5.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings10 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject9);
        org.elasticsearch.script.ScriptService scriptService11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("", "host", riverSettings10, scriptService11);
        java.lang.String str13 = mongoDBRiverDefinition12.getGRIDFS_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions14 = mongoDBRiverDefinition12.mongoClientOptions;
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "connect_timeout" + "'", str6, "connect_timeout");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "store_statistics" + "'", str8, "store_statistics");
        org.junit.Assert.assertNotNull(basicDBObject9);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "gridfs" + "'", str13, "gridfs");
        org.junit.Assert.assertNull(mongoClientOptions14);
    }

    @Test
    public void test04316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04316");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.statisticsIndexName("port");
        boolean boolean9 = builder8.getmongoGridFS();
        java.util.Set<java.lang.String> strSet10 = builder8.getincludeFields();
        builder8.setmongoGridFS(true);
        org.elasticsearch.common.settings.Settings settings13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        java.util.Set<java.lang.String> strSet16 = builder14.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder14.setmongoOplogFilter(basicDBObject18);
        boolean boolean20 = builder14.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder14.socketTimeout((int) ' ');
        java.util.Set<java.lang.String> strSet23 = builder22.excludeFields;
        builder22.setriverName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder22.mongoAdminUser("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder22.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str31 = builder30.typeName;
        com.mongodb.BasicDBObject basicDBObject32 = null;
        builder30.mongoCollectionFilter = basicDBObject32;
        java.lang.String str34 = builder30.mongoAdminUser;
        builder30.disableIndexRefresh = false;
        java.lang.String str37 = builder30.getincludeCollection();
        org.elasticsearch.common.settings.Settings settings38 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder39);
        java.util.Set<java.lang.String> strSet41 = builder39.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder39.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject43 = null;
        builder39.setmongoOplogFilter(basicDBObject43);
        com.mongodb.BasicDBObject basicDBObject45 = builder39.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings46 = new org.elasticsearch.river.RiverSettings(settings38, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject45);
        builder30.setmongoOplogFilter(basicDBObject45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder22.mongoCollectionFilter(basicDBObject45);
        org.elasticsearch.river.RiverSettings riverSettings49 = new org.elasticsearch.river.RiverSettings(settings13, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject45);
        builder8.mongoCollectionFilter = basicDBObject45;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(strSet41);
        org.junit.Assert.assertNull(mongoClientOptions42);
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test04317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04317");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        int int4 = mongoDBRiverDefinition2.getConnectTimeout();
        boolean boolean5 = mongoDBRiverDefinition2.advancedTransformation;
        java.lang.String str6 = mongoDBRiverDefinition2.getCOLLECTION_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.getmongoSecondaryReadPreference();
        java.lang.String str9 = mongoDBRiverDefinition2.getStatisticsTypeName();
        boolean boolean10 = mongoDBRiverDefinition2.isMongoGridFS();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "collection" + "'", str6, "collection");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "secondary_read_preference" + "'", str7, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test04318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04318");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        int int9 = builder0.connectTimeout;
        boolean boolean10 = builder0.dropCollection;
        builder0.setdisableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.mongoUseSSL(false);
        boolean boolean15 = builder14.skipInitialImport;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test04319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04319");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        boolean boolean7 = mongoDBRiverDefinition2.disableIndexRefresh;
        java.lang.String str8 = mongoDBRiverDefinition2.getHOST_FIELD();
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition2.parentTypes;
        int int10 = mongoDBRiverDefinition2.getDEFAULT_CONCURRENT_REQUESTS();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script_type" + "'", str6, "script_type");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "host" + "'", str8, "host");
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
    }

    @Test
    public void test04320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04320");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = mongoDBRiverDefinition2.getDEFAULT_BULK_SIZE();
        java.lang.String str6 = mongoDBRiverDefinition2.indexName;
        java.lang.String str7 = mongoDBRiverDefinition2.getBULK_SIZE_FIELD();
        int int8 = mongoDBRiverDefinition2.getDEFAULT_CONCURRENT_REQUESTS();
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition2.getMongoOplogFilter();
        java.lang.String str10 = mongoDBRiverDefinition2.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition2.getParentTypes();
        com.mongodb.BasicDBObject basicDBObject13 = mongoDBRiverDefinition2.getMongoOplogFilter();
        java.lang.String str14 = mongoDBRiverDefinition2.getTHROTTLE_SIZE_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertNotNull(byteSizeValue5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "bulk_size" + "'", str7, "bulk_size");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNull(basicDBObject9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ssl_verify_certificate" + "'", str10, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "script_type" + "'", str11, "script_type");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(basicDBObject13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "throttle_size" + "'", str14, "throttle_size");
    }

    @Test
    public void test04321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04321");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition2.getMongoCollection();
        boolean boolean7 = mongoDBRiverDefinition2.getstoreStatistics();
        boolean boolean8 = mongoDBRiverDefinition2.isSkipInitialImport();
        java.lang.String str9 = mongoDBRiverDefinition2.mongoDb;
        java.lang.String str10 = mongoDBRiverDefinition2.getBULK_TIMEOUT_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "bulk_timeout" + "'", str10, "bulk_timeout");
    }

    @Test
    public void test04322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04322");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        builder0.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        com.mongodb.BasicDBObject basicDBObject10 = null;
        builder0.mongoCollectionFilter = basicDBObject10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.riverName("concurrent_requests");
        int int14 = builder13.getsocketTimeout();
        builder13.typeName = "hi!";
        builder13.mongoAdminPassword = "";
        java.util.Set<java.lang.String> strSet19 = builder13.getexcludeFields();
        builder13.setmongoSSLVerifyCertificate(true);
        builder13.setmongoAdminUser("connect_timeout");
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNull(strSet19);
    }

    @Test
    public void test04323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04323");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        builder8.setsocketTimeout(0);
        java.lang.String str11 = builder8.includeCollection;
        builder8.setconnectTimeout((int) (byte) 0);
        com.mongodb.BasicDBObject basicDBObject14 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str16 = builder15.typeName;
        com.mongodb.BasicDBObject basicDBObject17 = null;
        builder15.mongoCollectionFilter = basicDBObject17;
        java.lang.String str19 = builder15.mongoAdminUser;
        builder15.disableIndexRefresh = false;
        java.lang.String str22 = builder15.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder15.getmongoClientOptions();
        int int24 = builder15.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder26);
        java.util.Set<java.lang.String> strSet28 = builder26.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder26.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject30 = null;
        builder26.setmongoOplogFilter(basicDBObject30);
        boolean boolean32 = builder26.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder26.socketTimeout((int) ' ');
        java.util.Set<java.lang.String> strSet35 = builder34.excludeFields;
        builder34.setriverName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder34.mongoAdminUser("concurrent_bulk_requests");
        com.mongodb.BasicDBObject basicDBObject40 = builder34.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str42 = builder41.typeName;
        com.mongodb.BasicDBObject basicDBObject43 = null;
        builder41.mongoCollectionFilter = basicDBObject43;
        java.lang.String str45 = builder41.mongoAdminUser;
        builder41.disableIndexRefresh = false;
        java.lang.String str48 = builder41.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions49 = builder41.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        java.util.Set<java.lang.String> strSet52 = builder50.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions53 = builder50.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject54 = null;
        builder50.setmongoOplogFilter(basicDBObject54);
        boolean boolean56 = builder50.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray57 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList58 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList58, serverAddressArray57);
        builder50.mongoServers = serverAddressList58;
        java.lang.String str61 = builder50.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str63 = builder62.typeName;
        com.mongodb.BasicDBObject basicDBObject64 = null;
        builder62.mongoCollectionFilter = basicDBObject64;
        java.lang.String str66 = builder62.mongoAdminUser;
        builder62.disableIndexRefresh = false;
        java.lang.String str69 = builder62.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str71 = builder70.typeName;
        com.mongodb.BasicDBObject basicDBObject72 = null;
        builder70.mongoCollectionFilter = basicDBObject72;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder70.mongoUseSSL(true);
        java.lang.String[] strArray85 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet86 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet86, strArray85);
        builder75.setparentTypes((java.util.Set<java.lang.String>) strSet86);
        builder62.parentTypes = strSet86;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder50.parentTypes((java.util.Set<java.lang.String>) strSet86);
        builder41.setexcludeFields((java.util.Set<java.lang.String>) strSet86);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder92 = builder34.parentTypes((java.util.Set<java.lang.String>) strSet86);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder93 = builder15.includeFields((java.util.Set<java.lang.String>) strSet86);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder94 = builder8.includeFields((java.util.Set<java.lang.String>) strSet86);
        builder8.setthrottleSize((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition97 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        builder8.setincludeCollection("skip_initial_import");
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(strSet35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(basicDBObject40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNull(mongoClientOptions49);
        org.junit.Assert.assertNull(strSet52);
        org.junit.Assert.assertNull(mongoClientOptions53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(serverAddressArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test04324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04324");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        boolean boolean4 = mongoDBRiverDefinition1.importAllCollections;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        java.lang.String str6 = mongoDBRiverDefinition1.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getSIZE_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getCREDENTIALS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ssl_verify_certificate" + "'", str6, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "size" + "'", str7, "size");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "skip_initial_import" + "'", str8, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "credentials" + "'", str9, "credentials");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "script" + "'", str10, "script");
    }

    @Test
    public void test04325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04325");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.typeName;
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder6.mongoCollectionFilter = basicDBObject8;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoAdminPassword("db");
        docScoreSearchScript0.setNextVar("bulk_size", (java.lang.Object) builder6);
        java.lang.Object obj14 = null;
        docScoreSearchScript0.setNextVar("gridfs", obj14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str18 = builder17.typeName;
        com.mongodb.BasicDBObject basicDBObject19 = null;
        builder17.mongoCollectionFilter = basicDBObject19;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder17.mongoAdminPassword("db");
        builder22.disableIndexRefresh = true;
        builder22.setconnectTimeout(1000);
        builder22.setriverIndexName("skip_initial_import");
        docScoreSearchScript0.setNextVar("bulk_timeout", (java.lang.Object) builder22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder30);
        java.util.Set<java.lang.String> strSet32 = builder30.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder30.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject34 = null;
        builder30.setmongoOplogFilter(basicDBObject34);
        com.mongodb.BasicDBObject basicDBObject36 = builder30.getmongoCollectionFilter();
        builder30.setskipInitialImport(false);
        java.lang.String str39 = builder30.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder30);
        boolean boolean41 = mongoDBRiverDefinition40.mongoGridFS;
        java.lang.Object obj42 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition40);
        docScoreSearchScript0.setNextScore((float) ' ');
        docScoreSearchScript0.setNextScore((float) (byte) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str49 = builder48.typeName;
        com.mongodb.BasicDBObject basicDBObject50 = null;
        builder48.mongoCollectionFilter = basicDBObject50;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder48.mongoUseSSL(true);
        builder48.connectTimeout = (byte) -1;
        builder48.setsocketTimeout((int) (short) 1);
        java.lang.String str58 = builder48.getstatisticsTypeName();
        boolean boolean59 = builder48.getmongoGridFS();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder48.mongoLocalUser("name");
        builder48.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder48.statisticsTypeName("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition67 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder66);
        builder66.importAllCollections = false;
        docScoreSearchScript0.setNextVar("credentials", (java.lang.Object) builder66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition71 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder66);
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertNull(mongoClientOptions33);
        org.junit.Assert.assertNotNull(basicDBObject36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test04326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04326");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.riverIndexName("disable_index_refresh");
        java.lang.String str7 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str9 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "admin" + "'", str9, "admin");
    }

    @Test
    public void test04327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04327");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        builder0.setsocketTimeout((int) (short) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoAdminUser("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.typeName;
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder12.mongoCollectionFilter = basicDBObject14;
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder12.mongoOplogFilter = basicDBObject16;
        builder12.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList20 = builder12.mongoServers;
        boolean boolean21 = builder12.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder22);
        int int24 = mongoDBRiverDefinition23.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str25 = mongoDBRiverDefinition23.scriptType;
        boolean boolean26 = mongoDBRiverDefinition23.importAllCollections;
        java.lang.String str27 = mongoDBRiverDefinition23.getCOLLECTION_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList28 = mongoDBRiverDefinition23.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder12.mongoServers(serverAddressList28);
        builder0.setmongoServers(serverAddressList28);
        com.mongodb.MongoClientOptions mongoClientOptions31 = null;
        builder0.mongoClientOptions = mongoClientOptions31;
        java.lang.String str33 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder0.statisticsIndexName("drop_collection");
        builder0.riverName = "include_fields";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(serverAddressList20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "collection" + "'", str27, "collection");
        org.junit.Assert.assertNotNull(serverAddressList28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test04328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04328");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.typeName;
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder12.mongoCollectionFilter = basicDBObject14;
        java.lang.String str16 = builder12.mongoAdminUser;
        builder12.disableIndexRefresh = false;
        java.lang.String str19 = builder12.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.typeName;
        com.mongodb.BasicDBObject basicDBObject22 = null;
        builder20.mongoCollectionFilter = basicDBObject22;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder20.mongoUseSSL(true);
        java.lang.String[] strArray35 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        builder25.setparentTypes((java.util.Set<java.lang.String>) strSet36);
        builder12.parentTypes = strSet36;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder0.includeCollection("type");
        builder0.disableIndexRefresh = false;
        java.util.Set<java.lang.String> strSet45 = builder0.parentTypes;
        java.util.Set<java.lang.String> strSet46 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder0.mongoUseSSL(true);
        java.lang.String str49 = builder48.getriverIndexName();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test04329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04329");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        java.util.Set<java.lang.String> strSet6 = builder5.getincludeFields();
        com.mongodb.BasicDBObject basicDBObject7 = builder5.getmongoCollectionFilter();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(basicDBObject7);
    }

    @Test
    public void test04330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04330");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        builder0.setsocketTimeout(0);
        boolean boolean4 = builder0.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean6 = builder0.getskipInitialImport();
        builder0.setstoreStatistics(false);
        builder0.setmongoLocalPassword("exclude_fields");
        builder0.setmongoDb("filter");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test04331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04331");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.typeName("secondary_read_preference");
        builder0.mongoSSLVerifyCertificate = false;
        boolean boolean12 = builder0.getadvancedTransformation();
        builder0.scriptType = "name";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04332");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        builder0.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.MongoClientOptions mongoClientOptions8 = mongoDBRiverDefinition7.getMongoClientOptions();
        boolean boolean9 = mongoDBRiverDefinition7.getmongoGridFS();
        boolean boolean10 = mongoDBRiverDefinition7.getimportAllCollections();
        java.lang.String str11 = mongoDBRiverDefinition7.getFLUSH_INTERVAL_FIELD();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "flush_interval" + "'", str11, "flush_interval");
    }

    @Test
    public void test04333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04333");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoAdminPassword;
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition2.excludeFields;
        java.lang.String str5 = mongoDBRiverDefinition2.getFILTER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getMongoLocalUser();
        java.lang.String str7 = mongoDBRiverDefinition2.getSERVERS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.getIndexName();
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition2.mongoOplogFilter;
        boolean boolean10 = mongoDBRiverDefinition2.getdisableIndexRefresh();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "filter" + "'", str5, "filter");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "servers" + "'", str7, "servers");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(basicDBObject9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test04334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04334");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        java.lang.String str6 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getSECONDARY_READ_PREFERENCE_FIELD();
        java.util.Set<java.lang.String> strSet8 = mongoDBRiverDefinition1.includeFields;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ssl" + "'", str6, "ssl");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "secondary_read_preference" + "'", str7, "secondary_read_preference");
        org.junit.Assert.assertNull(strSet8);
    }

    @Test
    public void test04335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04335");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoGridFS(true);
        java.lang.String str9 = builder0.riverIndexName;
        builder0.skipInitialImport = true;
        boolean boolean12 = builder0.getskipInitialImport();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test04336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04336");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        int int8 = builder0.socketTimeout;
        java.lang.String str9 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoAdminPassword("local");
        java.lang.String str12 = builder11.mongoLocalPassword;
        java.util.Set<java.lang.String> strSet13 = builder11.getincludeFields();
        boolean boolean14 = builder11.dropCollection;
        java.util.Set<java.lang.String> strSet15 = builder11.parentTypes;
        com.mongodb.BasicDBObject basicDBObject16 = builder11.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        java.util.Set<java.lang.String> strSet18 = mongoDBRiverDefinition17.parentTypes;
        java.lang.String str19 = mongoDBRiverDefinition17.mongoAdminUser;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNull(basicDBObject16);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test04337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04337");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        builder5.importAllCollections = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.connectTimeout(1);
        boolean boolean10 = builder9.getadvancedTransformation();
        java.lang.String str11 = builder9.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.lang.String str13 = mongoDBRiverDefinition12.getTHROTTLE_SIZE_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "throttle_size" + "'", str13, "throttle_size");
    }

    @Test
    public void test04338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04338");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.isMongoSecondaryReadPreference();
        java.lang.String str4 = mongoDBRiverDefinition2.getMongoDb();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = mongoDBRiverDefinition2.initialTimestamp;
        org.elasticsearch.common.logging.ESLogger eSLogger6 = mongoDBRiverDefinition2.getlogger();
        java.lang.String str7 = mongoDBRiverDefinition2.statisticsTypeName;
        java.lang.String str8 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        int int9 = mongoDBRiverDefinition2.throttleSize;
        java.util.Set<java.lang.String> strSet10 = mongoDBRiverDefinition2.getExcludeFields();
        com.mongodb.MongoClientOptions mongoClientOptions11 = mongoDBRiverDefinition2.getMongoClientOptions();
        java.lang.String str12 = mongoDBRiverDefinition2.getSKIP_INITIAL_IMPORT_FIELD();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition2.getParentTypes();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(eSLogger6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "disable_index_refresh" + "'", str8, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNull(mongoClientOptions11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "skip_initial_import" + "'", str12, "skip_initial_import");
        org.junit.Assert.assertNull(strSet13);
    }

    @Test
    public void test04339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04339");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.isMongoSecondaryReadPreference();
        java.lang.String str4 = mongoDBRiverDefinition2.getRiverIndexName();
        boolean boolean5 = mongoDBRiverDefinition2.isMongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition2.isMongoSSLVerifyCertificate();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test04340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04340");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder5.setmongoAdminUser("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getMongoLocalPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test04341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04341");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        boolean boolean4 = mongoDBRiverDefinition1.importAllCollections;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        boolean boolean6 = mongoDBRiverDefinition1.getstoreStatistics();
        java.lang.String str7 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean8 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        java.lang.String str9 = mongoDBRiverDefinition1.getSTORE_STATISTICS_FIELD();
        boolean boolean10 = mongoDBRiverDefinition1.isDropCollection();
        int int11 = mongoDBRiverDefinition1.throttleSize;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "store_statistics" + "'", str9, "store_statistics");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test04342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04342");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        builder0.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.util.Set<java.lang.String> strSet14 = builder12.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder12.setmongoOplogFilter(basicDBObject16);
        com.mongodb.BasicDBObject basicDBObject18 = builder12.getmongoCollectionFilter();
        builder11.mongoCollectionFilter = basicDBObject18;
        org.elasticsearch.river.RiverSettings riverSettings20 = new org.elasticsearch.river.RiverSettings(settings10, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoCollectionFilter(basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        java.util.Set<java.lang.String> strSet23 = mongoDBRiverDefinition22.getIncludeFields();
        boolean boolean24 = mongoDBRiverDefinition22.isSkipInitialImport();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test04343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04343");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.typeName;
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder6.mongoCollectionFilter = basicDBObject8;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoAdminPassword("db");
        docScoreSearchScript0.setNextVar("bulk_size", (java.lang.Object) builder6);
        java.lang.Object obj14 = null;
        docScoreSearchScript0.setNextVar("gridfs", obj14);
        docScoreSearchScript0.setNextScore((float) 'a');
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext18 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test04344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04344");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = mongoDBRiverDefinition1.getExcludeFields();
        boolean boolean3 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        java.lang.String str4 = mongoDBRiverDefinition1.getScript();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test04345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04345");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        builder0.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        java.util.Set<java.lang.String> strSet10 = builder0.parentTypes;
        boolean boolean11 = builder0.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.throttleSize((int) '#');
        int int14 = builder13.getthrottleSize();
        org.elasticsearch.common.settings.Settings settings15 = null;
        org.elasticsearch.common.settings.Settings settings16 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        java.util.Set<java.lang.String> strSet19 = builder17.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder17.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject21 = null;
        builder17.setmongoOplogFilter(basicDBObject21);
        boolean boolean23 = builder17.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray24 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList25 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList25, serverAddressArray24);
        builder17.mongoServers = serverAddressList25;
        java.lang.String str28 = builder17.mongoAdminPassword;
        java.lang.String str29 = builder17.getscriptType();
        java.lang.String str30 = builder17.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder17.scriptType("throttle_size");
        boolean boolean33 = builder32.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder32.mongoCollection("host");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory36 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings37 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.util.Set<java.lang.String> strSet40 = builder38.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder38.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject42 = null;
        builder38.setmongoOplogFilter(basicDBObject42);
        boolean boolean44 = builder38.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder38.socketTimeout((int) ' ');
        java.lang.String str47 = builder46.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder46.mongoCollection("drop_collection");
        com.mongodb.BasicDBObject basicDBObject50 = builder46.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings51 = new org.elasticsearch.river.RiverSettings(settings37, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject50);
        org.elasticsearch.script.ExecutableScript executableScript52 = docScoreNativeScriptFactory36.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject50);
        builder35.setmongoCollectionFilter(basicDBObject50);
        org.elasticsearch.river.RiverSettings riverSettings54 = new org.elasticsearch.river.RiverSettings(settings16, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject50);
        org.elasticsearch.river.RiverSettings riverSettings55 = new org.elasticsearch.river.RiverSettings(settings15, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder13.mongoOplogFilter(basicDBObject50);
        boolean boolean57 = builder13.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serverAddressArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertNull(mongoClientOptions41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(basicDBObject50);
        org.junit.Assert.assertNotNull(executableScript52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test04346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04346");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("hi!", "connect_timeout");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?connect_timeout?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test04347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04347");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.typeName("secondary_read_preference");
        boolean boolean10 = builder9.skipInitialImport;
        java.lang.String str11 = builder9.getriverName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.mongoLocalUser("local");
        java.lang.String str14 = builder13.getmongoLocalPassword();
        builder13.riverName = "host";
        builder13.mongoDb = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder13.mongoLocalUser("concurrent_requests");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test04348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04348");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        builder0.setmongoClientOptions(mongoClientOptions9);
        com.mongodb.BasicDBObject basicDBObject11 = builder0.mongoOplogFilter;
        builder0.mongoDb = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoDb = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str19 = builder18.typeName;
        com.mongodb.BasicDBObject basicDBObject20 = null;
        builder18.mongoCollectionFilter = basicDBObject20;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder18.mongoUseSSL(true);
        builder18.connectTimeout = (byte) -1;
        int int26 = builder18.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder18.statisticsIndexName("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str30 = builder29.typeName;
        com.mongodb.BasicDBObject basicDBObject31 = null;
        builder29.mongoCollectionFilter = basicDBObject31;
        java.lang.String str33 = builder29.mongoAdminUser;
        java.lang.String str34 = builder29.getriverName();
        builder29.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder29.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder29.typeName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder41);
        int int43 = mongoDBRiverDefinition42.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str44 = mongoDBRiverDefinition42.scriptType;
        boolean boolean45 = mongoDBRiverDefinition42.importAllCollections;
        java.lang.String str46 = mongoDBRiverDefinition42.getCOLLECTION_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList47 = mongoDBRiverDefinition42.mongoServers;
        builder40.setmongoServers(serverAddressList47);
        builder40.statisticsIndexName = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder51);
        java.lang.String str54 = mongoDBRiverDefinition53.getCONNECTION_TIMEOUT();
        java.lang.String str55 = mongoDBRiverDefinition53.getCREDENTIALS_FIELD();
        java.lang.String str56 = mongoDBRiverDefinition53.getStatisticsIndexName();
        java.util.Set<java.lang.String> strSet57 = mongoDBRiverDefinition53.getIncludeFields();
        java.util.List<com.mongodb.ServerAddress> serverAddressList58 = mongoDBRiverDefinition53.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder40.mongoServers(serverAddressList58);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder28.mongoServers(serverAddressList58);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder0.mongoServers(serverAddressList58);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder61.mongoSecondaryReadPreference(false);
        boolean boolean64 = builder63.getmongoSecondaryReadPreference();
        java.lang.String str65 = builder63.gettypeName();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 8 + "'", int43 == 8);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "collection" + "'", str46, "collection");
        org.junit.Assert.assertNotNull(serverAddressList47);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "connect_timeout" + "'", str54, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "credentials" + "'", str55, "credentials");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(strSet57);
        org.junit.Assert.assertNotNull(serverAddressList58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(str65);
    }

    @Test
    public void test04349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04349");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        java.lang.String str5 = builder0.getriverName();
        builder0.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.typeName("import_all_collections");
        java.util.Set<java.lang.String> strSet12 = builder0.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        int int15 = mongoDBRiverDefinition14.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = mongoDBRiverDefinition14.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.mongoServers(serverAddressList16);
        boolean boolean18 = builder17.importAllCollections;
        java.lang.String str19 = builder17.getmongoAdminUser();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test04350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04350");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = builder0.mongoServers;
        boolean boolean9 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        int int12 = mongoDBRiverDefinition11.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str13 = mongoDBRiverDefinition11.scriptType;
        boolean boolean14 = mongoDBRiverDefinition11.importAllCollections;
        java.lang.String str15 = mongoDBRiverDefinition11.getCOLLECTION_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = mongoDBRiverDefinition11.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.mongoServers(serverAddressList16);
        builder0.setskipInitialImport(true);
        builder0.skipInitialImport = false;
        java.lang.String str22 = builder0.getriverName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(serverAddressList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "collection" + "'", str15, "collection");
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test04351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04351");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        java.lang.String str4 = mongoDBRiverDefinition2.getGRIDFS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition2.mongoLocalUser;
        java.lang.String str7 = mongoDBRiverDefinition2.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.statisticsTypeName;
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition2.excludeFields;
        com.mongodb.BasicDBObject basicDBObject10 = mongoDBRiverDefinition2.mongoCollectionFilter;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gridfs" + "'", str4, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "import_all_collections" + "'", str7, "import_all_collections");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(basicDBObject10);
    }

    @Test
    public void test04352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04352");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.storeStatistics(false);
        java.lang.String str9 = builder8.getriverIndexName();
        builder8.setstoreStatistics(true);
        int int12 = builder8.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        boolean boolean14 = mongoDBRiverDefinition13.getstoreStatistics();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test04353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04353");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        int int4 = mongoDBRiverDefinition1.socketTimeout;
        boolean boolean5 = mongoDBRiverDefinition1.getdisableIndexRefresh();
        int int6 = mongoDBRiverDefinition1.connectTimeout;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test04354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04354");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        int int5 = mongoDBRiverDefinition1.connectTimeout;
        boolean boolean6 = mongoDBRiverDefinition1.isMongoUseSSL();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test04355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04355");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.typeName;
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder6.mongoCollectionFilter = basicDBObject8;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoAdminPassword("db");
        docScoreSearchScript0.setNextVar("bulk_size", (java.lang.Object) builder6);
        java.lang.Object obj14 = null;
        docScoreSearchScript0.setNextVar("gridfs", obj14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str18 = builder17.typeName;
        com.mongodb.BasicDBObject basicDBObject19 = null;
        builder17.mongoCollectionFilter = basicDBObject19;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder17.mongoAdminPassword("db");
        builder22.disableIndexRefresh = true;
        builder22.setconnectTimeout(1000);
        builder22.setriverIndexName("skip_initial_import");
        docScoreSearchScript0.setNextVar("bulk_timeout", (java.lang.Object) builder22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder30);
        java.util.Set<java.lang.String> strSet32 = builder30.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder30.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject34 = null;
        builder30.setmongoOplogFilter(basicDBObject34);
        com.mongodb.BasicDBObject basicDBObject36 = builder30.getmongoCollectionFilter();
        builder30.setskipInitialImport(false);
        java.lang.String str39 = builder30.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder30);
        boolean boolean41 = mongoDBRiverDefinition40.mongoGridFS;
        java.lang.Object obj42 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition40);
        java.lang.String str43 = mongoDBRiverDefinition40.getINCLUDE_FIELDS_FIELD();
        boolean boolean44 = mongoDBRiverDefinition40.advancedTransformation;
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertNull(mongoClientOptions33);
        org.junit.Assert.assertNotNull(basicDBObject36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "include_fields" + "'", str43, "include_fields");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test04356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04356");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        builder0.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        com.mongodb.BasicDBObject basicDBObject10 = null;
        builder0.mongoCollectionFilter = basicDBObject10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.riverName("concurrent_requests");
        int int14 = builder13.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.mongoAdminPassword("user");
        builder13.setstoreStatistics(true);
        builder13.setmongoUseSSL(false);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test04357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04357");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str3 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str4 = mongoDBRiverDefinition1.getTYPE_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition1.getExcludeFields();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "type" + "'", str4, "type");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "concurrent_requests" + "'", str5, "concurrent_requests");
        org.junit.Assert.assertNull(strSet6);
    }

    @Test
    public void test04358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04358");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.util.Set<java.lang.String> strSet9 = builder8.excludeFields;
        builder8.setriverName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.mongoAdminUser("concurrent_bulk_requests");
        com.mongodb.BasicDBObject basicDBObject14 = builder8.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str16 = builder15.typeName;
        com.mongodb.BasicDBObject basicDBObject17 = null;
        builder15.mongoCollectionFilter = basicDBObject17;
        java.lang.String str19 = builder15.mongoAdminUser;
        builder15.disableIndexRefresh = false;
        java.lang.String str22 = builder15.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder15.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder24);
        java.util.Set<java.lang.String> strSet26 = builder24.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject28 = null;
        builder24.setmongoOplogFilter(basicDBObject28);
        boolean boolean30 = builder24.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray31 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList32 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList32, serverAddressArray31);
        builder24.mongoServers = serverAddressList32;
        java.lang.String str35 = builder24.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str37 = builder36.typeName;
        com.mongodb.BasicDBObject basicDBObject38 = null;
        builder36.mongoCollectionFilter = basicDBObject38;
        java.lang.String str40 = builder36.mongoAdminUser;
        builder36.disableIndexRefresh = false;
        java.lang.String str43 = builder36.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str45 = builder44.typeName;
        com.mongodb.BasicDBObject basicDBObject46 = null;
        builder44.mongoCollectionFilter = basicDBObject46;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder44.mongoUseSSL(true);
        java.lang.String[] strArray59 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        builder49.setparentTypes((java.util.Set<java.lang.String>) strSet60);
        builder36.parentTypes = strSet60;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder24.parentTypes((java.util.Set<java.lang.String>) strSet60);
        builder15.setexcludeFields((java.util.Set<java.lang.String>) strSet60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder8.parentTypes((java.util.Set<java.lang.String>) strSet60);
        boolean boolean67 = builder8.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder8.mongoLocalUser("");
        builder69.mongoLocalPassword = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions72 = null;
        builder69.mongoClientOptions = mongoClientOptions72;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(basicDBObject14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(mongoClientOptions23);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(serverAddressArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test04359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04359");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.util.Set<java.lang.String> strSet9 = builder8.excludeFields;
        builder8.setriverName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.mongoAdminUser("concurrent_bulk_requests");
        com.mongodb.BasicDBObject basicDBObject14 = builder8.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str16 = builder15.typeName;
        com.mongodb.BasicDBObject basicDBObject17 = null;
        builder15.mongoCollectionFilter = basicDBObject17;
        java.lang.String str19 = builder15.mongoAdminUser;
        builder15.disableIndexRefresh = false;
        java.lang.String str22 = builder15.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder15.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder24);
        java.util.Set<java.lang.String> strSet26 = builder24.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject28 = null;
        builder24.setmongoOplogFilter(basicDBObject28);
        boolean boolean30 = builder24.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray31 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList32 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList32, serverAddressArray31);
        builder24.mongoServers = serverAddressList32;
        java.lang.String str35 = builder24.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str37 = builder36.typeName;
        com.mongodb.BasicDBObject basicDBObject38 = null;
        builder36.mongoCollectionFilter = basicDBObject38;
        java.lang.String str40 = builder36.mongoAdminUser;
        builder36.disableIndexRefresh = false;
        java.lang.String str43 = builder36.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str45 = builder44.typeName;
        com.mongodb.BasicDBObject basicDBObject46 = null;
        builder44.mongoCollectionFilter = basicDBObject46;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder44.mongoUseSSL(true);
        java.lang.String[] strArray59 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        builder49.setparentTypes((java.util.Set<java.lang.String>) strSet60);
        builder36.parentTypes = strSet60;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder24.parentTypes((java.util.Set<java.lang.String>) strSet60);
        builder15.setexcludeFields((java.util.Set<java.lang.String>) strSet60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder8.parentTypes((java.util.Set<java.lang.String>) strSet60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder66.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition69 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder68);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder68.skipInitialImport(true);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp72 = builder68.initialTimestamp;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder68.typeName("");
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(basicDBObject14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(mongoClientOptions23);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(serverAddressArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(wildcardTimestamp72);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test04360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04360");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.typeName;
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder6.mongoCollectionFilter = basicDBObject8;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoAdminPassword("db");
        docScoreSearchScript0.setNextVar("bulk_size", (java.lang.Object) builder6);
        java.lang.Object obj14 = null;
        docScoreSearchScript0.setNextVar("gridfs", obj14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        java.util.Set<java.lang.String> strSet19 = builder17.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder17.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject21 = null;
        builder17.setmongoOplogFilter(basicDBObject21);
        boolean boolean23 = builder17.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray24 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList25 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList25, serverAddressArray24);
        builder17.mongoServers = serverAddressList25;
        java.lang.String str28 = builder17.mongoAdminPassword;
        java.lang.String str29 = builder17.getscriptType();
        java.lang.String str30 = builder17.gettypeName();
        docScoreSearchScript0.setNextVar("advanced_transformation", (java.lang.Object) builder17);
        docScoreSearchScript0.setNextScore((float) 100L);
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext34 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serverAddressArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test04361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04361");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        builder5.importAllCollections = false;
        builder5.setskipInitialImport(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test04362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04362");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str4 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getScript();
        java.lang.String str7 = mongoDBRiverDefinition1.getDROP_COLLECTION_FIELD();
        int int8 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        java.lang.String str9 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        boolean boolean10 = mongoDBRiverDefinition1.isMongoUseSSL();
        java.lang.String str11 = mongoDBRiverDefinition1.script;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "initial_timestamp" + "'", str4, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "drop_collection" + "'", str7, "drop_collection");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "initial_timestamp" + "'", str9, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test04363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04363");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.statisticsTypeName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoDb("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test04364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04364");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = builder0.getmongoCollectionFilter();
        builder0.setskipInitialImport(false);
        java.lang.String str9 = builder0.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.typeName("disable_index_refresh");
        java.lang.String str13 = builder0.getriverIndexName();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test04365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04365");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.statisticsIndexName("options");
        builder0.setindexName("admin");
        java.lang.String str8 = builder0.getmongoCollection();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test04366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04366");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.getincludeCollection();
        org.elasticsearch.common.settings.Settings settings8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.util.Set<java.lang.String> strSet11 = builder9.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder9.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject13 = null;
        builder9.setmongoOplogFilter(basicDBObject13);
        com.mongodb.BasicDBObject basicDBObject15 = builder9.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings16 = new org.elasticsearch.river.RiverSettings(settings8, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        builder0.setmongoOplogFilter(basicDBObject15);
        int int18 = builder0.getthrottleSize();
        int int19 = builder0.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoGridFS(true);
        builder0.throttleSize = 35;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNull(mongoClientOptions12);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test04367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04367");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript4 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript4.setNextScore((float) (byte) 1);
        java.lang.Object obj8 = docScoreSearchScript4.unwrap((java.lang.Object) (-1));
        java.lang.Object obj10 = docScoreSearchScript4.unwrap((java.lang.Object) "bulk");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory12 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        java.util.Set<java.lang.String> strSet16 = builder14.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder14.setmongoOplogFilter(basicDBObject18);
        com.mongodb.BasicDBObject basicDBObject20 = builder14.getmongoCollectionFilter();
        builder13.mongoCollectionFilter = basicDBObject20;
        org.elasticsearch.script.ExecutableScript executableScript22 = docScoreNativeScriptFactory12.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject20);
        org.elasticsearch.common.settings.Settings settings23 = null;
        org.elasticsearch.common.settings.Settings settings24 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory25 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        java.util.Set<java.lang.String> strSet29 = builder27.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder27.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject31 = null;
        builder27.setmongoOplogFilter(basicDBObject31);
        com.mongodb.BasicDBObject basicDBObject33 = builder27.getmongoCollectionFilter();
        builder26.mongoCollectionFilter = basicDBObject33;
        org.elasticsearch.script.ExecutableScript executableScript35 = docScoreNativeScriptFactory25.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        org.elasticsearch.river.RiverSettings riverSettings36 = new org.elasticsearch.river.RiverSettings(settings24, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        org.elasticsearch.river.RiverSettings riverSettings37 = new org.elasticsearch.river.RiverSettings(settings23, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        org.elasticsearch.script.ExecutableScript executableScript38 = docScoreNativeScriptFactory12.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        docScoreSearchScript4.setNextVar("actions", (java.lang.Object) basicDBObject33);
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) docScoreSearchScript4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str42 = builder41.typeName;
        com.mongodb.BasicDBObject basicDBObject43 = null;
        builder41.mongoCollectionFilter = basicDBObject43;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder41.mongoUseSSL(true);
        builder41.connectTimeout = (byte) -1;
        builder41.setsocketTimeout((int) (short) 1);
        java.lang.String str51 = builder41.getstatisticsTypeName();
        java.lang.String str52 = builder41.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder41);
        java.lang.Object obj54 = docScoreSearchScript0.unwrap((java.lang.Object) builder41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition56 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder55);
        java.util.Set<java.lang.String> strSet57 = builder55.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions58 = builder55.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject59 = null;
        builder55.setmongoOplogFilter(basicDBObject59);
        boolean boolean61 = builder55.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder55.socketTimeout((int) ' ');
        java.lang.String str64 = builder63.mongoCollection;
        org.elasticsearch.common.settings.Settings settings65 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str67 = builder66.typeName;
        com.mongodb.BasicDBObject basicDBObject68 = null;
        builder66.mongoCollectionFilter = basicDBObject68;
        java.lang.String str70 = builder66.mongoAdminUser;
        builder66.disableIndexRefresh = false;
        java.lang.String str73 = builder66.getincludeCollection();
        org.elasticsearch.common.settings.Settings settings74 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition76 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder75);
        java.util.Set<java.lang.String> strSet77 = builder75.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions78 = builder75.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject79 = null;
        builder75.setmongoOplogFilter(basicDBObject79);
        com.mongodb.BasicDBObject basicDBObject81 = builder75.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings82 = new org.elasticsearch.river.RiverSettings(settings74, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject81);
        builder66.setmongoOplogFilter(basicDBObject81);
        org.elasticsearch.river.RiverSettings riverSettings84 = new org.elasticsearch.river.RiverSettings(settings65, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject81);
        builder63.setmongoCollectionFilter(basicDBObject81);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder41.mongoOplogFilter(basicDBObject81);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition88 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder87);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition89 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder87);
        java.lang.String str90 = mongoDBRiverDefinition89.getCONNECTION_TIMEOUT();
        int int91 = mongoDBRiverDefinition89.getConnectTimeout();
        java.lang.String str92 = mongoDBRiverDefinition89.getSTORE_STATISTICS_FIELD();
        com.mongodb.BasicDBObject basicDBObject93 = mongoDBRiverDefinition89.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder94 = builder86.mongoCollectionFilter(basicDBObject93);
        builder86.indexName = "type";
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-1) + "'", obj8, (-1));
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "bulk" + "'", obj10, "bulk");
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(mongoClientOptions17);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(executableScript22);
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(basicDBObject33);
        org.junit.Assert.assertNotNull(executableScript35);
        org.junit.Assert.assertNotNull(executableScript38);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertNull(strSet57);
        org.junit.Assert.assertNull(mongoClientOptions58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNull(strSet77);
        org.junit.Assert.assertNull(mongoClientOptions78);
        org.junit.Assert.assertNotNull(basicDBObject81);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "connect_timeout" + "'", str90, "connect_timeout");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "store_statistics" + "'", str92, "store_statistics");
        org.junit.Assert.assertNotNull(basicDBObject93);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test04368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04368");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        java.lang.String str4 = mongoDBRiverDefinition2.getGRIDFS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition2.getINCLUDE_FIELDS_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions7 = mongoDBRiverDefinition2.mongoClientOptions;
        boolean boolean8 = mongoDBRiverDefinition2.isStoreStatistics();
        java.lang.String str9 = mongoDBRiverDefinition2.getStatisticsIndexName();
        java.lang.String str10 = mongoDBRiverDefinition2.riverName;
        boolean boolean11 = mongoDBRiverDefinition2.dropCollection;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gridfs" + "'", str4, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_fields" + "'", str6, "include_fields");
        org.junit.Assert.assertNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test04369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04369");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        builder0.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.mongoDb("throttle_size");
        java.lang.String str12 = builder11.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        java.lang.String str16 = mongoDBRiverDefinition15.getCONNECTION_TIMEOUT();
        int int17 = mongoDBRiverDefinition15.getConnectTimeout();
        boolean boolean18 = mongoDBRiverDefinition15.advancedTransformation;
        java.lang.String str19 = mongoDBRiverDefinition15.getCOLLECTION_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition15.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean21 = mongoDBRiverDefinition15.getmongoSecondaryReadPreference();
        java.util.List<com.mongodb.ServerAddress> serverAddressList22 = mongoDBRiverDefinition15.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder11.mongoServers(serverAddressList22);
        int int24 = builder11.getthrottleSize();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp25 = builder11.getinitialTimestamp();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "connect_timeout" + "'", str16, "connect_timeout");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "collection" + "'", str19, "collection");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "secondary_read_preference" + "'", str20, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(serverAddressList22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(wildcardTimestamp25);
    }

    @Test
    public void test04370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04370");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        builder0.setsocketTimeout((int) (short) 1);
        java.lang.String str10 = builder0.getstatisticsTypeName();
        boolean boolean11 = builder0.getmongoGridFS();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.dropCollection(false);
        builder13.disableIndexRefresh = true;
        builder13.mongoUseSSL = true;
        boolean boolean18 = builder13.mongoSecondaryReadPreference;
        boolean boolean19 = builder13.getmongoSecondaryReadPreference();
        boolean boolean20 = builder13.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue22 = mongoDBRiverDefinition21.getDEFAULT_BULK_SIZE();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(byteSizeValue22);
    }

    @Test
    public void test04371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04371");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        builder5.disableIndexRefresh = true;
        builder5.setconnectTimeout(1000);
        builder5.setriverIndexName("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.mongoUseSSL(true);
        builder13.setmongoSecondaryReadPreference(false);
        builder13.socketTimeout = (byte) 0;
        builder13.setdropCollection(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test04372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04372");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        builder0.setdisableIndexRefresh(false);
        boolean boolean10 = builder0.getmongoUseSSL();
        builder0.setriverName("db");
        boolean boolean13 = builder0.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoAdminUser("localhost");
        builder15.setriverIndexName("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.util.Set<java.lang.String> strSet20 = builder18.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder18.getmongoClientOptions();
        builder18.setriverName("");
        boolean boolean24 = builder18.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str26 = builder25.typeName;
        builder25.setsocketTimeout(0);
        boolean boolean29 = builder25.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str32 = builder31.typeName;
        com.mongodb.BasicDBObject basicDBObject33 = null;
        builder31.mongoCollectionFilter = basicDBObject33;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder31.mongoUseSSL(true);
        java.lang.String[] strArray46 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        builder36.setparentTypes((java.util.Set<java.lang.String>) strSet47);
        builder25.setparentTypes((java.util.Set<java.lang.String>) strSet47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder18.includeFields((java.util.Set<java.lang.String>) strSet47);
        builder15.excludeFields = strSet47;
        java.util.Set<java.lang.String> strSet53 = builder15.excludeFields;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(strSet53);
    }

    @Test
    public void test04373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04373");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.typeName("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet11 = builder0.getincludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet11);
    }

    @Test
    public void test04374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04374");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = builder0.getmongoCollectionFilter();
        builder0.setskipInitialImport(false);
        java.lang.String str9 = builder0.statisticsIndexName;
        java.lang.String str10 = builder0.scriptType;
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = builder0.getmongoServers();
        java.lang.String str12 = builder0.gettypeName();
        boolean boolean13 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        java.util.Set<java.lang.String> strSet16 = builder14.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder14.setmongoOplogFilter(basicDBObject18);
        boolean boolean20 = builder14.dropCollection;
        boolean boolean21 = builder14.getstoreStatistics();
        builder14.statisticsIndexName = "admin";
        builder14.setskipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject26 = builder14.mongoCollectionFilter;
        builder0.mongoCollectionFilter = basicDBObject26;
        boolean boolean28 = builder0.getmongoUseSSL();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test04375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04375");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.lang.String str9 = builder8.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoCollection("drop_collection");
        java.util.Set<java.lang.String> strSet12 = builder8.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.includeCollection("flush_interval");
        builder8.setdisableIndexRefresh(true);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test04376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04376");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        builder0.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.util.Set<java.lang.String> strSet14 = builder12.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder12.setmongoOplogFilter(basicDBObject16);
        com.mongodb.BasicDBObject basicDBObject18 = builder12.getmongoCollectionFilter();
        builder11.mongoCollectionFilter = basicDBObject18;
        org.elasticsearch.river.RiverSettings riverSettings20 = new org.elasticsearch.river.RiverSettings(settings10, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoCollectionFilter(basicDBObject18);
        java.lang.String str22 = builder21.mongoLocalUser;
        builder21.setdisableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder21.importAllCollections(true);
        builder26.setconnectTimeout(1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str30 = builder29.typeName;
        com.mongodb.BasicDBObject basicDBObject31 = null;
        builder29.mongoCollectionFilter = basicDBObject31;
        com.mongodb.BasicDBObject basicDBObject33 = null;
        builder29.mongoOplogFilter = basicDBObject33;
        builder29.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList37 = builder29.mongoServers;
        java.lang.String[] strArray41 = new java.lang.String[] { "connect_timeout", "credentials", "connect_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        builder29.setparentTypes((java.util.Set<java.lang.String>) strSet42);
        builder26.setincludeFields((java.util.Set<java.lang.String>) strSet42);
        java.lang.String str46 = builder26.getmongoLocalUser();
        builder26.setimportAllCollections(false);
        java.lang.String str49 = builder26.mongoCollection;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(serverAddressList37);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test04377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04377");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = builder0.getmongoCollectionFilter();
        builder0.setthrottleSize(27017);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.throttleSize((int) (short) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoSecondaryReadPreference(false);
        builder0.setadvancedTransformation(true);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test04378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04378");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        builder0.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        com.mongodb.BasicDBObject basicDBObject10 = null;
        builder0.mongoCollectionFilter = basicDBObject10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.riverName("concurrent_requests");
        builder0.setscriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.mongoSecondaryReadPreference(false);
        boolean boolean18 = builder0.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder0.statisticsIndexName("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        boolean boolean24 = mongoDBRiverDefinition23.isMongoSecondaryReadPreference();
        java.lang.String str25 = mongoDBRiverDefinition23.getMongoDb();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp26 = mongoDBRiverDefinition23.initialTimestamp;
        java.lang.String str27 = mongoDBRiverDefinition23.getBULK_SIZE_FIELD();
        java.lang.String str28 = mongoDBRiverDefinition23.getLOCAL_DB_FIELD();
        com.mongodb.BasicDBObject basicDBObject29 = mongoDBRiverDefinition23.getMongoCollectionFilter();
        builder0.mongoCollectionFilter = basicDBObject29;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(wildcardTimestamp26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "bulk_size" + "'", str27, "bulk_size");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "local" + "'", str28, "local");
        org.junit.Assert.assertNotNull(basicDBObject29);
    }

    @Test
    public void test04379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04379");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition2.getIncludeFields();
        java.lang.String str4 = mongoDBRiverDefinition2.getCONCURRENT_REQUESTS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        java.lang.String str6 = mongoDBRiverDefinition2.getBULK_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "concurrent_requests" + "'", str4, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "bulk" + "'", str6, "bulk");
    }

    @Test
    public void test04380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04380");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getSOCKET_TIMEOUT();
        java.lang.String str6 = mongoDBRiverDefinition2.getSCRIPT_FIELD();
        org.elasticsearch.common.logging.ESLogger eSLogger7 = mongoDBRiverDefinition2.getlogger();
        java.lang.String str8 = mongoDBRiverDefinition2.mongoDb;
        boolean boolean9 = mongoDBRiverDefinition2.skipInitialImport;
        boolean boolean10 = mongoDBRiverDefinition2.advancedTransformation;
        java.lang.String str11 = mongoDBRiverDefinition2.getMongoLocalUser();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "socket_timeout" + "'", str5, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertNotNull(eSLogger7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test04381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04381");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.util.Set<java.lang.String> strSet11 = builder9.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder9.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject13 = null;
        builder9.setmongoOplogFilter(basicDBObject13);
        boolean boolean15 = builder9.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray16 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList17 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList17, serverAddressArray16);
        builder9.mongoServers = serverAddressList17;
        java.lang.String str20 = builder9.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.typeName;
        com.mongodb.BasicDBObject basicDBObject23 = null;
        builder21.mongoCollectionFilter = basicDBObject23;
        java.lang.String str25 = builder21.mongoAdminUser;
        builder21.disableIndexRefresh = false;
        java.lang.String str28 = builder21.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str30 = builder29.typeName;
        com.mongodb.BasicDBObject basicDBObject31 = null;
        builder29.mongoCollectionFilter = basicDBObject31;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder29.mongoUseSSL(true);
        java.lang.String[] strArray44 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        builder34.setparentTypes((java.util.Set<java.lang.String>) strSet45);
        builder21.parentTypes = strSet45;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder9.parentTypes((java.util.Set<java.lang.String>) strSet45);
        builder0.setexcludeFields((java.util.Set<java.lang.String>) strSet45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder0.mongoGridFS(true);
        com.mongodb.BasicDBObject basicDBObject53 = builder0.mongoCollectionFilter;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(serverAddressArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(basicDBObject53);
    }

    @Test
    public void test04382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04382");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        builder0.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        java.util.Set<java.lang.String> strSet10 = builder0.parentTypes;
        boolean boolean11 = builder0.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.throttleSize((int) '#');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        java.util.Set<java.lang.String> strSet16 = builder14.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.statisticsTypeName("bulk_size");
        org.elasticsearch.common.settings.Settings settings19 = null;
        org.elasticsearch.common.settings.Settings settings20 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder22);
        java.util.Set<java.lang.String> strSet24 = builder22.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject26 = null;
        builder22.setmongoOplogFilter(basicDBObject26);
        com.mongodb.BasicDBObject basicDBObject28 = builder22.getmongoCollectionFilter();
        builder21.mongoCollectionFilter = basicDBObject28;
        org.elasticsearch.river.RiverSettings riverSettings30 = new org.elasticsearch.river.RiverSettings(settings20, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject28);
        org.elasticsearch.river.RiverSettings riverSettings31 = new org.elasticsearch.river.RiverSettings(settings19, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject28);
        builder18.mongoOplogFilter = basicDBObject28;
        builder13.mongoCollectionFilter = basicDBObject28;
        java.util.Set<java.lang.String> strSet34 = builder13.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder13.mongoLocalUser("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder36.connectTimeout(35);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertNull(strSet34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test04383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04383");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = mongoDBRiverDefinition2.getDEFAULT_BULK_SIZE();
        java.lang.String str6 = mongoDBRiverDefinition2.indexName;
        java.lang.String str7 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        boolean boolean8 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition2.getMongoCollectionFilter();
        java.lang.String str10 = mongoDBRiverDefinition2.getOPTIONS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition2.getSSL_CONNECTION_FIELD();
        boolean boolean13 = mongoDBRiverDefinition2.mongoSecondaryReadPreference;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertNotNull(byteSizeValue5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "connect_timeout" + "'", str7, "connect_timeout");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(basicDBObject9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "options" + "'", str10, "options");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "initial_timestamp" + "'", str11, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ssl" + "'", str12, "ssl");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test04384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04384");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        builder5.disableIndexRefresh = true;
        builder5.setmongoUseSSL(true);
        java.lang.String str10 = builder5.getscript();
        java.util.Set<java.lang.String> strSet11 = builder5.parentTypes;
        java.lang.String str12 = builder5.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        java.util.Set<java.lang.String> strSet15 = builder13.includeFields;
        java.lang.String str16 = builder13.getstatisticsIndexName();
        builder13.setsocketTimeout(10);
        builder13.setstatisticsTypeName("size");
        builder13.mongoCollection = "flush_interval";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder13.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        java.util.Set<java.lang.String> strSet27 = builder25.includeFields;
        java.lang.String str28 = builder25.mongoAdminUser;
        builder25.setskipInitialImport(true);
        java.lang.String[] strArray41 = new java.lang.String[] { "local", "localhost", "collection", "store_statistics", "index", "local", "concurrent_bulk_requests", "socket_timeout", "localhost", "bulk_size" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        builder25.parentTypes = strSet42;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder24.excludeFields((java.util.Set<java.lang.String>) strSet42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder5.parentTypes((java.util.Set<java.lang.String>) strSet42);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test04385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04385");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str3 = mongoDBRiverDefinition1.scriptType;
        boolean boolean4 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str5 = mongoDBRiverDefinition1.getBULK_FIELD();
        com.mongodb.BasicDBObject basicDBObject6 = mongoDBRiverDefinition1.mongoOplogFilter;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bulk" + "'", str5, "bulk");
        org.junit.Assert.assertNull(basicDBObject6);
    }

    @Test
    public void test04386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04386");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        int int4 = mongoDBRiverDefinition2.getConnectTimeout();
        boolean boolean5 = mongoDBRiverDefinition2.getmongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition2.getACTIONS_FIELD();
        int int7 = mongoDBRiverDefinition2.connectTimeout;
        java.lang.String str8 = mongoDBRiverDefinition2.getDB_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "actions" + "'", str6, "actions");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "db" + "'", str8, "db");
    }

    @Test
    public void test04387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = builder0.build();
        org.elasticsearch.common.unit.TimeValue timeValue7 = mongoDBRiverDefinition6.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str8 = mongoDBRiverDefinition6.getLOCAL_DB_FIELD();
        boolean boolean9 = mongoDBRiverDefinition6.dropCollection;
        java.lang.String str10 = mongoDBRiverDefinition6.getScript();
        java.lang.String str11 = mongoDBRiverDefinition6.riverIndexName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition6);
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "local" + "'", str8, "local");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test04388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04388");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        boolean boolean6 = builder0.mongoGridFS;
        java.lang.String str7 = builder0.indexName;
        com.mongodb.MongoClientOptions mongoClientOptions8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoClientOptions(mongoClientOptions8);
        java.util.Set<java.lang.String> strSet10 = builder9.excludeFields;
        com.mongodb.BasicDBObject basicDBObject11 = builder9.getmongoCollectionFilter();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNull(basicDBObject11);
    }

    @Test
    public void test04389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04389");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        builder0.dropCollection = false;
        int int14 = builder0.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.mongoDb("import_all_collections");
        builder16.setadvancedTransformation(false);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test04390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04390");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        builder0.setsocketTimeout(0);
        builder0.statisticsTypeName = "secondary_read_preference";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.disableIndexRefresh(true);
        builder7.statisticsIndexName = "ssl";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test04391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04391");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.statisticsIndexName("port");
        builder8.setstatisticsIndexName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        java.util.Set<java.lang.String> strSet13 = builder11.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str15 = builder14.typeName;
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder14.mongoCollectionFilter = basicDBObject16;
        java.lang.String str18 = builder14.mongoAdminUser;
        builder14.disableIndexRefresh = false;
        java.lang.String str21 = builder14.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder14.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        java.util.Set<java.lang.String> strSet25 = builder23.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject27 = null;
        builder23.setmongoOplogFilter(basicDBObject27);
        boolean boolean29 = builder23.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray30 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList31 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList31, serverAddressArray30);
        builder23.mongoServers = serverAddressList31;
        java.lang.String str34 = builder23.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str36 = builder35.typeName;
        com.mongodb.BasicDBObject basicDBObject37 = null;
        builder35.mongoCollectionFilter = basicDBObject37;
        java.lang.String str39 = builder35.mongoAdminUser;
        builder35.disableIndexRefresh = false;
        java.lang.String str42 = builder35.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str44 = builder43.typeName;
        com.mongodb.BasicDBObject basicDBObject45 = null;
        builder43.mongoCollectionFilter = basicDBObject45;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder43.mongoUseSSL(true);
        java.lang.String[] strArray58 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58);
        builder48.setparentTypes((java.util.Set<java.lang.String>) strSet59);
        builder35.parentTypes = strSet59;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder23.parentTypes((java.util.Set<java.lang.String>) strSet59);
        builder14.setexcludeFields((java.util.Set<java.lang.String>) strSet59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder11.includeFields((java.util.Set<java.lang.String>) strSet59);
        builder8.setexcludeFields((java.util.Set<java.lang.String>) strSet59);
        builder8.setimportAllCollections(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNull(mongoClientOptions22);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(serverAddressArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test04392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04392");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getNAME_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getMongoOplogNamespace();
        org.elasticsearch.common.unit.TimeValue timeValue8 = mongoDBRiverDefinition2.getDEFAULT_FLUSH_INTERVAL();
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition2.mongoOplogFilter;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "import_all_collections" + "'", str5, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "name" + "'", str6, "name");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "null.null" + "'", str7, "null.null");
        org.junit.Assert.assertNotNull(timeValue8);
        org.junit.Assert.assertNull(basicDBObject9);
    }

    @Test
    public void test04393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04393");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = mongoDBRiverDefinition2.getDEFAULT_BULK_SIZE();
        java.lang.String str6 = mongoDBRiverDefinition2.indexName;
        java.lang.String str7 = mongoDBRiverDefinition2.getBULK_SIZE_FIELD();
        int int8 = mongoDBRiverDefinition2.getDEFAULT_CONCURRENT_REQUESTS();
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition2.getMongoOplogFilter();
        java.lang.String str10 = mongoDBRiverDefinition2.getFLUSH_INTERVAL_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition2.typeName;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertNotNull(byteSizeValue5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "bulk_size" + "'", str7, "bulk_size");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNull(basicDBObject9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "flush_interval" + "'", str10, "flush_interval");
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test04394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04394");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        int int12 = mongoDBRiverDefinition11.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition11.mongoServers;
        boolean boolean14 = mongoDBRiverDefinition11.importAllCollections;
        boolean boolean15 = mongoDBRiverDefinition11.getmongoSSLVerifyCertificate();
        boolean boolean16 = mongoDBRiverDefinition11.getstoreStatistics();
        java.lang.String str17 = mongoDBRiverDefinition11.mongoAdminPassword;
        java.lang.String str18 = mongoDBRiverDefinition11.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean19 = mongoDBRiverDefinition11.getmongoSSLVerifyCertificate();
        com.mongodb.BasicDBObject basicDBObject20 = mongoDBRiverDefinition11.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder9.mongoOplogFilter(basicDBObject20);
        java.lang.String str22 = builder21.getmongoAdminUser();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "disable_index_refresh" + "'", str18, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test04395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04395");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str3 = mongoDBRiverDefinition1.getDEFAULT_DB_HOST();
        boolean boolean4 = mongoDBRiverDefinition1.getdisableIndexRefresh();
        boolean boolean5 = mongoDBRiverDefinition1.getskipInitialImport();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = mongoDBRiverDefinition1.getInitialTimestamp();
        java.lang.String str7 = mongoDBRiverDefinition1.mongoCollection;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "localhost" + "'", str3, "localhost");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test04396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04396");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = mongoDBRiverDefinition1.getExcludeFields();
        java.lang.String str3 = mongoDBRiverDefinition1.statisticsIndexName;
        boolean boolean4 = mongoDBRiverDefinition1.getmongoGridFS();
        java.lang.String str5 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        int int6 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "script" + "'", str5, "script");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1000 + "'", int6 == 1000);
    }

    @Test
    public void test04397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04397");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str3 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str4 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str5 = mongoDBRiverDefinition1.statisticsIndexName;
        java.lang.String str6 = mongoDBRiverDefinition1.mongoLocalUser;
        java.lang.String str7 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "initial_timestamp" + "'", str7, "initial_timestamp");
    }

    @Test
    public void test04398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04398");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        builder0.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.mongoDb("throttle_size");
        java.lang.String str12 = builder11.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        java.lang.String str16 = mongoDBRiverDefinition15.getCONNECTION_TIMEOUT();
        int int17 = mongoDBRiverDefinition15.getConnectTimeout();
        boolean boolean18 = mongoDBRiverDefinition15.advancedTransformation;
        java.lang.String str19 = mongoDBRiverDefinition15.getCOLLECTION_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition15.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean21 = mongoDBRiverDefinition15.getmongoSecondaryReadPreference();
        java.util.List<com.mongodb.ServerAddress> serverAddressList22 = mongoDBRiverDefinition15.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder11.mongoServers(serverAddressList22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder11.scriptType("concurrent_requests");
        java.lang.String str26 = builder11.includeCollection;
        builder11.setmongoAdminUser("gridfs");
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "connect_timeout" + "'", str16, "connect_timeout");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "collection" + "'", str19, "collection");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "secondary_read_preference" + "'", str20, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(serverAddressList22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test04399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04399");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.typeName;
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder6.mongoCollectionFilter = basicDBObject8;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoAdminPassword("db");
        docScoreSearchScript0.setNextVar("bulk_size", (java.lang.Object) builder6);
        java.lang.Object obj14 = null;
        docScoreSearchScript0.setNextVar("gridfs", obj14);
        docScoreSearchScript0.setNextScore((float) 0L);
        org.elasticsearch.common.settings.Settings settings18 = null;
        org.elasticsearch.common.settings.Settings settings19 = null;
        org.elasticsearch.common.settings.Settings settings20 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        java.util.Set<java.lang.String> strSet23 = builder21.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject25 = null;
        builder21.setmongoOplogFilter(basicDBObject25);
        boolean boolean27 = builder21.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder21.socketTimeout((int) ' ');
        java.util.Set<java.lang.String> strSet30 = builder29.excludeFields;
        builder29.setriverName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder29.mongoAdminUser("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder29.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str38 = builder37.typeName;
        com.mongodb.BasicDBObject basicDBObject39 = null;
        builder37.mongoCollectionFilter = basicDBObject39;
        java.lang.String str41 = builder37.mongoAdminUser;
        builder37.disableIndexRefresh = false;
        java.lang.String str44 = builder37.getincludeCollection();
        org.elasticsearch.common.settings.Settings settings45 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder46);
        java.util.Set<java.lang.String> strSet48 = builder46.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions49 = builder46.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject50 = null;
        builder46.setmongoOplogFilter(basicDBObject50);
        com.mongodb.BasicDBObject basicDBObject52 = builder46.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings53 = new org.elasticsearch.river.RiverSettings(settings45, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject52);
        builder37.setmongoOplogFilter(basicDBObject52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder29.mongoCollectionFilter(basicDBObject52);
        org.elasticsearch.river.RiverSettings riverSettings56 = new org.elasticsearch.river.RiverSettings(settings20, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject52);
        org.elasticsearch.river.RiverSettings riverSettings57 = new org.elasticsearch.river.RiverSettings(settings19, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject52);
        org.elasticsearch.river.RiverSettings riverSettings58 = new org.elasticsearch.river.RiverSettings(settings18, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject52);
        java.lang.Object obj59 = docScoreSearchScript0.unwrap((java.lang.Object) settings18);
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNull(mongoClientOptions49);
        org.junit.Assert.assertNotNull(basicDBObject52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(obj59);
    }

    @Test
    public void test04400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04400");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getDEFAULT_DB_HOST();
        int int6 = mongoDBRiverDefinition2.socketTimeout;
        org.elasticsearch.common.unit.TimeValue timeValue7 = mongoDBRiverDefinition2.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean8 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        boolean boolean9 = mongoDBRiverDefinition2.isDropCollection();
        java.lang.String str10 = mongoDBRiverDefinition2.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition2.getCOLLECTION_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition2.getPASSWORD_FIELD();
        boolean boolean13 = mongoDBRiverDefinition2.mongoSecondaryReadPreference;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "localhost" + "'", str5, "localhost");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_requests" + "'", str10, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "password" + "'", str12, "password");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test04401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04401");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        builder0.dropCollection = false;
        boolean boolean14 = builder0.getmongoUseSSL();
        builder0.mongoUseSSL = false;
        builder0.setmongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder0.riverIndexName("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test04402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04402");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoCollection;
        builder0.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.script("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "drop_collection";
        int int11 = builder0.throttleSize;
        org.bson.types.BSONTimestamp bSONTimestamp12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.initialTimestamp(bSONTimestamp12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test04403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04403");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str3 = mongoDBRiverDefinition1.scriptType;
        boolean boolean4 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str5 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.typeName;
        boolean boolean7 = mongoDBRiverDefinition1.getstoreStatistics();
        int int8 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "collection" + "'", str5, "collection");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000);
    }

    @Test
    public void test04404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04404");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = mongoDBRiverDefinition1.getExcludeFields();
        boolean boolean3 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        int int4 = mongoDBRiverDefinition1.socketTimeout;
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(strSet5);
    }

    @Test
    public void test04405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04405");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str3 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getIncludeCollection();
        java.lang.String str5 = mongoDBRiverDefinition1.mongoCollection;
        java.lang.String str6 = mongoDBRiverDefinition1.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.typeName;
        java.lang.String str8 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "db" + "'", str3, "db");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "disable_index_refresh" + "'", str6, "disable_index_refresh");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "admin" + "'", str8, "admin");
    }

    @Test
    public void test04406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04406");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        boolean boolean6 = builder5.importAllCollections;
        builder5.setsocketTimeout((int) (byte) 10);
        java.lang.String str9 = builder5.getmongoAdminPassword();
        builder5.setskipInitialImport(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test04407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04407");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        boolean boolean6 = builder0.mongoGridFS;
        java.lang.String str7 = builder0.indexName;
        boolean boolean8 = builder0.skipInitialImport;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoLocalPassword("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        java.util.Set<java.lang.String> strSet13 = builder11.includeFields;
        java.lang.String str14 = builder11.getstatisticsIndexName();
        builder11.setsocketTimeout(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder11.storeStatistics(false);
        java.lang.String str20 = builder19.getriverIndexName();
        builder19.setsocketTimeout(0);
        boolean boolean23 = builder19.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder19.mongoGridFS(true);
        com.mongodb.BasicDBObject basicDBObject26 = builder25.getmongoCollectionFilter();
        builder0.mongoCollectionFilter = basicDBObject26;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(basicDBObject26);
    }

    @Test
    public void test04408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04408");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getSOCKET_TIMEOUT();
        java.lang.String str6 = mongoDBRiverDefinition2.getSCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.indexName;
        java.lang.String str8 = mongoDBRiverDefinition2.getFILTER_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions9 = mongoDBRiverDefinition2.getMongoClientOptions();
        java.lang.String str10 = mongoDBRiverDefinition2.getIMPORT_ALL_COLLECTIONS_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "socket_timeout" + "'", str5, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "filter" + "'", str8, "filter");
        org.junit.Assert.assertNull(mongoClientOptions9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "import_all_collections" + "'", str10, "import_all_collections");
    }

    @Test
    public void test04409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04409");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoGridFS(true);
        java.lang.String str9 = builder0.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.logging.ESLogger eSLogger11 = mongoDBRiverDefinition10.getlogger();
        boolean boolean12 = mongoDBRiverDefinition10.isMongoUseSSL();
        java.lang.String str13 = mongoDBRiverDefinition10.getINDEX_OBJECT();
        int int14 = mongoDBRiverDefinition10.getDEFAULT_BULK_ACTIONS();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(eSLogger11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "index" + "'", str13, "index");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1000 + "'", int14 == 1000);
    }

    @Test
    public void test04410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04410");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoDb("hi!");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test04411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04411");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp9 = builder0.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoAdminPassword("script_type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.advancedTransformation(false);
        builder13.setindexName("ssl");
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(wildcardTimestamp9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test04412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04412");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.statisticsTypeName("bulk_size");
        builder4.socketTimeout = 1;
        boolean boolean7 = builder4.getimportAllCollections();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test04413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04413");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str11 = mongoDBRiverDefinition10.getCONNECTION_TIMEOUT();
        java.lang.String str12 = mongoDBRiverDefinition10.getCREDENTIALS_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition10.getDEFAULT_DB_HOST();
        com.mongodb.BasicDBObject basicDBObject14 = mongoDBRiverDefinition10.getMongoCollectionFilter();
        builder0.mongoCollectionFilter = basicDBObject14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.statisticsTypeName("");
        builder17.statisticsIndexName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder17.mongoAdminPassword("gridfs");
        java.lang.String str22 = builder17.typeName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "connect_timeout" + "'", str11, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "credentials" + "'", str12, "credentials");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "localhost" + "'", str13, "localhost");
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test04414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04414");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        builder0.setriverName("");
        builder0.setmongoAdminUser("bulk_size");
        boolean boolean8 = builder0.getskipInitialImport();
        java.util.Set<java.lang.String> strSet9 = builder0.parentTypes;
        java.lang.String str10 = builder0.getincludeCollection();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test04415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04415");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.statisticsIndexName("port");
        builder0.setskipInitialImport(false);
        boolean boolean11 = builder0.mongoSecondaryReadPreference;
        builder0.setindexName("store_statistics");
        org.bson.types.BSONTimestamp bSONTimestamp14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.initialTimestamp(bSONTimestamp14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test04416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04416");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        builder0.setsocketTimeout((int) (short) 1);
        java.lang.String str10 = builder0.getstatisticsTypeName();
        builder0.setmongoAdminUser("collection");
        int int13 = builder0.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoLocalUser = "connect_timeout";
        boolean boolean17 = builder0.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test04417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04417");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        boolean boolean7 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoLocalPassword("");
        boolean boolean10 = builder9.getmongoSecondaryReadPreference();
        java.util.Set<java.lang.String> strSet11 = builder9.getparentTypes();
        builder9.setmongoCollection("null.null");
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet11);
    }

    @Test
    public void test04418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04418");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        builder0.typeName = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        java.util.Set<java.lang.String> strSet15 = builder13.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.statisticsTypeName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        java.util.List<com.mongodb.ServerAddress> serverAddressList19 = mongoDBRiverDefinition18.getMongoServers();
        builder0.mongoServers = serverAddressList19;
        builder0.typeName = "exclude_fields";
        java.util.Set<java.lang.String> strSet23 = builder0.includeFields;
        java.lang.String str24 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int26 = mongoDBRiverDefinition25.throttleSize;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(serverAddressList19);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test04419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04419");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("gridfs", "ssl_verify_certificate", true);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?ssl_verify_certificate?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test04420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04420");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = builder0.mongoServers;
        builder0.setmongoLocalPassword("password");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory11 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings12 = null;
        org.elasticsearch.common.settings.Settings settings13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        java.util.Set<java.lang.String> strSet17 = builder15.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder15.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject19 = null;
        builder15.setmongoOplogFilter(basicDBObject19);
        com.mongodb.BasicDBObject basicDBObject21 = builder15.getmongoCollectionFilter();
        builder14.mongoCollectionFilter = basicDBObject21;
        org.elasticsearch.river.RiverSettings riverSettings23 = new org.elasticsearch.river.RiverSettings(settings13, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject21);
        org.elasticsearch.river.RiverSettings riverSettings24 = new org.elasticsearch.river.RiverSettings(settings12, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject21);
        org.elasticsearch.script.ExecutableScript executableScript25 = docScoreNativeScriptFactory11.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder26);
        java.util.Set<java.lang.String> strSet28 = builder26.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder26.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject30 = null;
        builder26.setmongoOplogFilter(basicDBObject30);
        boolean boolean32 = builder26.dropCollection;
        boolean boolean33 = builder26.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder26.mongoLocalPassword("");
        boolean boolean36 = builder35.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder37);
        java.util.Set<java.lang.String> strSet39 = builder37.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions40 = builder37.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject41 = null;
        builder37.setmongoOplogFilter(basicDBObject41);
        boolean boolean43 = builder37.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray44 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList45 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList45, serverAddressArray44);
        builder37.mongoServers = serverAddressList45;
        java.lang.String str48 = builder37.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str50 = builder49.typeName;
        com.mongodb.BasicDBObject basicDBObject51 = null;
        builder49.mongoCollectionFilter = basicDBObject51;
        java.lang.String str53 = builder49.mongoAdminUser;
        builder49.disableIndexRefresh = false;
        java.lang.String str56 = builder49.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str58 = builder57.typeName;
        com.mongodb.BasicDBObject basicDBObject59 = null;
        builder57.mongoCollectionFilter = basicDBObject59;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder57.mongoUseSSL(true);
        java.lang.String[] strArray72 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet73 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet73, strArray72);
        builder62.setparentTypes((java.util.Set<java.lang.String>) strSet73);
        builder49.parentTypes = strSet73;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder37.parentTypes((java.util.Set<java.lang.String>) strSet73);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder77.mongoGridFS(true);
        com.mongodb.BasicDBObject basicDBObject80 = builder77.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder35.mongoOplogFilter(basicDBObject80);
        org.elasticsearch.script.ExecutableScript executableScript82 = docScoreNativeScriptFactory11.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject80);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder0.mongoCollectionFilter(basicDBObject80);
        builder0.mongoGridFS = true;
        java.lang.String str86 = builder0.getmongoLocalUser();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(serverAddressList8);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNull(mongoClientOptions18);
        org.junit.Assert.assertNotNull(basicDBObject21);
        org.junit.Assert.assertNotNull(executableScript25);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(strSet39);
        org.junit.Assert.assertNull(mongoClientOptions40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(serverAddressArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(basicDBObject80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(executableScript82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
    }

    @Test
    public void test04421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04421");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        builder5.setparentTypes((java.util.Set<java.lang.String>) strSet16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder5.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str24 = builder23.typeName;
        com.mongodb.BasicDBObject basicDBObject25 = null;
        builder23.mongoCollectionFilter = basicDBObject25;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder23.mongoUseSSL(true);
        java.lang.String[] strArray38 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        builder28.setparentTypes((java.util.Set<java.lang.String>) strSet39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder21.parentTypes((java.util.Set<java.lang.String>) strSet39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder20.parentTypes((java.util.Set<java.lang.String>) strSet39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder20.importAllCollections(false);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder20.mongoClientOptions;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(mongoClientOptions46);
    }

    @Test
    public void test04422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04422");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str5 = mongoDBRiverDefinition1.getTypeName();
        java.lang.String str6 = mongoDBRiverDefinition1.getScript();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition1.initialTimestamp;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp8);
    }

    @Test
    public void test04423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04423");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        int int9 = builder0.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoSecondaryReadPreference(false);
        builder11.setstoreStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder11.mongoLocalUser("secondary_read_preference");
        com.mongodb.BasicDBObject basicDBObject17 = builder16.getmongoCollectionFilter();
        boolean boolean18 = builder16.getdropCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(basicDBObject17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test04424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04424");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.typeName;
        com.mongodb.BasicDBObject basicDBObject12 = null;
        builder10.mongoCollectionFilter = basicDBObject12;
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder10.mongoOplogFilter = basicDBObject14;
        builder10.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList18 = builder10.mongoServers;
        java.lang.String[] strArray22 = new java.lang.String[] { "connect_timeout", "credentials", "connect_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        builder10.setparentTypes((java.util.Set<java.lang.String>) strSet23);
        builder7.parentTypes = strSet23;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder4.excludeFields((java.util.Set<java.lang.String>) strSet23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.typeName("ssl_verify_certificate");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(serverAddressList18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test04425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04425");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getOPTIONS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.isMongoGridFS();
        com.mongodb.MongoClientOptions mongoClientOptions6 = mongoDBRiverDefinition2.getMongoClientOptions();
        java.lang.String str7 = mongoDBRiverDefinition2.getPORT_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.getMongoDb();
        java.lang.String str9 = mongoDBRiverDefinition2.getDROP_COLLECTION_FIELD();
        boolean boolean10 = mongoDBRiverDefinition2.getstoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition2.getmongoUseSSL();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "options" + "'", str4, "options");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(mongoClientOptions6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "port" + "'", str7, "port");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "drop_collection" + "'", str9, "drop_collection");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test04426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04426");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getMongoOplogNamespace();
        java.util.List<com.mongodb.ServerAddress> serverAddressList6 = mongoDBRiverDefinition2.getMongoServers();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "null.null" + "'", str5, "null.null");
        org.junit.Assert.assertNotNull(serverAddressList6);
    }

    @Test
    public void test04427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04427");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        java.lang.String str5 = builder0.getriverName();
        builder0.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.typeName("import_all_collections");
        java.util.Set<java.lang.String> strSet12 = builder0.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        int int15 = mongoDBRiverDefinition14.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = mongoDBRiverDefinition14.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.mongoServers(serverAddressList16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.script("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str21 = mongoDBRiverDefinition20.mongoLocalPassword;
        boolean boolean22 = mongoDBRiverDefinition20.getstoreStatistics();
        java.lang.String str23 = mongoDBRiverDefinition20.getSERVERS_FIELD();
        java.lang.String str24 = mongoDBRiverDefinition20.getTYPE_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "servers" + "'", str23, "servers");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "type" + "'", str24, "type");
    }

    @Test
    public void test04428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04428");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = builder0.build();
        builder0.setmongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean10 = mongoDBRiverDefinition9.skipInitialImport;
        java.lang.String str11 = mongoDBRiverDefinition9.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getDROP_COLLECTION_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "concurrent_bulk_requests" + "'", str11, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "drop_collection" + "'", str12, "drop_collection");
    }

    @Test
    public void test04429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04429");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getDEFAULT_DB_HOST();
        int int6 = mongoDBRiverDefinition2.socketTimeout;
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition2.getMongoCollectionFilter();
        com.mongodb.BasicDBObject basicDBObject8 = mongoDBRiverDefinition2.getMongoOplogFilter();
        java.lang.String str9 = mongoDBRiverDefinition2.mongoDb;
        java.util.Set<java.lang.String> strSet10 = mongoDBRiverDefinition2.getParentTypes();
        java.lang.String str11 = mongoDBRiverDefinition2.getINCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "localhost" + "'", str5, "localhost");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNull(basicDBObject8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "include_fields" + "'", str11, "include_fields");
    }

    @Test
    public void test04430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04430");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.typeName;
        com.mongodb.BasicDBObject basicDBObject12 = null;
        builder10.mongoCollectionFilter = basicDBObject12;
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder10.mongoOplogFilter = basicDBObject14;
        builder10.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList18 = builder10.mongoServers;
        java.lang.String[] strArray22 = new java.lang.String[] { "connect_timeout", "credentials", "connect_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        builder10.setparentTypes((java.util.Set<java.lang.String>) strSet23);
        builder7.parentTypes = strSet23;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder4.excludeFields((java.util.Set<java.lang.String>) strSet23);
        java.lang.String str28 = builder27.getscript();
        boolean boolean29 = builder27.advancedTransformation;
        builder27.setimportAllCollections(false);
        builder27.statisticsTypeName = "store_statistics";
        builder27.riverName = "servers";
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(serverAddressList18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test04431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04431");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        builder0.setsocketTimeout(0);
        boolean boolean4 = builder0.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str6 = builder0.riverName;
        builder0.setmongoCollection("type");
        org.bson.types.BSONTimestamp bSONTimestamp9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.initialTimestamp(bSONTimestamp9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test04432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04432");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.util.Set<java.lang.String> strSet9 = builder8.excludeFields;
        builder8.setriverName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.mongoAdminUser("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.mongoSSLVerifyCertificate(true);
        java.lang.String str16 = builder8.getmongoLocalPassword();
        java.lang.String str17 = builder8.getscriptType();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder8.includeCollection("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.mongoGridFS(true);
        java.lang.String str22 = builder21.getindexName();
        builder21.mongoLocalUser = "script_type";
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test04433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04433");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        builder0.setsocketTimeout((int) (short) 1);
        java.lang.String str10 = builder0.getstatisticsTypeName();
        boolean boolean11 = builder0.getmongoGridFS();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.dropCollection(false);
        builder13.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.storeStatistics(true);
        java.util.Set<java.lang.String> strSet18 = builder17.getincludeFields();
        java.util.Set<java.lang.String> strSet19 = builder17.includeFields;
        builder17.setadvancedTransformation(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNull(strSet19);
    }

    @Test
    public void test04434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04434");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        builder0.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.util.Set<java.lang.String> strSet14 = builder12.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder12.setmongoOplogFilter(basicDBObject16);
        com.mongodb.BasicDBObject basicDBObject18 = builder12.getmongoCollectionFilter();
        builder11.mongoCollectionFilter = basicDBObject18;
        org.elasticsearch.river.RiverSettings riverSettings20 = new org.elasticsearch.river.RiverSettings(settings10, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoCollectionFilter(basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.socketTimeout((int) (short) 100);
        java.lang.String str24 = builder23.mongoCollection;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test04435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04435");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getSOCKET_TIMEOUT();
        java.lang.String str6 = mongoDBRiverDefinition2.getSCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.indexName;
        java.lang.String str8 = mongoDBRiverDefinition2.getTypeName();
        java.lang.String str9 = mongoDBRiverDefinition2.mongoCollection;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "socket_timeout" + "'", str5, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test04436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04436");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str7 = builder5.getmongoAdminUser();
        boolean boolean8 = builder5.getimportAllCollections();
        org.bson.types.Binary binary9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.initialTimestamp(binary9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test04437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04437");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        java.lang.String str8 = builder0.getmongoDb();
        boolean boolean9 = builder0.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.throttleSize((int) '#');
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test04438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04438");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.typeName;
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder12.mongoCollectionFilter = basicDBObject14;
        java.lang.String str16 = builder12.mongoAdminUser;
        builder12.disableIndexRefresh = false;
        java.lang.String str19 = builder12.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.typeName;
        com.mongodb.BasicDBObject basicDBObject22 = null;
        builder20.mongoCollectionFilter = basicDBObject22;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder20.mongoUseSSL(true);
        java.lang.String[] strArray35 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        builder25.setparentTypes((java.util.Set<java.lang.String>) strSet36);
        builder12.parentTypes = strSet36;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder40);
        builder40.typeName = "";
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test04439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04439");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory6 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings7 = null;
        org.elasticsearch.common.settings.Settings settings8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.util.Set<java.lang.String> strSet11 = builder9.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder9.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject13 = null;
        builder9.setmongoOplogFilter(basicDBObject13);
        com.mongodb.BasicDBObject basicDBObject15 = builder9.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings16 = new org.elasticsearch.river.RiverSettings(settings8, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        org.elasticsearch.river.RiverSettings riverSettings17 = new org.elasticsearch.river.RiverSettings(settings7, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        org.elasticsearch.script.ExecutableScript executableScript18 = docScoreNativeScriptFactory6.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.mongoOplogFilter(basicDBObject15);
        java.lang.String str20 = builder0.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        int int23 = mongoDBRiverDefinition22.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList24 = mongoDBRiverDefinition22.mongoServers;
        java.lang.String str25 = mongoDBRiverDefinition22.getNAME_FIELD();
        java.lang.String str26 = mongoDBRiverDefinition22.getBULK_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList27 = mongoDBRiverDefinition22.getMongoServers();
        builder0.setmongoServers(serverAddressList27);
        boolean boolean29 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setdisableIndexRefresh(false);
        builder0.setconnectTimeout(8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder35);
        java.util.Set<java.lang.String> strSet37 = builder35.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder35.statisticsTypeName("bulk_size");
        builder35.includeCollection = "port";
        builder35.riverName = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder44);
        java.util.Set<java.lang.String> strSet46 = builder44.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder44.statisticsTypeName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder44);
        java.util.List<com.mongodb.ServerAddress> serverAddressList50 = mongoDBRiverDefinition49.getMongoServers();
        builder35.setmongoServers(serverAddressList50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder35.mongoLocalUser("null.null");
        java.lang.String str54 = builder53.statisticsIndexName;
        java.lang.String str55 = builder53.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str57 = builder56.typeName;
        com.mongodb.BasicDBObject basicDBObject58 = null;
        builder56.mongoCollectionFilter = basicDBObject58;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder56.mongoAdminPassword("db");
        java.util.Set<java.lang.String> strSet62 = builder61.getincludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder61.storeStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str66 = builder65.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition67 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str69 = builder68.typeName;
        com.mongodb.BasicDBObject basicDBObject70 = null;
        builder68.mongoCollectionFilter = basicDBObject70;
        com.mongodb.BasicDBObject basicDBObject72 = null;
        builder68.mongoOplogFilter = basicDBObject72;
        builder68.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList76 = builder68.mongoServers;
        java.lang.String[] strArray80 = new java.lang.String[] { "connect_timeout", "credentials", "connect_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet81 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet81, strArray80);
        builder68.setparentTypes((java.util.Set<java.lang.String>) strSet81);
        builder65.parentTypes = strSet81;
        builder64.parentTypes = strSet81;
        builder53.setexcludeFields((java.util.Set<java.lang.String>) strSet81);
        builder0.setincludeFields((java.util.Set<java.lang.String>) strSet81);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNull(mongoClientOptions12);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNotNull(executableScript18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertNotNull(serverAddressList24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "name" + "'", str25, "name");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "bulk" + "'", str26, "bulk");
        org.junit.Assert.assertNotNull(serverAddressList27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(strSet37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(serverAddressList50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "port" + "'", str55, "port");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(strSet62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(serverAddressList76);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test04440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04440");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.mongoClientOptions;
        builder0.importAllCollections = false;
        builder0.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.scriptType("throttle_size");
        boolean boolean15 = builder14.storeStatistics;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test04441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04441");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.statisticsTypeName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoDb("secondary_read_preference");
        java.lang.String str7 = builder0.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.typeName;
        com.mongodb.BasicDBObject basicDBObject12 = null;
        builder10.mongoCollectionFilter = basicDBObject12;
        java.lang.String str14 = builder10.mongoAdminUser;
        java.lang.String str15 = builder10.getriverName();
        builder10.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder10.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder10.dropCollection(false);
        builder10.setmongoLocalPassword("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder24);
        java.util.Set<java.lang.String> strSet26 = builder24.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject28 = null;
        builder24.setmongoOplogFilter(basicDBObject28);
        com.mongodb.BasicDBObject basicDBObject30 = builder24.getmongoCollectionFilter();
        builder24.setskipInitialImport(false);
        builder24.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str36 = builder35.typeName;
        com.mongodb.BasicDBObject basicDBObject37 = null;
        builder35.mongoCollectionFilter = basicDBObject37;
        java.lang.String str39 = builder35.mongoAdminUser;
        builder35.disableIndexRefresh = false;
        java.lang.String str42 = builder35.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str44 = builder43.typeName;
        com.mongodb.BasicDBObject basicDBObject45 = null;
        builder43.mongoCollectionFilter = basicDBObject45;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder43.mongoUseSSL(true);
        java.lang.String[] strArray58 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58);
        builder48.setparentTypes((java.util.Set<java.lang.String>) strSet59);
        builder35.parentTypes = strSet59;
        builder24.includeFields = strSet59;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder10.includeFields((java.util.Set<java.lang.String>) strSet59);
        builder9.includeFields = strSet59;
        builder9.typeName = "bulk_timeout";
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "bulk_size" + "'", str7, "bulk_size");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertNull(mongoClientOptions27);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test04442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04442");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str3 = mongoDBRiverDefinition1.scriptType;
        boolean boolean4 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str5 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList6 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str7 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getIncludeCollection();
        boolean boolean9 = mongoDBRiverDefinition1.isStoreStatistics();
        java.lang.String str10 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "collection" + "'", str5, "collection");
        org.junit.Assert.assertNotNull(serverAddressList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "parent_types" + "'", str7, "parent_types");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "actions" + "'", str10, "actions");
    }

    @Test
    public void test04443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04443");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        builder0.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean8 = builder0.skipInitialImport;
        builder0.setmongoLocalUser("bulk");
        builder0.disableIndexRefresh = true;
        boolean boolean13 = builder0.getstoreStatistics();
        builder0.riverIndexName = "include_collection.include_collection";
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test04444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04444");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition2.getMongoCollection();
        java.lang.String str7 = mongoDBRiverDefinition2.getSERVERS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.indexName;
        java.lang.String str9 = mongoDBRiverDefinition2.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition2.getPORT_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "servers" + "'", str7, "servers");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "advanced_transformation" + "'", str9, "advanced_transformation");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "port" + "'", str10, "port");
    }

    @Test
    public void test04445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04445");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.typeName("secondary_read_preference");
        boolean boolean10 = builder9.skipInitialImport;
        java.lang.String str11 = builder9.getriverName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.mongoLocalUser("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        java.lang.String str15 = mongoDBRiverDefinition14.getPARENT_TYPES_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition14.getScriptType();
        java.lang.String str17 = mongoDBRiverDefinition14.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition14.mongoDb;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "parent_types" + "'", str15, "parent_types");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "script" + "'", str17, "script");
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test04446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04446");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        java.lang.String str4 = mongoDBRiverDefinition2.getGRIDFS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition2.getINCLUDE_FIELDS_FIELD();
        boolean boolean7 = mongoDBRiverDefinition2.importAllCollections;
        java.lang.String str8 = mongoDBRiverDefinition2.getCONCURRENT_BULK_REQUESTS_FIELD();
        boolean boolean9 = mongoDBRiverDefinition2.disableIndexRefresh;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = mongoDBRiverDefinition2.getInitialTimestamp();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gridfs" + "'", str4, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_fields" + "'", str6, "include_fields");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "concurrent_bulk_requests" + "'", str8, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardTimestamp10);
    }

    @Test
    public void test04447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04447");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.mongoAdminUser;
        java.lang.String str4 = builder0.statisticsTypeName;
        boolean boolean5 = builder0.mongoGridFS;
        builder0.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.script("");
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test04448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04448");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        int int8 = builder0.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.statisticsIndexName("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str12 = builder11.typeName;
        com.mongodb.BasicDBObject basicDBObject13 = null;
        builder11.mongoCollectionFilter = basicDBObject13;
        java.lang.String str15 = builder11.mongoAdminUser;
        java.lang.String str16 = builder11.getriverName();
        builder11.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder11.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder11.typeName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        int int25 = mongoDBRiverDefinition24.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str26 = mongoDBRiverDefinition24.scriptType;
        boolean boolean27 = mongoDBRiverDefinition24.importAllCollections;
        java.lang.String str28 = mongoDBRiverDefinition24.getCOLLECTION_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList29 = mongoDBRiverDefinition24.mongoServers;
        builder22.setmongoServers(serverAddressList29);
        builder22.statisticsIndexName = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder33);
        java.lang.String str36 = mongoDBRiverDefinition35.getCONNECTION_TIMEOUT();
        java.lang.String str37 = mongoDBRiverDefinition35.getCREDENTIALS_FIELD();
        java.lang.String str38 = mongoDBRiverDefinition35.getStatisticsIndexName();
        java.util.Set<java.lang.String> strSet39 = mongoDBRiverDefinition35.getIncludeFields();
        java.util.List<com.mongodb.ServerAddress> serverAddressList40 = mongoDBRiverDefinition35.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder22.mongoServers(serverAddressList40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder10.mongoServers(serverAddressList40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder10.mongoAdminUser("size");
        java.lang.String str45 = builder10.mongoDb;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "collection" + "'", str28, "collection");
        org.junit.Assert.assertNotNull(serverAddressList29);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "connect_timeout" + "'", str36, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "credentials" + "'", str37, "credentials");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(strSet39);
        org.junit.Assert.assertNotNull(serverAddressList40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test04449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04449");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoCollection;
        builder0.setmongoUseSSL(false);
        builder0.setconnectTimeout(0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.connectTimeout((int) '4');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean9 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.disableIndexRefresh(true);
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoClientOptions(mongoClientOptions12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.disableIndexRefresh(true);
        int int16 = builder15.throttleSize;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test04450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04450");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.typeName;
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder6.mongoCollectionFilter = basicDBObject8;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoAdminPassword("db");
        docScoreSearchScript0.setNextVar("bulk_size", (java.lang.Object) builder6);
        java.lang.Object obj14 = null;
        docScoreSearchScript0.setNextVar("gridfs", obj14);
        docScoreSearchScript0.setNextScore((float) 'a');
        docScoreSearchScript0.setNextScore((float) (short) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        java.util.Set<java.lang.String> strSet22 = builder20.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder20.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject24 = null;
        builder20.setmongoOplogFilter(basicDBObject24);
        boolean boolean26 = builder20.dropCollection;
        boolean boolean27 = builder20.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder20.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder30);
        java.util.Set<java.lang.String> strSet32 = builder30.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder30.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject34 = null;
        builder30.setmongoOplogFilter(basicDBObject34);
        boolean boolean36 = builder30.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray37 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList38 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList38, serverAddressArray37);
        builder30.mongoServers = serverAddressList38;
        java.lang.String str41 = builder30.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str43 = builder42.typeName;
        com.mongodb.BasicDBObject basicDBObject44 = null;
        builder42.mongoCollectionFilter = basicDBObject44;
        java.lang.String str46 = builder42.mongoAdminUser;
        builder42.disableIndexRefresh = false;
        java.lang.String str49 = builder42.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str51 = builder50.typeName;
        com.mongodb.BasicDBObject basicDBObject52 = null;
        builder50.mongoCollectionFilter = basicDBObject52;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder50.mongoUseSSL(true);
        java.lang.String[] strArray65 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet66 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65);
        builder55.setparentTypes((java.util.Set<java.lang.String>) strSet66);
        builder42.parentTypes = strSet66;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder30.parentTypes((java.util.Set<java.lang.String>) strSet66);
        builder29.setparentTypes((java.util.Set<java.lang.String>) strSet66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder29.mongoAdminPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder29.riverIndexName("drop_collection");
        java.lang.Object obj76 = docScoreSearchScript0.unwrap((java.lang.Object) builder75);
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextDocId((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertNull(mongoClientOptions33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(serverAddressArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(obj76);
    }

    @Test
    public void test04451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04451");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str3 = builder2.typeName;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder2.mongoCollectionFilter = basicDBObject4;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.mongoUseSSL(true);
        java.lang.String[] strArray17 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        builder7.setparentTypes((java.util.Set<java.lang.String>) strSet18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.mongoCollection("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        java.lang.String str26 = mongoDBRiverDefinition25.getScriptType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test04452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04452");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.lang.String str9 = builder8.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.typeName("bulk_size");
        java.lang.String str12 = builder11.getmongoLocalUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        builder11.setstatisticsTypeName("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder11.statisticsIndexName("socket_timeout");
        builder11.mongoCollection = "gridfs";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder11.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder11.mongoCollection("script");
        builder23.setthrottleSize(0);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test04453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04453");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoGridFS(true);
        builder8.mongoLocalUser = "script";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.statisticsTypeName("filter");
        int int15 = builder12.getsocketTimeout();
        boolean boolean16 = builder12.getskipInitialImport();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test04454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04454");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.typeName;
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder12.mongoCollectionFilter = basicDBObject14;
        java.lang.String str16 = builder12.mongoAdminUser;
        builder12.disableIndexRefresh = false;
        java.lang.String str19 = builder12.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.typeName;
        com.mongodb.BasicDBObject basicDBObject22 = null;
        builder20.mongoCollectionFilter = basicDBObject22;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder20.mongoUseSSL(true);
        java.lang.String[] strArray35 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        builder25.setparentTypes((java.util.Set<java.lang.String>) strSet36);
        builder12.parentTypes = strSet36;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet36);
        boolean boolean41 = builder40.importAllCollections;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test04455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04455");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        boolean boolean4 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str5 = mongoDBRiverDefinition1.getScriptType();
        boolean boolean6 = mongoDBRiverDefinition1.advancedTransformation;
        java.lang.String str7 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getFILTER_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "initial_timestamp" + "'", str7, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "filter" + "'", str8, "filter");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test04456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04456");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.script("hi!");
        builder0.statisticsIndexName = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.storeStatistics(true);
        builder0.setscript("db");
        org.elasticsearch.common.settings.Settings settings22 = null;
        org.elasticsearch.common.settings.Settings settings23 = null;
        org.elasticsearch.common.settings.Settings settings24 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str26 = builder25.typeName;
        builder25.setsocketTimeout(0);
        boolean boolean29 = builder25.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        java.lang.String str31 = mongoDBRiverDefinition30.getTypeName();
        com.mongodb.BasicDBObject basicDBObject32 = mongoDBRiverDefinition30.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings33 = new org.elasticsearch.river.RiverSettings(settings24, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject32);
        org.elasticsearch.river.RiverSettings riverSettings34 = new org.elasticsearch.river.RiverSettings(settings23, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject32);
        org.elasticsearch.river.RiverSettings riverSettings35 = new org.elasticsearch.river.RiverSettings(settings22, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject32);
        builder0.setmongoCollectionFilter(basicDBObject32);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(basicDBObject32);
    }

    @Test
    public void test04457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04457");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str11 = mongoDBRiverDefinition10.getCONNECTION_TIMEOUT();
        java.lang.String str12 = mongoDBRiverDefinition10.getCREDENTIALS_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition10.getDEFAULT_DB_HOST();
        com.mongodb.BasicDBObject basicDBObject14 = mongoDBRiverDefinition10.getMongoCollectionFilter();
        builder0.mongoCollectionFilter = basicDBObject14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.statisticsTypeName("");
        java.lang.String str18 = builder0.scriptType;
        builder0.setmongoDb("drop_collection");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "connect_timeout" + "'", str11, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "credentials" + "'", str12, "credentials");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "localhost" + "'", str13, "localhost");
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test04458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04458");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder1);
        java.util.Set<java.lang.String> strSet3 = builder1.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions4 = builder1.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject5 = null;
        builder1.setmongoOplogFilter(basicDBObject5);
        com.mongodb.BasicDBObject basicDBObject7 = builder1.getmongoCollectionFilter();
        builder0.mongoCollectionFilter = basicDBObject7;
        boolean boolean9 = builder0.disableIndexRefresh;
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.common.settings.Settings settings11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.typeName;
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder12.mongoCollectionFilter = basicDBObject14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder12.mongoAdminPassword("db");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory18 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings19 = null;
        org.elasticsearch.common.settings.Settings settings20 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        java.util.Set<java.lang.String> strSet23 = builder21.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject25 = null;
        builder21.setmongoOplogFilter(basicDBObject25);
        com.mongodb.BasicDBObject basicDBObject27 = builder21.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings28 = new org.elasticsearch.river.RiverSettings(settings20, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.RiverSettings riverSettings29 = new org.elasticsearch.river.RiverSettings(settings19, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript30 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder12.mongoOplogFilter(basicDBObject27);
        org.elasticsearch.river.RiverSettings riverSettings32 = new org.elasticsearch.river.RiverSettings(settings11, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.RiverSettings riverSettings33 = new org.elasticsearch.river.RiverSettings(settings10, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        builder0.mongoOplogFilter = basicDBObject27;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder0.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(mongoClientOptions4);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertNotNull(executableScript30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test04459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04459");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = mongoDBRiverDefinition2.getDEFAULT_BULK_SIZE();
        java.lang.String str6 = mongoDBRiverDefinition2.indexName;
        java.lang.String str7 = mongoDBRiverDefinition2.mongoCollection;
        java.lang.String str8 = mongoDBRiverDefinition2.getPARENT_TYPES_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition2.getMongoAdminPassword();
        java.lang.String str10 = mongoDBRiverDefinition2.getPORT_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition2.getMongoLocalPassword();
        java.lang.String str12 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertNotNull(byteSizeValue5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "parent_types" + "'", str8, "parent_types");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "port" + "'", str10, "port");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "credentials" + "'", str12, "credentials");
    }

    @Test
    public void test04460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04460");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getSOCKET_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getMongoOplogNamespace();
        int int6 = mongoDBRiverDefinition2.getDEFAULT_DB_PORT();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "socket_timeout" + "'", str3, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "secondary_read_preference" + "'", str4, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "null.null" + "'", str5, "null.null");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
    }

    @Test
    public void test04461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04461");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        builder0.setdisableIndexRefresh(false);
        boolean boolean10 = builder0.getmongoUseSSL();
        builder0.setriverName("db");
        boolean boolean13 = builder0.mongoSSLVerifyCertificate;
        builder0.scriptType = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.statisticsIndexName("index");
        java.lang.String str18 = builder0.getincludeCollection();
        builder0.riverName = "flush_interval";
        org.elasticsearch.common.settings.Settings settings21 = null;
        org.elasticsearch.common.settings.Settings settings22 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        java.util.Set<java.lang.String> strSet25 = builder23.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject27 = null;
        builder23.setmongoOplogFilter(basicDBObject27);
        boolean boolean29 = builder23.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray30 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList31 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList31, serverAddressArray30);
        builder23.mongoServers = serverAddressList31;
        java.lang.String str34 = builder23.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder23.connectTimeout((int) '#');
        java.util.Set<java.lang.String> strSet37 = builder23.excludeFields;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory38 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder40);
        java.util.Set<java.lang.String> strSet42 = builder40.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions43 = builder40.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject44 = null;
        builder40.setmongoOplogFilter(basicDBObject44);
        com.mongodb.BasicDBObject basicDBObject46 = builder40.getmongoCollectionFilter();
        builder39.mongoCollectionFilter = basicDBObject46;
        org.elasticsearch.script.ExecutableScript executableScript48 = docScoreNativeScriptFactory38.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder23.mongoCollectionFilter(basicDBObject46);
        org.elasticsearch.river.RiverSettings riverSettings50 = new org.elasticsearch.river.RiverSettings(settings22, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject46);
        org.elasticsearch.river.RiverSettings riverSettings51 = new org.elasticsearch.river.RiverSettings(settings21, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder0.mongoCollectionFilter(basicDBObject46);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(serverAddressArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(strSet37);
        org.junit.Assert.assertNull(strSet42);
        org.junit.Assert.assertNull(mongoClientOptions43);
        org.junit.Assert.assertNotNull(basicDBObject46);
        org.junit.Assert.assertNotNull(executableScript48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test04462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04462");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.BasicDBObject basicDBObject1 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("credentials");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?credentials?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test04463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04463");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.statisticsIndexName("port");
        builder0.setskipInitialImport(false);
        boolean boolean11 = builder0.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str13 = builder0.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoLocalUser("drop_collection");
        java.lang.String str16 = builder15.getstatisticsIndexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "port" + "'", str16, "port");
    }

    @Test
    public void test04464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04464");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str3 = builder2.typeName;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder2.mongoCollectionFilter = basicDBObject4;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.mongoUseSSL(true);
        java.lang.String[] strArray17 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        builder7.setparentTypes((java.util.Set<java.lang.String>) strSet18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet18);
        builder0.setdisableIndexRefresh(false);
        com.mongodb.MongoClientOptions mongoClientOptions24 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder0.mongoClientOptions(mongoClientOptions24);
        java.util.Set<java.lang.String> strSet26 = null;
        builder0.includeFields = strSet26;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder28);
        int int30 = mongoDBRiverDefinition29.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str31 = mongoDBRiverDefinition29.getDB_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList32 = mongoDBRiverDefinition29.getMongoServers();
        builder0.setmongoServers(serverAddressList32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder0.riverName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.mongoAdminUser("credentials");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 8 + "'", int30 == 8);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "db" + "'", str31, "db");
        org.junit.Assert.assertNotNull(serverAddressList32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test04465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04465");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = mongoDBRiverDefinition2.getDEFAULT_BULK_SIZE();
        java.lang.String str6 = mongoDBRiverDefinition2.indexName;
        java.lang.String str7 = mongoDBRiverDefinition2.getBULK_SIZE_FIELD();
        int int8 = mongoDBRiverDefinition2.getDEFAULT_CONCURRENT_REQUESTS();
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition2.getMongoOplogFilter();
        java.lang.String str10 = mongoDBRiverDefinition2.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        boolean boolean12 = mongoDBRiverDefinition2.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertNotNull(byteSizeValue5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "bulk_size" + "'", str7, "bulk_size");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNull(basicDBObject9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ssl_verify_certificate" + "'", str10, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "script_type" + "'", str11, "script_type");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04466");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        builder5.mongoClientOptions = mongoClientOptions6;
        builder5.setmongoCollection("gridfs");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory10 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.util.Set<java.lang.String> strSet14 = builder12.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder12.setmongoOplogFilter(basicDBObject16);
        com.mongodb.BasicDBObject basicDBObject18 = builder12.getmongoCollectionFilter();
        builder11.mongoCollectionFilter = basicDBObject18;
        org.elasticsearch.script.ExecutableScript executableScript20 = docScoreNativeScriptFactory10.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        builder5.setmongoCollectionFilter(basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder5.indexName("ssl");
        boolean boolean24 = builder23.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        boolean boolean26 = mongoDBRiverDefinition25.isSkipInitialImport();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(executableScript20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test04467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04467");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory0 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        java.util.Set<java.lang.String> strSet4 = builder2.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder2.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder2.setmongoOplogFilter(basicDBObject6);
        com.mongodb.BasicDBObject basicDBObject8 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings9 = new org.elasticsearch.river.RiverSettings(settings1, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject8);
        java.util.Map<java.lang.String, java.lang.Object> strMap10 = riverSettings9.settings();
        org.elasticsearch.script.ExecutableScript executableScript11 = docScoreNativeScriptFactory0.newScript(strMap10);
        org.elasticsearch.common.settings.Settings settings12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str14 = builder13.typeName;
        com.mongodb.BasicDBObject basicDBObject15 = null;
        builder13.mongoCollectionFilter = basicDBObject15;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder13.mongoAdminPassword("db");
        boolean boolean19 = builder13.getmongoGridFS();
        java.lang.String str20 = builder13.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder13.riverIndexName("index");
        builder13.setincludeCollection("disable_index_refresh");
        builder13.setdisableIndexRefresh(false);
        org.elasticsearch.common.settings.Settings settings27 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str29 = builder28.typeName;
        com.mongodb.BasicDBObject basicDBObject30 = null;
        builder28.mongoCollectionFilter = basicDBObject30;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder28.mongoAdminPassword("db");
        org.elasticsearch.common.settings.Settings settings34 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str36 = builder35.typeName;
        com.mongodb.BasicDBObject basicDBObject37 = null;
        builder35.mongoCollectionFilter = basicDBObject37;
        java.lang.String str39 = builder35.mongoAdminUser;
        builder35.disableIndexRefresh = false;
        java.lang.String str42 = builder35.getincludeCollection();
        org.elasticsearch.common.settings.Settings settings43 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder44);
        java.util.Set<java.lang.String> strSet46 = builder44.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions47 = builder44.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject48 = null;
        builder44.setmongoOplogFilter(basicDBObject48);
        com.mongodb.BasicDBObject basicDBObject50 = builder44.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings51 = new org.elasticsearch.river.RiverSettings(settings43, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject50);
        builder35.setmongoOplogFilter(basicDBObject50);
        org.elasticsearch.river.RiverSettings riverSettings53 = new org.elasticsearch.river.RiverSettings(settings34, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder28.mongoOplogFilter(basicDBObject50);
        org.elasticsearch.river.RiverSettings riverSettings55 = new org.elasticsearch.river.RiverSettings(settings27, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject50);
        builder13.mongoCollectionFilter = basicDBObject50;
        org.elasticsearch.river.RiverSettings riverSettings57 = new org.elasticsearch.river.RiverSettings(settings12, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject50);
        org.elasticsearch.script.ExecutableScript executableScript58 = docScoreNativeScriptFactory0.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject50);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNull(mongoClientOptions5);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(executableScript11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertNull(mongoClientOptions47);
        org.junit.Assert.assertNotNull(basicDBObject50);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(executableScript58);
    }

    @Test
    public void test04468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04468");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        builder0.setmongoClientOptions(mongoClientOptions9);
        com.mongodb.BasicDBObject basicDBObject11 = builder0.mongoOplogFilter;
        builder0.mongoDb = "";
        java.lang.String str14 = builder0.riverName;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test04469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04469");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getDEFAULT_DB_HOST();
        int int6 = mongoDBRiverDefinition2.socketTimeout;
        boolean boolean7 = mongoDBRiverDefinition2.getmongoSecondaryReadPreference();
        java.lang.String str8 = mongoDBRiverDefinition2.getTYPE_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition2.getFILTER_FIELD();
        boolean boolean10 = mongoDBRiverDefinition2.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "localhost" + "'", str5, "localhost");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "type" + "'", str8, "type");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "filter" + "'", str9, "filter");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test04470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04470");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.isMongoSecondaryReadPreference();
        java.lang.String str4 = mongoDBRiverDefinition2.getRiverIndexName();
        java.lang.String str5 = mongoDBRiverDefinition2.getPASSWORD_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getPARENT_TYPES_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getUSER_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.mongoGridFS;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "password" + "'", str5, "password");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "parent_types" + "'", str6, "parent_types");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "user" + "'", str7, "user");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test04471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04471");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = mongoDBRiverDefinition2.getDEFAULT_BULK_SIZE();
        java.lang.String str6 = mongoDBRiverDefinition2.indexName;
        java.lang.String str7 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        boolean boolean8 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition2.getMongoCollectionFilter();
        java.lang.String str10 = mongoDBRiverDefinition2.scriptType;
        java.lang.String str11 = mongoDBRiverDefinition2.getDB_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertNotNull(byteSizeValue5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "connect_timeout" + "'", str7, "connect_timeout");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(basicDBObject9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "db" + "'", str11, "db");
    }

    @Test
    public void test04472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04472");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = mongoDBRiverDefinition2.getDEFAULT_BULK_SIZE();
        java.lang.String str6 = mongoDBRiverDefinition2.indexName;
        java.lang.String str7 = mongoDBRiverDefinition2.getBULK_SIZE_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.getdropCollection();
        java.lang.String str9 = mongoDBRiverDefinition2.getSCRIPT_TYPE_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertNotNull(byteSizeValue5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "bulk_size" + "'", str7, "bulk_size");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script_type" + "'", str9, "script_type");
    }

    @Test
    public void test04473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04473");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        int int4 = mongoDBRiverDefinition2.getConnectTimeout();
        java.lang.String str5 = mongoDBRiverDefinition2.riverIndexName;
        java.lang.String str6 = mongoDBRiverDefinition2.getPARENT_TYPES_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getDROP_COLLECTION_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.isAdvancedTransformation();
        java.lang.String str9 = mongoDBRiverDefinition2.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition2.statisticsTypeName;
        java.lang.String str11 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition2.getSSL_CONNECTION_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "parent_types" + "'", str6, "parent_types");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "drop_collection" + "'", str7, "drop_collection");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "concurrent_requests" + "'", str9, "concurrent_requests");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "script" + "'", str11, "script");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ssl" + "'", str12, "ssl");
    }

    @Test
    public void test04474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04474");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = builder0.mongoServers;
        boolean boolean9 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean11 = builder0.getmongoGridFS();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.statisticsTypeName("flush_interval");
        java.lang.String str14 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.advancedTransformation(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(serverAddressList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test04475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04475");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        builder0.setsocketTimeout((int) (short) 1);
        java.lang.String str10 = builder0.getstatisticsTypeName();
        builder0.setmongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.statisticsIndexName("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.script("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test04476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04476");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str3 = mongoDBRiverDefinition1.scriptType;
        com.mongodb.MongoClientOptions mongoClientOptions4 = mongoDBRiverDefinition1.mongoClientOptions;
        boolean boolean5 = mongoDBRiverDefinition1.mongoGridFS;
        boolean boolean6 = mongoDBRiverDefinition1.getimportAllCollections();
        boolean boolean7 = mongoDBRiverDefinition1.getmongoGridFS();
        java.lang.String str8 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(mongoClientOptions4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ssl" + "'", str8, "ssl");
    }

    @Test
    public void test04477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04477");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.isMongoSecondaryReadPreference();
        java.lang.String str4 = mongoDBRiverDefinition2.getMongoDb();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = mongoDBRiverDefinition2.initialTimestamp;
        org.elasticsearch.common.logging.ESLogger eSLogger6 = mongoDBRiverDefinition2.getlogger();
        java.lang.String str7 = mongoDBRiverDefinition2.getIndexName();
        java.util.Set<java.lang.String> strSet8 = mongoDBRiverDefinition2.includeFields;
        org.elasticsearch.common.unit.TimeValue timeValue9 = mongoDBRiverDefinition2.getDEFAULT_FLUSH_INTERVAL();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(eSLogger6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(timeValue9);
    }

    @Test
    public void test04478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04478");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = builder0.statisticsTypeName;
        builder0.setmongoSSLVerifyCertificate(true);
        builder0.setimportAllCollections(false);
        java.lang.String str8 = builder0.mongoLocalUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.util.Set<java.lang.String> strSet11 = builder9.includeFields;
        java.lang.String str12 = builder9.getstatisticsIndexName();
        builder9.setsocketTimeout(10);
        builder9.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder9.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoDb("throttle_size");
        java.lang.String str21 = builder20.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder22);
        java.lang.String str25 = mongoDBRiverDefinition24.getCONNECTION_TIMEOUT();
        int int26 = mongoDBRiverDefinition24.getConnectTimeout();
        boolean boolean27 = mongoDBRiverDefinition24.advancedTransformation;
        java.lang.String str28 = mongoDBRiverDefinition24.getCOLLECTION_FIELD();
        java.lang.String str29 = mongoDBRiverDefinition24.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean30 = mongoDBRiverDefinition24.getmongoSecondaryReadPreference();
        java.util.List<com.mongodb.ServerAddress> serverAddressList31 = mongoDBRiverDefinition24.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder20.mongoServers(serverAddressList31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder0.mongoServers(serverAddressList31);
        java.lang.String str34 = builder0.getriverIndexName();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "connect_timeout" + "'", str25, "connect_timeout");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "collection" + "'", str28, "collection");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "secondary_read_preference" + "'", str29, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(serverAddressList31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test04479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04479");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        builder0.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.advancedTransformation(true);
        builder0.mongoSSLVerifyCertificate = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.scriptType("concurrent_requests");
        java.util.Set<java.lang.String> strSet14 = builder13.parentTypes;
        builder13.scriptType = "";
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strSet14);
    }

    @Test
    public void test04480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04480");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.typeName;
        com.mongodb.BasicDBObject basicDBObject5 = null;
        builder3.mongoCollectionFilter = basicDBObject5;
        com.mongodb.BasicDBObject basicDBObject7 = null;
        builder3.mongoOplogFilter = basicDBObject7;
        builder3.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = builder3.mongoServers;
        java.lang.String[] strArray15 = new java.lang.String[] { "connect_timeout", "credentials", "connect_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        builder3.setparentTypes((java.util.Set<java.lang.String>) strSet16);
        builder0.parentTypes = strSet16;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.typeName;
        com.mongodb.BasicDBObject basicDBObject22 = null;
        builder20.mongoCollectionFilter = basicDBObject22;
        java.lang.String str24 = builder20.mongoAdminUser;
        builder20.disableIndexRefresh = false;
        java.lang.String str27 = builder20.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder20.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder29);
        java.util.Set<java.lang.String> strSet31 = builder29.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder29.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject33 = null;
        builder29.setmongoOplogFilter(basicDBObject33);
        boolean boolean35 = builder29.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray36 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList37 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList37, serverAddressArray36);
        builder29.mongoServers = serverAddressList37;
        java.lang.String str40 = builder29.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str42 = builder41.typeName;
        com.mongodb.BasicDBObject basicDBObject43 = null;
        builder41.mongoCollectionFilter = basicDBObject43;
        java.lang.String str45 = builder41.mongoAdminUser;
        builder41.disableIndexRefresh = false;
        java.lang.String str48 = builder41.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str50 = builder49.typeName;
        com.mongodb.BasicDBObject basicDBObject51 = null;
        builder49.mongoCollectionFilter = basicDBObject51;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder49.mongoUseSSL(true);
        java.lang.String[] strArray64 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        builder54.setparentTypes((java.util.Set<java.lang.String>) strSet65);
        builder41.parentTypes = strSet65;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder29.parentTypes((java.util.Set<java.lang.String>) strSet65);
        builder20.setexcludeFields((java.util.Set<java.lang.String>) strSet65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition72 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str73 = builder0.scriptType;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(mongoClientOptions28);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(serverAddressArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(str73);
    }

    @Test
    public void test04481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04481");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        builder0.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.util.Set<java.lang.String> strSet14 = builder12.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder12.setmongoOplogFilter(basicDBObject16);
        com.mongodb.BasicDBObject basicDBObject18 = builder12.getmongoCollectionFilter();
        builder11.mongoCollectionFilter = basicDBObject18;
        org.elasticsearch.river.RiverSettings riverSettings20 = new org.elasticsearch.river.RiverSettings(settings10, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoCollectionFilter(basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.socketTimeout((int) (short) 100);
        builder23.mongoAdminPassword = "script_type";
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test04482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04482");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getNAME_FIELD();
        boolean boolean7 = mongoDBRiverDefinition2.getadvancedTransformation();
        java.lang.String str8 = mongoDBRiverDefinition2.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition2.getBULK_TIMEOUT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition2.includeCollection;
        com.mongodb.MongoClientOptions mongoClientOptions11 = mongoDBRiverDefinition2.mongoClientOptions;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "import_all_collections" + "'", str5, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "name" + "'", str6, "name");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "import_all_collections" + "'", str8, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "bulk_timeout" + "'", str9, "bulk_timeout");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(mongoClientOptions11);
    }

    @Test
    public void test04483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04483");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.typeName;
        com.mongodb.BasicDBObject basicDBObject5 = null;
        builder3.mongoCollectionFilter = basicDBObject5;
        java.lang.String str7 = builder3.mongoAdminUser;
        builder3.disableIndexRefresh = false;
        java.lang.String str10 = builder3.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder3.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.util.Set<java.lang.String> strSet14 = builder12.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder12.setmongoOplogFilter(basicDBObject16);
        boolean boolean18 = builder12.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray19 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList20 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList20, serverAddressArray19);
        builder12.mongoServers = serverAddressList20;
        java.lang.String str23 = builder12.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str25 = builder24.typeName;
        com.mongodb.BasicDBObject basicDBObject26 = null;
        builder24.mongoCollectionFilter = basicDBObject26;
        java.lang.String str28 = builder24.mongoAdminUser;
        builder24.disableIndexRefresh = false;
        java.lang.String str31 = builder24.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str33 = builder32.typeName;
        com.mongodb.BasicDBObject basicDBObject34 = null;
        builder32.mongoCollectionFilter = basicDBObject34;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder32.mongoUseSSL(true);
        java.lang.String[] strArray47 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        builder37.setparentTypes((java.util.Set<java.lang.String>) strSet48);
        builder24.parentTypes = strSet48;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder12.parentTypes((java.util.Set<java.lang.String>) strSet48);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder0.includeFields((java.util.Set<java.lang.String>) strSet48);
        builder0.settypeName("secondary_read_preference");
        builder0.mongoLocalUser = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean60 = mongoDBRiverDefinition59.getmongoUseSSL();
        boolean boolean61 = mongoDBRiverDefinition59.isDropCollection();
        java.lang.String str62 = mongoDBRiverDefinition59.mongoLocalUser;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(mongoClientOptions11);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(serverAddressArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "initial_timestamp" + "'", str62, "initial_timestamp");
    }

    @Test
    public void test04484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04484");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        builder0.setsocketTimeout((int) (short) 1);
        java.lang.String str10 = builder0.getstatisticsTypeName();
        boolean boolean11 = builder0.getmongoGridFS();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.mongoLocalUser("name");
        builder0.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.statisticsTypeName("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        builder18.dropCollection = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test04485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04485");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.storeStatistics = true;
        builder0.mongoAdminPassword = "socket_timeout";
        boolean boolean10 = builder0.mongoSecondaryReadPreference;
        builder0.setstatisticsTypeName("port");
        java.lang.String str13 = builder0.getmongoAdminPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "socket_timeout" + "'", str13, "socket_timeout");
    }

    @Test
    public void test04486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04486");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.script("hi!");
        boolean boolean16 = builder15.mongoSecondaryReadPreference;
        builder15.setriverIndexName("");
        builder15.throttleSize = (-1);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test04487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04487");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        int int8 = builder0.socketTimeout;
        java.lang.String str9 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoAdminPassword("local");
        builder11.indexName = "options";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test04488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04488");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.lang.String str9 = builder8.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoCollection("drop_collection");
        boolean boolean12 = builder11.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.mongoLocalUser("bulk_size");
        boolean boolean15 = builder14.importAllCollections;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test04489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04489");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.lang.String str9 = builder8.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.typeName("bulk_size");
        java.lang.String str12 = builder11.getmongoLocalUser();
        builder11.indexName = "script";
        int int15 = builder11.throttleSize;
        java.lang.String str16 = builder11.riverIndexName;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test04490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04490");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str11 = mongoDBRiverDefinition10.getCONNECTION_TIMEOUT();
        java.lang.String str12 = mongoDBRiverDefinition10.getCREDENTIALS_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition10.getDEFAULT_DB_HOST();
        com.mongodb.BasicDBObject basicDBObject14 = mongoDBRiverDefinition10.getMongoCollectionFilter();
        builder0.mongoCollectionFilter = basicDBObject14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.statisticsTypeName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        boolean boolean19 = mongoDBRiverDefinition18.isDisableIndexRefresh();
        boolean boolean20 = mongoDBRiverDefinition18.getmongoGridFS();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "connect_timeout" + "'", str11, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "credentials" + "'", str12, "credentials");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "localhost" + "'", str13, "localhost");
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test04491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04491");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = builder0.getmongoCollectionFilter();
        builder0.setskipInitialImport(false);
        java.lang.String str9 = builder0.statisticsIndexName;
        java.lang.String str10 = builder0.scriptType;
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = builder0.getmongoServers();
        boolean boolean12 = builder0.getmongoGridFS();
        java.lang.String str13 = builder0.getmongoDb();
        java.util.Set<java.lang.String> strSet14 = builder0.parentTypes;
        com.mongodb.BasicDBObject basicDBObject15 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.mongoOplogFilter(basicDBObject15);
        builder0.setmongoLocalPassword("flush_interval");
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test04492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04492");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        int int9 = builder0.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        java.util.Set<java.lang.String> strSet13 = builder11.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject15 = null;
        builder11.setmongoOplogFilter(basicDBObject15);
        boolean boolean17 = builder11.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder11.socketTimeout((int) ' ');
        java.util.Set<java.lang.String> strSet20 = builder19.excludeFields;
        builder19.setriverName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder19.mongoAdminUser("concurrent_bulk_requests");
        com.mongodb.BasicDBObject basicDBObject25 = builder19.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str27 = builder26.typeName;
        com.mongodb.BasicDBObject basicDBObject28 = null;
        builder26.mongoCollectionFilter = basicDBObject28;
        java.lang.String str30 = builder26.mongoAdminUser;
        builder26.disableIndexRefresh = false;
        java.lang.String str33 = builder26.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder26.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder35);
        java.util.Set<java.lang.String> strSet37 = builder35.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder35.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject39 = null;
        builder35.setmongoOplogFilter(basicDBObject39);
        boolean boolean41 = builder35.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray42 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList43 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList43, serverAddressArray42);
        builder35.mongoServers = serverAddressList43;
        java.lang.String str46 = builder35.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str48 = builder47.typeName;
        com.mongodb.BasicDBObject basicDBObject49 = null;
        builder47.mongoCollectionFilter = basicDBObject49;
        java.lang.String str51 = builder47.mongoAdminUser;
        builder47.disableIndexRefresh = false;
        java.lang.String str54 = builder47.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str56 = builder55.typeName;
        com.mongodb.BasicDBObject basicDBObject57 = null;
        builder55.mongoCollectionFilter = basicDBObject57;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder55.mongoUseSSL(true);
        java.lang.String[] strArray70 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet71 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet71, strArray70);
        builder60.setparentTypes((java.util.Set<java.lang.String>) strSet71);
        builder47.parentTypes = strSet71;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder35.parentTypes((java.util.Set<java.lang.String>) strSet71);
        builder26.setexcludeFields((java.util.Set<java.lang.String>) strSet71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder19.parentTypes((java.util.Set<java.lang.String>) strSet71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder0.includeFields((java.util.Set<java.lang.String>) strSet71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition80 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder79);
        java.util.Set<java.lang.String> strSet81 = builder79.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions82 = builder79.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject83 = null;
        builder79.setmongoOplogFilter(basicDBObject83);
        boolean boolean85 = builder79.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray86 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList87 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList87, serverAddressArray86);
        builder79.mongoServers = serverAddressList87;
        builder0.mongoServers = serverAddressList87;
        boolean boolean91 = builder0.getimportAllCollections();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(basicDBObject25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNull(mongoClientOptions34);
        org.junit.Assert.assertNull(strSet37);
        org.junit.Assert.assertNull(mongoClientOptions38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(serverAddressArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(strSet81);
        org.junit.Assert.assertNull(mongoClientOptions82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(serverAddressArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test04493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04493");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = builder0.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.advancedTransformation(false);
        boolean boolean9 = builder8.skipInitialImport;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        boolean boolean11 = mongoDBRiverDefinition10.skipInitialImport;
        java.lang.String str12 = mongoDBRiverDefinition10.getEXCLUDE_FIELDS_FIELD();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition10.includeFields;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "exclude_fields" + "'", str12, "exclude_fields");
        org.junit.Assert.assertNull(strSet13);
    }

    @Test
    public void test04494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04494");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.storeStatistics(false);
        java.lang.String str9 = builder8.getriverIndexName();
        builder8.setstoreStatistics(true);
        int int12 = builder8.getsocketTimeout();
        builder8.setmongoUseSSL(false);
        boolean boolean15 = builder8.getadvancedTransformation();
        int int16 = builder8.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder8.mongoAdminUser("drop_collection");
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test04495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04495");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder1);
        java.lang.String str4 = mongoDBRiverDefinition3.getCONNECTION_TIMEOUT();
        java.lang.String str5 = mongoDBRiverDefinition3.getCREDENTIALS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition3.getDEFAULT_DB_HOST();
        int int7 = mongoDBRiverDefinition3.socketTimeout;
        com.mongodb.BasicDBObject basicDBObject8 = mongoDBRiverDefinition3.getMongoCollectionFilter();
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition3.getMongoOplogFilter();
        java.lang.String str10 = mongoDBRiverDefinition3.getCONCURRENT_REQUESTS_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions11 = mongoDBRiverDefinition3.getMongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition3.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings13 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject12);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "connect_timeout" + "'", str4, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "credentials" + "'", str5, "credentials");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "localhost" + "'", str6, "localhost");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNull(basicDBObject9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_requests" + "'", str10, "concurrent_requests");
        org.junit.Assert.assertNull(mongoClientOptions11);
        org.junit.Assert.assertNotNull(basicDBObject12);
    }

    @Test
    public void test04496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04496");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = builder0.mongoServers;
        boolean boolean9 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean11 = mongoDBRiverDefinition10.storeStatistics;
        java.lang.String str12 = mongoDBRiverDefinition10.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition10.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition10.getPASSWORD_FIELD();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition10.getParentTypes();
        boolean boolean16 = mongoDBRiverDefinition10.isAdvancedTransformation();
        boolean boolean17 = mongoDBRiverDefinition10.getmongoUseSSL();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(serverAddressList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "exclude_fields" + "'", str12, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "script" + "'", str13, "script");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "password" + "'", str14, "password");
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test04497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04497");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        docScoreSearchScript0.setNextScore(100.0f);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        java.util.Set<java.lang.String> strSet8 = builder6.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder6.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject10 = null;
        builder6.setmongoOplogFilter(basicDBObject10);
        boolean boolean12 = builder6.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder6.socketTimeout((int) ' ');
        java.util.Set<java.lang.String> strSet15 = builder14.excludeFields;
        builder14.setriverName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.mongoAdminUser("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder14.mongoDb("size");
        docScoreSearchScript0.setNextVar("advanced_transformation", (java.lang.Object) builder14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        java.lang.String str26 = mongoDBRiverDefinition25.mongoAdminPassword;
        int int27 = mongoDBRiverDefinition25.connectTimeout;
        java.lang.String str28 = mongoDBRiverDefinition25.getScriptType();
        java.lang.Object obj29 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str31 = builder30.typeName;
        com.mongodb.BasicDBObject basicDBObject32 = null;
        builder30.mongoCollectionFilter = basicDBObject32;
        java.lang.String str34 = builder30.mongoAdminUser;
        builder30.disableIndexRefresh = false;
        java.lang.String str37 = builder30.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder30.mongoClientOptions;
        builder30.dropCollection = false;
        java.lang.Object obj41 = docScoreSearchScript0.unwrap((java.lang.Object) false);
        org.elasticsearch.common.settings.Settings settings43 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder44);
        java.lang.String str47 = mongoDBRiverDefinition46.getCONNECTION_TIMEOUT();
        java.lang.String str48 = mongoDBRiverDefinition46.getCREDENTIALS_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition46.getDEFAULT_DB_HOST();
        int int50 = mongoDBRiverDefinition46.socketTimeout;
        com.mongodb.BasicDBObject basicDBObject51 = mongoDBRiverDefinition46.getMongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings52 = new org.elasticsearch.river.RiverSettings(settings43, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject51);
        docScoreSearchScript0.setNextVar("gridfs", (java.lang.Object) riverSettings52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder54);
        java.util.Set<java.lang.String> strSet56 = builder54.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions57 = builder54.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject58 = null;
        builder54.setmongoOplogFilter(basicDBObject58);
        boolean boolean60 = builder54.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder54.socketTimeout((int) ' ');
        java.lang.String str63 = builder62.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder62.mongoCollection("drop_collection");
        com.mongodb.BasicDBObject basicDBObject66 = builder62.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder62.mongoSSLVerifyCertificate(true);
        java.lang.Object obj69 = docScoreSearchScript0.unwrap((java.lang.Object) builder68);
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext70 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(mongoClientOptions38);
        org.junit.Assert.assertEquals("'" + obj41 + "' != '" + false + "'", obj41, false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "connect_timeout" + "'", str47, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "credentials" + "'", str48, "credentials");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "localhost" + "'", str49, "localhost");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(basicDBObject51);
        org.junit.Assert.assertNull(strSet56);
        org.junit.Assert.assertNull(mongoClientOptions57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(basicDBObject66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(obj69);
    }

    @Test
    public void test04498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04498");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.importAllCollections(true);
        builder0.setmongoLocalUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.indexName("script_type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.mongoLocalPassword("exclude_fields");
        builder19.mongoGridFS = true;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test04499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04499");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = builder0.getmongoCollectionFilter();
        java.lang.String str7 = builder0.getindexName();
        com.mongodb.ServerAddress[] serverAddressArray8 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList9 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList9, serverAddressArray8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList9);
        java.lang.String str12 = builder0.gettypeName();
        boolean boolean13 = builder0.importAllCollections;
        boolean boolean14 = builder0.getmongoSecondaryReadPreference();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(serverAddressArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test04500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04500");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        builder5.importAllCollections = false;
        java.util.Set<java.lang.String> strSet8 = builder5.parentTypes;
        com.mongodb.BasicDBObject basicDBObject9 = builder5.mongoOplogFilter;
        builder5.riverName = "user";
        boolean boolean12 = builder5.mongoSSLVerifyCertificate;
        builder5.statisticsIndexName = "concurrent_bulk_requests";
        java.util.Set<java.lang.String> strSet15 = builder5.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder5.riverName("concurrent_requests");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(basicDBObject9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(builder17);
    }
}

