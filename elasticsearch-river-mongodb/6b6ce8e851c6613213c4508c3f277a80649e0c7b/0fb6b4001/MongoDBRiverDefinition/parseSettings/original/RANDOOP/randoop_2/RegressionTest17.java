import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest17 {

    public static boolean debug = false;

    @Test
    public void test08501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08501");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.ServerAddress[] serverAddressArray5 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList6 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList6, serverAddressArray5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.storeStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminPassword("connect_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.typeName("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.indexName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.statisticsIndexName("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder16.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.typeName("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder24.riverIndexName("servers");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(serverAddressArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test08502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08502");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.includeCollection("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.mongoLocalPassword("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.mongoClientOptions(mongoClientOptions18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.mongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder19.mongoAdminPassword("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.mongoDb("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions27 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.mongoClientOptions(mongoClientOptions27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder26.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder30.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.connectTimeout((int) (short) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.indexName("hi!");
        java.lang.String[] strArray52 = new java.lang.String[] { "disable_index_refresh", "collection", "host", "user", "script_type", "socket_timeout", "include_fields", "bulk", "connect_timeout", "actions", "collection", "connect_timeout", "type" };
        java.util.LinkedHashSet<java.lang.String> strSet53 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet53, strArray52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder36.excludeFields((java.util.Set<java.lang.String>) strSet53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder23.parentTypes((java.util.Set<java.lang.String>) strSet53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder16.excludeFields((java.util.Set<java.lang.String>) strSet53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder16.mongoAdminPassword("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder59.skipInitialImport(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test08503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08503");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.mongoLocalPassword("include_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.mongoAdminPassword("null.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoLocalPassword("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.indexName("db");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoCollection("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.mongoClientOptions(mongoClientOptions18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder17.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject22 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder17.mongoCollectionFilter(basicDBObject22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder17.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder29.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions35 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.mongoClientOptions(mongoClientOptions35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder34.importAllCollections(false);
        com.mongodb.ServerAddress[] serverAddressArray39 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList40 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList40, serverAddressArray39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder34.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder33.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder33.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder45.mongoCollection("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder47.statisticsTypeName("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions51 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder50.mongoClientOptions(mongoClientOptions51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder50.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder54.includeCollection("filter");
        com.mongodb.ServerAddress[] serverAddressArray57 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList58 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList58, serverAddressArray57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder54.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList58);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder49.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList58);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder14.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList58);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder62.socketTimeout(8);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(serverAddressArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(serverAddressArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test08504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08504");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = builder6.build();
        java.lang.String str8 = mongoDBRiverDefinition7.getStatisticsIndexName();
        java.lang.String str9 = mongoDBRiverDefinition7.getMongoLocalPassword();
        com.mongodb.MongoClientOptions mongoClientOptions10 = mongoDBRiverDefinition7.getMongoClientOptions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(mongoClientOptions10);
    }

    @Test
    public void test08505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08505");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str13 = mongoDBRiverDefinition11.getStatisticsTypeName();
        boolean boolean14 = mongoDBRiverDefinition11.isImportAllCollections();
        java.lang.String str15 = mongoDBRiverDefinition11.getRiverIndexName();
        boolean boolean16 = mongoDBRiverDefinition11.isMongoGridFS();
        boolean boolean17 = mongoDBRiverDefinition11.isMongoGridFS();
        java.lang.String str18 = mongoDBRiverDefinition11.getMongoLocalUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList19 = mongoDBRiverDefinition11.getMongoServers();
        boolean boolean20 = mongoDBRiverDefinition11.isDropCollection();
        java.lang.String str21 = mongoDBRiverDefinition11.getMongoLocalPassword();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(serverAddressList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test08506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08506");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoClientOptions(mongoClientOptions4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoClientOptions(mongoClientOptions12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = builder13.build();
        java.lang.String str15 = mongoDBRiverDefinition14.getMongoDb();
        boolean boolean16 = mongoDBRiverDefinition14.isMongoSecondaryReadPreference();
        com.mongodb.BasicDBObject basicDBObject17 = mongoDBRiverDefinition14.getMongoOplogFilter();
        com.mongodb.BasicDBObject basicDBObject18 = mongoDBRiverDefinition14.getMongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings19 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        org.elasticsearch.script.ScriptService scriptService20 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("host", "type", riverSettings19, scriptService20);
        int int22 = mongoDBRiverDefinition21.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(basicDBObject17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test08507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08507");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.scriptType("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder4.statisticsIndexName("localhost");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder4.mongoDb("script_type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.script("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.indexName("db");
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoClientOptions(mongoClientOptions19);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test08508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08508");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder12.indexName("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder12.statisticsIndexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder12.mongoAdminPassword("actions");
        org.bson.types.Binary binary23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder12.initialTimestamp(binary23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test08509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08509");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str13 = mongoDBRiverDefinition11.getStatisticsTypeName();
        boolean boolean14 = mongoDBRiverDefinition11.isImportAllCollections();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp15 = mongoDBRiverDefinition11.getInitialTimestamp();
        int int16 = mongoDBRiverDefinition11.getSocketTimeout();
        int int17 = mongoDBRiverDefinition11.getConnectTimeout();
        java.lang.String str18 = mongoDBRiverDefinition11.getMongoAdminUser();
        java.lang.String str19 = mongoDBRiverDefinition11.getMongoAdminUser();
        java.lang.String str20 = mongoDBRiverDefinition11.getTypeName();
        java.util.Set<java.lang.String> strSet21 = mongoDBRiverDefinition11.getIncludeFields();
        java.lang.String str22 = mongoDBRiverDefinition11.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject23 = mongoDBRiverDefinition11.getMongoCollectionFilter();
        boolean boolean24 = mongoDBRiverDefinition11.isAdvancedTransformation();
        boolean boolean25 = mongoDBRiverDefinition11.isMongoSSLVerifyCertificate();
        boolean boolean26 = mongoDBRiverDefinition11.isDropCollection();
        java.lang.String str27 = mongoDBRiverDefinition11.getTypeName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(wildcardTimestamp15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(basicDBObject23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test08510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08510");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.mongoClientOptions(mongoClientOptions6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.mongoCollectionFilter(basicDBObject10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray23 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder15.includeFields((java.util.Set<java.lang.String>) strSet24);
        java.lang.Object obj27 = docScoreSearchScript0.unwrap((java.lang.Object) builder15);
        docScoreSearchScript0.setNextScore((float) (-1L));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions32 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.mongoClientOptions(mongoClientOptions32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder31.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject36 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder31.mongoCollectionFilter(basicDBObject36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder31.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder39.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.mongoSSLVerifyCertificate(false);
        com.mongodb.BasicDBObject basicDBObject44 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder41.mongoOplogFilter(basicDBObject44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder41.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder41.storeStatistics(false);
        java.lang.Class<?> wildcardClass50 = builder49.getClass();
        docScoreSearchScript0.setNextVar("drop_collection", (java.lang.Object) wildcardClass50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions53 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder52.mongoClientOptions(mongoClientOptions53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder52.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder56.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder56.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions61 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder60.mongoClientOptions(mongoClientOptions61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition63 = builder62.build();
        java.lang.String str64 = mongoDBRiverDefinition63.getMongoDb();
        java.lang.String str65 = mongoDBRiverDefinition63.getMongoLocalUser();
        int int66 = mongoDBRiverDefinition63.getSocketTimeout();
        int int67 = mongoDBRiverDefinition63.getSocketTimeout();
        java.lang.Object obj68 = docScoreSearchScript0.unwrap((java.lang.Object) int67);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj69 = docScoreSearchScript0.run();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertEquals("'" + obj68 + "' != '" + 0 + "'", obj68, 0);
    }

    @Test
    public void test08511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08511");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoDb();
        int int13 = mongoDBRiverDefinition9.getConnectTimeout();
        java.lang.String str14 = mongoDBRiverDefinition9.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject15 = mongoDBRiverDefinition9.getMongoOplogFilter();
        com.mongodb.BasicDBObject basicDBObject16 = mongoDBRiverDefinition9.getMongoOplogFilter();
        java.lang.String str17 = mongoDBRiverDefinition9.getMongoAdminPassword();
        boolean boolean18 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        boolean boolean19 = mongoDBRiverDefinition9.isDisableIndexRefresh();
        boolean boolean20 = mongoDBRiverDefinition9.isSkipInitialImport();
        java.util.Set<java.lang.String> strSet21 = mongoDBRiverDefinition9.getParentTypes();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(basicDBObject15);
        org.junit.Assert.assertNull(basicDBObject16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(strSet21);
    }

    @Test
    public void test08512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08512");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory4 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = null;
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory4.newScript(strMap5);
        docScoreSearchScript0.setNextVar("localhost", (java.lang.Object) docScoreNativeScriptFactory4);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript9 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj11 = docScoreSearchScript9.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript9.setNextScore((float) 1);
        docScoreSearchScript0.setNextVar("credentials", (java.lang.Object) 1);
        docScoreSearchScript0.setNextScore((float) 0L);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoClientOptions(mongoClientOptions19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject23 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder18.mongoCollectionFilter(basicDBObject23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder18.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder28.riverIndexName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.includeCollection("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.scriptType("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoDb("include_fields");
        docScoreSearchScript0.setNextVar("db", (java.lang.Object) builder38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions41 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.mongoClientOptions(mongoClientOptions41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder40.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder44.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions49 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.mongoClientOptions(mongoClientOptions49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = builder50.build();
        java.lang.String str52 = mongoDBRiverDefinition51.getMongoAdminPassword();
        boolean boolean53 = mongoDBRiverDefinition51.isMongoSecondaryReadPreference();
        java.lang.String str54 = mongoDBRiverDefinition51.getMongoLocalUser();
        java.lang.Object obj55 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition51);
        docScoreSearchScript0.setNextScore((float) 8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions59 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.mongoClientOptions(mongoClientOptions59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder58.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder62.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder62.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder66.connectTimeout((int) (short) 100);
        java.lang.Object obj69 = docScoreSearchScript0.unwrap((java.lang.Object) builder66);
        docScoreSearchScript0.setNextScore((float) 27017);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions73 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder72.mongoClientOptions(mongoClientOptions73);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder72.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder76.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder76.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder80.connectTimeout((int) (short) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder80.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder84.riverName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder84.connectTimeout((int) ' ');
        java.lang.Object obj89 = docScoreSearchScript0.unwrap((java.lang.Object) ' ');
        docScoreSearchScript0.setNextScore((float) 1000);
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextDocId((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + "hi!" + "'", obj11, "hi!");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertEquals("'" + obj89 + "' != '" + ' ' + "'", obj89, ' ');
    }

    @Test
    public void test08513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08513");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        com.mongodb.MongoClientOptions mongoClientOptions10 = mongoDBRiverDefinition9.getMongoClientOptions();
        java.lang.String str11 = mongoDBRiverDefinition9.getIncludeCollection();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoCollection();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition9.getExcludeFields();
        boolean boolean14 = mongoDBRiverDefinition9.isDropCollection();
        int int15 = mongoDBRiverDefinition9.getThrottleSize();
        java.lang.String str16 = mongoDBRiverDefinition9.getMongoAdminUser();
        int int17 = mongoDBRiverDefinition9.getSocketTimeout();
        boolean boolean18 = mongoDBRiverDefinition9.isSkipInitialImport();
        java.lang.String str19 = mongoDBRiverDefinition9.getMongoDb();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test08514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08514");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoAdminPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.getTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList14 = mongoDBRiverDefinition9.getMongoServers();
        boolean boolean15 = mongoDBRiverDefinition9.isDisableIndexRefresh();
        boolean boolean16 = mongoDBRiverDefinition9.isMongoGridFS();
        java.lang.String str17 = mongoDBRiverDefinition9.getScript();
        boolean boolean18 = mongoDBRiverDefinition9.isImportAllCollections();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(serverAddressList14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test08515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08515");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.statisticsIndexName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoAdminUser("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.riverIndexName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.script("ssl.null");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test08516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08516");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        com.mongodb.MongoClientOptions mongoClientOptions10 = mongoDBRiverDefinition9.getMongoClientOptions();
        java.lang.String str11 = mongoDBRiverDefinition9.getIncludeCollection();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoCollection();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition9.getExcludeFields();
        boolean boolean14 = mongoDBRiverDefinition9.isDropCollection();
        java.lang.String str15 = mongoDBRiverDefinition9.getRiverIndexName();
        com.mongodb.MongoClientOptions mongoClientOptions16 = mongoDBRiverDefinition9.getMongoClientOptions();
        boolean boolean17 = mongoDBRiverDefinition9.isSkipInitialImport();
        com.mongodb.BasicDBObject basicDBObject18 = mongoDBRiverDefinition9.getMongoOplogFilter();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(basicDBObject18);
    }

    @Test
    public void test08517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08517");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.statisticsIndexName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.mongoLocalPassword("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoClientOptions(mongoClientOptions16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.typeName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder19.typeName("include_fields");
        com.mongodb.BasicDBObject basicDBObject24 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.mongoCollectionFilter(basicDBObject24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions27 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.mongoClientOptions(mongoClientOptions27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder26.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.connectTimeout((int) (short) 10);
        java.lang.String[] strArray75 = new java.lang.String[] { "actions", "user", "name", "bulk_size", "", "script_type", "db", "disable_index_refresh", "local", "port", "filter", "gridfs", "drop_collection", "hi!", "include_collection", "secondary_read_preference", "options", "script_type", "index", "import_all_collections", "options", "connect_timeout", "index", "name", "gridfs", "name", "db", "script", "bulk_timeout", "flush_interval", "", "ssl_verify_certificate", "collection", "admin", "include_collection", "concurrent_requests", "secondary_read_preference", "bulk_timeout", "collection", "script_type", "gridfs", "script_type" };
        java.util.LinkedHashSet<java.lang.String> strSet76 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet76, strArray75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder32.excludeFields((java.util.Set<java.lang.String>) strSet76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder25.parentTypes((java.util.Set<java.lang.String>) strSet76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder14.includeFields((java.util.Set<java.lang.String>) strSet76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder14.includeCollection("parent_types");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder82.statisticsTypeName("include_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder82.typeName("db");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder82.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder82.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder92 = builder82.mongoLocalUser("flush_interval");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder94 = builder82.statisticsTypeName("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions95 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder96 = builder82.mongoClientOptions(mongoClientOptions95);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder98 = builder96.statisticsTypeName("servers");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test08518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08518");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        boolean boolean13 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        boolean boolean14 = mongoDBRiverDefinition11.isAdvancedTransformation();
        boolean boolean15 = mongoDBRiverDefinition11.isDropCollection();
        int int16 = mongoDBRiverDefinition11.getConnectTimeout();
        boolean boolean17 = mongoDBRiverDefinition11.isAdvancedTransformation();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test08519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08519");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.statisticsIndexName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.mongoLocalPassword("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.indexName("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.statisticsIndexName("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder20.mongoLocalPassword("null.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.riverName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.mongoSSLVerifyCertificate(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test08520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08520");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        boolean boolean13 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        com.mongodb.BasicDBObject basicDBObject14 = mongoDBRiverDefinition11.getMongoOplogFilter();
        com.mongodb.BasicDBObject basicDBObject15 = mongoDBRiverDefinition11.getMongoCollectionFilter();
        java.lang.String str16 = mongoDBRiverDefinition11.getMongoAdminUser();
        boolean boolean17 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(basicDBObject14);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test08521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08521");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.mongoLocalUser("concurrent_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.mongoCollection("null.null.null.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder6.includeCollection("name");
        org.elasticsearch.common.settings.Settings settings13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoClientOptions(mongoClientOptions15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.socketTimeout((int) (short) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.mongoAdminUser("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.mongoAdminUser("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder22.includeCollection("port");
        org.elasticsearch.common.settings.Settings settings27 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory28 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions30 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.mongoClientOptions(mongoClientOptions30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder33.mongoLocalUser("ssl_verify_certificate");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions39 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder38.mongoClientOptions(mongoClientOptions39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder38.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder42.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions47 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoClientOptions(mongoClientOptions47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = builder48.build();
        java.lang.String str50 = mongoDBRiverDefinition49.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions51 = mongoDBRiverDefinition49.getMongoClientOptions();
        boolean boolean52 = mongoDBRiverDefinition49.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions53 = mongoDBRiverDefinition49.getMongoClientOptions();
        java.lang.String str54 = mongoDBRiverDefinition49.getScript();
        com.mongodb.BasicDBObject basicDBObject55 = mongoDBRiverDefinition49.getMongoOplogFilter();
        java.lang.String str56 = mongoDBRiverDefinition49.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject57 = mongoDBRiverDefinition49.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder33.mongoOplogFilter(basicDBObject57);
        org.elasticsearch.script.ExecutableScript executableScript59 = docScoreNativeScriptFactory28.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject57);
        org.elasticsearch.river.RiverSettings riverSettings60 = new org.elasticsearch.river.RiverSettings(settings27, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder22.mongoOplogFilter(basicDBObject57);
        org.elasticsearch.river.RiverSettings riverSettings62 = new org.elasticsearch.river.RiverSettings(settings13, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder12.mongoCollectionFilter(basicDBObject57);
        java.util.Set<java.lang.String> strSet64 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder63.parentTypes(strSet64);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNull(mongoClientOptions51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(mongoClientOptions53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(basicDBObject55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(basicDBObject57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(executableScript59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test08522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08522");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoAdminUser("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.advancedTransformation(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder4.mongoClientOptions(mongoClientOptions9);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test08523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08523");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition9.getMongoOplogFilter();
        boolean boolean13 = mongoDBRiverDefinition9.isDropCollection();
        int int14 = mongoDBRiverDefinition9.getConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(basicDBObject12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test08524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08524");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoAdminPassword();
        boolean boolean13 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        int int14 = mongoDBRiverDefinition11.getThrottleSize();
        java.lang.String str15 = mongoDBRiverDefinition11.getMongoLocalUser();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test08525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08525");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.riverName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.mongoCollection("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.connectTimeout((int) (short) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = builder18.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder18.indexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder18.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.mongoAdminPassword("ssl.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.mongoLocalPassword("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder25.scriptType("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.mongoDb("include_collection");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test08526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08526");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoAdminPassword();
        java.lang.String str13 = mongoDBRiverDefinition11.getMongoCollection();
        java.lang.String str14 = mongoDBRiverDefinition11.getRiverName();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition11.getParentTypes();
        java.lang.String str16 = mongoDBRiverDefinition11.getScriptType();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test08527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08527");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoDb();
        int int13 = mongoDBRiverDefinition9.getConnectTimeout();
        java.lang.String str14 = mongoDBRiverDefinition9.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject15 = mongoDBRiverDefinition9.getMongoOplogFilter();
        com.mongodb.BasicDBObject basicDBObject16 = mongoDBRiverDefinition9.getMongoOplogFilter();
        java.lang.String str17 = mongoDBRiverDefinition9.getMongoAdminPassword();
        java.lang.String str18 = mongoDBRiverDefinition9.getRiverIndexName();
        java.lang.String str19 = mongoDBRiverDefinition9.getMongoLocalUser();
        boolean boolean20 = mongoDBRiverDefinition9.isSkipInitialImport();
        boolean boolean21 = mongoDBRiverDefinition9.isStoreStatistics();
        java.lang.String str22 = mongoDBRiverDefinition9.getMongoLocalUser();
        java.lang.String str23 = mongoDBRiverDefinition9.getIncludeCollection();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(basicDBObject15);
        org.junit.Assert.assertNull(basicDBObject16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test08528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08528");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = builder6.build();
        java.lang.String str8 = mongoDBRiverDefinition7.getStatisticsIndexName();
        java.lang.String str9 = mongoDBRiverDefinition7.getStatisticsTypeName();
        java.lang.String str10 = mongoDBRiverDefinition7.getTypeName();
        java.lang.String str11 = mongoDBRiverDefinition7.getMongoLocalPassword();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test08529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08529");
        org.elasticsearch.common.settings.Settings settings6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.socketTimeout((int) 'a');
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory15 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap16 = null;
        org.elasticsearch.script.ExecutableScript executableScript17 = docScoreNativeScriptFactory15.newScript(strMap16);
        java.util.Map<java.lang.String, java.lang.Object> strMap18 = null;
        org.elasticsearch.script.ExecutableScript executableScript19 = docScoreNativeScriptFactory15.newScript(strMap18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.mongoClientOptions(mongoClientOptions21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder20.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder24.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions29 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.mongoClientOptions(mongoClientOptions29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition31 = builder30.build();
        java.lang.String str32 = mongoDBRiverDefinition31.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions33 = mongoDBRiverDefinition31.getMongoClientOptions();
        boolean boolean34 = mongoDBRiverDefinition31.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions35 = mongoDBRiverDefinition31.getMongoClientOptions();
        java.lang.String str36 = mongoDBRiverDefinition31.getScript();
        com.mongodb.BasicDBObject basicDBObject37 = mongoDBRiverDefinition31.getMongoOplogFilter();
        java.lang.String str38 = mongoDBRiverDefinition31.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject39 = mongoDBRiverDefinition31.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript40 = docScoreNativeScriptFactory15.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder8.mongoCollectionFilter(basicDBObject39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder7.mongoOplogFilter(basicDBObject39);
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings6, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject39);
        org.elasticsearch.script.ScriptService scriptService44 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition45 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("include_fields.include_fields", "servers", riverSettings43, scriptService44);
        org.elasticsearch.script.ScriptService scriptService46 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition47 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("options", "parent_types", riverSettings43, scriptService46);
        org.elasticsearch.script.ScriptService scriptService48 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("null.null", "", riverSettings43, scriptService48);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(executableScript17);
        org.junit.Assert.assertNotNull(executableScript19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNull(mongoClientOptions33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(mongoClientOptions35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(basicDBObject37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(basicDBObject39);
        org.junit.Assert.assertNotNull(executableScript40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition45);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition47);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition49);
    }

    @Test
    public void test08530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08530");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.riverIndexName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = builder4.build();
        boolean boolean8 = mongoDBRiverDefinition7.isAdvancedTransformation();
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition7.getParentTypes();
        boolean boolean10 = mongoDBRiverDefinition7.isDropCollection();
        java.lang.String str11 = mongoDBRiverDefinition7.getStatisticsIndexName();
        java.lang.String str12 = mongoDBRiverDefinition7.getIndexName();
        int int13 = mongoDBRiverDefinition7.getSocketTimeout();
        boolean boolean14 = mongoDBRiverDefinition7.isMongoSecondaryReadPreference();
        java.lang.String str15 = mongoDBRiverDefinition7.getMongoCollection();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test08531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08531");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str13 = mongoDBRiverDefinition11.getScript();
        java.lang.String str14 = mongoDBRiverDefinition11.getMongoCollection();
        java.lang.String str15 = mongoDBRiverDefinition11.getMongoOplogNamespace();
        java.lang.String str16 = mongoDBRiverDefinition11.getMongoLocalPassword();
        java.util.Set<java.lang.String> strSet17 = mongoDBRiverDefinition11.getParentTypes();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "null.null" + "'", str15, "null.null");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(strSet17);
    }

    @Test
    public void test08532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08532");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isSkipInitialImport();
        boolean boolean12 = mongoDBRiverDefinition9.isMongoGridFS();
        int int13 = mongoDBRiverDefinition9.getSocketTimeout();
        boolean boolean14 = mongoDBRiverDefinition9.isMongoGridFS();
        boolean boolean15 = mongoDBRiverDefinition9.isMongoUseSSL();
        java.lang.String str16 = mongoDBRiverDefinition9.getStatisticsIndexName();
        java.lang.String str17 = mongoDBRiverDefinition9.getStatisticsTypeName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test08533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08533");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript0.setNextScore((float) 1000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.mongoClientOptions(mongoClientOptions6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.mongoCollectionFilter(basicDBObject10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = builder13.build();
        boolean boolean15 = mongoDBRiverDefinition14.isStoreStatistics();
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = mongoDBRiverDefinition14.getMongoServers();
        java.lang.String str17 = mongoDBRiverDefinition14.getScriptType();
        java.lang.Object obj18 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition14);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory19 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap20 = null;
        org.elasticsearch.script.ExecutableScript executableScript21 = docScoreNativeScriptFactory19.newScript(strMap20);
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = null;
        org.elasticsearch.script.ExecutableScript executableScript23 = docScoreNativeScriptFactory19.newScript(strMap22);
        org.elasticsearch.common.settings.Settings settings24 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions26 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.mongoClientOptions(mongoClientOptions26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.mongoClientOptions(mongoClientOptions33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder32.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder36.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions41 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.mongoClientOptions(mongoClientOptions41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition43 = builder42.build();
        java.lang.String str44 = mongoDBRiverDefinition43.getMongoAdminPassword();
        boolean boolean45 = mongoDBRiverDefinition43.isMongoSecondaryReadPreference();
        java.lang.String str46 = mongoDBRiverDefinition43.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet47 = mongoDBRiverDefinition43.getParentTypes();
        boolean boolean48 = mongoDBRiverDefinition43.isMongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject49 = mongoDBRiverDefinition43.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder29.mongoCollectionFilter(basicDBObject49);
        org.elasticsearch.river.RiverSettings riverSettings51 = new org.elasticsearch.river.RiverSettings(settings24, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject49);
        org.elasticsearch.script.ExecutableScript executableScript52 = docScoreNativeScriptFactory19.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions54 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder53.mongoClientOptions(mongoClientOptions54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder53.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder53.socketTimeout((int) 'a');
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory60 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap61 = null;
        org.elasticsearch.script.ExecutableScript executableScript62 = docScoreNativeScriptFactory60.newScript(strMap61);
        java.util.Map<java.lang.String, java.lang.Object> strMap63 = null;
        org.elasticsearch.script.ExecutableScript executableScript64 = docScoreNativeScriptFactory60.newScript(strMap63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions66 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder65.mongoClientOptions(mongoClientOptions66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder65.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder69.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder69.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions74 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder73.mongoClientOptions(mongoClientOptions74);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition76 = builder75.build();
        java.lang.String str77 = mongoDBRiverDefinition76.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions78 = mongoDBRiverDefinition76.getMongoClientOptions();
        boolean boolean79 = mongoDBRiverDefinition76.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions80 = mongoDBRiverDefinition76.getMongoClientOptions();
        java.lang.String str81 = mongoDBRiverDefinition76.getScript();
        com.mongodb.BasicDBObject basicDBObject82 = mongoDBRiverDefinition76.getMongoOplogFilter();
        java.lang.String str83 = mongoDBRiverDefinition76.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject84 = mongoDBRiverDefinition76.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript85 = docScoreNativeScriptFactory60.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject84);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder53.mongoCollectionFilter(basicDBObject84);
        org.elasticsearch.script.ExecutableScript executableScript87 = docScoreNativeScriptFactory19.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject84);
        java.lang.Object obj88 = docScoreSearchScript0.unwrap((java.lang.Object) basicDBObject84);
        docScoreSearchScript0.setNextScore(1.0f);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj91 = docScoreSearchScript0.run();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(executableScript21);
        org.junit.Assert.assertNotNull(executableScript23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNull(strSet47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(basicDBObject49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(executableScript52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(executableScript62);
        org.junit.Assert.assertNotNull(executableScript64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNull(mongoClientOptions78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(mongoClientOptions80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(basicDBObject82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(basicDBObject84);
        org.junit.Assert.assertNotNull(executableScript85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(executableScript87);
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertEquals(obj88.toString(), "{ }");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj88), "{ }");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj88), "{ }");
    }

    @Test
    public void test08534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08534");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions13 = mongoDBRiverDefinition11.getMongoClientOptions();
        boolean boolean14 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions15 = mongoDBRiverDefinition11.getMongoClientOptions();
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition11.getParentTypes();
        java.lang.String str17 = mongoDBRiverDefinition11.getRiverName();
        boolean boolean18 = mongoDBRiverDefinition11.isStoreStatistics();
        java.util.Set<java.lang.String> strSet19 = mongoDBRiverDefinition11.getParentTypes();
        java.lang.String str20 = mongoDBRiverDefinition11.getMongoLocalPassword();
        java.lang.String str21 = mongoDBRiverDefinition11.getMongoAdminPassword();
        boolean boolean22 = mongoDBRiverDefinition11.isStoreStatistics();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test08535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08535");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        com.mongodb.MongoClientOptions mongoClientOptions10 = mongoDBRiverDefinition9.getMongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition9.getMongoCollectionFilter();
        boolean boolean12 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.lang.String str13 = mongoDBRiverDefinition9.getScript();
        java.lang.String str14 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str15 = mongoDBRiverDefinition9.getMongoAdminPassword();
        java.lang.String str16 = mongoDBRiverDefinition9.getMongoOplogNamespace();
        java.lang.String str17 = mongoDBRiverDefinition9.getTypeName();
        java.lang.String str18 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.lang.String str19 = mongoDBRiverDefinition9.getTypeName();
        java.lang.String str20 = mongoDBRiverDefinition9.getMongoAdminUser();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "bulk_size" + "'", str14, "bulk_size");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "null.null" + "'", str16, "null.null");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test08536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08536");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.mongoClientOptions(mongoClientOptions6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.mongoCollectionFilter(basicDBObject10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray23 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder15.includeFields((java.util.Set<java.lang.String>) strSet24);
        java.lang.Object obj27 = docScoreSearchScript0.unwrap((java.lang.Object) builder15);
        docScoreSearchScript0.setNextScore((float) (byte) 100);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript31 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj33 = docScoreSearchScript31.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript31.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions38 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.mongoClientOptions(mongoClientOptions38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder37.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject42 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder37.mongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder37.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder45.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder47.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder49.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder49.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions55 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder54.mongoClientOptions(mongoClientOptions55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder54.importAllCollections(false);
        com.mongodb.ServerAddress[] serverAddressArray59 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList60 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList60, serverAddressArray59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder54.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder53.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder53.skipInitialImport(false);
        docScoreSearchScript31.setNextVar("import_all_collections", (java.lang.Object) builder53);
        docScoreSearchScript0.setNextVar("bulk", (java.lang.Object) docScoreSearchScript31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions69 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder68.mongoClientOptions(mongoClientOptions69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder68.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder72.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder72.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions77 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder76.mongoClientOptions(mongoClientOptions77);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition79 = builder78.build();
        java.lang.String str80 = mongoDBRiverDefinition79.getMongoDb();
        boolean boolean81 = mongoDBRiverDefinition79.isDisableIndexRefresh();
        boolean boolean82 = mongoDBRiverDefinition79.isSkipInitialImport();
        java.lang.String str83 = mongoDBRiverDefinition79.getMongoDb();
        java.lang.String str84 = mongoDBRiverDefinition79.getMongoOplogNamespace();
        java.lang.Object obj85 = docScoreSearchScript31.unwrap((java.lang.Object) mongoDBRiverDefinition79);
        com.mongodb.MongoClientOptions mongoClientOptions86 = mongoDBRiverDefinition79.getMongoClientOptions();
        java.lang.String str87 = mongoDBRiverDefinition79.getMongoCollection();
        java.lang.String str88 = mongoDBRiverDefinition79.getStatisticsTypeName();
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals("'" + obj33 + "' != '" + "hi!" + "'", obj33, "hi!");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(serverAddressArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "null.null" + "'", str84, "null.null");
        org.junit.Assert.assertNotNull(obj85);
        org.junit.Assert.assertNull(mongoClientOptions86);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNull(str88);
    }

    @Test
    public void test08537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08537");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoAdminPassword("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.riverIndexName("include_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoClientOptions(mongoClientOptions16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder15.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject20 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder15.mongoCollectionFilter(basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder15.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder25.riverIndexName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder25.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.mongoAdminPassword("null.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions37 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoClientOptions(mongoClientOptions37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder36.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder40.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder40.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder40.indexName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder40.mongoCollection("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder50.mongoLocalPassword("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions54 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder53.mongoClientOptions(mongoClientOptions54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder53.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder57.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder57.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder61.connectTimeout((int) (short) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder63.indexName("hi!");
        java.lang.String[] strArray79 = new java.lang.String[] { "disable_index_refresh", "collection", "host", "user", "script_type", "socket_timeout", "include_fields", "bulk", "connect_timeout", "actions", "collection", "connect_timeout", "type" };
        java.util.LinkedHashSet<java.lang.String> strSet80 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet80, strArray79);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder63.excludeFields((java.util.Set<java.lang.String>) strSet80);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder50.includeFields((java.util.Set<java.lang.String>) strSet80);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder35.excludeFields((java.util.Set<java.lang.String>) strSet80);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder14.excludeFields((java.util.Set<java.lang.String>) strSet80);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test08538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08538");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.typeName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.typeName("include_fields");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript9 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj11 = docScoreSearchScript9.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript9.setNextScore((float) 1);
        docScoreSearchScript9.setNextScore((float) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.mongoClientOptions(mongoClientOptions18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder19.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder19.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.typeName("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder25.indexName("host");
        docScoreSearchScript9.setNextVar("drop_collection", (java.lang.Object) builder25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions32 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.mongoClientOptions(mongoClientOptions32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder31.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject36 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder31.mongoCollectionFilter(basicDBObject36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder31.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder39.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray49 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder41.includeFields((java.util.Set<java.lang.String>) strSet50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder25.includeFields((java.util.Set<java.lang.String>) strSet50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder8.includeFields((java.util.Set<java.lang.String>) strSet50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder8.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder8.riverName("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.riverIndexName("localhost");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder58.throttleSize((int) (short) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder58.typeName("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder58.advancedTransformation(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + "hi!" + "'", obj11, "hi!");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test08539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08539");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.riverIndexName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoLocalPassword("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.mongoUseSSL(false);
        java.util.Set<java.lang.String> strSet21 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.includeFields(strSet21);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test08540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08540");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.riverIndexName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.riverIndexName("connect_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("throttle_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = builder10.build();
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition15.getExcludeFields();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition15);
        org.junit.Assert.assertNull(strSet16);
    }

    @Test
    public void test08541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08541");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.ServerAddress[] serverAddressArray5 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList6 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList6, serverAddressArray5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsIndexName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.mongoLocalPassword("include_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.typeName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.riverIndexName("drop_collection");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(serverAddressArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test08542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08542");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.scriptType("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder4.statisticsIndexName("localhost");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder4.mongoDb("script_type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.script("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.socketTimeout(0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder12.script("advanced_transformation");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test08543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08543");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.statisticsIndexName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.typeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder8.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder8.socketTimeout(27017);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder8.mongoAdminUser("exclude_fields");
        com.mongodb.MongoClientOptions mongoClientOptions23 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.mongoClientOptions(mongoClientOptions23);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test08544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08544");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.ServerAddress[] serverAddressArray5 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList6 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList6, serverAddressArray5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoLocalPassword("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoLocalUser("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.typeName("ssl_verify_certificate");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.skipInitialImport(false);
        org.bson.types.Binary binary19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.initialTimestamp(binary19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(serverAddressArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test08545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08545");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.mongoClientOptions(mongoClientOptions6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.mongoCollectionFilter(basicDBObject10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray23 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder15.includeFields((java.util.Set<java.lang.String>) strSet24);
        java.lang.Object obj27 = docScoreSearchScript0.unwrap((java.lang.Object) builder15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder15.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.riverName("port");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory32 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap33 = null;
        org.elasticsearch.script.ExecutableScript executableScript34 = docScoreNativeScriptFactory32.newScript(strMap33);
        java.util.Map<java.lang.String, java.lang.Object> strMap35 = null;
        org.elasticsearch.script.ExecutableScript executableScript36 = docScoreNativeScriptFactory32.newScript(strMap35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions38 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.mongoClientOptions(mongoClientOptions38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder37.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder41.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions46 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder45.mongoClientOptions(mongoClientOptions46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = builder47.build();
        java.lang.String str49 = mongoDBRiverDefinition48.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions50 = mongoDBRiverDefinition48.getMongoClientOptions();
        boolean boolean51 = mongoDBRiverDefinition48.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions52 = mongoDBRiverDefinition48.getMongoClientOptions();
        java.lang.String str53 = mongoDBRiverDefinition48.getScript();
        com.mongodb.BasicDBObject basicDBObject54 = mongoDBRiverDefinition48.getMongoOplogFilter();
        java.lang.String str55 = mongoDBRiverDefinition48.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject56 = mongoDBRiverDefinition48.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript57 = docScoreNativeScriptFactory32.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder31.mongoCollectionFilter(basicDBObject56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder31.statisticsIndexName("filter");
        com.mongodb.MongoClientOptions mongoClientOptions61 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder60.mongoClientOptions(mongoClientOptions61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder60.statisticsTypeName("parent_types");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder64.riverIndexName("port");
        java.lang.Class<?> wildcardClass67 = builder66.getClass();
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(executableScript34);
        org.junit.Assert.assertNotNull(executableScript36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNull(mongoClientOptions50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(mongoClientOptions52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(basicDBObject54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(basicDBObject56);
        org.junit.Assert.assertNotNull(executableScript57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test08546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08546");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.mongoClientOptions(mongoClientOptions6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.mongoCollectionFilter(basicDBObject10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray23 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder15.includeFields((java.util.Set<java.lang.String>) strSet24);
        java.lang.Object obj27 = docScoreSearchScript0.unwrap((java.lang.Object) builder15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder15.mongoLocalPassword("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder15.mongoCollection("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.mongoLocalPassword("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder31.typeName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.riverIndexName("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder39.statisticsTypeName("include_fields.include_fields");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test08547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08547");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isSkipInitialImport();
        boolean boolean12 = mongoDBRiverDefinition9.isSkipInitialImport();
        java.lang.String str13 = mongoDBRiverDefinition9.getMongoAdminPassword();
        com.mongodb.BasicDBObject basicDBObject14 = mongoDBRiverDefinition9.getMongoOplogFilter();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition9.getExcludeFields();
        int int16 = mongoDBRiverDefinition9.getConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(basicDBObject14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test08548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08548");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoAdminPassword();
        java.lang.String str13 = mongoDBRiverDefinition11.getMongoCollection();
        java.lang.String str14 = mongoDBRiverDefinition11.getRiverName();
        java.lang.String str15 = mongoDBRiverDefinition11.getScript();
        java.lang.String str16 = mongoDBRiverDefinition11.getMongoAdminUser();
        boolean boolean17 = mongoDBRiverDefinition11.isMongoUseSSL();
        boolean boolean18 = mongoDBRiverDefinition11.isSkipInitialImport();
        boolean boolean19 = mongoDBRiverDefinition11.isStoreStatistics();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test08549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08549");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoAdminPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.getTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList14 = mongoDBRiverDefinition9.getMongoServers();
        boolean boolean15 = mongoDBRiverDefinition9.isDisableIndexRefresh();
        java.lang.String str16 = mongoDBRiverDefinition9.getScript();
        java.lang.String str17 = mongoDBRiverDefinition9.getIncludeCollection();
        boolean boolean18 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str19 = mongoDBRiverDefinition9.getScript();
        boolean boolean20 = mongoDBRiverDefinition9.isDisableIndexRefresh();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(serverAddressList14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test08550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08550");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str13 = mongoDBRiverDefinition11.getScript();
        java.lang.String str14 = mongoDBRiverDefinition11.getIncludeCollection();
        java.lang.String str15 = mongoDBRiverDefinition11.getMongoLocalUser();
        com.mongodb.BasicDBObject basicDBObject16 = mongoDBRiverDefinition11.getMongoOplogFilter();
        com.mongodb.BasicDBObject basicDBObject17 = mongoDBRiverDefinition11.getMongoCollectionFilter();
        int int18 = mongoDBRiverDefinition11.getConnectTimeout();
        com.mongodb.BasicDBObject basicDBObject19 = mongoDBRiverDefinition11.getMongoCollectionFilter();
        java.lang.String str20 = mongoDBRiverDefinition11.getIncludeCollection();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(basicDBObject16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test08551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08551");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory4 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = null;
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory4.newScript(strMap5);
        docScoreSearchScript0.setNextVar("localhost", (java.lang.Object) docScoreNativeScriptFactory4);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript9 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj11 = docScoreSearchScript9.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript9.setNextScore((float) 1);
        docScoreSearchScript0.setNextVar("credentials", (java.lang.Object) 1);
        docScoreSearchScript0.setNextScore((float) 0L);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoClientOptions(mongoClientOptions19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject23 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder18.mongoCollectionFilter(basicDBObject23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder18.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder28.riverIndexName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.includeCollection("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.scriptType("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoDb("include_fields");
        docScoreSearchScript0.setNextVar("db", (java.lang.Object) builder38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions41 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.mongoClientOptions(mongoClientOptions41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder40.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder44.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions49 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.mongoClientOptions(mongoClientOptions49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = builder50.build();
        java.lang.String str52 = mongoDBRiverDefinition51.getMongoAdminPassword();
        boolean boolean53 = mongoDBRiverDefinition51.isMongoSecondaryReadPreference();
        java.lang.String str54 = mongoDBRiverDefinition51.getMongoLocalUser();
        java.lang.Object obj55 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition51);
        docScoreSearchScript0.setNextScore((float) 8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions59 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.mongoClientOptions(mongoClientOptions59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder58.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder62.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder62.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder66.connectTimeout((int) (short) 100);
        java.lang.Object obj69 = docScoreSearchScript0.unwrap((java.lang.Object) builder66);
        docScoreSearchScript0.setNextScore((float) 27017);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions73 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder72.mongoClientOptions(mongoClientOptions73);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder72.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder76.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder76.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder80.connectTimeout((int) (short) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder80.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder84.riverName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder84.connectTimeout((int) ' ');
        java.lang.Object obj89 = docScoreSearchScript0.unwrap((java.lang.Object) ' ');
        docScoreSearchScript0.setNextScore((float) 1000);
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextDocId(10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + "hi!" + "'", obj11, "hi!");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertEquals("'" + obj89 + "' != '" + ' ' + "'", obj89, ' ');
    }

    @Test
    public void test08552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08552");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder12.indexName("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder12.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder12.throttleSize((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder12.statisticsIndexName("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = builder24.build();
        java.lang.String str28 = mongoDBRiverDefinition27.getStatisticsTypeName();
        java.lang.String str29 = mongoDBRiverDefinition27.getScriptType();
        java.lang.String str30 = mongoDBRiverDefinition27.getMongoCollection();
        java.lang.String str31 = mongoDBRiverDefinition27.getMongoLocalUser();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ssl" + "'", str28, "ssl");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test08553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08553");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.mongoLocalPassword("include_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoSSLVerifyCertificate(false);
        org.bson.types.BSONTimestamp bSONTimestamp9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.initialTimestamp(bSONTimestamp9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test08554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08554");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions13 = mongoDBRiverDefinition11.getMongoClientOptions();
        boolean boolean14 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions15 = mongoDBRiverDefinition11.getMongoClientOptions();
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition11.getParentTypes();
        java.lang.String str17 = mongoDBRiverDefinition11.getRiverName();
        boolean boolean18 = mongoDBRiverDefinition11.isStoreStatistics();
        boolean boolean19 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        boolean boolean20 = mongoDBRiverDefinition11.isStoreStatistics();
        java.lang.String str21 = mongoDBRiverDefinition11.getStatisticsTypeName();
        java.lang.String str22 = mongoDBRiverDefinition11.getMongoAdminUser();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test08555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08555");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str13 = mongoDBRiverDefinition11.getStatisticsTypeName();
        boolean boolean14 = mongoDBRiverDefinition11.isImportAllCollections();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp15 = mongoDBRiverDefinition11.getInitialTimestamp();
        int int16 = mongoDBRiverDefinition11.getSocketTimeout();
        int int17 = mongoDBRiverDefinition11.getConnectTimeout();
        java.lang.String str18 = mongoDBRiverDefinition11.getMongoAdminUser();
        java.lang.String str19 = mongoDBRiverDefinition11.getMongoAdminUser();
        java.lang.String str20 = mongoDBRiverDefinition11.getTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList21 = mongoDBRiverDefinition11.getMongoServers();
        boolean boolean22 = mongoDBRiverDefinition11.isMongoUseSSL();
        java.lang.String str23 = mongoDBRiverDefinition11.getStatisticsTypeName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(wildcardTimestamp15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(serverAddressList21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test08556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08556");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory4 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = null;
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory4.newScript(strMap5);
        docScoreSearchScript0.setNextVar("localhost", (java.lang.Object) docScoreNativeScriptFactory4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.mongoClientOptions(mongoClientOptions10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions18 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.mongoClientOptions(mongoClientOptions18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = builder19.build();
        java.lang.String str21 = mongoDBRiverDefinition20.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions22 = mongoDBRiverDefinition20.getMongoClientOptions();
        boolean boolean23 = mongoDBRiverDefinition20.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions24 = mongoDBRiverDefinition20.getMongoClientOptions();
        java.lang.String str25 = mongoDBRiverDefinition20.getScript();
        com.mongodb.BasicDBObject basicDBObject26 = mongoDBRiverDefinition20.getMongoOplogFilter();
        java.lang.String str27 = mongoDBRiverDefinition20.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject28 = mongoDBRiverDefinition20.getMongoCollectionFilter();
        docScoreSearchScript0.setNextVar("type", (java.lang.Object) basicDBObject28);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript30 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj32 = docScoreSearchScript30.unwrap((java.lang.Object) 8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions35 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.mongoClientOptions(mongoClientOptions35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder34.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject39 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder34.mongoCollectionFilter(basicDBObject39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder34.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder34.riverName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder44.socketTimeout((int) (byte) 100);
        docScoreSearchScript30.setNextVar("", (java.lang.Object) builder44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder44.script("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder44.includeCollection("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder53.script("");
        java.lang.Object obj56 = docScoreSearchScript0.unwrap((java.lang.Object) "");
        docScoreSearchScript0.setNextScore((float) 10L);
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextDocId((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(mongoClientOptions24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(basicDBObject26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertEquals("'" + obj32 + "' != '" + 8 + "'", obj32, 8);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertEquals("'" + obj56 + "' != '" + "" + "'", obj56, "");
    }

    @Test
    public void test08557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08557");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.mongoClientOptions(mongoClientOptions6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.typeName("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.riverName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.riverIndexName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder13.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder13.includeCollection("");
        java.util.Set<java.lang.String> strSet22 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder13.excludeFields(strSet22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions25 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoClientOptions(mongoClientOptions25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder24.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder28.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder28.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder28.indexName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder28.mongoCollection("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder38.mongoLocalPassword("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions42 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.mongoClientOptions(mongoClientOptions42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder41.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder45.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder45.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder49.connectTimeout((int) (short) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder51.indexName("hi!");
        java.lang.String[] strArray67 = new java.lang.String[] { "disable_index_refresh", "collection", "host", "user", "script_type", "socket_timeout", "include_fields", "bulk", "connect_timeout", "actions", "collection", "connect_timeout", "type" };
        java.util.LinkedHashSet<java.lang.String> strSet68 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet68, strArray67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder51.excludeFields((java.util.Set<java.lang.String>) strSet68);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder38.includeFields((java.util.Set<java.lang.String>) strSet68);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder23.excludeFields((java.util.Set<java.lang.String>) strSet68);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder2.includeFields((java.util.Set<java.lang.String>) strSet68);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder73.socketTimeout((int) 'a');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder73.includeCollection("password");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test08558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08558");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        boolean boolean13 = mongoDBRiverDefinition11.isDisableIndexRefresh();
        boolean boolean14 = mongoDBRiverDefinition11.isSkipInitialImport();
        java.lang.String str15 = mongoDBRiverDefinition11.getMongoOplogNamespace();
        boolean boolean16 = mongoDBRiverDefinition11.isSkipInitialImport();
        boolean boolean17 = mongoDBRiverDefinition11.isMongoSSLVerifyCertificate();
        java.lang.String str18 = mongoDBRiverDefinition11.getIndexName();
        java.lang.String str19 = mongoDBRiverDefinition11.getStatisticsTypeName();
        java.lang.String str20 = mongoDBRiverDefinition11.getMongoDb();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "null.null" + "'", str15, "null.null");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test08559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08559");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.statisticsIndexName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoClientOptions(mongoClientOptions16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder15.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.connectTimeout((int) (short) 10);
        java.lang.String[] strArray64 = new java.lang.String[] { "actions", "user", "name", "bulk_size", "", "script_type", "db", "disable_index_refresh", "local", "port", "filter", "gridfs", "drop_collection", "hi!", "include_collection", "secondary_read_preference", "options", "script_type", "index", "import_all_collections", "options", "connect_timeout", "index", "name", "gridfs", "name", "db", "script", "bulk_timeout", "flush_interval", "", "ssl_verify_certificate", "collection", "admin", "include_collection", "concurrent_requests", "secondary_read_preference", "bulk_timeout", "collection", "script_type", "gridfs", "script_type" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder21.excludeFields((java.util.Set<java.lang.String>) strSet65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder8.excludeFields((java.util.Set<java.lang.String>) strSet65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder8.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder8.indexName("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder72.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder72.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder76.statisticsTypeName("db");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder76.advancedTransformation(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test08560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08560");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.dropCollection(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test08561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08561");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.mongoAdminPassword("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoClientOptions(mongoClientOptions12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject16 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder11.mongoCollectionFilter(basicDBObject16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder11.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = builder19.build();
        boolean boolean21 = mongoDBRiverDefinition20.isStoreStatistics();
        boolean boolean22 = mongoDBRiverDefinition20.isMongoSSLVerifyCertificate();
        java.lang.String str23 = mongoDBRiverDefinition20.getMongoDb();
        java.util.List<com.mongodb.ServerAddress> serverAddressList24 = mongoDBRiverDefinition20.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder6.mongoServers(serverAddressList24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.importAllCollections(true);
        org.bson.types.BSONTimestamp bSONTimestamp28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder25.initialTimestamp(bSONTimestamp28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(serverAddressList24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test08562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08562");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoLocalUser("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.typeName("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder6.dropCollection(true);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript13 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj15 = docScoreSearchScript13.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript13.setNextScore((float) 1);
        docScoreSearchScript13.setNextScore((float) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions22 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.mongoClientOptions(mongoClientOptions22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder23.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder23.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.typeName("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder29.indexName("host");
        docScoreSearchScript13.setNextVar("drop_collection", (java.lang.Object) builder29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions36 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.mongoClientOptions(mongoClientOptions36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder35.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject40 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder35.mongoCollectionFilter(basicDBObject40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder35.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder45.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray53 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder45.includeFields((java.util.Set<java.lang.String>) strSet54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder29.includeFields((java.util.Set<java.lang.String>) strSet54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions59 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.mongoClientOptions(mongoClientOptions59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder58.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder62.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder62.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions67 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder66.mongoClientOptions(mongoClientOptions67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition69 = builder68.build();
        java.lang.String str70 = mongoDBRiverDefinition69.getMongoAdminPassword();
        boolean boolean71 = mongoDBRiverDefinition69.isMongoSecondaryReadPreference();
        java.lang.String str72 = mongoDBRiverDefinition69.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet73 = mongoDBRiverDefinition69.getParentTypes();
        boolean boolean74 = mongoDBRiverDefinition69.isMongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject75 = mongoDBRiverDefinition69.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder57.mongoCollectionFilter(basicDBObject75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder12.mongoOplogFilter(basicDBObject75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder77.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder77.riverIndexName("null.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder81.throttleSize(1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder83.connectTimeout((int) (short) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder83.mongoDb("initial_timestamp");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + "hi!" + "'", obj15, "hi!");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNull(strSet73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(basicDBObject75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test08563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08563");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str13 = mongoDBRiverDefinition11.getScript();
        java.lang.String str14 = mongoDBRiverDefinition11.getRiverName();
        int int15 = mongoDBRiverDefinition11.getThrottleSize();
        boolean boolean16 = mongoDBRiverDefinition11.isSkipInitialImport();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test08564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08564");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        int int12 = mongoDBRiverDefinition11.getConnectTimeout();
        java.lang.String str13 = mongoDBRiverDefinition11.getIncludeCollection();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp14 = mongoDBRiverDefinition11.getInitialTimestamp();
        java.lang.String str15 = mongoDBRiverDefinition11.getRiverIndexName();
        java.lang.String str16 = mongoDBRiverDefinition11.getMongoLocalUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList17 = mongoDBRiverDefinition11.getMongoServers();
        boolean boolean18 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        boolean boolean19 = mongoDBRiverDefinition11.isMongoGridFS();
        java.util.Set<java.lang.String> strSet20 = mongoDBRiverDefinition11.getIncludeFields();
        int int21 = mongoDBRiverDefinition11.getThrottleSize();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(wildcardTimestamp14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(serverAddressList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test08565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08565");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        int int12 = mongoDBRiverDefinition9.getSocketTimeout();
        java.lang.String str13 = mongoDBRiverDefinition9.getScript();
        boolean boolean14 = mongoDBRiverDefinition9.isDisableIndexRefresh();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test08566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08566");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.socketTimeout(8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.scriptType("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder10.scriptType("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.mongoClientOptions(mongoClientOptions20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder19.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder23.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions28 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.mongoClientOptions(mongoClientOptions28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = builder29.build();
        java.lang.String str31 = mongoDBRiverDefinition30.getMongoDb();
        java.lang.String str32 = mongoDBRiverDefinition30.getStatisticsTypeName();
        boolean boolean33 = mongoDBRiverDefinition30.isImportAllCollections();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp34 = mongoDBRiverDefinition30.getInitialTimestamp();
        com.mongodb.BasicDBObject basicDBObject35 = mongoDBRiverDefinition30.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder18.mongoOplogFilter(basicDBObject35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.statisticsTypeName("include_collection");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(wildcardTimestamp34);
        org.junit.Assert.assertNotNull(basicDBObject35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test08567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08567");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoAdminPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.getTypeName();
        java.lang.String str14 = mongoDBRiverDefinition9.getMongoCollection();
        boolean boolean15 = mongoDBRiverDefinition9.isImportAllCollections();
        java.lang.String str16 = mongoDBRiverDefinition9.getStatisticsTypeName();
        boolean boolean17 = mongoDBRiverDefinition9.isMongoUseSSL();
        java.util.Set<java.lang.String> strSet18 = mongoDBRiverDefinition9.getExcludeFields();
        java.lang.String str19 = mongoDBRiverDefinition9.getMongoLocalUser();
        com.mongodb.MongoClientOptions mongoClientOptions20 = mongoDBRiverDefinition9.getMongoClientOptions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(mongoClientOptions20);
    }

    @Test
    public void test08568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08568");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.riverName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoLocalPassword("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.riverIndexName("concurrent_bulk_requests");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test08569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08569");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        boolean boolean13 = mongoDBRiverDefinition11.isDisableIndexRefresh();
        boolean boolean14 = mongoDBRiverDefinition11.isSkipInitialImport();
        java.lang.String str15 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str16 = mongoDBRiverDefinition11.getMongoOplogNamespace();
        java.lang.String str17 = mongoDBRiverDefinition11.getStatisticsTypeName();
        boolean boolean18 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        java.lang.String str19 = mongoDBRiverDefinition11.getScriptType();
        java.lang.String str20 = mongoDBRiverDefinition11.getRiverName();
        boolean boolean21 = mongoDBRiverDefinition11.isDropCollection();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "null.null" + "'", str16, "null.null");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test08570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08570");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.statisticsIndexName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoClientOptions(mongoClientOptions16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder15.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder19.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions24 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.mongoClientOptions(mongoClientOptions24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder23.statisticsIndexName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder23.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions31 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.mongoClientOptions(mongoClientOptions31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder30.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.connectTimeout((int) (short) 10);
        java.lang.String[] strArray79 = new java.lang.String[] { "actions", "user", "name", "bulk_size", "", "script_type", "db", "disable_index_refresh", "local", "port", "filter", "gridfs", "drop_collection", "hi!", "include_collection", "secondary_read_preference", "options", "script_type", "index", "import_all_collections", "options", "connect_timeout", "index", "name", "gridfs", "name", "db", "script", "bulk_timeout", "flush_interval", "", "ssl_verify_certificate", "collection", "admin", "include_collection", "concurrent_requests", "secondary_read_preference", "bulk_timeout", "collection", "script_type", "gridfs", "script_type" };
        java.util.LinkedHashSet<java.lang.String> strSet80 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet80, strArray79);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder36.excludeFields((java.util.Set<java.lang.String>) strSet80);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder23.excludeFields((java.util.Set<java.lang.String>) strSet80);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder8.parentTypes((java.util.Set<java.lang.String>) strSet80);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder8.mongoAdminPassword("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder8.mongoLocalPassword("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder8.importAllCollections(false);
        org.bson.types.BSONTimestamp bSONTimestamp91 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder92 = builder8.initialTimestamp(bSONTimestamp91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test08571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08571");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoDb();
        int int13 = mongoDBRiverDefinition9.getConnectTimeout();
        java.lang.String str14 = mongoDBRiverDefinition9.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject15 = mongoDBRiverDefinition9.getMongoOplogFilter();
        int int16 = mongoDBRiverDefinition9.getThrottleSize();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(basicDBObject15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test08572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08572");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.riverName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.mongoCollection("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.connectTimeout((int) (short) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.riverName("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.socketTimeout(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.indexName("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.typeName("null.null.null.null");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test08573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08573");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.ServerAddress[] serverAddressArray5 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList6 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList6, serverAddressArray5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.storeStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminPassword("connect_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.typeName("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.indexName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = builder16.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder16.indexName("localhost");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(serverAddressArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test08574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08574");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoLocalPassword("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoAdminUser("password");
        com.mongodb.BasicDBObject basicDBObject11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.mongoCollectionFilter(basicDBObject11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.scriptType("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder12.mongoLocalPassword("admin");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test08575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08575");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.typeName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.typeName("include_fields");
        com.mongodb.BasicDBObject basicDBObject9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoCollectionFilter(basicDBObject9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.script("admin");
        java.util.Set<java.lang.String> strSet13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.excludeFields(strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.throttleSize((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.mongoCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoLocalUser("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.dropCollection(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test08576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08576");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.connectTimeout(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.statisticsIndexName("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.connectTimeout((int) (byte) -1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test08577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08577");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        com.mongodb.MongoClientOptions mongoClientOptions13 = mongoDBRiverDefinition11.getMongoClientOptions();
        java.lang.String str14 = mongoDBRiverDefinition11.getScriptType();
        java.lang.String str15 = mongoDBRiverDefinition11.getScript();
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition11.getParentTypes();
        java.lang.String str17 = mongoDBRiverDefinition11.getScript();
        com.mongodb.MongoClientOptions mongoClientOptions18 = mongoDBRiverDefinition11.getMongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject19 = mongoDBRiverDefinition11.getMongoOplogFilter();
        java.lang.String str20 = mongoDBRiverDefinition11.getMongoDb();
        java.util.Set<java.lang.String> strSet21 = mongoDBRiverDefinition11.getExcludeFields();
        java.lang.String str22 = mongoDBRiverDefinition11.getIndexName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(mongoClientOptions18);
        org.junit.Assert.assertNull(basicDBObject19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test08578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08578");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) 8);
        docScoreSearchScript0.setNextScore(1.0f);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoClientOptions(mongoClientOptions7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.connectTimeout(1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.socketTimeout(8);
        docScoreSearchScript0.setNextVar("parent_types", (java.lang.Object) 8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.mongoClientOptions(mongoClientOptions21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder20.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder20.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder20.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder20.riverIndexName("include_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder20.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder20.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder20.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder20.statisticsIndexName("flush_interval");
        java.lang.Object obj39 = docScoreSearchScript0.unwrap((java.lang.Object) "flush_interval");
        // The following exception was thrown during execution in test generation
        try {
            float float40 = docScoreSearchScript0.runAsFloat();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 8 + "'", obj2, 8);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + obj39 + "' != '" + "flush_interval" + "'", obj39, "flush_interval");
    }

    @Test
    public void test08579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08579");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.includeCollection("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.mongoLocalPassword("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.mongoClientOptions(mongoClientOptions18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.mongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder19.mongoAdminPassword("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.mongoDb("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions27 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.mongoClientOptions(mongoClientOptions27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder26.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder30.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.connectTimeout((int) (short) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.indexName("hi!");
        java.lang.String[] strArray52 = new java.lang.String[] { "disable_index_refresh", "collection", "host", "user", "script_type", "socket_timeout", "include_fields", "bulk", "connect_timeout", "actions", "collection", "connect_timeout", "type" };
        java.util.LinkedHashSet<java.lang.String> strSet53 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet53, strArray52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder36.excludeFields((java.util.Set<java.lang.String>) strSet53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder23.parentTypes((java.util.Set<java.lang.String>) strSet53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder16.excludeFields((java.util.Set<java.lang.String>) strSet53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder16.mongoAdminPassword("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder16.statisticsTypeName("initial_timestamp");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test08580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08580");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.includeCollection("concurrent_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.indexName("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.disableIndexRefresh(true);
        com.mongodb.MongoClientOptions mongoClientOptions17 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoClientOptions(mongoClientOptions17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.typeName("concurrent_bulk_requests");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test08581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08581");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoAdminPassword();
        boolean boolean13 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        java.lang.String str14 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str15 = mongoDBRiverDefinition11.getStatisticsTypeName();
        java.lang.String str16 = mongoDBRiverDefinition11.getScript();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test08582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08582");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.socketTimeout((int) 'a');
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory7 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap8 = null;
        org.elasticsearch.script.ExecutableScript executableScript9 = docScoreNativeScriptFactory7.newScript(strMap8);
        java.util.Map<java.lang.String, java.lang.Object> strMap10 = null;
        org.elasticsearch.script.ExecutableScript executableScript11 = docScoreNativeScriptFactory7.newScript(strMap10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoClientOptions(mongoClientOptions13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.mongoClientOptions(mongoClientOptions21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = builder22.build();
        java.lang.String str24 = mongoDBRiverDefinition23.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions25 = mongoDBRiverDefinition23.getMongoClientOptions();
        boolean boolean26 = mongoDBRiverDefinition23.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions27 = mongoDBRiverDefinition23.getMongoClientOptions();
        java.lang.String str28 = mongoDBRiverDefinition23.getScript();
        com.mongodb.BasicDBObject basicDBObject29 = mongoDBRiverDefinition23.getMongoOplogFilter();
        java.lang.String str30 = mongoDBRiverDefinition23.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject31 = mongoDBRiverDefinition23.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript32 = docScoreNativeScriptFactory7.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder0.mongoCollectionFilter(basicDBObject31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition34 = builder33.build();
        int int35 = mongoDBRiverDefinition34.getConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(executableScript9);
        org.junit.Assert.assertNotNull(executableScript11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(mongoClientOptions27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(basicDBObject29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(basicDBObject31);
        org.junit.Assert.assertNotNull(executableScript32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test08583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08583");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoLocalUser("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.socketTimeout((int) 'a');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.socketTimeout(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.storeStatistics(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test08584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08584");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSSLVerifyCertificate(false);
        com.mongodb.BasicDBObject basicDBObject13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.mongoOplogFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoAdminPassword("script_type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.mongoSecondaryReadPreference(true);
        org.bson.types.BSONTimestamp bSONTimestamp23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.initialTimestamp(bSONTimestamp23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test08585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08585");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder2.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoLocalPassword("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.indexName("concurrent_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.connectTimeout((-1));
        java.util.Set<java.lang.String> strSet15 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.parentTypes(strSet15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.throttleSize((int) '#');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.indexName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions22 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.mongoClientOptions(mongoClientOptions22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder21.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject26 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder21.mongoCollectionFilter(basicDBObject26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder21.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray39 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder31.includeFields((java.util.Set<java.lang.String>) strSet40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder18.excludeFields((java.util.Set<java.lang.String>) strSet40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.riverName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder43.includeCollection("password");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test08586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08586");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoLocalPassword("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.includeCollection("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.dropCollection(true);
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.mongoClientOptions(mongoClientOptions13);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory15 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions17 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoClientOptions(mongoClientOptions17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder20.mongoLocalUser("ssl_verify_certificate");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions26 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.mongoClientOptions(mongoClientOptions26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder25.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder29.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions34 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.mongoClientOptions(mongoClientOptions34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = builder35.build();
        java.lang.String str37 = mongoDBRiverDefinition36.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions38 = mongoDBRiverDefinition36.getMongoClientOptions();
        boolean boolean39 = mongoDBRiverDefinition36.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions40 = mongoDBRiverDefinition36.getMongoClientOptions();
        java.lang.String str41 = mongoDBRiverDefinition36.getScript();
        com.mongodb.BasicDBObject basicDBObject42 = mongoDBRiverDefinition36.getMongoOplogFilter();
        java.lang.String str43 = mongoDBRiverDefinition36.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject44 = mongoDBRiverDefinition36.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder20.mongoOplogFilter(basicDBObject44);
        org.elasticsearch.script.ExecutableScript executableScript46 = docScoreNativeScriptFactory15.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder10.mongoCollectionFilter(basicDBObject44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions49 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.mongoClientOptions(mongoClientOptions49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder48.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder52.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder52.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions57 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder56.mongoClientOptions(mongoClientOptions57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition59 = builder58.build();
        java.lang.String str60 = mongoDBRiverDefinition59.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions61 = mongoDBRiverDefinition59.getMongoClientOptions();
        boolean boolean62 = mongoDBRiverDefinition59.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions63 = mongoDBRiverDefinition59.getMongoClientOptions();
        java.lang.String str64 = mongoDBRiverDefinition59.getRiverName();
        com.mongodb.BasicDBObject basicDBObject65 = mongoDBRiverDefinition59.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder47.mongoOplogFilter(basicDBObject65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder47.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder47.importAllCollections(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(mongoClientOptions38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(mongoClientOptions40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(basicDBObject42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(basicDBObject44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(executableScript46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNull(mongoClientOptions61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(mongoClientOptions63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(basicDBObject65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test08587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08587");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        boolean boolean13 = mongoDBRiverDefinition11.isDisableIndexRefresh();
        int int14 = mongoDBRiverDefinition11.getConnectTimeout();
        com.mongodb.MongoClientOptions mongoClientOptions15 = mongoDBRiverDefinition11.getMongoClientOptions();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp16 = mongoDBRiverDefinition11.getInitialTimestamp();
        java.util.Set<java.lang.String> strSet17 = mongoDBRiverDefinition11.getParentTypes();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertNull(wildcardTimestamp16);
        org.junit.Assert.assertNull(strSet17);
    }

    @Test
    public void test08588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08588");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        boolean boolean13 = mongoDBRiverDefinition11.isDisableIndexRefresh();
        int int14 = mongoDBRiverDefinition11.getConnectTimeout();
        com.mongodb.MongoClientOptions mongoClientOptions15 = mongoDBRiverDefinition11.getMongoClientOptions();
        boolean boolean16 = mongoDBRiverDefinition11.isSkipInitialImport();
        java.lang.String str17 = mongoDBRiverDefinition11.getIndexName();
        boolean boolean18 = mongoDBRiverDefinition11.isDropCollection();
        com.mongodb.MongoClientOptions mongoClientOptions19 = mongoDBRiverDefinition11.getMongoClientOptions();
        java.lang.String str20 = mongoDBRiverDefinition11.getMongoAdminUser();
        java.lang.String str21 = mongoDBRiverDefinition11.getMongoAdminUser();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(mongoClientOptions19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test08589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08589");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.riverIndexName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.includeCollection("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.importAllCollections(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test08590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08590");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getTypeName();
        boolean boolean13 = mongoDBRiverDefinition11.isDropCollection();
        java.util.Set<java.lang.String> strSet14 = mongoDBRiverDefinition11.getParentTypes();
        java.lang.String str15 = mongoDBRiverDefinition11.getStatisticsIndexName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test08591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08591");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoClientOptions(mongoClientOptions4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoClientOptions(mongoClientOptions12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.statisticsIndexName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder11.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoClientOptions(mongoClientOptions19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder22.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions27 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.mongoClientOptions(mongoClientOptions27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder26.statisticsIndexName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder26.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions34 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.mongoClientOptions(mongoClientOptions34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder33.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.connectTimeout((int) (short) 10);
        java.lang.String[] strArray82 = new java.lang.String[] { "actions", "user", "name", "bulk_size", "", "script_type", "db", "disable_index_refresh", "local", "port", "filter", "gridfs", "drop_collection", "hi!", "include_collection", "secondary_read_preference", "options", "script_type", "index", "import_all_collections", "options", "connect_timeout", "index", "name", "gridfs", "name", "db", "script", "bulk_timeout", "flush_interval", "", "ssl_verify_certificate", "collection", "admin", "include_collection", "concurrent_requests", "secondary_read_preference", "bulk_timeout", "collection", "script_type", "gridfs", "script_type" };
        java.util.LinkedHashSet<java.lang.String> strSet83 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet83, strArray82);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder39.excludeFields((java.util.Set<java.lang.String>) strSet83);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder26.excludeFields((java.util.Set<java.lang.String>) strSet83);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder11.parentTypes((java.util.Set<java.lang.String>) strSet83);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet83);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder88.scriptType("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder92 = builder88.statisticsTypeName("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder94 = builder92.mongoSSLVerifyCertificate(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test08592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08592");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        com.mongodb.BasicDBObject basicDBObject9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoCollectionFilter(basicDBObject9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoUseSSL(true);
        java.util.Set<java.lang.String> strSet13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.includeFields(strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.scriptType("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.indexName("port");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test08593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08593");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoClientOptions(mongoClientOptions7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSecondaryReadPreference(true);
        docScoreSearchScript0.setNextVar("import_all_collections", (java.lang.Object) builder12);
        docScoreSearchScript0.setNextScore((float) (byte) 10);
        docScoreSearchScript0.setNextScore((float) 1);
        docScoreSearchScript0.setNextScore((float) 0);
        // The following exception was thrown during execution in test generation
        try {
            float float20 = docScoreSearchScript0.runAsFloat();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test08594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08594");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition9.getMongoServers();
        boolean boolean14 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.lang.String str15 = mongoDBRiverDefinition9.getRiverName();
        java.lang.String str16 = mongoDBRiverDefinition9.getStatisticsIndexName();
        java.lang.String str17 = mongoDBRiverDefinition9.getScript();
        boolean boolean18 = mongoDBRiverDefinition9.isStoreStatistics();
        java.lang.String str19 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.util.Set<java.lang.String> strSet20 = mongoDBRiverDefinition9.getIncludeFields();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strSet20);
    }

    @Test
    public void test08595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08595");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoClientOptions(mongoClientOptions5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoClientOptions(mongoClientOptions13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = builder14.build();
        java.lang.String str16 = mongoDBRiverDefinition15.getMongoDb();
        java.lang.String str17 = mongoDBRiverDefinition15.getStatisticsTypeName();
        boolean boolean18 = mongoDBRiverDefinition15.isImportAllCollections();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp19 = mongoDBRiverDefinition15.getInitialTimestamp();
        int int20 = mongoDBRiverDefinition15.getSocketTimeout();
        java.util.Set<java.lang.String> strSet21 = mongoDBRiverDefinition15.getIncludeFields();
        docScoreSearchScript0.setNextVar("local", (java.lang.Object) strSet21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions25 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoClientOptions(mongoClientOptions25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder28.mongoLocalUser("ssl_verify_certificate");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions34 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.mongoClientOptions(mongoClientOptions34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder33.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder37.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions42 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.mongoClientOptions(mongoClientOptions42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition44 = builder43.build();
        java.lang.String str45 = mongoDBRiverDefinition44.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions46 = mongoDBRiverDefinition44.getMongoClientOptions();
        boolean boolean47 = mongoDBRiverDefinition44.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions48 = mongoDBRiverDefinition44.getMongoClientOptions();
        java.lang.String str49 = mongoDBRiverDefinition44.getScript();
        com.mongodb.BasicDBObject basicDBObject50 = mongoDBRiverDefinition44.getMongoOplogFilter();
        java.lang.String str51 = mongoDBRiverDefinition44.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject52 = mongoDBRiverDefinition44.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder28.mongoOplogFilter(basicDBObject52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder53.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder55.script("name");
        docScoreSearchScript0.setNextVar("actions", (java.lang.Object) builder57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions61 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder60.mongoClientOptions(mongoClientOptions61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder62.typeName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder64.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder64.typeName("include_fields");
        docScoreSearchScript0.setNextVar("index", (java.lang.Object) builder64);
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext70 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(wildcardTimestamp19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNull(mongoClientOptions46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(mongoClientOptions48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(basicDBObject50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(basicDBObject52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test08596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08596");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        int int10 = mongoDBRiverDefinition9.getSocketTimeout();
        boolean boolean11 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean12 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean13 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.isMongoSecondaryReadPreference();
        boolean boolean15 = mongoDBRiverDefinition9.isMongoUseSSL();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test08597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08597");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str13 = mongoDBRiverDefinition11.getStatisticsTypeName();
        boolean boolean14 = mongoDBRiverDefinition11.isImportAllCollections();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp15 = mongoDBRiverDefinition11.getInitialTimestamp();
        int int16 = mongoDBRiverDefinition11.getSocketTimeout();
        boolean boolean17 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        com.mongodb.BasicDBObject basicDBObject18 = mongoDBRiverDefinition11.getMongoCollectionFilter();
        java.lang.String str19 = mongoDBRiverDefinition11.getMongoLocalUser();
        boolean boolean20 = mongoDBRiverDefinition11.isStoreStatistics();
        boolean boolean21 = mongoDBRiverDefinition11.isSkipInitialImport();
        java.lang.String str22 = mongoDBRiverDefinition11.getMongoLocalPassword();
        com.mongodb.MongoClientOptions mongoClientOptions23 = mongoDBRiverDefinition11.getMongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject24 = mongoDBRiverDefinition11.getMongoCollectionFilter();
        java.lang.String str25 = mongoDBRiverDefinition11.getMongoLocalPassword();
        boolean boolean26 = mongoDBRiverDefinition11.isMongoSSLVerifyCertificate();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(wildcardTimestamp15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(basicDBObject24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test08598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08598");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str13 = mongoDBRiverDefinition11.getStatisticsTypeName();
        boolean boolean14 = mongoDBRiverDefinition11.isImportAllCollections();
        java.lang.String str15 = mongoDBRiverDefinition11.getRiverIndexName();
        boolean boolean16 = mongoDBRiverDefinition11.isMongoGridFS();
        boolean boolean17 = mongoDBRiverDefinition11.isMongoGridFS();
        java.lang.String str18 = mongoDBRiverDefinition11.getMongoLocalUser();
        java.lang.String str19 = mongoDBRiverDefinition11.getIncludeCollection();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp20 = mongoDBRiverDefinition11.getInitialTimestamp();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(wildcardTimestamp20);
    }

    @Test
    public void test08599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08599");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoLocalPassword("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.mongoClientOptions(mongoClientOptions20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder19.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder23.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.mongoLocalUser("localhost");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions31 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.mongoClientOptions(mongoClientOptions31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.socketTimeout((int) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder34.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder38.includeCollection("script_type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.mongoDb("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.throttleSize((int) (byte) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions46 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder45.mongoClientOptions(mongoClientOptions46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder45.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder49.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder49.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions54 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder53.mongoClientOptions(mongoClientOptions54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition56 = builder55.build();
        java.lang.String str57 = mongoDBRiverDefinition56.getMongoDb();
        java.lang.String str58 = mongoDBRiverDefinition56.getStatisticsTypeName();
        boolean boolean59 = mongoDBRiverDefinition56.isImportAllCollections();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp60 = mongoDBRiverDefinition56.getInitialTimestamp();
        int int61 = mongoDBRiverDefinition56.getSocketTimeout();
        int int62 = mongoDBRiverDefinition56.getConnectTimeout();
        java.lang.String str63 = mongoDBRiverDefinition56.getMongoAdminUser();
        java.lang.String str64 = mongoDBRiverDefinition56.getMongoAdminUser();
        java.lang.String str65 = mongoDBRiverDefinition56.getTypeName();
        java.util.Set<java.lang.String> strSet66 = mongoDBRiverDefinition56.getIncludeFields();
        java.lang.String str67 = mongoDBRiverDefinition56.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject68 = mongoDBRiverDefinition56.getMongoCollectionFilter();
        com.mongodb.BasicDBObject basicDBObject69 = mongoDBRiverDefinition56.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder44.mongoCollectionFilter(basicDBObject69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder27.mongoOplogFilter(basicDBObject69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder16.mongoOplogFilter(basicDBObject69);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(wildcardTimestamp60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(strSet66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(basicDBObject68);
        org.junit.Assert.assertNotNull(basicDBObject69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test08600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08600");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str13 = mongoDBRiverDefinition11.getStatisticsTypeName();
        boolean boolean14 = mongoDBRiverDefinition11.isImportAllCollections();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp15 = mongoDBRiverDefinition11.getInitialTimestamp();
        int int16 = mongoDBRiverDefinition11.getSocketTimeout();
        java.util.Set<java.lang.String> strSet17 = mongoDBRiverDefinition11.getIncludeFields();
        java.lang.String str18 = mongoDBRiverDefinition11.getMongoCollection();
        java.util.Set<java.lang.String> strSet19 = mongoDBRiverDefinition11.getExcludeFields();
        boolean boolean20 = mongoDBRiverDefinition11.isMongoGridFS();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(wildcardTimestamp15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test08601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08601");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.disableIndexRefresh(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test08602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08602");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoLocalPassword("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.riverName("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.includeCollection("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoCollection("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.mongoClientOptions(mongoClientOptions18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder17.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject22 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder17.mongoCollectionFilter(basicDBObject22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder17.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = builder25.build();
        boolean boolean27 = mongoDBRiverDefinition26.isStoreStatistics();
        boolean boolean28 = mongoDBRiverDefinition26.isMongoSSLVerifyCertificate();
        java.lang.String str29 = mongoDBRiverDefinition26.getMongoAdminPassword();
        java.lang.String str30 = mongoDBRiverDefinition26.getTypeName();
        java.lang.String str31 = mongoDBRiverDefinition26.getMongoCollection();
        java.util.List<com.mongodb.ServerAddress> serverAddressList32 = mongoDBRiverDefinition26.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder14.mongoServers(serverAddressList32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.scriptType("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder33.includeCollection("db");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition38 = builder37.build();
        com.mongodb.BasicDBObject basicDBObject39 = mongoDBRiverDefinition38.getMongoOplogFilter();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(serverAddressList32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition38);
        org.junit.Assert.assertNull(basicDBObject39);
    }

    @Test
    public void test08603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08603");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoAdminPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.getTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList14 = mongoDBRiverDefinition9.getMongoServers();
        boolean boolean15 = mongoDBRiverDefinition9.isDisableIndexRefresh();
        java.lang.String str16 = mongoDBRiverDefinition9.getStatisticsIndexName();
        java.lang.String str17 = mongoDBRiverDefinition9.getStatisticsIndexName();
        java.lang.String str18 = mongoDBRiverDefinition9.getMongoAdminUser();
        java.lang.String str19 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str20 = mongoDBRiverDefinition9.getMongoLocalUser();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(serverAddressList14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test08604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08604");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.scriptType("host");
        com.mongodb.BasicDBObject basicDBObject17 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoCollectionFilter(basicDBObject17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.mongoClientOptions(mongoClientOptions20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder19.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder23.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder23.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions31 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.mongoClientOptions(mongoClientOptions31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder30.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder30.socketTimeout((int) 'a');
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory37 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap38 = null;
        org.elasticsearch.script.ExecutableScript executableScript39 = docScoreNativeScriptFactory37.newScript(strMap38);
        java.util.Map<java.lang.String, java.lang.Object> strMap40 = null;
        org.elasticsearch.script.ExecutableScript executableScript41 = docScoreNativeScriptFactory37.newScript(strMap40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions43 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.mongoClientOptions(mongoClientOptions43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder42.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder46.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions51 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder50.mongoClientOptions(mongoClientOptions51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition53 = builder52.build();
        java.lang.String str54 = mongoDBRiverDefinition53.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions55 = mongoDBRiverDefinition53.getMongoClientOptions();
        boolean boolean56 = mongoDBRiverDefinition53.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions57 = mongoDBRiverDefinition53.getMongoClientOptions();
        java.lang.String str58 = mongoDBRiverDefinition53.getScript();
        com.mongodb.BasicDBObject basicDBObject59 = mongoDBRiverDefinition53.getMongoOplogFilter();
        java.lang.String str60 = mongoDBRiverDefinition53.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject61 = mongoDBRiverDefinition53.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript62 = docScoreNativeScriptFactory37.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder30.mongoCollectionFilter(basicDBObject61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder23.mongoOplogFilter(basicDBObject61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder18.mongoOplogFilter(basicDBObject61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder18.scriptType("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder67.mongoLocalUser("include_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder67.storeStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder71.mongoLocalPassword("name.name");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(executableScript39);
        org.junit.Assert.assertNotNull(executableScript41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNull(mongoClientOptions55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(mongoClientOptions57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(basicDBObject59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(basicDBObject61);
        org.junit.Assert.assertNotNull(executableScript62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test08605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08605");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.common.settings.Settings settings3 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoClientOptions(mongoClientOptions5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder4.mongoCollectionFilter(basicDBObject9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder4.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder16.indexName("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder16.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder24.disableIndexRefresh(false);
        org.elasticsearch.common.settings.Settings settings29 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory30 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions32 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.mongoClientOptions(mongoClientOptions32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder35.mongoLocalUser("ssl_verify_certificate");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions41 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.mongoClientOptions(mongoClientOptions41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder40.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder44.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions49 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.mongoClientOptions(mongoClientOptions49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = builder50.build();
        java.lang.String str52 = mongoDBRiverDefinition51.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions53 = mongoDBRiverDefinition51.getMongoClientOptions();
        boolean boolean54 = mongoDBRiverDefinition51.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions55 = mongoDBRiverDefinition51.getMongoClientOptions();
        java.lang.String str56 = mongoDBRiverDefinition51.getScript();
        com.mongodb.BasicDBObject basicDBObject57 = mongoDBRiverDefinition51.getMongoOplogFilter();
        java.lang.String str58 = mongoDBRiverDefinition51.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject59 = mongoDBRiverDefinition51.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder35.mongoOplogFilter(basicDBObject59);
        org.elasticsearch.script.ExecutableScript executableScript61 = docScoreNativeScriptFactory30.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject59);
        org.elasticsearch.river.RiverSettings riverSettings62 = new org.elasticsearch.river.RiverSettings(settings29, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder28.mongoCollectionFilter(basicDBObject59);
        org.elasticsearch.river.RiverSettings riverSettings64 = new org.elasticsearch.river.RiverSettings(settings3, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject59);
        org.elasticsearch.river.RiverSettings riverSettings65 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject59);
        org.elasticsearch.script.ScriptService scriptService66 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition67 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("gridfs", "localhost", riverSettings65, scriptService66);
        java.util.Map<java.lang.String, java.lang.Object> strMap68 = riverSettings65.settings();
        java.util.Map<java.lang.String, java.lang.Object> strMap69 = riverSettings65.settings();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNull(mongoClientOptions53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(mongoClientOptions55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(basicDBObject57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(basicDBObject59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(executableScript61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition67);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(strMap69);
    }

    @Test
    public void test08606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08606");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(10.0f);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoClientOptions(mongoClientOptions4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder7.throttleSize(0);
        java.lang.Object obj14 = docScoreSearchScript0.unwrap((java.lang.Object) builder7);
        docScoreSearchScript0.setNextVar("socket_timeout", (java.lang.Object) 0.0f);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoClientOptions(mongoClientOptions19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject23 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder18.mongoCollectionFilter(basicDBObject23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder18.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = builder18.build();
        java.lang.Object obj28 = docScoreSearchScript0.unwrap((java.lang.Object) builder18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions30 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.mongoClientOptions(mongoClientOptions30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder29.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder33.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder33.includeCollection("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder39.mongoSecondaryReadPreference(false);
        java.lang.Object obj42 = docScoreSearchScript0.unwrap((java.lang.Object) builder39);
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextDocId((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(obj42);
    }

    @Test
    public void test08607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08607");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoAdminPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.getMongoLocalUser();
        java.lang.String str14 = mongoDBRiverDefinition9.getScriptType();
        int int15 = mongoDBRiverDefinition9.getConnectTimeout();
        java.lang.String str16 = mongoDBRiverDefinition9.getMongoAdminPassword();
        java.lang.String str17 = mongoDBRiverDefinition9.getTypeName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test08608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08608");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoDb();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition9.getMongoServers();
        boolean boolean14 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        boolean boolean15 = mongoDBRiverDefinition9.isDisableIndexRefresh();
        java.lang.String str16 = mongoDBRiverDefinition9.getStatisticsIndexName();
        int int17 = mongoDBRiverDefinition9.getThrottleSize();
        java.lang.String str18 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str19 = mongoDBRiverDefinition9.getMongoCollection();
        java.util.Set<java.lang.String> strSet20 = mongoDBRiverDefinition9.getExcludeFields();
        java.lang.String str21 = mongoDBRiverDefinition9.getMongoOplogNamespace();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "null.null" + "'", str21, "null.null");
    }

    @Test
    public void test08609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08609");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoClientOptions(mongoClientOptions12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.connectTimeout((int) (short) 10);
        java.lang.String[] strArray60 = new java.lang.String[] { "actions", "user", "name", "bulk_size", "", "script_type", "db", "disable_index_refresh", "local", "port", "filter", "gridfs", "drop_collection", "hi!", "include_collection", "secondary_read_preference", "options", "script_type", "index", "import_all_collections", "options", "connect_timeout", "index", "name", "gridfs", "name", "db", "script", "bulk_timeout", "flush_interval", "", "ssl_verify_certificate", "collection", "admin", "include_collection", "concurrent_requests", "secondary_read_preference", "bulk_timeout", "collection", "script_type", "gridfs", "script_type" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder17.excludeFields((java.util.Set<java.lang.String>) strSet61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder10.includeFields((java.util.Set<java.lang.String>) strSet61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder64.storeStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder66.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder66.includeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder66.importAllCollections(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test08610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08610");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder4.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder4.indexName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder4.mongoCollection("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoLocalPassword("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.mongoClientOptions(mongoClientOptions18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder17.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder21.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.connectTimeout((int) (short) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.indexName("hi!");
        java.lang.String[] strArray43 = new java.lang.String[] { "disable_index_refresh", "collection", "host", "user", "script_type", "socket_timeout", "include_fields", "bulk", "connect_timeout", "actions", "collection", "connect_timeout", "type" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder27.excludeFields((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder14.includeFields((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder14.mongoAdminPassword("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder49.mongoAdminUser("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions53 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder52.mongoClientOptions(mongoClientOptions53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder54.typeName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder54.typeName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions60 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder59.mongoClientOptions(mongoClientOptions60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder59.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder63.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder63.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder67.connectTimeout((int) (short) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder69.indexName("hi!");
        java.lang.String[] strArray85 = new java.lang.String[] { "disable_index_refresh", "collection", "host", "user", "script_type", "socket_timeout", "include_fields", "bulk", "connect_timeout", "actions", "collection", "connect_timeout", "type" };
        java.util.LinkedHashSet<java.lang.String> strSet86 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet86, strArray85);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder69.excludeFields((java.util.Set<java.lang.String>) strSet86);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder89 = builder58.excludeFields((java.util.Set<java.lang.String>) strSet86);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder51.includeFields((java.util.Set<java.lang.String>) strSet86);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder92 = builder90.connectTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder94 = builder92.socketTimeout((-1));
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test08611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08611");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoAdminPassword();
        int int13 = mongoDBRiverDefinition9.getThrottleSize();
        boolean boolean14 = mongoDBRiverDefinition9.isImportAllCollections();
        java.lang.String str15 = mongoDBRiverDefinition9.getScript();
        com.mongodb.BasicDBObject basicDBObject16 = mongoDBRiverDefinition9.getMongoOplogFilter();
        java.lang.String str17 = mongoDBRiverDefinition9.getMongoOplogNamespace();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(basicDBObject16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "null.null" + "'", str17, "null.null");
    }

    @Test
    public void test08612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08612");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.storeStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.mongoClientOptions(mongoClientOptions10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.mongoLocalPassword("include_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.throttleSize((int) (short) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder15.statisticsTypeName("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder15.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.mongoClientOptions(mongoClientOptions23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder22.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject27 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder22.mongoCollectionFilter(basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.mongoLocalPassword("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.mongoAdminUser("password");
        com.mongodb.BasicDBObject basicDBObject33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder30.mongoCollectionFilter(basicDBObject33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions36 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.mongoClientOptions(mongoClientOptions36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.mongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder37.mongoAdminPassword("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.mongoDb("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions45 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.mongoClientOptions(mongoClientOptions45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder44.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder48.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder52.connectTimeout((int) (short) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder54.indexName("hi!");
        java.lang.String[] strArray70 = new java.lang.String[] { "disable_index_refresh", "collection", "host", "user", "script_type", "socket_timeout", "include_fields", "bulk", "connect_timeout", "actions", "collection", "connect_timeout", "type" };
        java.util.LinkedHashSet<java.lang.String> strSet71 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet71, strArray70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder54.excludeFields((java.util.Set<java.lang.String>) strSet71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder41.parentTypes((java.util.Set<java.lang.String>) strSet71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder34.includeFields((java.util.Set<java.lang.String>) strSet71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder21.parentTypes((java.util.Set<java.lang.String>) strSet71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder6.excludeFields((java.util.Set<java.lang.String>) strSet71);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test08613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08613");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.riverIndexName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.includeCollection("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoUseSSL(false);
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoClientOptions(mongoClientOptions19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.includeCollection("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.mongoAdminUser("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder22.mongoLocalPassword("script");
        org.bson.types.Binary binary27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder22.initialTimestamp(binary27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test08614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08614");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.riverName("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.mongoSSLVerifyCertificate(true);
        com.mongodb.BasicDBObject basicDBObject13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.mongoCollectionFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.riverName("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder8.scriptType("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.riverName("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.disableIndexRefresh(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test08615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08615");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoAdminUser("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder4.scriptType("disable_index_refresh");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test08616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08616");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoCollection("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.mongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.indexName("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.disableIndexRefresh(true);
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.mongoClientOptions(mongoClientOptions19);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test08617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08617");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder1.mongoClientOptions(mongoClientOptions2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder1.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.connectTimeout((-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.mongoLocalPassword("connect_timeout");
        org.elasticsearch.common.settings.Settings settings16 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.mongoClientOptions(mongoClientOptions18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder17.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject22 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder17.mongoCollectionFilter(basicDBObject22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.mongoLocalPassword("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.mongoAdminUser("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.mongoAdminUser("gridfs");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory30 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = null;
        org.elasticsearch.script.ExecutableScript executableScript32 = docScoreNativeScriptFactory30.newScript(strMap31);
        java.util.Map<java.lang.String, java.lang.Object> strMap33 = null;
        org.elasticsearch.script.ExecutableScript executableScript34 = docScoreNativeScriptFactory30.newScript(strMap33);
        org.elasticsearch.common.settings.Settings settings35 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions37 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoClientOptions(mongoClientOptions37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder38.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions44 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoClientOptions(mongoClientOptions44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder43.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder47.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder47.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions52 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder51.mongoClientOptions(mongoClientOptions52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition54 = builder53.build();
        java.lang.String str55 = mongoDBRiverDefinition54.getMongoAdminPassword();
        boolean boolean56 = mongoDBRiverDefinition54.isMongoSecondaryReadPreference();
        java.lang.String str57 = mongoDBRiverDefinition54.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet58 = mongoDBRiverDefinition54.getParentTypes();
        boolean boolean59 = mongoDBRiverDefinition54.isMongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject60 = mongoDBRiverDefinition54.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder40.mongoCollectionFilter(basicDBObject60);
        org.elasticsearch.river.RiverSettings riverSettings62 = new org.elasticsearch.river.RiverSettings(settings35, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject60);
        org.elasticsearch.script.ExecutableScript executableScript63 = docScoreNativeScriptFactory30.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder27.mongoCollectionFilter(basicDBObject60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder64.mongoCollection("connect_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions68 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder67.mongoClientOptions(mongoClientOptions68);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder67.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder71.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder71.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions76 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder75.mongoClientOptions(mongoClientOptions76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition78 = builder77.build();
        java.lang.String str79 = mongoDBRiverDefinition78.getMongoDb();
        java.lang.String str80 = mongoDBRiverDefinition78.getScript();
        java.lang.String str81 = mongoDBRiverDefinition78.getIncludeCollection();
        java.lang.String str82 = mongoDBRiverDefinition78.getMongoLocalUser();
        com.mongodb.BasicDBObject basicDBObject83 = mongoDBRiverDefinition78.getMongoOplogFilter();
        com.mongodb.BasicDBObject basicDBObject84 = mongoDBRiverDefinition78.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder66.mongoCollectionFilter(basicDBObject84);
        org.elasticsearch.river.RiverSettings riverSettings86 = new org.elasticsearch.river.RiverSettings(settings16, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject84);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder15.mongoOplogFilter(basicDBObject84);
        org.elasticsearch.river.RiverSettings riverSettings88 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject84);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(executableScript32);
        org.junit.Assert.assertNotNull(executableScript34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNull(strSet58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(basicDBObject60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(executableScript63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNull(basicDBObject83);
        org.junit.Assert.assertNotNull(basicDBObject84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test08618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08618");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isSkipInitialImport();
        boolean boolean12 = mongoDBRiverDefinition9.isMongoGridFS();
        java.lang.String str13 = mongoDBRiverDefinition9.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet14 = mongoDBRiverDefinition9.getParentTypes();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(strSet14);
    }

    @Test
    public void test08619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08619");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder12.indexName("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder12.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.mongoAdminUser("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.riverIndexName("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder22.scriptType("throttle_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder22.throttleSize((int) (byte) -1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test08620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08620");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.scriptType("host");
        com.mongodb.BasicDBObject basicDBObject17 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoCollectionFilter(basicDBObject17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.script("user");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test08621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08621");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoAdminPassword();
        boolean boolean13 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        java.lang.String str14 = mongoDBRiverDefinition11.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition11.getParentTypes();
        java.lang.String str16 = mongoDBRiverDefinition11.getMongoAdminPassword();
        boolean boolean17 = mongoDBRiverDefinition11.isStoreStatistics();
        java.util.Set<java.lang.String> strSet18 = mongoDBRiverDefinition11.getExcludeFields();
        com.mongodb.MongoClientOptions mongoClientOptions19 = mongoDBRiverDefinition11.getMongoClientOptions();
        java.util.Set<java.lang.String> strSet20 = mongoDBRiverDefinition11.getExcludeFields();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNull(mongoClientOptions19);
        org.junit.Assert.assertNull(strSet20);
    }

    @Test
    public void test08622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08622");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.statisticsIndexName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.storeStatistics(true);
        com.mongodb.MongoClientOptions mongoClientOptions17 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoClientOptions(mongoClientOptions17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = builder16.build();
        boolean boolean20 = mongoDBRiverDefinition19.isMongoUseSSL();
        boolean boolean21 = mongoDBRiverDefinition19.isDisableIndexRefresh();
        boolean boolean22 = mongoDBRiverDefinition19.isAdvancedTransformation();
        boolean boolean23 = mongoDBRiverDefinition19.isDropCollection();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test08623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08623");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.mongoClientOptions(mongoClientOptions6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.mongoCollectionFilter(basicDBObject10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray23 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder15.includeFields((java.util.Set<java.lang.String>) strSet24);
        java.lang.Object obj27 = docScoreSearchScript0.unwrap((java.lang.Object) builder15);
        docScoreSearchScript0.setNextScore((float) (byte) 100);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript31 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj33 = docScoreSearchScript31.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript31.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions38 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.mongoClientOptions(mongoClientOptions38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder37.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject42 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder37.mongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder37.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder45.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder47.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder49.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder49.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions55 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder54.mongoClientOptions(mongoClientOptions55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder54.importAllCollections(false);
        com.mongodb.ServerAddress[] serverAddressArray59 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList60 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList60, serverAddressArray59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder54.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder53.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder53.skipInitialImport(false);
        docScoreSearchScript31.setNextVar("import_all_collections", (java.lang.Object) builder53);
        docScoreSearchScript0.setNextVar("bulk", (java.lang.Object) docScoreSearchScript31);
        docScoreSearchScript31.setNextScore((float) 1L);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions71 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder70.mongoClientOptions(mongoClientOptions71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder72.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder74.socketTimeout((int) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder74.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder78.includeCollection("script_type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder80.mongoDb("disable_index_refresh");
        java.lang.Object obj83 = docScoreSearchScript31.unwrap((java.lang.Object) builder82);
        docScoreSearchScript31.setNextScore((float) (short) 1);
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals("'" + obj33 + "' != '" + "hi!" + "'", obj33, "hi!");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(serverAddressArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(obj83);
    }

    @Test
    public void test08624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08624");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.common.settings.Settings settings3 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory4 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = null;
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory4.newScript(strMap5);
        java.util.Map<java.lang.String, java.lang.Object> strMap7 = null;
        org.elasticsearch.script.ExecutableScript executableScript8 = docScoreNativeScriptFactory4.newScript(strMap7);
        org.elasticsearch.common.settings.Settings settings9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoClientOptions(mongoClientOptions11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.socketTimeout((int) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.mongoClientOptions(mongoClientOptions18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder17.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder21.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder21.throttleSize(0);
        org.elasticsearch.common.settings.Settings settings28 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions30 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.mongoClientOptions(mongoClientOptions30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions37 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoClientOptions(mongoClientOptions37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder36.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder40.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions45 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.mongoClientOptions(mongoClientOptions45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition47 = builder46.build();
        java.lang.String str48 = mongoDBRiverDefinition47.getMongoAdminPassword();
        boolean boolean49 = mongoDBRiverDefinition47.isMongoSecondaryReadPreference();
        java.lang.String str50 = mongoDBRiverDefinition47.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet51 = mongoDBRiverDefinition47.getParentTypes();
        boolean boolean52 = mongoDBRiverDefinition47.isMongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject53 = mongoDBRiverDefinition47.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder33.mongoCollectionFilter(basicDBObject53);
        org.elasticsearch.river.RiverSettings riverSettings55 = new org.elasticsearch.river.RiverSettings(settings28, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder21.mongoCollectionFilter(basicDBObject53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder14.mongoOplogFilter(basicDBObject53);
        org.elasticsearch.river.RiverSettings riverSettings58 = new org.elasticsearch.river.RiverSettings(settings9, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject53);
        org.elasticsearch.script.ExecutableScript executableScript59 = docScoreNativeScriptFactory4.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject53);
        org.elasticsearch.river.RiverSettings riverSettings60 = new org.elasticsearch.river.RiverSettings(settings3, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject53);
        org.elasticsearch.river.RiverSettings riverSettings61 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject53);
        java.util.Map<java.lang.String, java.lang.Object> strMap62 = riverSettings61.settings();
        org.elasticsearch.script.ScriptService scriptService63 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition64 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("include_fields", "include_fields", riverSettings61, scriptService63);
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertNotNull(executableScript8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNull(strSet51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(basicDBObject53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(executableScript59);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition64);
    }

    @Test
    public void test08625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08625");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.mongoClientOptions(mongoClientOptions6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.mongoCollectionFilter(basicDBObject10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray23 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder15.includeFields((java.util.Set<java.lang.String>) strSet24);
        java.lang.Object obj27 = docScoreSearchScript0.unwrap((java.lang.Object) builder15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder15.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.riverName("port");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory32 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap33 = null;
        org.elasticsearch.script.ExecutableScript executableScript34 = docScoreNativeScriptFactory32.newScript(strMap33);
        java.util.Map<java.lang.String, java.lang.Object> strMap35 = null;
        org.elasticsearch.script.ExecutableScript executableScript36 = docScoreNativeScriptFactory32.newScript(strMap35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions38 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.mongoClientOptions(mongoClientOptions38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder37.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder41.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions46 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder45.mongoClientOptions(mongoClientOptions46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = builder47.build();
        java.lang.String str49 = mongoDBRiverDefinition48.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions50 = mongoDBRiverDefinition48.getMongoClientOptions();
        boolean boolean51 = mongoDBRiverDefinition48.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions52 = mongoDBRiverDefinition48.getMongoClientOptions();
        java.lang.String str53 = mongoDBRiverDefinition48.getScript();
        com.mongodb.BasicDBObject basicDBObject54 = mongoDBRiverDefinition48.getMongoOplogFilter();
        java.lang.String str55 = mongoDBRiverDefinition48.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject56 = mongoDBRiverDefinition48.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript57 = docScoreNativeScriptFactory32.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder31.mongoCollectionFilter(basicDBObject56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder31.statisticsIndexName("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder60.connectTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions63 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder62.mongoClientOptions(mongoClientOptions63);
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(executableScript34);
        org.junit.Assert.assertNotNull(executableScript36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNull(mongoClientOptions50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(mongoClientOptions52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(basicDBObject54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(basicDBObject56);
        org.junit.Assert.assertNotNull(executableScript57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test08626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08626");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory4 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = null;
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory4.newScript(strMap5);
        docScoreSearchScript0.setNextVar("localhost", (java.lang.Object) docScoreNativeScriptFactory4);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript9 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj11 = docScoreSearchScript9.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript9.setNextScore((float) 1);
        docScoreSearchScript0.setNextVar("credentials", (java.lang.Object) 1);
        docScoreSearchScript0.setNextScore((float) 0L);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoClientOptions(mongoClientOptions19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject23 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder18.mongoCollectionFilter(basicDBObject23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder18.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder28.riverIndexName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.includeCollection("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.scriptType("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoDb("include_fields");
        docScoreSearchScript0.setNextVar("db", (java.lang.Object) builder38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions41 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.mongoClientOptions(mongoClientOptions41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder40.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder44.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions49 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.mongoClientOptions(mongoClientOptions49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = builder50.build();
        java.lang.String str52 = mongoDBRiverDefinition51.getMongoAdminPassword();
        boolean boolean53 = mongoDBRiverDefinition51.isMongoSecondaryReadPreference();
        java.lang.String str54 = mongoDBRiverDefinition51.getMongoLocalUser();
        java.lang.Object obj55 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions58 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder57.mongoClientOptions(mongoClientOptions58);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder57.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject62 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder57.mongoCollectionFilter(basicDBObject62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder57.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder65.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder67.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder69.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder69.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions75 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder74.mongoClientOptions(mongoClientOptions75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder74.importAllCollections(false);
        com.mongodb.ServerAddress[] serverAddressArray79 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList80 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList80, serverAddressArray79);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder74.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList80);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder73.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList80);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder83.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder83.storeStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder89 = builder83.socketTimeout((-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder91 = builder89.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder93 = builder91.throttleSize((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder95 = builder93.statisticsTypeName("import_all_collections");
        docScoreSearchScript0.setNextVar("ssl", (java.lang.Object) builder93);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder98 = builder93.socketTimeout((int) (short) 10);
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + "hi!" + "'", obj11, "hi!");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(serverAddressArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test08627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08627");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript3 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj5 = docScoreSearchScript3.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript3.setNextScore((float) 1);
        docScoreSearchScript3.setNextScore((float) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoClientOptions(mongoClientOptions12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder13.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.typeName("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder19.indexName("host");
        docScoreSearchScript3.setNextVar("drop_collection", (java.lang.Object) builder19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions26 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.mongoClientOptions(mongoClientOptions26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder25.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject30 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder25.mongoCollectionFilter(basicDBObject30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder25.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray43 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder35.includeFields((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder19.includeFields((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions49 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.mongoClientOptions(mongoClientOptions49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder48.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder52.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder52.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions57 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder56.mongoClientOptions(mongoClientOptions57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition59 = builder58.build();
        java.lang.String str60 = mongoDBRiverDefinition59.getMongoAdminPassword();
        boolean boolean61 = mongoDBRiverDefinition59.isMongoSecondaryReadPreference();
        java.lang.String str62 = mongoDBRiverDefinition59.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet63 = mongoDBRiverDefinition59.getParentTypes();
        boolean boolean64 = mongoDBRiverDefinition59.isMongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject65 = mongoDBRiverDefinition59.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder47.mongoCollectionFilter(basicDBObject65);
        org.elasticsearch.river.RiverSettings riverSettings67 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject65);
        org.elasticsearch.script.ScriptService scriptService68 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition69 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("drop_collection", "password", riverSettings67, scriptService68);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp70 = mongoDBRiverDefinition69.getInitialTimestamp();
        java.lang.String str71 = mongoDBRiverDefinition69.getRiverName();
        java.util.Set<java.lang.String> strSet72 = mongoDBRiverDefinition69.getIncludeFields();
        boolean boolean73 = mongoDBRiverDefinition69.isMongoGridFS();
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + "hi!" + "'", obj5, "hi!");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNull(strSet63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(basicDBObject65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition69);
        org.junit.Assert.assertNull(wildcardTimestamp70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "drop_collection" + "'", str71, "drop_collection");
        org.junit.Assert.assertNull(strSet72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test08628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08628");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition11.getParentTypes();
        boolean boolean14 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        boolean boolean15 = mongoDBRiverDefinition11.isMongoGridFS();
        java.lang.String str16 = mongoDBRiverDefinition11.getRiverName();
        int int17 = mongoDBRiverDefinition11.getThrottleSize();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test08629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08629");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = builder6.build();
        java.lang.String str8 = mongoDBRiverDefinition7.getStatisticsIndexName();
        java.lang.String str9 = mongoDBRiverDefinition7.getStatisticsTypeName();
        boolean boolean10 = mongoDBRiverDefinition7.isDisableIndexRefresh();
        boolean boolean11 = mongoDBRiverDefinition7.isSkipInitialImport();
        java.lang.String str12 = mongoDBRiverDefinition7.getRiverName();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition7.getParentTypes();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(strSet13);
    }

    @Test
    public void test08630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08630");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoLocalPassword("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.includeCollection("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.throttleSize((int) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.typeName("concurrent_bulk_requests");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test08631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08631");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.mongoClientOptions(mongoClientOptions14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.socketTimeout((int) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.mongoClientOptions(mongoClientOptions21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder20.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder24.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder24.throttleSize(0);
        org.elasticsearch.common.settings.Settings settings31 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.mongoClientOptions(mongoClientOptions33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions40 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder39.mongoClientOptions(mongoClientOptions40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder39.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder43.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions48 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder47.mongoClientOptions(mongoClientOptions48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition50 = builder49.build();
        java.lang.String str51 = mongoDBRiverDefinition50.getMongoAdminPassword();
        boolean boolean52 = mongoDBRiverDefinition50.isMongoSecondaryReadPreference();
        java.lang.String str53 = mongoDBRiverDefinition50.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet54 = mongoDBRiverDefinition50.getParentTypes();
        boolean boolean55 = mongoDBRiverDefinition50.isMongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject56 = mongoDBRiverDefinition50.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder36.mongoCollectionFilter(basicDBObject56);
        org.elasticsearch.river.RiverSettings riverSettings58 = new org.elasticsearch.river.RiverSettings(settings31, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder24.mongoCollectionFilter(basicDBObject56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder17.mongoOplogFilter(basicDBObject56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions62 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder61.mongoClientOptions(mongoClientOptions62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder63.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder63.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder63.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder63.typeName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder63.mongoLocalUser("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder73.socketTimeout((int) (byte) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions77 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder76.mongoClientOptions(mongoClientOptions77);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder76.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject81 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder76.mongoCollectionFilter(basicDBObject81);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder76.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition85 = builder84.build();
        boolean boolean86 = mongoDBRiverDefinition85.isStoreStatistics();
        boolean boolean87 = mongoDBRiverDefinition85.isMongoSSLVerifyCertificate();
        java.lang.String str88 = mongoDBRiverDefinition85.getMongoAdminPassword();
        java.lang.String str89 = mongoDBRiverDefinition85.getTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList90 = mongoDBRiverDefinition85.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder91 = builder75.mongoServers(serverAddressList90);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder92 = builder17.mongoServers(serverAddressList90);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder93 = builder12.mongoServers(serverAddressList90);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder95 = builder93.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder97 = builder95.mongoCollection("null.null.null.null");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNull(strSet54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(basicDBObject56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNotNull(serverAddressList90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test08632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08632");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.mongoAdminPassword("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminPassword("connect_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.mongoCollection("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.storeStatistics(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test08633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08633");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.riverIndexName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.mongoLocalPassword("name");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory11 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoClientOptions(mongoClientOptions13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.mongoLocalUser("ssl_verify_certificate");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions22 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.mongoClientOptions(mongoClientOptions22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder21.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder25.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions30 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.mongoClientOptions(mongoClientOptions30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition32 = builder31.build();
        java.lang.String str33 = mongoDBRiverDefinition32.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions34 = mongoDBRiverDefinition32.getMongoClientOptions();
        boolean boolean35 = mongoDBRiverDefinition32.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions36 = mongoDBRiverDefinition32.getMongoClientOptions();
        java.lang.String str37 = mongoDBRiverDefinition32.getScript();
        com.mongodb.BasicDBObject basicDBObject38 = mongoDBRiverDefinition32.getMongoOplogFilter();
        java.lang.String str39 = mongoDBRiverDefinition32.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject40 = mongoDBRiverDefinition32.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder16.mongoOplogFilter(basicDBObject40);
        org.elasticsearch.script.ExecutableScript executableScript42 = docScoreNativeScriptFactory11.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder10.mongoOplogFilter(basicDBObject40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoSecondaryReadPreference(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNull(mongoClientOptions34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(mongoClientOptions36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(basicDBObject38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(basicDBObject40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(executableScript42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test08634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08634");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoClientOptions(mongoClientOptions4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.mongoCollectionFilter(basicDBObject8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.riverIndexName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.mongoAdminUser("");
        org.elasticsearch.common.settings.Settings settings20 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions22 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.mongoClientOptions(mongoClientOptions22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions29 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.mongoClientOptions(mongoClientOptions29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder28.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder32.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions37 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoClientOptions(mongoClientOptions37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = builder38.build();
        java.lang.String str40 = mongoDBRiverDefinition39.getMongoAdminPassword();
        boolean boolean41 = mongoDBRiverDefinition39.isMongoSecondaryReadPreference();
        java.lang.String str42 = mongoDBRiverDefinition39.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet43 = mongoDBRiverDefinition39.getParentTypes();
        boolean boolean44 = mongoDBRiverDefinition39.isMongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject45 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder25.mongoCollectionFilter(basicDBObject45);
        org.elasticsearch.river.RiverSettings riverSettings47 = new org.elasticsearch.river.RiverSettings(settings20, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder17.mongoCollectionFilter(basicDBObject45);
        org.elasticsearch.river.RiverSettings riverSettings49 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject45);
        org.elasticsearch.script.ScriptService scriptService50 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("include_collection", "index", riverSettings49, scriptService50);
        java.lang.String str52 = mongoDBRiverDefinition51.getMongoLocalPassword();
        java.util.Set<java.lang.String> strSet53 = mongoDBRiverDefinition51.getIncludeFields();
        java.lang.String str54 = mongoDBRiverDefinition51.getMongoCollection();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNull(strSet53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "include_collection" + "'", str54, "include_collection");
    }

    @Test
    public void test08635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08635");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.socketTimeout((int) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.statisticsIndexName("script_type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.mongoClientOptions(mongoClientOptions10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject14 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder9.mongoCollectionFilter(basicDBObject14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder9.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder17.includeCollection("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder17.mongoLocalPassword("gridfs");
        java.util.Set<java.lang.String> strSet24 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder17.includeFields(strSet24);
        java.lang.String[] strArray29 = new java.lang.String[] { "advanced_transformation", "ssl", "secondary_read_preference" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder25.includeFields((java.util.Set<java.lang.String>) strSet30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder4.parentTypes((java.util.Set<java.lang.String>) strSet30);
        com.mongodb.BasicDBObject basicDBObject34 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.mongoOplogFilter(basicDBObject34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.statisticsIndexName("admin");
        org.bson.types.Binary binary38 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.initialTimestamp(binary38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test08636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08636");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str13 = mongoDBRiverDefinition11.getStatisticsTypeName();
        boolean boolean14 = mongoDBRiverDefinition11.isImportAllCollections();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp15 = mongoDBRiverDefinition11.getInitialTimestamp();
        int int16 = mongoDBRiverDefinition11.getSocketTimeout();
        int int17 = mongoDBRiverDefinition11.getConnectTimeout();
        java.lang.String str18 = mongoDBRiverDefinition11.getMongoAdminUser();
        boolean boolean19 = mongoDBRiverDefinition11.isImportAllCollections();
        com.mongodb.BasicDBObject basicDBObject20 = mongoDBRiverDefinition11.getMongoOplogFilter();
        boolean boolean21 = mongoDBRiverDefinition11.isMongoGridFS();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(wildcardTimestamp15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(basicDBObject20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test08637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08637");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.statisticsIndexName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoAdminUser("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.statisticsIndexName("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.socketTimeout(1000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoLocalPassword("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.throttleSize((int) (byte) -1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test08638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08638");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.typeName("options");
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoOplogFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.statisticsTypeName("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("parent_types");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoClientOptions(mongoClientOptions12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder15.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.mongoClientOptions(mongoClientOptions20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder19.statisticsIndexName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder19.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions27 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.mongoClientOptions(mongoClientOptions27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.mongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder28.mongoAdminPassword("drop_collection");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript33 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj35 = docScoreSearchScript33.unwrap((java.lang.Object) 8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions38 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.mongoClientOptions(mongoClientOptions38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder37.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject42 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder37.mongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder37.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder37.riverName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder47.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder47.socketTimeout((int) (byte) 100);
        docScoreSearchScript33.setNextVar("", (java.lang.Object) builder47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder47.riverIndexName("connect_timeout");
        java.util.Set<java.lang.String> strSet55 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder47.excludeFields(strSet55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions58 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder57.mongoClientOptions(mongoClientOptions58);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder57.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject62 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder57.mongoCollectionFilter(basicDBObject62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder57.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder65.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder67.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray75 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet76 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet76, strArray75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder67.includeFields((java.util.Set<java.lang.String>) strSet76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder56.parentTypes((java.util.Set<java.lang.String>) strSet76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder32.excludeFields((java.util.Set<java.lang.String>) strSet76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder19.includeFields((java.util.Set<java.lang.String>) strSet76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder10.includeFields((java.util.Set<java.lang.String>) strSet76);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + obj35 + "' != '" + 8 + "'", obj35, 8);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test08639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08639");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.common.settings.Settings settings3 = null;
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript4 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj6 = docScoreSearchScript4.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript4.setNextScore((float) 1);
        docScoreSearchScript4.setNextScore((float) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoClientOptions(mongoClientOptions13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder14.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.typeName("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder20.indexName("host");
        docScoreSearchScript4.setNextVar("drop_collection", (java.lang.Object) builder20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions27 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.mongoClientOptions(mongoClientOptions27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder26.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject31 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder26.mongoCollectionFilter(basicDBObject31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder26.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray44 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder36.includeFields((java.util.Set<java.lang.String>) strSet45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder20.includeFields((java.util.Set<java.lang.String>) strSet45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions50 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder49.mongoClientOptions(mongoClientOptions50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder49.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder53.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder53.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions58 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder57.mongoClientOptions(mongoClientOptions58);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition60 = builder59.build();
        java.lang.String str61 = mongoDBRiverDefinition60.getMongoAdminPassword();
        boolean boolean62 = mongoDBRiverDefinition60.isMongoSecondaryReadPreference();
        java.lang.String str63 = mongoDBRiverDefinition60.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet64 = mongoDBRiverDefinition60.getParentTypes();
        boolean boolean65 = mongoDBRiverDefinition60.isMongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject66 = mongoDBRiverDefinition60.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder48.mongoCollectionFilter(basicDBObject66);
        org.elasticsearch.river.RiverSettings riverSettings68 = new org.elasticsearch.river.RiverSettings(settings3, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject66);
        org.elasticsearch.script.ScriptService scriptService69 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition70 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("actions", "collection", riverSettings68, scriptService69);
        java.util.Map<java.lang.String, java.lang.Object> strMap71 = riverSettings68.settings();
        org.elasticsearch.river.RiverSettings riverSettings72 = new org.elasticsearch.river.RiverSettings(settings0, strMap71);
        java.util.Map<java.lang.String, java.lang.Object> strMap73 = riverSettings72.settings();
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + "hi!" + "'", obj6, "hi!");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNull(strSet64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(basicDBObject66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition70);
        org.junit.Assert.assertNotNull(strMap71);
        org.junit.Assert.assertNotNull(strMap73);
    }

    @Test
    public void test08640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08640");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions13 = mongoDBRiverDefinition11.getMongoClientOptions();
        boolean boolean14 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions15 = mongoDBRiverDefinition11.getMongoClientOptions();
        boolean boolean16 = mongoDBRiverDefinition11.isMongoGridFS();
        boolean boolean17 = mongoDBRiverDefinition11.isMongoSSLVerifyCertificate();
        boolean boolean18 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp19 = mongoDBRiverDefinition11.getInitialTimestamp();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(wildcardTimestamp19);
    }

    @Test
    public void test08641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08641");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder2.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoClientOptions(mongoClientOptions12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder15.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder15.includeCollection("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.throttleSize((int) (byte) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = builder23.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions26 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.mongoClientOptions(mongoClientOptions26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.typeName("options");
        java.lang.String[] strArray68 = new java.lang.String[] { "script_type", "flush_interval", "localhost", "credentials", "local", "localhost", "user", "exclude_fields", "include_collection", "user", "localhost", "actions", "secondary_read_preference", "gridfs", "exclude_fields", "", "type", "store_statistics", "credentials", "include_collection", "options", "ssl_verify_certificate", "initial_timestamp", "", "localhost", "size", "servers", "disable_index_refresh", "ssl_verify_certificate", "initial_timestamp", "flush_interval", "", "user", "skip_initial_import", "", "parent_types", "filter", "" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder29.includeFields((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder23.includeFields((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder10.includeFields((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder73.connectTimeout((int) (short) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder75.mongoAdminPassword("bulk");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test08642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08642");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        com.mongodb.MongoClientOptions mongoClientOptions10 = mongoDBRiverDefinition9.getMongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition9.getMongoCollectionFilter();
        boolean boolean12 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.lang.String str13 = mongoDBRiverDefinition9.getScript();
        com.mongodb.MongoClientOptions mongoClientOptions14 = mongoDBRiverDefinition9.getMongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject15 = mongoDBRiverDefinition9.getMongoOplogFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = mongoDBRiverDefinition9.getMongoServers();
        com.mongodb.MongoClientOptions mongoClientOptions17 = mongoDBRiverDefinition9.getMongoClientOptions();
        boolean boolean18 = mongoDBRiverDefinition9.isDisableIndexRefresh();
        java.lang.String str19 = mongoDBRiverDefinition9.getTypeName();
        java.lang.String str20 = mongoDBRiverDefinition9.getMongoDb();
        java.util.Set<java.lang.String> strSet21 = mongoDBRiverDefinition9.getIncludeFields();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(mongoClientOptions14);
        org.junit.Assert.assertNull(basicDBObject15);
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(strSet21);
    }

    @Test
    public void test08643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08643");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder2.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.mongoDb("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.riverIndexName("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoAdminUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions22 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.mongoClientOptions(mongoClientOptions22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder21.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject26 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder21.mongoCollectionFilter(basicDBObject26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.mongoLocalPassword("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.mongoAdminUser("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.mongoClientOptions(mongoClientOptions33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder32.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder36.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions41 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.mongoClientOptions(mongoClientOptions41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition43 = builder42.build();
        java.lang.String str44 = mongoDBRiverDefinition43.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions45 = mongoDBRiverDefinition43.getMongoClientOptions();
        boolean boolean46 = mongoDBRiverDefinition43.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions47 = mongoDBRiverDefinition43.getMongoClientOptions();
        java.lang.String str48 = mongoDBRiverDefinition43.getScript();
        com.mongodb.BasicDBObject basicDBObject49 = mongoDBRiverDefinition43.getMongoOplogFilter();
        java.lang.String str50 = mongoDBRiverDefinition43.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject51 = mongoDBRiverDefinition43.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder31.mongoCollectionFilter(basicDBObject51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder20.mongoOplogFilter(basicDBObject51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions55 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder54.mongoClientOptions(mongoClientOptions55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder56.typeName("options");
        com.mongodb.BasicDBObject basicDBObject59 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.mongoOplogFilter(basicDBObject59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder60.riverName("connect_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder60.mongoGridFS(true);
        org.elasticsearch.common.settings.Settings settings65 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions67 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder66.mongoClientOptions(mongoClientOptions67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder66.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder70.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder70.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions75 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder74.mongoClientOptions(mongoClientOptions75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition77 = builder76.build();
        java.lang.String str78 = mongoDBRiverDefinition77.getMongoDb();
        java.lang.String str79 = mongoDBRiverDefinition77.getStatisticsTypeName();
        boolean boolean80 = mongoDBRiverDefinition77.isImportAllCollections();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp81 = mongoDBRiverDefinition77.getInitialTimestamp();
        int int82 = mongoDBRiverDefinition77.getSocketTimeout();
        int int83 = mongoDBRiverDefinition77.getConnectTimeout();
        java.lang.String str84 = mongoDBRiverDefinition77.getMongoAdminUser();
        java.lang.String str85 = mongoDBRiverDefinition77.getMongoAdminUser();
        java.lang.String str86 = mongoDBRiverDefinition77.getTypeName();
        java.util.Set<java.lang.String> strSet87 = mongoDBRiverDefinition77.getIncludeFields();
        java.lang.String str88 = mongoDBRiverDefinition77.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject89 = mongoDBRiverDefinition77.getMongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings90 = new org.elasticsearch.river.RiverSettings(settings65, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject89);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder91 = builder64.mongoCollectionFilter(basicDBObject89);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder92 = builder20.mongoCollectionFilter(basicDBObject89);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder94 = builder20.typeName("ssl");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(mongoClientOptions45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(mongoClientOptions47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(basicDBObject49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(basicDBObject51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(wildcardTimestamp81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 10 + "'", int83 == 10);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNull(strSet87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(basicDBObject89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test08644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08644");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder4.socketTimeout((int) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder4.mongoCollection("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoAdminUser("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.mongoAdminUser("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.mongoClientOptions(mongoClientOptions18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder17.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder21.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions26 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.mongoClientOptions(mongoClientOptions26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder25.statisticsIndexName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder25.mongoLocalUser("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder25.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions35 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.mongoClientOptions(mongoClientOptions35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder36.mongoAdminPassword("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder40.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions46 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder45.mongoClientOptions(mongoClientOptions46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder45.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject50 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder45.mongoCollectionFilter(basicDBObject50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder45.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition54 = builder53.build();
        boolean boolean55 = mongoDBRiverDefinition54.isStoreStatistics();
        boolean boolean56 = mongoDBRiverDefinition54.isMongoSSLVerifyCertificate();
        java.lang.String str57 = mongoDBRiverDefinition54.getMongoDb();
        java.util.List<com.mongodb.ServerAddress> serverAddressList58 = mongoDBRiverDefinition54.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder40.mongoServers(serverAddressList58);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder40.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions63 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder62.mongoClientOptions(mongoClientOptions63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder62.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder66.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder66.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions71 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder70.mongoClientOptions(mongoClientOptions71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition73 = builder72.build();
        int int74 = mongoDBRiverDefinition73.getConnectTimeout();
        java.lang.String str75 = mongoDBRiverDefinition73.getIncludeCollection();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp76 = mongoDBRiverDefinition73.getInitialTimestamp();
        boolean boolean77 = mongoDBRiverDefinition73.isMongoGridFS();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp78 = mongoDBRiverDefinition73.getInitialTimestamp();
        java.util.List<com.mongodb.ServerAddress> serverAddressList79 = mongoDBRiverDefinition73.getMongoServers();
        com.mongodb.BasicDBObject basicDBObject80 = mongoDBRiverDefinition73.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder40.mongoCollectionFilter(basicDBObject80);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder33.mongoCollectionFilter(basicDBObject80);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder12.mongoOplogFilter(basicDBObject80);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(serverAddressList58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNull(wildcardTimestamp76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(wildcardTimestamp78);
        org.junit.Assert.assertNotNull(serverAddressList79);
        org.junit.Assert.assertNotNull(basicDBObject80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test08645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08645");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript0.setNextScore((float) 1000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.mongoClientOptions(mongoClientOptions6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.mongoCollectionFilter(basicDBObject10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = builder13.build();
        boolean boolean15 = mongoDBRiverDefinition14.isStoreStatistics();
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = mongoDBRiverDefinition14.getMongoServers();
        java.lang.String str17 = mongoDBRiverDefinition14.getScriptType();
        java.lang.Object obj18 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition14);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory19 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap20 = null;
        org.elasticsearch.script.ExecutableScript executableScript21 = docScoreNativeScriptFactory19.newScript(strMap20);
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = null;
        org.elasticsearch.script.ExecutableScript executableScript23 = docScoreNativeScriptFactory19.newScript(strMap22);
        org.elasticsearch.common.settings.Settings settings24 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions26 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.mongoClientOptions(mongoClientOptions26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.mongoClientOptions(mongoClientOptions33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder32.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder36.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions41 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.mongoClientOptions(mongoClientOptions41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition43 = builder42.build();
        java.lang.String str44 = mongoDBRiverDefinition43.getMongoAdminPassword();
        boolean boolean45 = mongoDBRiverDefinition43.isMongoSecondaryReadPreference();
        java.lang.String str46 = mongoDBRiverDefinition43.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet47 = mongoDBRiverDefinition43.getParentTypes();
        boolean boolean48 = mongoDBRiverDefinition43.isMongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject49 = mongoDBRiverDefinition43.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder29.mongoCollectionFilter(basicDBObject49);
        org.elasticsearch.river.RiverSettings riverSettings51 = new org.elasticsearch.river.RiverSettings(settings24, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject49);
        org.elasticsearch.script.ExecutableScript executableScript52 = docScoreNativeScriptFactory19.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions54 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder53.mongoClientOptions(mongoClientOptions54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder53.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder53.socketTimeout((int) 'a');
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory60 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap61 = null;
        org.elasticsearch.script.ExecutableScript executableScript62 = docScoreNativeScriptFactory60.newScript(strMap61);
        java.util.Map<java.lang.String, java.lang.Object> strMap63 = null;
        org.elasticsearch.script.ExecutableScript executableScript64 = docScoreNativeScriptFactory60.newScript(strMap63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions66 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder65.mongoClientOptions(mongoClientOptions66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder65.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder69.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder69.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions74 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder73.mongoClientOptions(mongoClientOptions74);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition76 = builder75.build();
        java.lang.String str77 = mongoDBRiverDefinition76.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions78 = mongoDBRiverDefinition76.getMongoClientOptions();
        boolean boolean79 = mongoDBRiverDefinition76.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions80 = mongoDBRiverDefinition76.getMongoClientOptions();
        java.lang.String str81 = mongoDBRiverDefinition76.getScript();
        com.mongodb.BasicDBObject basicDBObject82 = mongoDBRiverDefinition76.getMongoOplogFilter();
        java.lang.String str83 = mongoDBRiverDefinition76.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject84 = mongoDBRiverDefinition76.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript85 = docScoreNativeScriptFactory60.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject84);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder53.mongoCollectionFilter(basicDBObject84);
        org.elasticsearch.script.ExecutableScript executableScript87 = docScoreNativeScriptFactory19.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject84);
        java.lang.Object obj88 = docScoreSearchScript0.unwrap((java.lang.Object) basicDBObject84);
        docScoreSearchScript0.setNextScore(1.0f);
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextDocId((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(executableScript21);
        org.junit.Assert.assertNotNull(executableScript23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNull(strSet47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(basicDBObject49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(executableScript52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(executableScript62);
        org.junit.Assert.assertNotNull(executableScript64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNull(mongoClientOptions78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(mongoClientOptions80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(basicDBObject82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(basicDBObject84);
        org.junit.Assert.assertNotNull(executableScript85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(executableScript87);
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertEquals(obj88.toString(), "{ }");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj88), "{ }");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj88), "{ }");
    }

    @Test
    public void test08646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08646");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str13 = mongoDBRiverDefinition11.getScript();
        java.lang.String str14 = mongoDBRiverDefinition11.getMongoCollection();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition11.getIncludeFields();
        com.mongodb.MongoClientOptions mongoClientOptions16 = mongoDBRiverDefinition11.getMongoClientOptions();
        boolean boolean17 = mongoDBRiverDefinition11.isMongoUseSSL();
        boolean boolean18 = mongoDBRiverDefinition11.isDisableIndexRefresh();
        boolean boolean19 = mongoDBRiverDefinition11.isMongoSSLVerifyCertificate();
        boolean boolean20 = mongoDBRiverDefinition11.isSkipInitialImport();
        com.mongodb.BasicDBObject basicDBObject21 = mongoDBRiverDefinition11.getMongoCollectionFilter();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(basicDBObject21);
    }

    @Test
    public void test08647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08647");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.statisticsIndexName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.typeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder8.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder8.storeStatistics(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test08648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08648");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        com.mongodb.MongoClientOptions mongoClientOptions10 = mongoDBRiverDefinition9.getMongoClientOptions();
        java.lang.String str11 = mongoDBRiverDefinition9.getIncludeCollection();
        java.lang.String str12 = mongoDBRiverDefinition9.getIndexName();
        boolean boolean13 = mongoDBRiverDefinition9.isStoreStatistics();
        java.lang.String str14 = mongoDBRiverDefinition9.getMongoDb();
        java.lang.String str15 = mongoDBRiverDefinition9.getRiverName();
        java.lang.String str16 = mongoDBRiverDefinition9.getIndexName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "bulk_size" + "'", str12, "bulk_size");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "bulk_size" + "'", str16, "bulk_size");
    }

    @Test
    public void test08649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08649");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        boolean boolean12 = mongoDBRiverDefinition9.isMongoSecondaryReadPreference();
        java.lang.String str13 = mongoDBRiverDefinition9.getScript();
        java.lang.String str14 = mongoDBRiverDefinition9.getMongoAdminPassword();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition9.getExcludeFields();
        boolean boolean16 = mongoDBRiverDefinition9.isMongoSecondaryReadPreference();
        boolean boolean17 = mongoDBRiverDefinition9.isDropCollection();
        java.lang.String str18 = mongoDBRiverDefinition9.getRiverName();
        java.lang.String str19 = mongoDBRiverDefinition9.getMongoLocalUser();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test08650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08650");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.typeName("include_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.statisticsTypeName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.advancedTransformation(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test08651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08651");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions13 = mongoDBRiverDefinition11.getMongoClientOptions();
        boolean boolean14 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions15 = mongoDBRiverDefinition11.getMongoClientOptions();
        boolean boolean16 = mongoDBRiverDefinition11.isMongoGridFS();
        java.lang.String str17 = mongoDBRiverDefinition11.getRiverName();
        boolean boolean18 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        java.lang.String str19 = mongoDBRiverDefinition11.getStatisticsIndexName();
        boolean boolean20 = mongoDBRiverDefinition11.isMongoUseSSL();
        boolean boolean21 = mongoDBRiverDefinition11.isMongoGridFS();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test08652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08652");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoLocalPassword("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoAdminPassword("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoSSLVerifyCertificate(true);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript21 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj23 = docScoreSearchScript21.unwrap((java.lang.Object) "hi!");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory25 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap26 = null;
        org.elasticsearch.script.ExecutableScript executableScript27 = docScoreNativeScriptFactory25.newScript(strMap26);
        docScoreSearchScript21.setNextVar("localhost", (java.lang.Object) docScoreNativeScriptFactory25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions30 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.mongoClientOptions(mongoClientOptions30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder29.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder33.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder33.throttleSize(0);
        org.elasticsearch.common.settings.Settings settings40 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions42 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.mongoClientOptions(mongoClientOptions42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder45.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions49 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.mongoClientOptions(mongoClientOptions49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder48.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder52.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder52.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions57 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder56.mongoClientOptions(mongoClientOptions57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition59 = builder58.build();
        java.lang.String str60 = mongoDBRiverDefinition59.getMongoAdminPassword();
        boolean boolean61 = mongoDBRiverDefinition59.isMongoSecondaryReadPreference();
        java.lang.String str62 = mongoDBRiverDefinition59.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet63 = mongoDBRiverDefinition59.getParentTypes();
        boolean boolean64 = mongoDBRiverDefinition59.isMongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject65 = mongoDBRiverDefinition59.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder45.mongoCollectionFilter(basicDBObject65);
        org.elasticsearch.river.RiverSettings riverSettings67 = new org.elasticsearch.river.RiverSettings(settings40, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder33.mongoCollectionFilter(basicDBObject65);
        org.elasticsearch.script.ExecutableScript executableScript69 = docScoreNativeScriptFactory25.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder18.mongoCollectionFilter(basicDBObject65);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + obj23 + "' != '" + "hi!" + "'", obj23, "hi!");
        org.junit.Assert.assertNotNull(executableScript27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNull(strSet63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(basicDBObject65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(executableScript69);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test08653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08653");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoDb();
        int int13 = mongoDBRiverDefinition9.getConnectTimeout();
        java.lang.String str14 = mongoDBRiverDefinition9.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject15 = mongoDBRiverDefinition9.getMongoOplogFilter();
        com.mongodb.BasicDBObject basicDBObject16 = mongoDBRiverDefinition9.getMongoOplogFilter();
        java.lang.String str17 = mongoDBRiverDefinition9.getMongoAdminPassword();
        boolean boolean18 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str19 = mongoDBRiverDefinition9.getMongoLocalUser();
        int int20 = mongoDBRiverDefinition9.getThrottleSize();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(basicDBObject15);
        org.junit.Assert.assertNull(basicDBObject16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test08654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08654");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        boolean boolean13 = mongoDBRiverDefinition11.isDisableIndexRefresh();
        boolean boolean14 = mongoDBRiverDefinition11.isSkipInitialImport();
        java.lang.String str15 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str16 = mongoDBRiverDefinition11.getMongoOplogNamespace();
        java.lang.String str17 = mongoDBRiverDefinition11.getStatisticsTypeName();
        boolean boolean18 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        java.lang.String str19 = mongoDBRiverDefinition11.getScript();
        java.util.List<com.mongodb.ServerAddress> serverAddressList20 = mongoDBRiverDefinition11.getMongoServers();
        boolean boolean21 = mongoDBRiverDefinition11.isStoreStatistics();
        java.lang.String str22 = mongoDBRiverDefinition11.getMongoCollection();
        java.lang.String str23 = mongoDBRiverDefinition11.getIncludeCollection();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "null.null" + "'", str16, "null.null");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(serverAddressList20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test08655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08655");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        int int10 = mongoDBRiverDefinition9.getSocketTimeout();
        java.lang.String str11 = mongoDBRiverDefinition9.getScriptType();
        java.util.List<com.mongodb.ServerAddress> serverAddressList12 = mongoDBRiverDefinition9.getMongoServers();
        java.lang.String str13 = mongoDBRiverDefinition9.getMongoOplogNamespace();
        java.lang.String str14 = mongoDBRiverDefinition9.getMongoCollection();
        java.lang.String str15 = mongoDBRiverDefinition9.getMongoCollection();
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = mongoDBRiverDefinition9.getMongoServers();
        com.mongodb.BasicDBObject basicDBObject17 = mongoDBRiverDefinition9.getMongoOplogFilter();
        java.lang.String str18 = mongoDBRiverDefinition9.getScript();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(serverAddressList12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "null.null" + "'", str13, "null.null");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertNull(basicDBObject17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test08656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08656");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.statisticsIndexName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoLocalPassword("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder20.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder20.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.statisticsTypeName("");
        com.mongodb.MongoClientOptions mongoClientOptions29 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder26.mongoClientOptions(mongoClientOptions29);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test08657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08657");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder2.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder2.typeName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder2.mongoLocalUser("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.typeName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.statisticsIndexName("include_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder12.statisticsIndexName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.connectTimeout((int) (byte) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.includeCollection("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.importAllCollections(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test08658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08658");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory4 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = null;
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory4.newScript(strMap5);
        docScoreSearchScript0.setNextVar("localhost", (java.lang.Object) docScoreNativeScriptFactory4);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript9 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj11 = docScoreSearchScript9.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript9.setNextScore((float) 1);
        docScoreSearchScript0.setNextVar("credentials", (java.lang.Object) 1);
        docScoreSearchScript0.setNextScore((float) 0L);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoClientOptions(mongoClientOptions19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject23 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder18.mongoCollectionFilter(basicDBObject23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder18.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder28.riverIndexName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.includeCollection("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.scriptType("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoDb("include_fields");
        docScoreSearchScript0.setNextVar("db", (java.lang.Object) builder38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions41 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.mongoClientOptions(mongoClientOptions41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder40.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder44.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions49 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.mongoClientOptions(mongoClientOptions49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = builder50.build();
        java.lang.String str52 = mongoDBRiverDefinition51.getMongoAdminPassword();
        boolean boolean53 = mongoDBRiverDefinition51.isMongoSecondaryReadPreference();
        java.lang.String str54 = mongoDBRiverDefinition51.getMongoLocalUser();
        java.lang.Object obj55 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition51);
        java.util.Set<java.lang.String> strSet56 = mongoDBRiverDefinition51.getIncludeFields();
        java.lang.String str57 = mongoDBRiverDefinition51.getIndexName();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp58 = mongoDBRiverDefinition51.getInitialTimestamp();
        com.mongodb.BasicDBObject basicDBObject59 = mongoDBRiverDefinition51.getMongoCollectionFilter();
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + "hi!" + "'", obj11, "hi!");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertNull(strSet56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(wildcardTimestamp58);
        org.junit.Assert.assertNotNull(basicDBObject59);
    }

    @Test
    public void test08659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08659");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str13 = mongoDBRiverDefinition11.getStatisticsTypeName();
        boolean boolean14 = mongoDBRiverDefinition11.isImportAllCollections();
        java.lang.String str15 = mongoDBRiverDefinition11.getRiverIndexName();
        boolean boolean16 = mongoDBRiverDefinition11.isMongoGridFS();
        boolean boolean17 = mongoDBRiverDefinition11.isMongoGridFS();
        java.lang.String str18 = mongoDBRiverDefinition11.getMongoLocalUser();
        java.lang.String str19 = mongoDBRiverDefinition11.getStatisticsIndexName();
        java.lang.String str20 = mongoDBRiverDefinition11.getScript();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test08660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08660");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        java.lang.String[] strArray49 = new java.lang.String[] { "actions", "user", "name", "bulk_size", "", "script_type", "db", "disable_index_refresh", "local", "port", "filter", "gridfs", "drop_collection", "hi!", "include_collection", "secondary_read_preference", "options", "script_type", "index", "import_all_collections", "options", "connect_timeout", "index", "name", "gridfs", "name", "db", "script", "bulk_timeout", "flush_interval", "", "ssl_verify_certificate", "collection", "admin", "include_collection", "concurrent_requests", "secondary_read_preference", "bulk_timeout", "collection", "script_type", "gridfs", "script_type" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder6.excludeFields((java.util.Set<java.lang.String>) strSet50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder52.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder52.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder56.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder56.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder60.script("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition63 = builder62.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition63);
    }

    @Test
    public void test08661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08661");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder4.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder4.indexName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoClientOptions(mongoClientOptions16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder15.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject20 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder15.mongoCollectionFilter(basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder15.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = builder23.build();
        boolean boolean25 = mongoDBRiverDefinition24.isStoreStatistics();
        boolean boolean26 = mongoDBRiverDefinition24.isMongoSSLVerifyCertificate();
        java.lang.String str27 = mongoDBRiverDefinition24.getStatisticsTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList28 = mongoDBRiverDefinition24.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder12.mongoServers(serverAddressList28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder12.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder12.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.throttleSize(10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(serverAddressList28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test08662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08662");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript3 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj5 = docScoreSearchScript3.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript3.setNextScore((float) 1);
        docScoreSearchScript3.setNextScore((float) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoClientOptions(mongoClientOptions12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder13.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.typeName("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder19.indexName("host");
        docScoreSearchScript3.setNextVar("drop_collection", (java.lang.Object) builder19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions26 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.mongoClientOptions(mongoClientOptions26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder25.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject30 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder25.mongoCollectionFilter(basicDBObject30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder25.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray43 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder35.includeFields((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder19.includeFields((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions49 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.mongoClientOptions(mongoClientOptions49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder48.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder52.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder52.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions57 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder56.mongoClientOptions(mongoClientOptions57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition59 = builder58.build();
        java.lang.String str60 = mongoDBRiverDefinition59.getMongoAdminPassword();
        boolean boolean61 = mongoDBRiverDefinition59.isMongoSecondaryReadPreference();
        java.lang.String str62 = mongoDBRiverDefinition59.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet63 = mongoDBRiverDefinition59.getParentTypes();
        boolean boolean64 = mongoDBRiverDefinition59.isMongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject65 = mongoDBRiverDefinition59.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder47.mongoCollectionFilter(basicDBObject65);
        org.elasticsearch.river.RiverSettings riverSettings67 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject65);
        org.elasticsearch.script.ScriptService scriptService68 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition69 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("drop_collection", "password", riverSettings67, scriptService68);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp70 = mongoDBRiverDefinition69.getInitialTimestamp();
        java.lang.String str71 = mongoDBRiverDefinition69.getRiverName();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp72 = mongoDBRiverDefinition69.getInitialTimestamp();
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + "hi!" + "'", obj5, "hi!");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNull(strSet63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(basicDBObject65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition69);
        org.junit.Assert.assertNull(wildcardTimestamp70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "drop_collection" + "'", str71, "drop_collection");
        org.junit.Assert.assertNull(wildcardTimestamp72);
    }

    @Test
    public void test08663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08663");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.common.settings.Settings settings3 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoClientOptions(mongoClientOptions5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoLocalUser("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.typeName("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.dropCollection(true);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript17 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj19 = docScoreSearchScript17.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript17.setNextScore((float) 1);
        docScoreSearchScript17.setNextScore((float) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions26 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.mongoClientOptions(mongoClientOptions26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder27.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder27.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.typeName("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder33.indexName("host");
        docScoreSearchScript17.setNextVar("drop_collection", (java.lang.Object) builder33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions40 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder39.mongoClientOptions(mongoClientOptions40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder39.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject44 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder39.mongoCollectionFilter(basicDBObject44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder39.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder47.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder49.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray57 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet58 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder49.includeFields((java.util.Set<java.lang.String>) strSet58);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder33.includeFields((java.util.Set<java.lang.String>) strSet58);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions63 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder62.mongoClientOptions(mongoClientOptions63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder62.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder66.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder66.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions71 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder70.mongoClientOptions(mongoClientOptions71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition73 = builder72.build();
        java.lang.String str74 = mongoDBRiverDefinition73.getMongoAdminPassword();
        boolean boolean75 = mongoDBRiverDefinition73.isMongoSecondaryReadPreference();
        java.lang.String str76 = mongoDBRiverDefinition73.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet77 = mongoDBRiverDefinition73.getParentTypes();
        boolean boolean78 = mongoDBRiverDefinition73.isMongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject79 = mongoDBRiverDefinition73.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder61.mongoCollectionFilter(basicDBObject79);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder16.mongoOplogFilter(basicDBObject79);
        org.elasticsearch.river.RiverSettings riverSettings82 = new org.elasticsearch.river.RiverSettings(settings3, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject79);
        org.elasticsearch.river.RiverSettings riverSettings83 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject79);
        java.util.Map<java.lang.String, java.lang.Object> strMap84 = riverSettings83.settings();
        java.util.Map<java.lang.String, java.lang.Object> strMap85 = riverSettings83.settings();
        org.elasticsearch.script.ScriptService scriptService86 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition87 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("disable_index_refresh.null", "null.null.null.null", riverSettings83, scriptService86);
        java.lang.Class<?> wildcardClass88 = riverSettings83.getClass();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + "hi!" + "'", obj19, "hi!");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNull(strSet77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(basicDBObject79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(strMap84);
        org.junit.Assert.assertNotNull(strMap85);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test08664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08664");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        boolean boolean13 = mongoDBRiverDefinition11.isDisableIndexRefresh();
        boolean boolean14 = mongoDBRiverDefinition11.isSkipInitialImport();
        java.lang.String str15 = mongoDBRiverDefinition11.getMongoAdminPassword();
        boolean boolean16 = mongoDBRiverDefinition11.isMongoSSLVerifyCertificate();
        java.util.Set<java.lang.String> strSet17 = mongoDBRiverDefinition11.getParentTypes();
        java.lang.String str18 = mongoDBRiverDefinition11.getMongoOplogNamespace();
        java.util.Set<java.lang.String> strSet19 = mongoDBRiverDefinition11.getExcludeFields();
        java.util.Set<java.lang.String> strSet20 = mongoDBRiverDefinition11.getIncludeFields();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "null.null" + "'", str18, "null.null");
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNull(strSet20);
    }

    @Test
    public void test08665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08665");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder2.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoClientOptions(mongoClientOptions12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder15.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder15.includeCollection("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.throttleSize((int) (byte) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = builder23.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions26 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.mongoClientOptions(mongoClientOptions26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.typeName("options");
        java.lang.String[] strArray68 = new java.lang.String[] { "script_type", "flush_interval", "localhost", "credentials", "local", "localhost", "user", "exclude_fields", "include_collection", "user", "localhost", "actions", "secondary_read_preference", "gridfs", "exclude_fields", "", "type", "store_statistics", "credentials", "include_collection", "options", "ssl_verify_certificate", "initial_timestamp", "", "localhost", "size", "servers", "disable_index_refresh", "ssl_verify_certificate", "initial_timestamp", "flush_interval", "", "user", "skip_initial_import", "", "parent_types", "filter", "" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder29.includeFields((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder23.includeFields((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder10.includeFields((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder10.importAllCollections(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test08666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08666");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory4 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = null;
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory4.newScript(strMap5);
        docScoreSearchScript0.setNextVar("localhost", (java.lang.Object) docScoreNativeScriptFactory4);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript9 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj11 = docScoreSearchScript9.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript9.setNextScore((float) 1);
        docScoreSearchScript0.setNextVar("credentials", (java.lang.Object) 1);
        docScoreSearchScript0.setNextScore((float) 0L);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoClientOptions(mongoClientOptions19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject23 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder18.mongoCollectionFilter(basicDBObject23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder18.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder28.riverIndexName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.includeCollection("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.scriptType("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoDb("include_fields");
        docScoreSearchScript0.setNextVar("db", (java.lang.Object) builder38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions41 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.mongoClientOptions(mongoClientOptions41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder40.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder44.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions49 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.mongoClientOptions(mongoClientOptions49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = builder50.build();
        java.lang.String str52 = mongoDBRiverDefinition51.getMongoAdminPassword();
        boolean boolean53 = mongoDBRiverDefinition51.isMongoSecondaryReadPreference();
        java.lang.String str54 = mongoDBRiverDefinition51.getMongoLocalUser();
        java.lang.Object obj55 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition51);
        docScoreSearchScript0.setNextScore((float) 8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions59 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.mongoClientOptions(mongoClientOptions59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder58.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder62.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder62.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder66.connectTimeout((int) (short) 100);
        java.lang.Object obj69 = docScoreSearchScript0.unwrap((java.lang.Object) builder66);
        docScoreSearchScript0.setNextScore((float) 27017);
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double74 = docScoreSearchScript0.runAsDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + "hi!" + "'", obj11, "hi!");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(obj69);
    }

    @Test
    public void test08667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08667");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoClientOptions(mongoClientOptions7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder6.mongoCollectionFilter(basicDBObject11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder6.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions24 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.mongoClientOptions(mongoClientOptions24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder23.importAllCollections(false);
        com.mongodb.ServerAddress[] serverAddressArray28 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList29 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList29, serverAddressArray28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder23.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder22.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder22.skipInitialImport(false);
        docScoreSearchScript0.setNextVar("import_all_collections", (java.lang.Object) builder22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions37 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoClientOptions(mongoClientOptions37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder36.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject41 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder36.mongoCollectionFilter(basicDBObject41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder36.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder46.riverIndexName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder50.includeCollection("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder50.mongoCollection("parent_types");
        com.mongodb.BasicDBObject basicDBObject55 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder50.mongoCollectionFilter(basicDBObject55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder56.mongoAdminPassword("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder56.script("socket_timeout");
        java.lang.Object obj61 = docScoreSearchScript0.unwrap((java.lang.Object) builder60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions64 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder63.mongoClientOptions(mongoClientOptions64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder63.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder67.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder67.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder71.connectTimeout(1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder71.socketTimeout(8);
        docScoreSearchScript0.setNextVar("options", (java.lang.Object) 8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions79 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder78.mongoClientOptions(mongoClientOptions79);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder80.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder80.mongoLocalUser("concurrent_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder84.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder86.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder88.mongoLocalUser("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder92 = builder90.mongoDb("host");
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) "host");
        docScoreSearchScript0.setNextScore((float) (-1));
        // The following exception was thrown during execution in test generation
        try {
            double double96 = docScoreSearchScript0.runAsDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(serverAddressArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test08668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08668");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoLocalPassword("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoAdminUser("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoClientOptions(mongoClientOptions12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject16 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder11.mongoCollectionFilter(basicDBObject16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder11.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = builder19.build();
        boolean boolean21 = mongoDBRiverDefinition20.isStoreStatistics();
        boolean boolean22 = mongoDBRiverDefinition20.isMongoSSLVerifyCertificate();
        java.lang.String str23 = mongoDBRiverDefinition20.getMongoAdminPassword();
        com.mongodb.BasicDBObject basicDBObject24 = mongoDBRiverDefinition20.getMongoOplogFilter();
        int int25 = mongoDBRiverDefinition20.getSocketTimeout();
        java.lang.String str26 = mongoDBRiverDefinition20.getMongoCollection();
        boolean boolean27 = mongoDBRiverDefinition20.isDropCollection();
        java.util.List<com.mongodb.ServerAddress> serverAddressList28 = mongoDBRiverDefinition20.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder10.mongoServers(serverAddressList28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder10.typeName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder10.storeStatistics(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(basicDBObject24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(serverAddressList28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test08669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08669");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.statisticsIndexName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoAdminUser("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.riverIndexName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.script("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder14.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions22 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.mongoClientOptions(mongoClientOptions22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder21.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder25.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions30 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.mongoClientOptions(mongoClientOptions30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder29.statisticsIndexName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder29.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions37 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoClientOptions(mongoClientOptions37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder36.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.connectTimeout((int) (short) 10);
        java.lang.String[] strArray85 = new java.lang.String[] { "actions", "user", "name", "bulk_size", "", "script_type", "db", "disable_index_refresh", "local", "port", "filter", "gridfs", "drop_collection", "hi!", "include_collection", "secondary_read_preference", "options", "script_type", "index", "import_all_collections", "options", "connect_timeout", "index", "name", "gridfs", "name", "db", "script", "bulk_timeout", "flush_interval", "", "ssl_verify_certificate", "collection", "admin", "include_collection", "concurrent_requests", "secondary_read_preference", "bulk_timeout", "collection", "script_type", "gridfs", "script_type" };
        java.util.LinkedHashSet<java.lang.String> strSet86 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet86, strArray85);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder42.excludeFields((java.util.Set<java.lang.String>) strSet86);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder89 = builder29.excludeFields((java.util.Set<java.lang.String>) strSet86);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder14.parentTypes((java.util.Set<java.lang.String>) strSet86);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder92 = builder14.indexName("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder94 = builder14.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder96 = builder94.mongoSSLVerifyCertificate(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test08670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08670");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.riverIndexName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = builder4.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder4.includeCollection("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder4.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder4.storeStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.mongoAdminPassword("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoCollection("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.statisticsTypeName("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.mongoClientOptions(mongoClientOptions21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder20.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject25 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder20.mongoCollectionFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder20.indexName("bulk_size");
        com.mongodb.BasicDBObject basicDBObject29 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder20.mongoCollectionFilter(basicDBObject29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder20.mongoUseSSL(true);
        java.util.Set<java.lang.String> strSet33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder20.includeFields(strSet33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.scriptType("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions40 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder39.mongoClientOptions(mongoClientOptions40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder39.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder43.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder47.connectTimeout((int) (short) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder49.indexName("hi!");
        java.lang.String[] strArray65 = new java.lang.String[] { "disable_index_refresh", "collection", "host", "user", "script_type", "socket_timeout", "include_fields", "bulk", "connect_timeout", "actions", "collection", "connect_timeout", "type" };
        java.util.LinkedHashSet<java.lang.String> strSet66 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder49.excludeFields((java.util.Set<java.lang.String>) strSet66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder38.includeFields((java.util.Set<java.lang.String>) strSet66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder19.includeFields((java.util.Set<java.lang.String>) strSet66);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test08671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08671");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition9.getMongoServers();
        java.lang.String str14 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList15 = mongoDBRiverDefinition9.getMongoServers();
        java.lang.String str16 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.lang.String str17 = mongoDBRiverDefinition9.getRiverName();
        java.lang.String str18 = mongoDBRiverDefinition9.getMongoAdminPassword();
        boolean boolean19 = mongoDBRiverDefinition9.isStoreStatistics();
        java.lang.String str20 = mongoDBRiverDefinition9.getMongoCollection();
        java.lang.String str21 = mongoDBRiverDefinition9.getMongoOplogNamespace();
        java.lang.String str22 = mongoDBRiverDefinition9.getTypeName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(serverAddressList15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "null.null" + "'", str21, "null.null");
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test08672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08672");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        boolean boolean13 = mongoDBRiverDefinition11.isDisableIndexRefresh();
        int int14 = mongoDBRiverDefinition11.getThrottleSize();
        java.lang.String str15 = mongoDBRiverDefinition11.getMongoLocalPassword();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test08673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08673");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        boolean boolean13 = mongoDBRiverDefinition11.isDisableIndexRefresh();
        boolean boolean14 = mongoDBRiverDefinition11.isSkipInitialImport();
        java.lang.String str15 = mongoDBRiverDefinition11.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions16 = mongoDBRiverDefinition11.getMongoClientOptions();
        java.lang.String str17 = mongoDBRiverDefinition11.getMongoAdminPassword();
        java.util.Set<java.lang.String> strSet18 = mongoDBRiverDefinition11.getIncludeFields();
        com.mongodb.MongoClientOptions mongoClientOptions19 = mongoDBRiverDefinition11.getMongoClientOptions();
        java.lang.String str20 = mongoDBRiverDefinition11.getRiverName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(mongoClientOptions16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNull(mongoClientOptions19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test08674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08674");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition9.getMongoServers();
        java.lang.String str14 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList15 = mongoDBRiverDefinition9.getMongoServers();
        java.lang.String str16 = mongoDBRiverDefinition9.getStatisticsTypeName();
        boolean boolean17 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.lang.String str18 = mongoDBRiverDefinition9.getMongoDb();
        java.lang.String str19 = mongoDBRiverDefinition9.getMongoLocalUser();
        java.lang.String str20 = mongoDBRiverDefinition9.getRiverIndexName();
        boolean boolean21 = mongoDBRiverDefinition9.isMongoGridFS();
        int int22 = mongoDBRiverDefinition9.getConnectTimeout();
        java.lang.String str23 = mongoDBRiverDefinition9.getRiverName();
        java.lang.String str24 = mongoDBRiverDefinition9.getMongoDb();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(serverAddressList15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test08675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08675");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoClientOptions(mongoClientOptions7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSecondaryReadPreference(true);
        docScoreSearchScript0.setNextVar("import_all_collections", (java.lang.Object) builder12);
        docScoreSearchScript0.setNextScore(0.0f);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions17 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoClientOptions(mongoClientOptions17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder20.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions25 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoClientOptions(mongoClientOptions25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = builder26.build();
        java.lang.String str28 = mongoDBRiverDefinition27.getMongoDb();
        boolean boolean29 = mongoDBRiverDefinition27.isMongoSecondaryReadPreference();
        boolean boolean30 = mongoDBRiverDefinition27.isAdvancedTransformation();
        java.util.List<com.mongodb.ServerAddress> serverAddressList31 = mongoDBRiverDefinition27.getMongoServers();
        boolean boolean32 = mongoDBRiverDefinition27.isMongoUseSSL();
        boolean boolean33 = mongoDBRiverDefinition27.isSkipInitialImport();
        com.mongodb.BasicDBObject basicDBObject34 = mongoDBRiverDefinition27.getMongoCollectionFilter();
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextSource((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(serverAddressList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(basicDBObject34);
    }

    @Test
    public void test08676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08676");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        boolean boolean13 = mongoDBRiverDefinition11.isDisableIndexRefresh();
        boolean boolean14 = mongoDBRiverDefinition11.isSkipInitialImport();
        java.lang.String str15 = mongoDBRiverDefinition11.getMongoOplogNamespace();
        java.lang.String str16 = mongoDBRiverDefinition11.getTypeName();
        java.lang.String str17 = mongoDBRiverDefinition11.getStatisticsTypeName();
        java.util.Set<java.lang.String> strSet18 = mongoDBRiverDefinition11.getIncludeFields();
        boolean boolean19 = mongoDBRiverDefinition11.isImportAllCollections();
        java.lang.String str20 = mongoDBRiverDefinition11.getTypeName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "null.null" + "'", str15, "null.null");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test08677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08677");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsIndexName("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.typeName("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.indexName("credentials");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test08678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08678");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions13 = mongoDBRiverDefinition11.getMongoClientOptions();
        boolean boolean14 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions15 = mongoDBRiverDefinition11.getMongoClientOptions();
        java.lang.String str16 = mongoDBRiverDefinition11.getScript();
        boolean boolean17 = mongoDBRiverDefinition11.isMongoSSLVerifyCertificate();
        java.lang.String str18 = mongoDBRiverDefinition11.getMongoCollection();
        java.util.List<com.mongodb.ServerAddress> serverAddressList19 = mongoDBRiverDefinition11.getMongoServers();
        boolean boolean20 = mongoDBRiverDefinition11.isDropCollection();
        java.lang.String str21 = mongoDBRiverDefinition11.getMongoLocalUser();
        com.mongodb.BasicDBObject basicDBObject22 = mongoDBRiverDefinition11.getMongoCollectionFilter();
        boolean boolean23 = mongoDBRiverDefinition11.isAdvancedTransformation();
        java.lang.String str24 = mongoDBRiverDefinition11.getMongoOplogNamespace();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(serverAddressList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(basicDBObject22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "null.null" + "'", str24, "null.null");
    }

    @Test
    public void test08679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08679");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition9.getMongoServers();
        java.lang.String str14 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList15 = mongoDBRiverDefinition9.getMongoServers();
        java.lang.String str16 = mongoDBRiverDefinition9.getStatisticsTypeName();
        boolean boolean17 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.lang.String str18 = mongoDBRiverDefinition9.getMongoDb();
        java.lang.String str19 = mongoDBRiverDefinition9.getMongoLocalUser();
        java.lang.String str20 = mongoDBRiverDefinition9.getRiverIndexName();
        boolean boolean21 = mongoDBRiverDefinition9.isMongoGridFS();
        boolean boolean22 = mongoDBRiverDefinition9.isMongoSecondaryReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(serverAddressList15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test08680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08680");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.riverIndexName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder10.connectTimeout((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = builder10.build();
        java.lang.String str20 = mongoDBRiverDefinition19.getMongoAdminUser();
        boolean boolean21 = mongoDBRiverDefinition19.isMongoUseSSL();
        int int22 = mongoDBRiverDefinition19.getThrottleSize();
        java.lang.Class<?> wildcardClass23 = mongoDBRiverDefinition19.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test08681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08681");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.mongoLocalUser("concurrent_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoLocalUser("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.mongoClientOptions(mongoClientOptions14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder17.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder21.statisticsIndexName("collection");
        org.elasticsearch.common.settings.Settings settings26 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions28 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.mongoClientOptions(mongoClientOptions28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder27.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder31.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions36 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.mongoClientOptions(mongoClientOptions36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition38 = builder37.build();
        java.lang.String str39 = mongoDBRiverDefinition38.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions40 = mongoDBRiverDefinition38.getMongoClientOptions();
        boolean boolean41 = mongoDBRiverDefinition38.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions42 = mongoDBRiverDefinition38.getMongoClientOptions();
        java.lang.String str43 = mongoDBRiverDefinition38.getScript();
        com.mongodb.BasicDBObject basicDBObject44 = mongoDBRiverDefinition38.getMongoOplogFilter();
        java.lang.String str45 = mongoDBRiverDefinition38.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject46 = mongoDBRiverDefinition38.getMongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings47 = new org.elasticsearch.river.RiverSettings(settings26, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder21.mongoOplogFilter(basicDBObject46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder12.mongoCollectionFilter(basicDBObject46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions51 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder50.mongoClientOptions(mongoClientOptions51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder50.importAllCollections(false);
        com.mongodb.ServerAddress[] serverAddressArray55 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList56 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList56, serverAddressArray55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder50.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder50.storeStatistics(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory61 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap62 = null;
        org.elasticsearch.script.ExecutableScript executableScript63 = docScoreNativeScriptFactory61.newScript(strMap62);
        java.util.Map<java.lang.String, java.lang.Object> strMap64 = null;
        org.elasticsearch.script.ExecutableScript executableScript65 = docScoreNativeScriptFactory61.newScript(strMap64);
        java.util.Map<java.lang.String, java.lang.Object> strMap66 = null;
        org.elasticsearch.script.ExecutableScript executableScript67 = docScoreNativeScriptFactory61.newScript(strMap66);
        java.util.Map<java.lang.String, java.lang.Object> strMap68 = null;
        org.elasticsearch.script.ExecutableScript executableScript69 = docScoreNativeScriptFactory61.newScript(strMap68);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions71 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder70.mongoClientOptions(mongoClientOptions71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder70.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder74.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder74.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions79 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder78.mongoClientOptions(mongoClientOptions79);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition81 = builder80.build();
        java.lang.String str82 = mongoDBRiverDefinition81.getMongoDb();
        boolean boolean83 = mongoDBRiverDefinition81.isMongoSecondaryReadPreference();
        com.mongodb.BasicDBObject basicDBObject84 = mongoDBRiverDefinition81.getMongoOplogFilter();
        com.mongodb.BasicDBObject basicDBObject85 = mongoDBRiverDefinition81.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript86 = docScoreNativeScriptFactory61.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject85);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder60.mongoOplogFilter(basicDBObject85);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder12.mongoOplogFilter(basicDBObject85);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder12.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder92 = builder90.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder94 = builder90.throttleSize(8);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNull(mongoClientOptions40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(mongoClientOptions42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(basicDBObject44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(basicDBObject46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(serverAddressArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(executableScript63);
        org.junit.Assert.assertNotNull(executableScript65);
        org.junit.Assert.assertNotNull(executableScript67);
        org.junit.Assert.assertNotNull(executableScript69);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(basicDBObject84);
        org.junit.Assert.assertNotNull(basicDBObject85);
        org.junit.Assert.assertNotNull(executableScript86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test08682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08682");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoLocalUser("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.typeName("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.typeName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.socketTimeout((int) '4');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.includeCollection("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.mongoDb("concurrent_bulk_requests");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test08683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08683");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.includeCollection("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.mongoLocalPassword("gridfs");
        java.util.Set<java.lang.String> strSet15 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.includeFields(strSet15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder8.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.mongoClientOptions(mongoClientOptions20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder19.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder23.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions28 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.mongoClientOptions(mongoClientOptions28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = builder29.build();
        java.lang.String str31 = mongoDBRiverDefinition30.getMongoDb();
        java.lang.String str32 = mongoDBRiverDefinition30.getStatisticsTypeName();
        boolean boolean33 = mongoDBRiverDefinition30.isImportAllCollections();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp34 = mongoDBRiverDefinition30.getInitialTimestamp();
        int int35 = mongoDBRiverDefinition30.getSocketTimeout();
        boolean boolean36 = mongoDBRiverDefinition30.isMongoSecondaryReadPreference();
        com.mongodb.BasicDBObject basicDBObject37 = mongoDBRiverDefinition30.getMongoCollectionFilter();
        java.lang.String str38 = mongoDBRiverDefinition30.getMongoLocalUser();
        boolean boolean39 = mongoDBRiverDefinition30.isStoreStatistics();
        java.util.List<com.mongodb.ServerAddress> serverAddressList40 = mongoDBRiverDefinition30.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder18.mongoServers(serverAddressList40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder18.mongoDb("null.null.null.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions45 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.mongoClientOptions(mongoClientOptions45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder44.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder48.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions53 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder52.mongoClientOptions(mongoClientOptions53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition55 = builder54.build();
        java.lang.String str56 = mongoDBRiverDefinition55.getMongoDb();
        java.lang.String str57 = mongoDBRiverDefinition55.getStatisticsTypeName();
        boolean boolean58 = mongoDBRiverDefinition55.isImportAllCollections();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp59 = mongoDBRiverDefinition55.getInitialTimestamp();
        int int60 = mongoDBRiverDefinition55.getSocketTimeout();
        int int61 = mongoDBRiverDefinition55.getConnectTimeout();
        java.lang.String str62 = mongoDBRiverDefinition55.getMongoAdminUser();
        java.lang.String str63 = mongoDBRiverDefinition55.getMongoAdminUser();
        java.lang.String str64 = mongoDBRiverDefinition55.getTypeName();
        java.util.Set<java.lang.String> strSet65 = mongoDBRiverDefinition55.getIncludeFields();
        java.lang.String str66 = mongoDBRiverDefinition55.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject67 = mongoDBRiverDefinition55.getMongoCollectionFilter();
        java.lang.String str68 = mongoDBRiverDefinition55.getMongoAdminPassword();
        java.lang.String str69 = mongoDBRiverDefinition55.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject70 = mongoDBRiverDefinition55.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder18.mongoCollectionFilter(basicDBObject70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder18.statisticsIndexName("name.name");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(wildcardTimestamp34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(basicDBObject37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(serverAddressList40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(wildcardTimestamp59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(strSet65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(basicDBObject67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(basicDBObject70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test08684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08684");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.common.settings.Settings settings1 = null;
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoClientOptions(mongoClientOptions4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.socketTimeout((int) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoClientOptions(mongoClientOptions11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder14.throttleSize(0);
        org.elasticsearch.common.settings.Settings settings21 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.mongoClientOptions(mongoClientOptions23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions30 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.mongoClientOptions(mongoClientOptions30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder29.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder33.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions38 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.mongoClientOptions(mongoClientOptions38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition40 = builder39.build();
        java.lang.String str41 = mongoDBRiverDefinition40.getMongoAdminPassword();
        boolean boolean42 = mongoDBRiverDefinition40.isMongoSecondaryReadPreference();
        java.lang.String str43 = mongoDBRiverDefinition40.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet44 = mongoDBRiverDefinition40.getParentTypes();
        boolean boolean45 = mongoDBRiverDefinition40.isMongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject46 = mongoDBRiverDefinition40.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder26.mongoCollectionFilter(basicDBObject46);
        org.elasticsearch.river.RiverSettings riverSettings48 = new org.elasticsearch.river.RiverSettings(settings21, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder14.mongoCollectionFilter(basicDBObject46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder7.mongoOplogFilter(basicDBObject46);
        org.elasticsearch.river.RiverSettings riverSettings51 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject46);
        org.elasticsearch.river.RiverSettings riverSettings52 = new org.elasticsearch.river.RiverSettings(settings1, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject46);
        org.elasticsearch.river.RiverSettings riverSettings53 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject46);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(basicDBObject46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test08685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08685");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) 8);
        docScoreSearchScript0.setNextScore(1.0f);
        docScoreSearchScript0.setNextScore((float) 100);
        docScoreSearchScript0.setNextScore((float) 0L);
        docScoreSearchScript0.setNextScore((float) 100);
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 8 + "'", obj2, 8);
    }

    @Test
    public void test08686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08686");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions13 = mongoDBRiverDefinition11.getMongoClientOptions();
        boolean boolean14 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        java.lang.String str15 = mongoDBRiverDefinition11.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions16 = mongoDBRiverDefinition11.getMongoClientOptions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(mongoClientOptions16);
    }

    @Test
    public void test08687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08687");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        int int10 = mongoDBRiverDefinition9.getSocketTimeout();
        java.lang.String str11 = mongoDBRiverDefinition9.getScriptType();
        java.util.List<com.mongodb.ServerAddress> serverAddressList12 = mongoDBRiverDefinition9.getMongoServers();
        java.lang.String str13 = mongoDBRiverDefinition9.getMongoCollection();
        boolean boolean14 = mongoDBRiverDefinition9.isMongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getScript();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(serverAddressList12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test08688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08688");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions13 = mongoDBRiverDefinition11.getMongoClientOptions();
        boolean boolean14 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions15 = mongoDBRiverDefinition11.getMongoClientOptions();
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition11.getParentTypes();
        java.lang.String str17 = mongoDBRiverDefinition11.getIncludeCollection();
        boolean boolean18 = mongoDBRiverDefinition11.isStoreStatistics();
        boolean boolean19 = mongoDBRiverDefinition11.isMongoGridFS();
        boolean boolean20 = mongoDBRiverDefinition11.isMongoUseSSL();
        boolean boolean21 = mongoDBRiverDefinition11.isImportAllCollections();
        boolean boolean22 = mongoDBRiverDefinition11.isMongoGridFS();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test08689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08689");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoDb();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition9.getMongoServers();
        boolean boolean14 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str15 = mongoDBRiverDefinition9.getScript();
        java.lang.String str16 = mongoDBRiverDefinition9.getIncludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions17 = mongoDBRiverDefinition9.getMongoClientOptions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(mongoClientOptions17);
    }

    @Test
    public void test08690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08690");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition9.getMongoOplogFilter();
        boolean boolean13 = mongoDBRiverDefinition9.isDropCollection();
        java.lang.String str14 = mongoDBRiverDefinition9.getMongoLocalUser();
        boolean boolean15 = mongoDBRiverDefinition9.isDropCollection();
        boolean boolean16 = mongoDBRiverDefinition9.isMongoGridFS();
        java.lang.String str17 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str18 = mongoDBRiverDefinition9.getScript();
        java.lang.String str19 = mongoDBRiverDefinition9.getStatisticsIndexName();
        java.util.Set<java.lang.String> strSet20 = mongoDBRiverDefinition9.getParentTypes();
        int int21 = mongoDBRiverDefinition9.getConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(basicDBObject12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test08691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08691");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoClientOptions(mongoClientOptions4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.mongoCollectionFilter(basicDBObject8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder15.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.mongoClientOptions(mongoClientOptions21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder20.importAllCollections(false);
        com.mongodb.ServerAddress[] serverAddressArray25 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList26 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList26, serverAddressArray25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder20.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder19.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.mongoLocalPassword("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.mongoLocalPassword("include_fields");
        java.util.List<com.mongodb.ServerAddress> serverAddressList36 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.mongoServers(serverAddressList36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.throttleSize(27017);
        org.elasticsearch.common.settings.Settings settings40 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions42 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.mongoClientOptions(mongoClientOptions42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder41.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder45.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder45.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder45.throttleSize(0);
        org.elasticsearch.common.settings.Settings settings52 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions54 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder53.mongoClientOptions(mongoClientOptions54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder55.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder57.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions61 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder60.mongoClientOptions(mongoClientOptions61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder60.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder64.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder64.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions69 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder68.mongoClientOptions(mongoClientOptions69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition71 = builder70.build();
        java.lang.String str72 = mongoDBRiverDefinition71.getMongoAdminPassword();
        boolean boolean73 = mongoDBRiverDefinition71.isMongoSecondaryReadPreference();
        java.lang.String str74 = mongoDBRiverDefinition71.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet75 = mongoDBRiverDefinition71.getParentTypes();
        boolean boolean76 = mongoDBRiverDefinition71.isMongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject77 = mongoDBRiverDefinition71.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder57.mongoCollectionFilter(basicDBObject77);
        org.elasticsearch.river.RiverSettings riverSettings79 = new org.elasticsearch.river.RiverSettings(settings52, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject77);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder45.mongoCollectionFilter(basicDBObject77);
        org.elasticsearch.river.RiverSettings riverSettings81 = new org.elasticsearch.river.RiverSettings(settings40, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject77);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder37.mongoOplogFilter(basicDBObject77);
        org.elasticsearch.river.RiverSettings riverSettings83 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject77);
        org.elasticsearch.script.ScriptService scriptService84 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition85 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("filter", "socket_timeout.socket_timeout", riverSettings83, scriptService84);
        boolean boolean86 = mongoDBRiverDefinition85.isMongoGridFS();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(serverAddressArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(basicDBObject77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test08692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08692");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.typeName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.typeName("");
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoClientOptions(mongoClientOptions7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder6.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.statisticsTypeName("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder6.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder6.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder6.typeName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder6.mongoCollection("disable_index_refresh");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test08693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08693");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        java.lang.String str10 = mongoDBRiverDefinition9.getMongoAdminPassword();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test08694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08694");
        org.elasticsearch.common.settings.Settings settings4 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.mongoClientOptions(mongoClientOptions6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoLocalUser("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.typeName("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder11.dropCollection(true);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript18 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj20 = docScoreSearchScript18.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript18.setNextScore((float) 1);
        docScoreSearchScript18.setNextScore((float) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions27 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.mongoClientOptions(mongoClientOptions27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder28.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder28.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.typeName("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder34.indexName("host");
        docScoreSearchScript18.setNextVar("drop_collection", (java.lang.Object) builder34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions41 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.mongoClientOptions(mongoClientOptions41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder40.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject45 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder40.mongoCollectionFilter(basicDBObject45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder40.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder50.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray58 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder50.includeFields((java.util.Set<java.lang.String>) strSet59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder34.includeFields((java.util.Set<java.lang.String>) strSet59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions64 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder63.mongoClientOptions(mongoClientOptions64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder63.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder67.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder67.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions72 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder71.mongoClientOptions(mongoClientOptions72);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition74 = builder73.build();
        java.lang.String str75 = mongoDBRiverDefinition74.getMongoAdminPassword();
        boolean boolean76 = mongoDBRiverDefinition74.isMongoSecondaryReadPreference();
        java.lang.String str77 = mongoDBRiverDefinition74.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet78 = mongoDBRiverDefinition74.getParentTypes();
        boolean boolean79 = mongoDBRiverDefinition74.isMongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject80 = mongoDBRiverDefinition74.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder62.mongoCollectionFilter(basicDBObject80);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder17.mongoOplogFilter(basicDBObject80);
        org.elasticsearch.river.RiverSettings riverSettings83 = new org.elasticsearch.river.RiverSettings(settings4, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject80);
        java.util.Map<java.lang.String, java.lang.Object> strMap84 = riverSettings83.settings();
        org.elasticsearch.script.ScriptService scriptService85 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition86 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("secondary_read_preference", "null.null", riverSettings83, scriptService85);
        org.elasticsearch.script.ScriptService scriptService87 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition88 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("skip_initial_import", "host", riverSettings83, scriptService87);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp89 = mongoDBRiverDefinition88.getInitialTimestamp();
        java.lang.String str90 = mongoDBRiverDefinition88.getIndexName();
        java.lang.String str91 = mongoDBRiverDefinition88.getMongoAdminUser();
        com.mongodb.MongoClientOptions mongoClientOptions92 = mongoDBRiverDefinition88.getMongoClientOptions();
        java.lang.String str93 = mongoDBRiverDefinition88.getStatisticsTypeName();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + "hi!" + "'", obj20, "hi!");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNull(strSet78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(basicDBObject80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(strMap84);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition86);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition88);
        org.junit.Assert.assertNull(wildcardTimestamp89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "skip_initial_import" + "'", str90, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNull(mongoClientOptions92);
        org.junit.Assert.assertNull(str93);
    }

    @Test
    public void test08695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08695");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition11.getIndexName();
        int int14 = mongoDBRiverDefinition11.getConnectTimeout();
        java.lang.String str15 = mongoDBRiverDefinition11.getIndexName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test08696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08696");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.typeName("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.riverName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.typeName("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoSecondaryReadPreference(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test08697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08697");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.riverIndexName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.includeCollection("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoUseSSL(false);
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoClientOptions(mongoClientOptions19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.mongoAdminPassword("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.mongoLocalUser("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoCollection("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder24.skipInitialImport(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test08698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08698");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoLocalUser("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.socketTimeout((int) 'a');
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory11 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap12 = null;
        org.elasticsearch.script.ExecutableScript executableScript13 = docScoreNativeScriptFactory11.newScript(strMap12);
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = null;
        org.elasticsearch.script.ExecutableScript executableScript15 = docScoreNativeScriptFactory11.newScript(strMap14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions17 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoClientOptions(mongoClientOptions17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder20.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions25 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoClientOptions(mongoClientOptions25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = builder26.build();
        java.lang.String str28 = mongoDBRiverDefinition27.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions29 = mongoDBRiverDefinition27.getMongoClientOptions();
        boolean boolean30 = mongoDBRiverDefinition27.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions31 = mongoDBRiverDefinition27.getMongoClientOptions();
        java.lang.String str32 = mongoDBRiverDefinition27.getScript();
        com.mongodb.BasicDBObject basicDBObject33 = mongoDBRiverDefinition27.getMongoOplogFilter();
        java.lang.String str34 = mongoDBRiverDefinition27.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject35 = mongoDBRiverDefinition27.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript36 = docScoreNativeScriptFactory11.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder8.mongoCollectionFilter(basicDBObject35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder8.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder39.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.mongoSecondaryReadPreference(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(executableScript13);
        org.junit.Assert.assertNotNull(executableScript15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(mongoClientOptions31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(basicDBObject33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(basicDBObject35);
        org.junit.Assert.assertNotNull(executableScript36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test08699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08699");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) 8);
        docScoreSearchScript0.setNextScore(1.0f);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.mongoClientOptions(mongoClientOptions6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.mongoCollectionFilter(basicDBObject10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = builder13.build();
        com.mongodb.MongoClientOptions mongoClientOptions15 = mongoDBRiverDefinition14.getMongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject16 = mongoDBRiverDefinition14.getMongoCollectionFilter();
        boolean boolean17 = mongoDBRiverDefinition14.isAdvancedTransformation();
        java.lang.String str18 = mongoDBRiverDefinition14.getScript();
        java.lang.String str19 = mongoDBRiverDefinition14.getIndexName();
        java.lang.String str20 = mongoDBRiverDefinition14.getMongoAdminPassword();
        int int21 = mongoDBRiverDefinition14.getConnectTimeout();
        java.lang.Object obj22 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition14);
        docScoreSearchScript0.setNextScore((float) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions27 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.mongoClientOptions(mongoClientOptions27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.mongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.riverIndexName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = builder30.build();
        boolean boolean34 = mongoDBRiverDefinition33.isAdvancedTransformation();
        docScoreSearchScript0.setNextVar("", (java.lang.Object) boolean34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions37 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoClientOptions(mongoClientOptions37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder36.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject41 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder36.mongoCollectionFilter(basicDBObject41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder36.indexName("bulk_size");
        com.mongodb.BasicDBObject basicDBObject45 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder36.mongoCollectionFilter(basicDBObject45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder46.mongoAdminPassword("db");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder50.mongoAdminPassword("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder52.indexName("connect_timeout");
        java.lang.Object obj55 = docScoreSearchScript0.unwrap((java.lang.Object) builder54);
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 8 + "'", obj2, 8);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition14);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertNull(basicDBObject16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "bulk_size" + "'", str19, "bulk_size");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(obj55);
    }

    @Test
    public void test08700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08700");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) 8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoClientOptions(mongoClientOptions5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder4.mongoCollectionFilter(basicDBObject9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder4.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder4.riverName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.socketTimeout((int) (byte) 100);
        docScoreSearchScript0.setNextVar("", (java.lang.Object) builder14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder14.riverIndexName("connect_timeout");
        java.util.Set<java.lang.String> strSet22 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder14.excludeFields(strSet22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder14.connectTimeout((int) '#');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = builder25.build();
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 8 + "'", obj2, 8);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition26);
    }

    @Test
    public void test08701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08701");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript3 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj5 = docScoreSearchScript3.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript3.setNextScore((float) 1);
        docScoreSearchScript3.setNextScore((float) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoClientOptions(mongoClientOptions12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder13.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.typeName("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder19.indexName("host");
        docScoreSearchScript3.setNextVar("drop_collection", (java.lang.Object) builder19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions26 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.mongoClientOptions(mongoClientOptions26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder25.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject30 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder25.mongoCollectionFilter(basicDBObject30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder25.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray43 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder35.includeFields((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder19.includeFields((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions49 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.mongoClientOptions(mongoClientOptions49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder48.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder52.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder52.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions57 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder56.mongoClientOptions(mongoClientOptions57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition59 = builder58.build();
        java.lang.String str60 = mongoDBRiverDefinition59.getMongoAdminPassword();
        boolean boolean61 = mongoDBRiverDefinition59.isMongoSecondaryReadPreference();
        java.lang.String str62 = mongoDBRiverDefinition59.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet63 = mongoDBRiverDefinition59.getParentTypes();
        boolean boolean64 = mongoDBRiverDefinition59.isMongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject65 = mongoDBRiverDefinition59.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder47.mongoCollectionFilter(basicDBObject65);
        org.elasticsearch.river.RiverSettings riverSettings67 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject65);
        org.elasticsearch.script.ScriptService scriptService68 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition69 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("actions", "collection", riverSettings67, scriptService68);
        java.lang.String str70 = mongoDBRiverDefinition69.getIncludeCollection();
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + "hi!" + "'", obj5, "hi!");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNull(strSet63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(basicDBObject65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
    }

    @Test
    public void test08702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08702");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript1 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj3 = docScoreSearchScript1.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript1.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoClientOptions(mongoClientOptions7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder6.mongoCollectionFilter(basicDBObject11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder6.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray24 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder16.includeFields((java.util.Set<java.lang.String>) strSet25);
        java.lang.Object obj28 = docScoreSearchScript1.unwrap((java.lang.Object) builder16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder16.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.riverName("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder30.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.riverIndexName("localhost");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions38 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.mongoClientOptions(mongoClientOptions38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder37.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder41.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions46 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder45.mongoClientOptions(mongoClientOptions46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = builder47.build();
        java.lang.String str49 = mongoDBRiverDefinition48.getMongoAdminPassword();
        boolean boolean50 = mongoDBRiverDefinition48.isMongoSecondaryReadPreference();
        java.lang.String str51 = mongoDBRiverDefinition48.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet52 = mongoDBRiverDefinition48.getParentTypes();
        boolean boolean53 = mongoDBRiverDefinition48.isMongoUseSSL();
        int int54 = mongoDBRiverDefinition48.getSocketTimeout();
        java.lang.String str55 = mongoDBRiverDefinition48.getScriptType();
        com.mongodb.BasicDBObject basicDBObject56 = mongoDBRiverDefinition48.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder36.mongoCollectionFilter(basicDBObject56);
        org.elasticsearch.river.RiverSettings riverSettings58 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + "hi!" + "'", obj3, "hi!");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNull(strSet52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(basicDBObject56);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test08703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08703");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder1.mongoClientOptions(mongoClientOptions2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder1.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder1.mongoCollectionFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder1.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoLocalPassword("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.mongoCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder17.typeName("parent_types");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.mongoDb("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder21.includeCollection("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions29 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.mongoClientOptions(mongoClientOptions29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder32.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder32.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder38.script("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions42 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.mongoClientOptions(mongoClientOptions42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder41.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject46 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder41.mongoCollectionFilter(basicDBObject46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder41.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder41.riverName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder51.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder53.indexName("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder53.mongoAdminUser("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions59 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.mongoClientOptions(mongoClientOptions59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder58.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder62.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder62.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions67 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder66.mongoClientOptions(mongoClientOptions67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition69 = builder68.build();
        java.lang.String str70 = mongoDBRiverDefinition69.getMongoDb();
        java.lang.String str71 = mongoDBRiverDefinition69.getStatisticsTypeName();
        boolean boolean72 = mongoDBRiverDefinition69.isImportAllCollections();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp73 = mongoDBRiverDefinition69.getInitialTimestamp();
        int int74 = mongoDBRiverDefinition69.getSocketTimeout();
        int int75 = mongoDBRiverDefinition69.getConnectTimeout();
        java.lang.String str76 = mongoDBRiverDefinition69.getMongoAdminUser();
        java.lang.String str77 = mongoDBRiverDefinition69.getMongoAdminUser();
        java.lang.String str78 = mongoDBRiverDefinition69.getTypeName();
        java.util.Set<java.lang.String> strSet79 = mongoDBRiverDefinition69.getIncludeFields();
        java.lang.String str80 = mongoDBRiverDefinition69.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject81 = mongoDBRiverDefinition69.getMongoCollectionFilter();
        com.mongodb.BasicDBObject basicDBObject82 = mongoDBRiverDefinition69.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder57.mongoCollectionFilter(basicDBObject82);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder38.mongoOplogFilter(basicDBObject82);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder27.mongoOplogFilter(basicDBObject82);
        org.elasticsearch.river.RiverSettings riverSettings86 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject82);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(wildcardTimestamp73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNull(strSet79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(basicDBObject81);
        org.junit.Assert.assertNotNull(basicDBObject82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test08704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08704");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        com.mongodb.MongoClientOptions mongoClientOptions13 = mongoDBRiverDefinition11.getMongoClientOptions();
        java.lang.String str14 = mongoDBRiverDefinition11.getScriptType();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition11.getExcludeFields();
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition11.getParentTypes();
        java.util.List<com.mongodb.ServerAddress> serverAddressList17 = mongoDBRiverDefinition11.getMongoServers();
        java.lang.String str18 = mongoDBRiverDefinition11.getScriptType();
        java.lang.String str19 = mongoDBRiverDefinition11.getScriptType();
        java.lang.String str20 = mongoDBRiverDefinition11.getMongoOplogNamespace();
        boolean boolean21 = mongoDBRiverDefinition11.isDropCollection();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(serverAddressList17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "null.null" + "'", str20, "null.null");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test08705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08705");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoAdminPassword();
        java.lang.String str13 = mongoDBRiverDefinition11.getMongoCollection();
        java.lang.String str14 = mongoDBRiverDefinition11.getMongoAdminUser();
        com.mongodb.BasicDBObject basicDBObject15 = mongoDBRiverDefinition11.getMongoOplogFilter();
        java.lang.String str16 = mongoDBRiverDefinition11.getScriptType();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(basicDBObject15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test08706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08706");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoLocalUser("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.scriptType("throttle_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.mongoDb("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.disableIndexRefresh(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test08707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08707");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        com.mongodb.MongoClientOptions mongoClientOptions10 = mongoDBRiverDefinition9.getMongoClientOptions();
        com.mongodb.MongoClientOptions mongoClientOptions11 = mongoDBRiverDefinition9.getMongoClientOptions();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoAdminPassword();
        boolean boolean13 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.lang.String str14 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.lang.String str15 = mongoDBRiverDefinition9.getMongoDb();
        boolean boolean16 = mongoDBRiverDefinition9.isStoreStatistics();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(mongoClientOptions11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test08708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08708");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.statisticsTypeName("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.mongoClientOptions(mongoClientOptions10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject14 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder9.mongoCollectionFilter(basicDBObject14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder9.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = builder17.build();
        boolean boolean19 = mongoDBRiverDefinition18.isStoreStatistics();
        boolean boolean20 = mongoDBRiverDefinition18.isMongoSSLVerifyCertificate();
        java.lang.String str21 = mongoDBRiverDefinition18.getTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList22 = mongoDBRiverDefinition18.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder4.mongoServers(serverAddressList22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions25 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoClientOptions(mongoClientOptions25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder24.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject29 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder24.mongoCollectionFilter(basicDBObject29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.mongoLocalPassword("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.mongoAdminUser("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions36 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.mongoClientOptions(mongoClientOptions36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder35.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder39.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder39.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions44 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoClientOptions(mongoClientOptions44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = builder45.build();
        java.lang.String str47 = mongoDBRiverDefinition46.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions48 = mongoDBRiverDefinition46.getMongoClientOptions();
        boolean boolean49 = mongoDBRiverDefinition46.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions50 = mongoDBRiverDefinition46.getMongoClientOptions();
        java.lang.String str51 = mongoDBRiverDefinition46.getScript();
        com.mongodb.BasicDBObject basicDBObject52 = mongoDBRiverDefinition46.getMongoOplogFilter();
        java.lang.String str53 = mongoDBRiverDefinition46.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject54 = mongoDBRiverDefinition46.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder34.mongoCollectionFilter(basicDBObject54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder23.mongoOplogFilter(basicDBObject54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder56.mongoCollection("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.scriptType("admin");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(serverAddressList22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(mongoClientOptions48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(mongoClientOptions50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(basicDBObject52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(basicDBObject54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test08709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08709");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.riverIndexName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = builder10.build();
        java.lang.String str18 = mongoDBRiverDefinition17.getMongoDb();
        java.util.Set<java.lang.String> strSet19 = mongoDBRiverDefinition17.getIncludeFields();
        java.lang.String str20 = mongoDBRiverDefinition17.getMongoLocalUser();
        int int21 = mongoDBRiverDefinition17.getConnectTimeout();
        java.lang.String str22 = mongoDBRiverDefinition17.getMongoCollection();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test08710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08710");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoLocalPassword("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoAdminUser("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.socketTimeout((int) (short) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.mongoCollection("script_type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoGridFS(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test08711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08711");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition9.getMongoServers();
        java.lang.String str14 = mongoDBRiverDefinition9.getMongoLocalUser();
        boolean boolean15 = mongoDBRiverDefinition9.isMongoUseSSL();
        boolean boolean16 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean17 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str18 = mongoDBRiverDefinition9.getMongoCollection();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test08712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08712");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.mongoLocalUser("ssl_verify_certificate");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoAdminUser("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.connectTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.riverName("");
        com.mongodb.MongoClientOptions mongoClientOptions17 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoClientOptions(mongoClientOptions17);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test08713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08713");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoAdminPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.getTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList14 = mongoDBRiverDefinition9.getMongoServers();
        boolean boolean15 = mongoDBRiverDefinition9.isDisableIndexRefresh();
        java.lang.String str16 = mongoDBRiverDefinition9.getStatisticsIndexName();
        java.lang.String str17 = mongoDBRiverDefinition9.getStatisticsIndexName();
        java.lang.String str18 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str19 = mongoDBRiverDefinition9.getMongoOplogNamespace();
        boolean boolean20 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        boolean boolean21 = mongoDBRiverDefinition9.isAdvancedTransformation();
        int int22 = mongoDBRiverDefinition9.getThrottleSize();
        java.lang.String str23 = mongoDBRiverDefinition9.getScript();
        java.lang.String str24 = mongoDBRiverDefinition9.getScript();
        java.lang.String str25 = mongoDBRiverDefinition9.getStatisticsTypeName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(serverAddressList14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "bulk_size" + "'", str18, "bulk_size");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "null.null" + "'", str19, "null.null");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test08714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08714");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str13 = mongoDBRiverDefinition11.getStatisticsTypeName();
        java.lang.String str14 = mongoDBRiverDefinition11.getScriptType();
        boolean boolean15 = mongoDBRiverDefinition11.isMongoGridFS();
        java.lang.String str16 = mongoDBRiverDefinition11.getIncludeCollection();
        java.lang.String str17 = mongoDBRiverDefinition11.getIncludeCollection();
        java.lang.String str18 = mongoDBRiverDefinition11.getRiverIndexName();
        java.lang.String str19 = mongoDBRiverDefinition11.getIncludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions20 = mongoDBRiverDefinition11.getMongoClientOptions();
        java.lang.String str21 = mongoDBRiverDefinition11.getMongoOplogNamespace();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(mongoClientOptions20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "null.null" + "'", str21, "null.null");
    }

    @Test
    public void test08715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08715");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.mongoClientOptions(mongoClientOptions6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.mongoCollectionFilter(basicDBObject10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoLocalPassword("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.mongoAdminUser("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoAdminUser("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoClientOptions(mongoClientOptions19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder22.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions27 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.mongoClientOptions(mongoClientOptions27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = builder28.build();
        java.lang.String str30 = mongoDBRiverDefinition29.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions31 = mongoDBRiverDefinition29.getMongoClientOptions();
        boolean boolean32 = mongoDBRiverDefinition29.isMongoSecondaryReadPreference();
        int int33 = mongoDBRiverDefinition29.getThrottleSize();
        java.lang.String str34 = mongoDBRiverDefinition29.getMongoAdminUser();
        java.lang.String str35 = mongoDBRiverDefinition29.getScriptType();
        java.util.List<com.mongodb.ServerAddress> serverAddressList36 = mongoDBRiverDefinition29.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder15.mongoServers(serverAddressList36);
        java.lang.Object obj38 = docScoreSearchScript0.unwrap((java.lang.Object) builder37);
        docScoreSearchScript0.setNextScore((float) 0);
        docScoreSearchScript0.setNextScore((float) 10);
        org.elasticsearch.common.settings.Settings settings44 = null;
        org.elasticsearch.common.settings.Settings settings45 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions47 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoClientOptions(mongoClientOptions47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder46.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder50.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder50.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder50.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions58 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder57.mongoClientOptions(mongoClientOptions58);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder57.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder57.socketTimeout((int) 'a');
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory64 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap65 = null;
        org.elasticsearch.script.ExecutableScript executableScript66 = docScoreNativeScriptFactory64.newScript(strMap65);
        java.util.Map<java.lang.String, java.lang.Object> strMap67 = null;
        org.elasticsearch.script.ExecutableScript executableScript68 = docScoreNativeScriptFactory64.newScript(strMap67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions70 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder69.mongoClientOptions(mongoClientOptions70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder69.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder73.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder73.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions78 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder77.mongoClientOptions(mongoClientOptions78);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition80 = builder79.build();
        java.lang.String str81 = mongoDBRiverDefinition80.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions82 = mongoDBRiverDefinition80.getMongoClientOptions();
        boolean boolean83 = mongoDBRiverDefinition80.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions84 = mongoDBRiverDefinition80.getMongoClientOptions();
        java.lang.String str85 = mongoDBRiverDefinition80.getScript();
        com.mongodb.BasicDBObject basicDBObject86 = mongoDBRiverDefinition80.getMongoOplogFilter();
        java.lang.String str87 = mongoDBRiverDefinition80.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject88 = mongoDBRiverDefinition80.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript89 = docScoreNativeScriptFactory64.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject88);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder57.mongoCollectionFilter(basicDBObject88);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder91 = builder50.mongoOplogFilter(basicDBObject88);
        org.elasticsearch.river.RiverSettings riverSettings92 = new org.elasticsearch.river.RiverSettings(settings45, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject88);
        org.elasticsearch.river.RiverSettings riverSettings93 = new org.elasticsearch.river.RiverSettings(settings44, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject88);
        org.elasticsearch.common.settings.Settings settings94 = riverSettings93.globalSettings();
        java.util.Map<java.lang.String, java.lang.Object> strMap95 = riverSettings93.settings();
        docScoreSearchScript0.setNextVar("concurrent_bulk_requests", (java.lang.Object) strMap95);
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(mongoClientOptions31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(serverAddressList36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(executableScript66);
        org.junit.Assert.assertNotNull(executableScript68);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNull(mongoClientOptions82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(mongoClientOptions84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNull(basicDBObject86);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNotNull(basicDBObject88);
        org.junit.Assert.assertNotNull(executableScript89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNull(settings94);
        org.junit.Assert.assertNotNull(strMap95);
    }

    @Test
    public void test08716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08716");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory4 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = null;
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory4.newScript(strMap5);
        docScoreSearchScript0.setNextVar("localhost", (java.lang.Object) docScoreNativeScriptFactory4);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript9 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj11 = docScoreSearchScript9.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript9.setNextScore((float) 1);
        docScoreSearchScript0.setNextVar("credentials", (java.lang.Object) 1);
        docScoreSearchScript0.setNextScore((float) 0L);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoClientOptions(mongoClientOptions19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject23 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder18.mongoCollectionFilter(basicDBObject23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder18.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder28.riverIndexName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.includeCollection("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.scriptType("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoDb("include_fields");
        docScoreSearchScript0.setNextVar("db", (java.lang.Object) builder38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions41 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.mongoClientOptions(mongoClientOptions41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder40.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder44.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions49 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.mongoClientOptions(mongoClientOptions49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = builder50.build();
        java.lang.String str52 = mongoDBRiverDefinition51.getMongoAdminPassword();
        boolean boolean53 = mongoDBRiverDefinition51.isMongoSecondaryReadPreference();
        java.lang.String str54 = mongoDBRiverDefinition51.getMongoLocalUser();
        java.lang.Object obj55 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition51);
        boolean boolean56 = mongoDBRiverDefinition51.isImportAllCollections();
        java.lang.String str57 = mongoDBRiverDefinition51.getStatisticsTypeName();
        boolean boolean58 = mongoDBRiverDefinition51.isMongoSecondaryReadPreference();
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + "hi!" + "'", obj11, "hi!");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test08717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08717");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.typeName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.typeName("include_fields");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript9 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj11 = docScoreSearchScript9.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript9.setNextScore((float) 1);
        docScoreSearchScript9.setNextScore((float) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.mongoClientOptions(mongoClientOptions18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder19.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder19.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.typeName("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder25.indexName("host");
        docScoreSearchScript9.setNextVar("drop_collection", (java.lang.Object) builder25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions32 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.mongoClientOptions(mongoClientOptions32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder31.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject36 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder31.mongoCollectionFilter(basicDBObject36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder31.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder39.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray49 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder41.includeFields((java.util.Set<java.lang.String>) strSet50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder25.includeFields((java.util.Set<java.lang.String>) strSet50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder8.includeFields((java.util.Set<java.lang.String>) strSet50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder8.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder8.riverName("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.riverIndexName("localhost");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder58.mongoAdminUser("type");
        com.mongodb.MongoClientOptions mongoClientOptions63 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder58.mongoClientOptions(mongoClientOptions63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder64.mongoDb("password");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + "hi!" + "'", obj11, "hi!");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test08718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08718");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.statisticsIndexName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoAdminUser("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = builder12.build();
        boolean boolean16 = mongoDBRiverDefinition15.isDisableIndexRefresh();
        boolean boolean17 = mongoDBRiverDefinition15.isAdvancedTransformation();
        java.util.Set<java.lang.String> strSet18 = mongoDBRiverDefinition15.getIncludeFields();
        boolean boolean19 = mongoDBRiverDefinition15.isStoreStatistics();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test08719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08719");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder12.indexName("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder12.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder20.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.importAllCollections(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test08720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08720");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        com.mongodb.MongoClientOptions mongoClientOptions13 = mongoDBRiverDefinition11.getMongoClientOptions();
        java.lang.String str14 = mongoDBRiverDefinition11.getScriptType();
        boolean boolean15 = mongoDBRiverDefinition11.isDropCollection();
        java.lang.String str16 = mongoDBRiverDefinition11.getIncludeCollection();
        int int17 = mongoDBRiverDefinition11.getThrottleSize();
        int int18 = mongoDBRiverDefinition11.getSocketTimeout();
        boolean boolean19 = mongoDBRiverDefinition11.isDisableIndexRefresh();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp20 = mongoDBRiverDefinition11.getInitialTimestamp();
        boolean boolean21 = mongoDBRiverDefinition11.isImportAllCollections();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(wildcardTimestamp20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test08721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08721");
        org.elasticsearch.common.settings.Settings settings4 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.mongoClientOptions(mongoClientOptions6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder9.throttleSize(0);
        org.elasticsearch.common.settings.Settings settings16 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.mongoClientOptions(mongoClientOptions18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions25 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoClientOptions(mongoClientOptions25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder24.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder28.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.mongoClientOptions(mongoClientOptions33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = builder34.build();
        java.lang.String str36 = mongoDBRiverDefinition35.getMongoAdminPassword();
        boolean boolean37 = mongoDBRiverDefinition35.isMongoSecondaryReadPreference();
        java.lang.String str38 = mongoDBRiverDefinition35.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet39 = mongoDBRiverDefinition35.getParentTypes();
        boolean boolean40 = mongoDBRiverDefinition35.isMongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject41 = mongoDBRiverDefinition35.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder21.mongoCollectionFilter(basicDBObject41);
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings16, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder9.mongoCollectionFilter(basicDBObject41);
        org.elasticsearch.river.RiverSettings riverSettings45 = new org.elasticsearch.river.RiverSettings(settings4, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject41);
        org.elasticsearch.script.ScriptService scriptService46 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition47 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("drop_collection", "bulk_timeout", riverSettings45, scriptService46);
        org.elasticsearch.common.settings.Settings settings48 = riverSettings45.globalSettings();
        org.elasticsearch.script.ScriptService scriptService49 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition50 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("parent_types", "include_fields", riverSettings45, scriptService49);
        java.util.Map<java.lang.String, java.lang.Object> strMap51 = riverSettings45.settings();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNull(strSet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(basicDBObject41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition47);
        org.junit.Assert.assertNull(settings48);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition50);
        org.junit.Assert.assertNotNull(strMap51);
    }

    @Test
    public void test08722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08722");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = builder6.build();
        org.elasticsearch.common.settings.Settings settings8 = null;
        org.elasticsearch.common.settings.Settings settings9 = null;
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoClientOptions(mongoClientOptions12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder15.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.mongoClientOptions(mongoClientOptions20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = builder21.build();
        java.lang.String str23 = mongoDBRiverDefinition22.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions24 = mongoDBRiverDefinition22.getMongoClientOptions();
        boolean boolean25 = mongoDBRiverDefinition22.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions26 = mongoDBRiverDefinition22.getMongoClientOptions();
        java.lang.String str27 = mongoDBRiverDefinition22.getScript();
        com.mongodb.BasicDBObject basicDBObject28 = mongoDBRiverDefinition22.getMongoOplogFilter();
        java.lang.String str29 = mongoDBRiverDefinition22.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject30 = mongoDBRiverDefinition22.getMongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings31 = new org.elasticsearch.river.RiverSettings(settings10, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject30);
        org.elasticsearch.river.RiverSettings riverSettings32 = new org.elasticsearch.river.RiverSettings(settings9, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject30);
        org.elasticsearch.river.RiverSettings riverSettings33 = new org.elasticsearch.river.RiverSettings(settings8, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder6.mongoCollectionFilter(basicDBObject30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions36 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.mongoClientOptions(mongoClientOptions36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder35.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject40 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder35.mongoCollectionFilter(basicDBObject40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.mongoLocalPassword("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoAdminUser("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder45.mongoAdminUser("gridfs");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory48 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap49 = null;
        org.elasticsearch.script.ExecutableScript executableScript50 = docScoreNativeScriptFactory48.newScript(strMap49);
        java.util.Map<java.lang.String, java.lang.Object> strMap51 = null;
        org.elasticsearch.script.ExecutableScript executableScript52 = docScoreNativeScriptFactory48.newScript(strMap51);
        org.elasticsearch.common.settings.Settings settings53 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions55 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder54.mongoClientOptions(mongoClientOptions55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder56.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions62 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder61.mongoClientOptions(mongoClientOptions62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder61.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder65.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder65.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions70 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder69.mongoClientOptions(mongoClientOptions70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition72 = builder71.build();
        java.lang.String str73 = mongoDBRiverDefinition72.getMongoAdminPassword();
        boolean boolean74 = mongoDBRiverDefinition72.isMongoSecondaryReadPreference();
        java.lang.String str75 = mongoDBRiverDefinition72.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet76 = mongoDBRiverDefinition72.getParentTypes();
        boolean boolean77 = mongoDBRiverDefinition72.isMongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject78 = mongoDBRiverDefinition72.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder58.mongoCollectionFilter(basicDBObject78);
        org.elasticsearch.river.RiverSettings riverSettings80 = new org.elasticsearch.river.RiverSettings(settings53, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject78);
        org.elasticsearch.script.ExecutableScript executableScript81 = docScoreNativeScriptFactory48.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject78);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder45.mongoCollectionFilter(basicDBObject78);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition83 = builder82.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList84 = mongoDBRiverDefinition83.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder34.mongoServers(serverAddressList84);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition7);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(mongoClientOptions26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(basicDBObject28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(executableScript50);
        org.junit.Assert.assertNotNull(executableScript52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNull(strSet76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(basicDBObject78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(executableScript81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition83);
        org.junit.Assert.assertNotNull(serverAddressList84);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test08723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08723");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoAdminPassword();
        boolean boolean13 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        java.lang.String str14 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str15 = mongoDBRiverDefinition11.getMongoAdminPassword();
        java.lang.String str16 = mongoDBRiverDefinition11.getRiverName();
        java.lang.String str17 = mongoDBRiverDefinition11.getMongoAdminUser();
        int int18 = mongoDBRiverDefinition11.getThrottleSize();
        java.lang.String str19 = mongoDBRiverDefinition11.getScriptType();
        java.lang.String str20 = mongoDBRiverDefinition11.getMongoAdminPassword();
        java.lang.String str21 = mongoDBRiverDefinition11.getMongoAdminUser();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp22 = mongoDBRiverDefinition11.getInitialTimestamp();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNull(wildcardTimestamp22);
    }

    @Test
    public void test08724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08724");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder2.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder2.typeName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder2.mongoLocalUser("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.mongoClientOptions(mongoClientOptions14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.connectTimeout((int) (short) 10);
        java.lang.String[] strArray62 = new java.lang.String[] { "actions", "user", "name", "bulk_size", "", "script_type", "db", "disable_index_refresh", "local", "port", "filter", "gridfs", "drop_collection", "hi!", "include_collection", "secondary_read_preference", "options", "script_type", "index", "import_all_collections", "options", "connect_timeout", "index", "name", "gridfs", "name", "db", "script", "bulk_timeout", "flush_interval", "", "ssl_verify_certificate", "collection", "admin", "include_collection", "concurrent_requests", "secondary_read_preference", "bulk_timeout", "collection", "script_type", "gridfs", "script_type" };
        java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder19.excludeFields((java.util.Set<java.lang.String>) strSet63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder2.excludeFields((java.util.Set<java.lang.String>) strSet63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder2.connectTimeout((int) (short) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder2.riverName("connect_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder2.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder72.advancedTransformation(true);
        org.bson.types.Binary binary75 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder74.initialTimestamp(binary75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test08725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08725");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder2.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder2.mongoAdminUser("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.mongoClientOptions(mongoClientOptions14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject18 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder13.mongoCollectionFilter(basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder13.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray31 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder23.includeFields((java.util.Set<java.lang.String>) strSet32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.includeCollection("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions38 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.mongoClientOptions(mongoClientOptions38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder37.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder41.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions46 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder45.mongoClientOptions(mongoClientOptions46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = builder47.build();
        java.lang.String str49 = mongoDBRiverDefinition48.getMongoDb();
        com.mongodb.MongoClientOptions mongoClientOptions50 = mongoDBRiverDefinition48.getMongoClientOptions();
        java.lang.String str51 = mongoDBRiverDefinition48.getScriptType();
        java.lang.String str52 = mongoDBRiverDefinition48.getMongoOplogNamespace();
        java.util.List<com.mongodb.ServerAddress> serverAddressList53 = mongoDBRiverDefinition48.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder36.mongoServers(serverAddressList53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder2.mongoServers(serverAddressList53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder55.typeName("null.null");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(mongoClientOptions50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "null.null" + "'", str52, "null.null");
        org.junit.Assert.assertNotNull(serverAddressList53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test08726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08726");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) 8);
        docScoreSearchScript0.setNextScore(1.0f);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.mongoClientOptions(mongoClientOptions6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.mongoCollectionFilter(basicDBObject10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = builder13.build();
        com.mongodb.MongoClientOptions mongoClientOptions15 = mongoDBRiverDefinition14.getMongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject16 = mongoDBRiverDefinition14.getMongoCollectionFilter();
        boolean boolean17 = mongoDBRiverDefinition14.isAdvancedTransformation();
        java.lang.String str18 = mongoDBRiverDefinition14.getScript();
        java.lang.String str19 = mongoDBRiverDefinition14.getIndexName();
        java.lang.String str20 = mongoDBRiverDefinition14.getMongoAdminPassword();
        int int21 = mongoDBRiverDefinition14.getConnectTimeout();
        java.lang.Object obj22 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions24 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.mongoClientOptions(mongoClientOptions24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder23.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject28 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder23.mongoCollectionFilter(basicDBObject28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder23.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition32 = builder31.build();
        boolean boolean33 = mongoDBRiverDefinition32.isStoreStatistics();
        boolean boolean34 = mongoDBRiverDefinition32.isMongoSSLVerifyCertificate();
        java.lang.String str35 = mongoDBRiverDefinition32.getStatisticsTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList36 = mongoDBRiverDefinition32.getMongoServers();
        java.lang.String str37 = mongoDBRiverDefinition32.getIncludeCollection();
        boolean boolean38 = mongoDBRiverDefinition32.isAdvancedTransformation();
        boolean boolean39 = mongoDBRiverDefinition32.isMongoSecondaryReadPreference();
        java.lang.String str40 = mongoDBRiverDefinition32.getMongoOplogNamespace();
        java.lang.Object obj41 = docScoreSearchScript0.unwrap((java.lang.Object) str40);
        docScoreSearchScript0.setNextScore((float) '#');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions45 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.mongoClientOptions(mongoClientOptions45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder44.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject49 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder44.mongoCollectionFilter(basicDBObject49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder44.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition53 = builder52.build();
        boolean boolean54 = mongoDBRiverDefinition53.isStoreStatistics();
        boolean boolean55 = mongoDBRiverDefinition53.isMongoSSLVerifyCertificate();
        java.lang.String str56 = mongoDBRiverDefinition53.getStatisticsTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList57 = mongoDBRiverDefinition53.getMongoServers();
        java.lang.String str58 = mongoDBRiverDefinition53.getMongoLocalUser();
        boolean boolean59 = mongoDBRiverDefinition53.isMongoUseSSL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList60 = mongoDBRiverDefinition53.getMongoServers();
        java.lang.Object obj61 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition53);
        boolean boolean62 = mongoDBRiverDefinition53.isMongoSecondaryReadPreference();
        java.util.Set<java.lang.String> strSet63 = mongoDBRiverDefinition53.getExcludeFields();
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 8 + "'", obj2, 8);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition14);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertNull(basicDBObject16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "bulk_size" + "'", str19, "bulk_size");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(serverAddressList36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "null.null" + "'", str40, "null.null");
        org.junit.Assert.assertEquals("'" + obj41 + "' != '" + "null.null" + "'", obj41, "null.null");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(serverAddressList57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(serverAddressList60);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(strSet63);
    }

    @Test
    public void test08727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08727");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        com.mongodb.BasicDBObject basicDBObject9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoCollectionFilter(basicDBObject9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoUseSSL(true);
        java.util.Set<java.lang.String> strSet13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.includeFields(strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.scriptType("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.mongoClientOptions(mongoClientOptions18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder19.mongoLocalUser("concurrent_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.mongoDb("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions29 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.mongoClientOptions(mongoClientOptions29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder28.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder32.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions37 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoClientOptions(mongoClientOptions37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = builder38.build();
        java.lang.String str40 = mongoDBRiverDefinition39.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions41 = mongoDBRiverDefinition39.getMongoClientOptions();
        boolean boolean42 = mongoDBRiverDefinition39.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions43 = mongoDBRiverDefinition39.getMongoClientOptions();
        java.lang.String str44 = mongoDBRiverDefinition39.getScript();
        boolean boolean45 = mongoDBRiverDefinition39.isMongoGridFS();
        java.util.Set<java.lang.String> strSet46 = mongoDBRiverDefinition39.getIncludeFields();
        com.mongodb.BasicDBObject basicDBObject47 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder27.mongoOplogFilter(basicDBObject47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder16.mongoCollectionFilter(basicDBObject47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder49.mongoCollection("password");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(mongoClientOptions41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(mongoClientOptions43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertNotNull(basicDBObject47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test08728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08728");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoClientOptions(mongoClientOptions4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.socketTimeout((int) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoClientOptions(mongoClientOptions11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder14.throttleSize(0);
        org.elasticsearch.common.settings.Settings settings21 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.mongoClientOptions(mongoClientOptions23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions30 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.mongoClientOptions(mongoClientOptions30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder29.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder33.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions38 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.mongoClientOptions(mongoClientOptions38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition40 = builder39.build();
        java.lang.String str41 = mongoDBRiverDefinition40.getMongoAdminPassword();
        boolean boolean42 = mongoDBRiverDefinition40.isMongoSecondaryReadPreference();
        java.lang.String str43 = mongoDBRiverDefinition40.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet44 = mongoDBRiverDefinition40.getParentTypes();
        boolean boolean45 = mongoDBRiverDefinition40.isMongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject46 = mongoDBRiverDefinition40.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder26.mongoCollectionFilter(basicDBObject46);
        org.elasticsearch.river.RiverSettings riverSettings48 = new org.elasticsearch.river.RiverSettings(settings21, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder14.mongoCollectionFilter(basicDBObject46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder7.mongoOplogFilter(basicDBObject46);
        org.elasticsearch.river.RiverSettings riverSettings51 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject46);
        java.util.Map<java.lang.String, java.lang.Object> strMap52 = riverSettings51.settings();
        java.util.Map<java.lang.String, java.lang.Object> strMap53 = riverSettings51.settings();
        org.elasticsearch.common.settings.Settings settings54 = riverSettings51.globalSettings();
        org.elasticsearch.script.ScriptService scriptService55 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition56 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("", "name", riverSettings51, scriptService55);
        java.lang.String str57 = mongoDBRiverDefinition56.getMongoCollection();
        java.lang.String str58 = mongoDBRiverDefinition56.getScriptType();
        boolean boolean59 = mongoDBRiverDefinition56.isAdvancedTransformation();
        java.lang.String str60 = mongoDBRiverDefinition56.getTypeName();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(basicDBObject46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNull(settings54);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
    }

    @Test
    public void test08729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08729");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.includeCollection("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.mongoLocalPassword("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoLocalUser("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.mongoClientOptions(mongoClientOptions20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder19.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder23.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions28 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.mongoClientOptions(mongoClientOptions28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = builder29.build();
        java.lang.String str31 = mongoDBRiverDefinition30.getMongoDb();
        boolean boolean32 = mongoDBRiverDefinition30.isDisableIndexRefresh();
        int int33 = mongoDBRiverDefinition30.getConnectTimeout();
        com.mongodb.MongoClientOptions mongoClientOptions34 = mongoDBRiverDefinition30.getMongoClientOptions();
        boolean boolean35 = mongoDBRiverDefinition30.isSkipInitialImport();
        java.lang.String str36 = mongoDBRiverDefinition30.getIndexName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList37 = mongoDBRiverDefinition30.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder16.mongoServers(serverAddressList37);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNull(mongoClientOptions34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(serverAddressList37);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test08730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08730");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoAdminPassword();
        com.mongodb.BasicDBObject basicDBObject13 = mongoDBRiverDefinition9.getMongoOplogFilter();
        int int14 = mongoDBRiverDefinition9.getSocketTimeout();
        java.lang.String str15 = mongoDBRiverDefinition9.getMongoCollection();
        boolean boolean16 = mongoDBRiverDefinition9.isDropCollection();
        boolean boolean17 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.lang.String str18 = mongoDBRiverDefinition9.getIndexName();
        boolean boolean19 = mongoDBRiverDefinition9.isImportAllCollections();
        java.util.Set<java.lang.String> strSet20 = mongoDBRiverDefinition9.getParentTypes();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(basicDBObject13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "bulk_size" + "'", str18, "bulk_size");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(strSet20);
    }

    @Test
    public void test08731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08731");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoLocalPassword("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.connectTimeout(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions22 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.mongoClientOptions(mongoClientOptions22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.typeName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder25.typeName("include_fields");
        com.mongodb.BasicDBObject basicDBObject30 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.mongoCollectionFilter(basicDBObject30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions35 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.mongoClientOptions(mongoClientOptions35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder38.riverIndexName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition41 = builder38.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder38.includeCollection("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder38.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions47 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoClientOptions(mongoClientOptions47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder46.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder50.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder50.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions55 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder54.mongoClientOptions(mongoClientOptions55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder54.statisticsIndexName("user");
        java.lang.String[] strArray85 = new java.lang.String[] { "bulk", "include_fields", "filter", "concurrent_bulk_requests", "drop_collection", "local", "servers", "password", "null.null", "disable_index_refresh", "advanced_transformation", "script", "", "parent_types", "type", "advanced_transformation", "port", "admin", "collection", "bulk", "localhost", "index", "actions", "options", "advanced_transformation", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet86 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet86, strArray85);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder54.parentTypes((java.util.Set<java.lang.String>) strSet86);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder89 = builder45.parentTypes((java.util.Set<java.lang.String>) strSet86);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder31.excludeFields((java.util.Set<java.lang.String>) strSet86);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder91 = builder20.includeFields((java.util.Set<java.lang.String>) strSet86);
        com.mongodb.MongoClientOptions mongoClientOptions92 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder93 = builder20.mongoClientOptions(mongoClientOptions92);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test08732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08732");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.riverIndexName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = builder4.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder4.includeCollection("concurrent_bulk_requests");
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.common.settings.Settings settings11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoClientOptions(mongoClientOptions13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.mongoClientOptions(mongoClientOptions21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = builder22.build();
        java.lang.String str24 = mongoDBRiverDefinition23.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions25 = mongoDBRiverDefinition23.getMongoClientOptions();
        boolean boolean26 = mongoDBRiverDefinition23.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions27 = mongoDBRiverDefinition23.getMongoClientOptions();
        java.lang.String str28 = mongoDBRiverDefinition23.getScript();
        com.mongodb.BasicDBObject basicDBObject29 = mongoDBRiverDefinition23.getMongoOplogFilter();
        java.lang.String str30 = mongoDBRiverDefinition23.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject31 = mongoDBRiverDefinition23.getMongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings32 = new org.elasticsearch.river.RiverSettings(settings11, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject31);
        org.elasticsearch.river.RiverSettings riverSettings33 = new org.elasticsearch.river.RiverSettings(settings10, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder9.mongoOplogFilter(basicDBObject31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.includeCollection("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder34.storeStatistics(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(mongoClientOptions27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(basicDBObject29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(basicDBObject31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test08733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08733");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder2.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoClientOptions(mongoClientOptions12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject16 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder11.mongoCollectionFilter(basicDBObject16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder11.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = builder19.build();
        boolean boolean21 = mongoDBRiverDefinition20.isStoreStatistics();
        java.util.List<com.mongodb.ServerAddress> serverAddressList22 = mongoDBRiverDefinition20.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder8.mongoServers(serverAddressList22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder23.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder23.indexName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.statisticsIndexName("socket_timeout.socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.indexName("collection");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(serverAddressList22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test08734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08734");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        boolean boolean13 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        java.lang.String str14 = mongoDBRiverDefinition11.getMongoOplogNamespace();
        java.lang.String str15 = mongoDBRiverDefinition11.getMongoAdminUser();
        com.mongodb.BasicDBObject basicDBObject16 = mongoDBRiverDefinition11.getMongoOplogFilter();
        java.util.Set<java.lang.String> strSet17 = mongoDBRiverDefinition11.getIncludeFields();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "null.null" + "'", str14, "null.null");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(basicDBObject16);
        org.junit.Assert.assertNull(strSet17);
    }

    @Test
    public void test08735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08735");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions13 = mongoDBRiverDefinition11.getMongoClientOptions();
        boolean boolean14 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions15 = mongoDBRiverDefinition11.getMongoClientOptions();
        java.lang.String str16 = mongoDBRiverDefinition11.getScript();
        boolean boolean17 = mongoDBRiverDefinition11.isMongoGridFS();
        java.util.Set<java.lang.String> strSet18 = mongoDBRiverDefinition11.getIncludeFields();
        java.lang.String str19 = mongoDBRiverDefinition11.getRiverName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test08736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08736");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.ServerAddress[] serverAddressArray5 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList6 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList6, serverAddressArray5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.mongoClientOptions(mongoClientOptions10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.mongoLocalPassword("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.riverName("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.socketTimeout((int) (byte) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder17.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder17.mongoLocalPassword("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions25 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoClientOptions(mongoClientOptions25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder24.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.typeName("include_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.statisticsIndexName("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder30.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder30.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.throttleSize((int) '4');
        org.elasticsearch.common.settings.Settings settings39 = null;
        org.elasticsearch.common.settings.Settings settings40 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions42 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.mongoClientOptions(mongoClientOptions42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder41.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder45.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder45.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder45.throttleSize(0);
        org.elasticsearch.common.settings.Settings settings52 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions54 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder53.mongoClientOptions(mongoClientOptions54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder55.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder57.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions61 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder60.mongoClientOptions(mongoClientOptions61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder60.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder64.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder64.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions69 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder68.mongoClientOptions(mongoClientOptions69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition71 = builder70.build();
        java.lang.String str72 = mongoDBRiverDefinition71.getMongoAdminPassword();
        boolean boolean73 = mongoDBRiverDefinition71.isMongoSecondaryReadPreference();
        java.lang.String str74 = mongoDBRiverDefinition71.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet75 = mongoDBRiverDefinition71.getParentTypes();
        boolean boolean76 = mongoDBRiverDefinition71.isMongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject77 = mongoDBRiverDefinition71.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder57.mongoCollectionFilter(basicDBObject77);
        org.elasticsearch.river.RiverSettings riverSettings79 = new org.elasticsearch.river.RiverSettings(settings52, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject77);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder45.mongoCollectionFilter(basicDBObject77);
        org.elasticsearch.river.RiverSettings riverSettings81 = new org.elasticsearch.river.RiverSettings(settings40, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject77);
        org.elasticsearch.river.RiverSettings riverSettings82 = new org.elasticsearch.river.RiverSettings(settings39, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject77);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder38.mongoOplogFilter(basicDBObject77);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder17.mongoCollectionFilter(basicDBObject77);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder8.mongoOplogFilter(basicDBObject77);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(serverAddressArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(basicDBObject77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test08737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08737");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.riverName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.mongoAdminUser("drop_collection");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test08738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08738");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions13 = mongoDBRiverDefinition11.getMongoClientOptions();
        boolean boolean14 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions15 = mongoDBRiverDefinition11.getMongoClientOptions();
        java.lang.String str16 = mongoDBRiverDefinition11.getScript();
        boolean boolean17 = mongoDBRiverDefinition11.isMongoSSLVerifyCertificate();
        java.lang.String str18 = mongoDBRiverDefinition11.getMongoCollection();
        java.util.Set<java.lang.String> strSet19 = mongoDBRiverDefinition11.getExcludeFields();
        java.lang.String str20 = mongoDBRiverDefinition11.getMongoOplogNamespace();
        int int21 = mongoDBRiverDefinition11.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "null.null" + "'", str20, "null.null");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test08739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08739");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str13 = mongoDBRiverDefinition11.getTypeName();
        java.lang.String str14 = mongoDBRiverDefinition11.getTypeName();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition11.getParentTypes();
        java.lang.String str16 = mongoDBRiverDefinition11.getMongoLocalUser();
        java.lang.String str17 = mongoDBRiverDefinition11.getStatisticsTypeName();
        java.lang.String str18 = mongoDBRiverDefinition11.getMongoOplogNamespace();
        java.lang.String str19 = mongoDBRiverDefinition11.getMongoOplogNamespace();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "null.null" + "'", str18, "null.null");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "null.null" + "'", str19, "null.null");
    }

    @Test
    public void test08740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08740");
        org.elasticsearch.common.settings.Settings settings8 = null;
        org.elasticsearch.common.settings.Settings settings9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoClientOptions(mongoClientOptions11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoLocalUser("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.typeName("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder16.dropCollection(true);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript23 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj25 = docScoreSearchScript23.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript23.setNextScore((float) 1);
        docScoreSearchScript23.setNextScore((float) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions32 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.mongoClientOptions(mongoClientOptions32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder33.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder33.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder39.typeName("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder39.indexName("host");
        docScoreSearchScript23.setNextVar("drop_collection", (java.lang.Object) builder39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions46 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder45.mongoClientOptions(mongoClientOptions46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder45.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject50 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder45.mongoCollectionFilter(basicDBObject50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder45.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder53.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder55.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray63 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet64 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder55.includeFields((java.util.Set<java.lang.String>) strSet64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder39.includeFields((java.util.Set<java.lang.String>) strSet64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions69 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder68.mongoClientOptions(mongoClientOptions69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder68.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder72.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder72.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions77 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder76.mongoClientOptions(mongoClientOptions77);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition79 = builder78.build();
        java.lang.String str80 = mongoDBRiverDefinition79.getMongoAdminPassword();
        boolean boolean81 = mongoDBRiverDefinition79.isMongoSecondaryReadPreference();
        java.lang.String str82 = mongoDBRiverDefinition79.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet83 = mongoDBRiverDefinition79.getParentTypes();
        boolean boolean84 = mongoDBRiverDefinition79.isMongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject85 = mongoDBRiverDefinition79.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder67.mongoCollectionFilter(basicDBObject85);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder22.mongoOplogFilter(basicDBObject85);
        org.elasticsearch.river.RiverSettings riverSettings88 = new org.elasticsearch.river.RiverSettings(settings9, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject85);
        org.elasticsearch.river.RiverSettings riverSettings89 = new org.elasticsearch.river.RiverSettings(settings8, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject85);
        org.elasticsearch.script.ScriptService scriptService90 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition91 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("disable_index_refresh", "", riverSettings89, scriptService90);
        org.elasticsearch.script.ScriptService scriptService92 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition93 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("socket_timeout", "credentials", riverSettings89, scriptService92);
        org.elasticsearch.script.ScriptService scriptService94 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition95 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("port", "store_statistics", riverSettings89, scriptService94);
        org.elasticsearch.script.ScriptService scriptService96 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition97 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("name.name", "drop_collection", riverSettings89, scriptService96);
        java.lang.String str98 = mongoDBRiverDefinition97.getMongoOplogNamespace();
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertEquals("'" + obj25 + "' != '" + "hi!" + "'", obj25, "hi!");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNull(strSet83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(basicDBObject85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition91);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition93);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition95);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition97);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "name.name.name.name" + "'", str98, "name.name.name.name");
    }

    @Test
    public void test08741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08741");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.common.settings.Settings settings3 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoClientOptions(mongoClientOptions5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoClientOptions(mongoClientOptions13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.statisticsIndexName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoAdminUser("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.statisticsIndexName("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.socketTimeout(1000);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript23 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj25 = docScoreSearchScript23.unwrap((java.lang.Object) 8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions28 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.mongoClientOptions(mongoClientOptions28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder27.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject32 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder27.mongoCollectionFilter(basicDBObject32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder27.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder27.riverName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder37.socketTimeout((int) (byte) 100);
        docScoreSearchScript23.setNextVar("", (java.lang.Object) builder37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder37.script("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions46 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder45.mongoClientOptions(mongoClientOptions46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder45.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject50 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder45.mongoCollectionFilter(basicDBObject50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder45.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder53.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder55.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder55.riverIndexName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder59.mongoAdminUser("");
        org.elasticsearch.common.settings.Settings settings62 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions64 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder63.mongoClientOptions(mongoClientOptions64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder65.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder67.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions71 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder70.mongoClientOptions(mongoClientOptions71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder70.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder74.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder74.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions79 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder78.mongoClientOptions(mongoClientOptions79);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition81 = builder80.build();
        java.lang.String str82 = mongoDBRiverDefinition81.getMongoAdminPassword();
        boolean boolean83 = mongoDBRiverDefinition81.isMongoSecondaryReadPreference();
        java.lang.String str84 = mongoDBRiverDefinition81.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet85 = mongoDBRiverDefinition81.getParentTypes();
        boolean boolean86 = mongoDBRiverDefinition81.isMongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject87 = mongoDBRiverDefinition81.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder67.mongoCollectionFilter(basicDBObject87);
        org.elasticsearch.river.RiverSettings riverSettings89 = new org.elasticsearch.river.RiverSettings(settings62, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject87);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder59.mongoCollectionFilter(basicDBObject87);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder91 = builder44.mongoCollectionFilter(basicDBObject87);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder92 = builder20.mongoOplogFilter(basicDBObject87);
        org.elasticsearch.river.RiverSettings riverSettings93 = new org.elasticsearch.river.RiverSettings(settings3, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject87);
        org.elasticsearch.river.RiverSettings riverSettings94 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject87);
        java.util.Map<java.lang.String, java.lang.Object> strMap95 = riverSettings94.settings();
        java.util.Map<java.lang.String, java.lang.Object> strMap96 = riverSettings94.settings();
        org.elasticsearch.script.ScriptService scriptService97 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition98 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("concurrent_bulk_requests", "connect_timeout", riverSettings94, scriptService97);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertEquals("'" + obj25 + "' != '" + 8 + "'", obj25, 8);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNull(strSet85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(basicDBObject87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(strMap95);
        org.junit.Assert.assertNotNull(strMap96);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition98);
    }

    @Test
    public void test08742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08742");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str13 = mongoDBRiverDefinition11.getStatisticsTypeName();
        java.lang.String str14 = mongoDBRiverDefinition11.getScriptType();
        boolean boolean15 = mongoDBRiverDefinition11.isMongoGridFS();
        java.lang.String str16 = mongoDBRiverDefinition11.getIncludeCollection();
        java.lang.String str17 = mongoDBRiverDefinition11.getIncludeCollection();
        java.lang.String str18 = mongoDBRiverDefinition11.getRiverIndexName();
        java.lang.String str19 = mongoDBRiverDefinition11.getIndexName();
        boolean boolean20 = mongoDBRiverDefinition11.isMongoGridFS();
        java.lang.String str21 = mongoDBRiverDefinition11.getStatisticsTypeName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test08743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08743");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        boolean boolean13 = mongoDBRiverDefinition11.isDisableIndexRefresh();
        boolean boolean14 = mongoDBRiverDefinition11.isSkipInitialImport();
        java.lang.String str15 = mongoDBRiverDefinition11.getMongoAdminPassword();
        boolean boolean16 = mongoDBRiverDefinition11.isMongoSSLVerifyCertificate();
        java.util.Set<java.lang.String> strSet17 = mongoDBRiverDefinition11.getParentTypes();
        boolean boolean18 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        com.mongodb.BasicDBObject basicDBObject19 = mongoDBRiverDefinition11.getMongoCollectionFilter();
        boolean boolean20 = mongoDBRiverDefinition11.isDropCollection();
        com.mongodb.BasicDBObject basicDBObject21 = mongoDBRiverDefinition11.getMongoCollectionFilter();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(basicDBObject21);
    }

    @Test
    public void test08744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08744");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str13 = mongoDBRiverDefinition11.getStatisticsTypeName();
        boolean boolean14 = mongoDBRiverDefinition11.isImportAllCollections();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp15 = mongoDBRiverDefinition11.getInitialTimestamp();
        int int16 = mongoDBRiverDefinition11.getSocketTimeout();
        boolean boolean17 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        com.mongodb.BasicDBObject basicDBObject18 = mongoDBRiverDefinition11.getMongoCollectionFilter();
        java.lang.String str19 = mongoDBRiverDefinition11.getMongoLocalUser();
        boolean boolean20 = mongoDBRiverDefinition11.isStoreStatistics();
        boolean boolean21 = mongoDBRiverDefinition11.isSkipInitialImport();
        java.lang.String str22 = mongoDBRiverDefinition11.getMongoLocalPassword();
        com.mongodb.MongoClientOptions mongoClientOptions23 = mongoDBRiverDefinition11.getMongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject24 = mongoDBRiverDefinition11.getMongoCollectionFilter();
        java.lang.String str25 = mongoDBRiverDefinition11.getMongoAdminUser();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(wildcardTimestamp15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(basicDBObject24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test08745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08745");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoLocalPassword("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.riverName("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.typeName("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.disableIndexRefresh(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoClientOptions(mongoClientOptions15);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test08746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08746");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.mongoLocalUser("ssl_verify_certificate");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.mongoClientOptions(mongoClientOptions10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions18 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.mongoClientOptions(mongoClientOptions18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = builder19.build();
        java.lang.String str21 = mongoDBRiverDefinition20.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions22 = mongoDBRiverDefinition20.getMongoClientOptions();
        boolean boolean23 = mongoDBRiverDefinition20.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions24 = mongoDBRiverDefinition20.getMongoClientOptions();
        java.lang.String str25 = mongoDBRiverDefinition20.getScript();
        com.mongodb.BasicDBObject basicDBObject26 = mongoDBRiverDefinition20.getMongoOplogFilter();
        java.lang.String str27 = mongoDBRiverDefinition20.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject28 = mongoDBRiverDefinition20.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder4.mongoOplogFilter(basicDBObject28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.connectTimeout(100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(mongoClientOptions24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(basicDBObject26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test08747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08747");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.socketTimeout((int) (byte) 100);
        com.mongodb.ServerAddress[] serverAddressArray9 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList10 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList10, serverAddressArray9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder6.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder6.riverIndexName("null.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.statisticsTypeName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoCollection("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.riverName("null.null.null.null");
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder16.mongoClientOptions(mongoClientOptions21);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(serverAddressArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test08748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08748");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.riverIndexName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.socketTimeout(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition11.getParentTypes();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(strSet12);
    }

    @Test
    public void test08749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08749");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoAdminPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.getTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList14 = mongoDBRiverDefinition9.getMongoServers();
        boolean boolean15 = mongoDBRiverDefinition9.isDisableIndexRefresh();
        java.lang.String str16 = mongoDBRiverDefinition9.getStatisticsIndexName();
        java.lang.String str17 = mongoDBRiverDefinition9.getStatisticsIndexName();
        java.lang.String str18 = mongoDBRiverDefinition9.getMongoAdminUser();
        boolean boolean19 = mongoDBRiverDefinition9.isMongoGridFS();
        com.mongodb.MongoClientOptions mongoClientOptions20 = mongoDBRiverDefinition9.getMongoClientOptions();
        java.lang.String str21 = mongoDBRiverDefinition9.getIndexName();
        boolean boolean22 = mongoDBRiverDefinition9.isMongoUseSSL();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(serverAddressList14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(mongoClientOptions20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "bulk_size" + "'", str21, "bulk_size");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test08750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08750");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str13 = mongoDBRiverDefinition11.getStatisticsTypeName();
        java.lang.String str14 = mongoDBRiverDefinition11.getScriptType();
        boolean boolean15 = mongoDBRiverDefinition11.isMongoGridFS();
        java.lang.String str16 = mongoDBRiverDefinition11.getIncludeCollection();
        java.lang.String str17 = mongoDBRiverDefinition11.getIncludeCollection();
        java.lang.String str18 = mongoDBRiverDefinition11.getRiverIndexName();
        java.lang.String str19 = mongoDBRiverDefinition11.getIncludeCollection();
        java.lang.String str20 = mongoDBRiverDefinition11.getStatisticsTypeName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test08751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08751");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        int int10 = mongoDBRiverDefinition9.getSocketTimeout();
        java.lang.String str11 = mongoDBRiverDefinition9.getScriptType();
        com.mongodb.MongoClientOptions mongoClientOptions12 = mongoDBRiverDefinition9.getMongoClientOptions();
        com.mongodb.MongoClientOptions mongoClientOptions13 = mongoDBRiverDefinition9.getMongoClientOptions();
        java.lang.String str14 = mongoDBRiverDefinition9.getStatisticsIndexName();
        com.mongodb.BasicDBObject basicDBObject15 = mongoDBRiverDefinition9.getMongoOplogFilter();
        java.lang.String str16 = mongoDBRiverDefinition9.getTypeName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(mongoClientOptions12);
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(basicDBObject15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test08752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08752");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.riverIndexName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.includeCollection("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.mongoCollection("parent_types");
        com.mongodb.BasicDBObject basicDBObject19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder14.mongoCollectionFilter(basicDBObject19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.mongoAdminPassword("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.statisticsIndexName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder22.throttleSize(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.throttleSize((int) (byte) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = builder26.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition29);
    }

    @Test
    public void test08753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08753");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        int int10 = mongoDBRiverDefinition9.getSocketTimeout();
        java.lang.String str11 = mongoDBRiverDefinition9.getScriptType();
        java.util.List<com.mongodb.ServerAddress> serverAddressList12 = mongoDBRiverDefinition9.getMongoServers();
        java.lang.String str13 = mongoDBRiverDefinition9.getMongoOplogNamespace();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp14 = mongoDBRiverDefinition9.getInitialTimestamp();
        java.lang.String str15 = mongoDBRiverDefinition9.getMongoAdminPassword();
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition9.getIncludeFields();
        java.lang.String str17 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str18 = mongoDBRiverDefinition9.getRiverName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(serverAddressList12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "null.null" + "'", str13, "null.null");
        org.junit.Assert.assertNull(wildcardTimestamp14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test08754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08754");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions13 = mongoDBRiverDefinition11.getMongoClientOptions();
        boolean boolean14 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        int int15 = mongoDBRiverDefinition11.getThrottleSize();
        java.lang.String str16 = mongoDBRiverDefinition11.getMongoAdminUser();
        java.lang.String str17 = mongoDBRiverDefinition11.getScriptType();
        java.util.Set<java.lang.String> strSet18 = mongoDBRiverDefinition11.getParentTypes();
        java.lang.String str19 = mongoDBRiverDefinition11.getRiverName();
        boolean boolean20 = mongoDBRiverDefinition11.isMongoSSLVerifyCertificate();
        java.lang.String str21 = mongoDBRiverDefinition11.getMongoAdminPassword();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test08755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08755");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str13 = mongoDBRiverDefinition11.getStatisticsTypeName();
        java.lang.String str14 = mongoDBRiverDefinition11.getScriptType();
        int int15 = mongoDBRiverDefinition11.getConnectTimeout();
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = mongoDBRiverDefinition11.getMongoServers();
        java.lang.String str17 = mongoDBRiverDefinition11.getIndexName();
        java.lang.String str18 = mongoDBRiverDefinition11.getMongoAdminPassword();
        java.lang.String str19 = mongoDBRiverDefinition11.getScript();
        boolean boolean20 = mongoDBRiverDefinition11.isMongoUseSSL();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test08756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08756");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.riverIndexName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.riverName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder4.scriptType("connect_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoClientOptions(mongoClientOptions12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder15.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.mongoClientOptions(mongoClientOptions20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = builder21.build();
        java.lang.String str23 = mongoDBRiverDefinition22.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions24 = mongoDBRiverDefinition22.getMongoClientOptions();
        boolean boolean25 = mongoDBRiverDefinition22.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions26 = mongoDBRiverDefinition22.getMongoClientOptions();
        java.lang.String str27 = mongoDBRiverDefinition22.getScript();
        com.mongodb.BasicDBObject basicDBObject28 = mongoDBRiverDefinition22.getMongoOplogFilter();
        java.lang.String str29 = mongoDBRiverDefinition22.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject30 = mongoDBRiverDefinition22.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder4.mongoOplogFilter(basicDBObject30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder4.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.mongoAdminPassword("import_all_collections");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(mongoClientOptions26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(basicDBObject28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test08757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08757");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoAdminUser("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsIndexName("parent_types");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.disableIndexRefresh(false);
        org.elasticsearch.common.settings.Settings settings13 = null;
        org.elasticsearch.common.settings.Settings settings14 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory15 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap16 = null;
        org.elasticsearch.script.ExecutableScript executableScript17 = docScoreNativeScriptFactory15.newScript(strMap16);
        java.util.Map<java.lang.String, java.lang.Object> strMap18 = null;
        org.elasticsearch.script.ExecutableScript executableScript19 = docScoreNativeScriptFactory15.newScript(strMap18);
        java.util.Map<java.lang.String, java.lang.Object> strMap20 = null;
        org.elasticsearch.script.ExecutableScript executableScript21 = docScoreNativeScriptFactory15.newScript(strMap20);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript22 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj24 = docScoreSearchScript22.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript22.setNextScore((float) 1);
        docScoreSearchScript22.setNextScore((float) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions31 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.mongoClientOptions(mongoClientOptions31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder32.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder32.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder38.typeName("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder38.indexName("host");
        docScoreSearchScript22.setNextVar("drop_collection", (java.lang.Object) builder38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions45 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.mongoClientOptions(mongoClientOptions45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder44.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject49 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder44.mongoCollectionFilter(basicDBObject49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder44.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder52.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder54.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray62 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder54.includeFields((java.util.Set<java.lang.String>) strSet63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder38.includeFields((java.util.Set<java.lang.String>) strSet63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions68 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder67.mongoClientOptions(mongoClientOptions68);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder67.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder71.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder71.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions76 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder75.mongoClientOptions(mongoClientOptions76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition78 = builder77.build();
        java.lang.String str79 = mongoDBRiverDefinition78.getMongoAdminPassword();
        boolean boolean80 = mongoDBRiverDefinition78.isMongoSecondaryReadPreference();
        java.lang.String str81 = mongoDBRiverDefinition78.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet82 = mongoDBRiverDefinition78.getParentTypes();
        boolean boolean83 = mongoDBRiverDefinition78.isMongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject84 = mongoDBRiverDefinition78.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder66.mongoCollectionFilter(basicDBObject84);
        org.elasticsearch.script.ExecutableScript executableScript86 = docScoreNativeScriptFactory15.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject84);
        org.elasticsearch.river.RiverSettings riverSettings87 = new org.elasticsearch.river.RiverSettings(settings14, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject84);
        org.elasticsearch.river.RiverSettings riverSettings88 = new org.elasticsearch.river.RiverSettings(settings13, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject84);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder89 = builder8.mongoCollectionFilter(basicDBObject84);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition90 = builder8.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(executableScript17);
        org.junit.Assert.assertNotNull(executableScript19);
        org.junit.Assert.assertNotNull(executableScript21);
        org.junit.Assert.assertEquals("'" + obj24 + "' != '" + "hi!" + "'", obj24, "hi!");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNull(strSet82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(basicDBObject84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(executableScript86);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition90);
    }

    @Test
    public void test08758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08758");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        boolean boolean13 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        com.mongodb.BasicDBObject basicDBObject14 = mongoDBRiverDefinition11.getMongoOplogFilter();
        java.lang.String str15 = mongoDBRiverDefinition11.getScriptType();
        com.mongodb.MongoClientOptions mongoClientOptions16 = mongoDBRiverDefinition11.getMongoClientOptions();
        java.lang.String str17 = mongoDBRiverDefinition11.getMongoLocalUser();
        java.lang.String str18 = mongoDBRiverDefinition11.getRiverName();
        boolean boolean19 = mongoDBRiverDefinition11.isDropCollection();
        boolean boolean20 = mongoDBRiverDefinition11.isDropCollection();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(basicDBObject14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(mongoClientOptions16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test08759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08759");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition9.getMongoServers();
        boolean boolean14 = mongoDBRiverDefinition9.isAdvancedTransformation();
        boolean boolean15 = mongoDBRiverDefinition9.isSkipInitialImport();
        boolean boolean16 = mongoDBRiverDefinition9.isMongoUseSSL();
        int int17 = mongoDBRiverDefinition9.getSocketTimeout();
        java.lang.String str18 = mongoDBRiverDefinition9.getMongoCollection();
        java.lang.String str19 = mongoDBRiverDefinition9.getIncludeCollection();
        java.lang.String str20 = mongoDBRiverDefinition9.getScriptType();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test08760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08760");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript1 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj3 = docScoreSearchScript1.unwrap((java.lang.Object) 8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.mongoClientOptions(mongoClientOptions6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.mongoCollectionFilter(basicDBObject10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder5.riverName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder15.socketTimeout((int) (byte) 100);
        docScoreSearchScript1.setNextVar("", (java.lang.Object) builder15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder15.riverIndexName("connect_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions24 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.mongoClientOptions(mongoClientOptions24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.mongoLocalPassword("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder27.riverName("secondary_read_preference");
        java.lang.String[] strArray66 = new java.lang.String[] { "options", "name", "name", "include_collection", "disable_index_refresh", "script_type", "advanced_transformation", "name", "size", "include_fields", "ssl_verify_certificate", "admin", "servers", "host", "admin", "ssl_verify_certificate", "script_type", "host", "hi!", "advanced_transformation", "parent_types", "flush_interval", "script_type", "concurrent_requests", "size", "db", "initial_timestamp", "concurrent_bulk_requests", "index", "actions", "name", "concurrent_requests", "skip_initial_import", "connect_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder31.includeFields((java.util.Set<java.lang.String>) strSet67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder22.includeFields((java.util.Set<java.lang.String>) strSet67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder70.statisticsTypeName("db");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder70.riverIndexName("localhost");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions76 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder75.mongoClientOptions(mongoClientOptions76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder75.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder79.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder79.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions84 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder83.mongoClientOptions(mongoClientOptions84);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition86 = builder85.build();
        java.lang.String str87 = mongoDBRiverDefinition86.getMongoDb();
        boolean boolean88 = mongoDBRiverDefinition86.isDisableIndexRefresh();
        boolean boolean89 = mongoDBRiverDefinition86.isSkipInitialImport();
        java.lang.String str90 = mongoDBRiverDefinition86.getMongoOplogNamespace();
        java.lang.String str91 = mongoDBRiverDefinition86.getMongoOplogNamespace();
        boolean boolean92 = mongoDBRiverDefinition86.isDisableIndexRefresh();
        int int93 = mongoDBRiverDefinition86.getConnectTimeout();
        boolean boolean94 = mongoDBRiverDefinition86.isDisableIndexRefresh();
        com.mongodb.BasicDBObject basicDBObject95 = mongoDBRiverDefinition86.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder96 = builder74.mongoCollectionFilter(basicDBObject95);
        org.elasticsearch.river.RiverSettings riverSettings97 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject95);
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + 8 + "'", obj3, 8);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition86);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "null.null" + "'", str90, "null.null");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "null.null" + "'", str91, "null.null");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 10 + "'", int93 == 10);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(basicDBObject95);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test08761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08761");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.typeName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.typeName("include_fields");
        com.mongodb.BasicDBObject basicDBObject9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoCollectionFilter(basicDBObject9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.script("admin");
        java.util.Set<java.lang.String> strSet13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.excludeFields(strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.includeCollection("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.script("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder18.mongoCollection("include_fields");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test08762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08762");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray18 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder10.includeFields((java.util.Set<java.lang.String>) strSet19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.includeCollection("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder21.socketTimeout(1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder21.throttleSize((int) ' ');
        org.bson.types.BSONTimestamp bSONTimestamp28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder21.initialTimestamp(bSONTimestamp28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test08763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08763");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.throttleSize(100);
        org.bson.types.BSONTimestamp bSONTimestamp5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.initialTimestamp(bSONTimestamp5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test08764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08764");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getRiverName();
        java.lang.String str13 = mongoDBRiverDefinition9.getScriptType();
        java.lang.String str14 = mongoDBRiverDefinition9.getStatisticsIndexName();
        boolean boolean15 = mongoDBRiverDefinition9.isAdvancedTransformation();
        boolean boolean16 = mongoDBRiverDefinition9.isSkipInitialImport();
        java.lang.String str17 = mongoDBRiverDefinition9.getStatisticsIndexName();
        java.lang.String str18 = mongoDBRiverDefinition9.getIndexName();
        com.mongodb.MongoClientOptions mongoClientOptions19 = mongoDBRiverDefinition9.getMongoClientOptions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "bulk_size" + "'", str11, "bulk_size");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "bulk_size" + "'", str18, "bulk_size");
        org.junit.Assert.assertNull(mongoClientOptions19);
    }

    @Test
    public void test08765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08765");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoClientOptions(mongoClientOptions7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSecondaryReadPreference(true);
        docScoreSearchScript0.setNextVar("import_all_collections", (java.lang.Object) builder12);
        docScoreSearchScript0.setNextScore((float) (byte) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.mongoClientOptions(mongoClientOptions18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder17.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder21.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder21.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder21.script("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder21.riverIndexName("parent_types");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder21.includeCollection("script_type");
        docScoreSearchScript0.setNextVar("hi!", (java.lang.Object) builder21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions37 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoClientOptions(mongoClientOptions37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder36.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder40.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions45 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.mongoClientOptions(mongoClientOptions45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder44.statisticsIndexName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder44.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder44.typeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder52.connectTimeout(0);
        docScoreSearchScript0.setNextVar("host", (java.lang.Object) builder52);
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test08766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08766");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition9.getMongoServers();
        java.lang.String str14 = mongoDBRiverDefinition9.getMongoLocalUser();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp15 = mongoDBRiverDefinition9.getInitialTimestamp();
        boolean boolean16 = mongoDBRiverDefinition9.isImportAllCollections();
        java.lang.String str17 = mongoDBRiverDefinition9.getMongoOplogNamespace();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(wildcardTimestamp15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "null.null" + "'", str17, "null.null");
    }

    @Test
    public void test08767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08767");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.storeStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.throttleSize(27017);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.mongoDb("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.mongoClientOptions(mongoClientOptions14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.typeName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder17.typeName("include_fields");
        com.mongodb.BasicDBObject basicDBObject22 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.mongoCollectionFilter(basicDBObject22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions27 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.mongoClientOptions(mongoClientOptions27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.mongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.riverIndexName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = builder30.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder30.includeCollection("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder30.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions39 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder38.mongoClientOptions(mongoClientOptions39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder38.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder42.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions47 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoClientOptions(mongoClientOptions47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder46.statisticsIndexName("user");
        java.lang.String[] strArray77 = new java.lang.String[] { "bulk", "include_fields", "filter", "concurrent_bulk_requests", "drop_collection", "local", "servers", "password", "null.null", "disable_index_refresh", "advanced_transformation", "script", "", "parent_types", "type", "advanced_transformation", "port", "admin", "collection", "bulk", "localhost", "index", "actions", "options", "advanced_transformation", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet78 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet78, strArray77);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder46.parentTypes((java.util.Set<java.lang.String>) strSet78);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder37.parentTypes((java.util.Set<java.lang.String>) strSet78);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder23.excludeFields((java.util.Set<java.lang.String>) strSet78);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder10.excludeFields((java.util.Set<java.lang.String>) strSet78);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder83.indexName("user");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test08768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08768");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory4 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = null;
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory4.newScript(strMap5);
        docScoreSearchScript0.setNextVar("localhost", (java.lang.Object) docScoreNativeScriptFactory4);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript9 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj11 = docScoreSearchScript9.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript9.setNextScore((float) 1);
        docScoreSearchScript0.setNextVar("credentials", (java.lang.Object) 1);
        docScoreSearchScript0.setNextScore((float) 0L);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoClientOptions(mongoClientOptions19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject23 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder18.mongoCollectionFilter(basicDBObject23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder18.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder28.riverIndexName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.includeCollection("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.scriptType("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoDb("include_fields");
        docScoreSearchScript0.setNextVar("db", (java.lang.Object) builder38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions41 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.mongoClientOptions(mongoClientOptions41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder40.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder44.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions49 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.mongoClientOptions(mongoClientOptions49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = builder50.build();
        java.lang.String str52 = mongoDBRiverDefinition51.getMongoAdminPassword();
        boolean boolean53 = mongoDBRiverDefinition51.isMongoSecondaryReadPreference();
        java.lang.String str54 = mongoDBRiverDefinition51.getMongoLocalUser();
        java.lang.Object obj55 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition51);
        docScoreSearchScript0.setNextScore((float) 8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions59 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.mongoClientOptions(mongoClientOptions59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder58.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder62.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder62.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder66.connectTimeout((int) (short) 100);
        java.lang.Object obj69 = docScoreSearchScript0.unwrap((java.lang.Object) builder66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions71 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder70.mongoClientOptions(mongoClientOptions71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder70.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject75 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder70.mongoCollectionFilter(basicDBObject75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder70.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder78.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder80.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder80.riverIndexName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder84.includeCollection("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder86.mongoUseSSL(false);
        com.mongodb.MongoClientOptions mongoClientOptions89 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder88.mongoClientOptions(mongoClientOptions89);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder92 = builder90.mongoAdminPassword("password");
        java.lang.Object obj93 = docScoreSearchScript0.unwrap((java.lang.Object) "password");
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextScore(0.0f);
        // The following exception was thrown during execution in test generation
        try {
            float float98 = docScoreSearchScript0.runAsFloat();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + "hi!" + "'", obj11, "hi!");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertEquals("'" + obj93 + "' != '" + "password" + "'", obj93, "password");
    }

    @Test
    public void test08769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08769");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoClientOptions(mongoClientOptions8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder9.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder9.typeName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder9.mongoDb("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder9.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.mongoClientOptions(mongoClientOptions23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.typeName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder26.typeName("include_fields");
        com.mongodb.BasicDBObject basicDBObject31 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.mongoCollectionFilter(basicDBObject31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions34 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.mongoClientOptions(mongoClientOptions34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder33.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.connectTimeout((int) (short) 10);
        java.lang.String[] strArray82 = new java.lang.String[] { "actions", "user", "name", "bulk_size", "", "script_type", "db", "disable_index_refresh", "local", "port", "filter", "gridfs", "drop_collection", "hi!", "include_collection", "secondary_read_preference", "options", "script_type", "index", "import_all_collections", "options", "connect_timeout", "index", "name", "gridfs", "name", "db", "script", "bulk_timeout", "flush_interval", "", "ssl_verify_certificate", "collection", "admin", "include_collection", "concurrent_requests", "secondary_read_preference", "bulk_timeout", "collection", "script_type", "gridfs", "script_type" };
        java.util.LinkedHashSet<java.lang.String> strSet83 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet83, strArray82);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder39.excludeFields((java.util.Set<java.lang.String>) strSet83);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder32.parentTypes((java.util.Set<java.lang.String>) strSet83);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder9.includeFields((java.util.Set<java.lang.String>) strSet83);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet83);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder0.includeCollection("socket_timeout.socket_timeout");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test08770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08770");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript0.setNextScore((float) 1000);
        java.lang.Object obj5 = null;
        java.lang.Object obj6 = docScoreSearchScript0.unwrap(obj5);
        docScoreSearchScript0.setNextScore((float) 10L);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.mongoClientOptions(mongoClientOptions10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder13.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.mongoSSLVerifyCertificate(false);
        java.lang.Object obj22 = docScoreSearchScript0.unwrap((java.lang.Object) builder21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions25 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoClientOptions(mongoClientOptions25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder24.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder28.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.mongoClientOptions(mongoClientOptions33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = builder34.build();
        java.lang.String str36 = mongoDBRiverDefinition35.getMongoDb();
        boolean boolean37 = mongoDBRiverDefinition35.isDisableIndexRefresh();
        boolean boolean38 = mongoDBRiverDefinition35.isSkipInitialImport();
        java.lang.String str39 = mongoDBRiverDefinition35.getMongoOplogNamespace();
        java.lang.String str40 = mongoDBRiverDefinition35.getMongoOplogNamespace();
        java.util.Set<java.lang.String> strSet41 = mongoDBRiverDefinition35.getIncludeFields();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp42 = mongoDBRiverDefinition35.getInitialTimestamp();
        boolean boolean43 = mongoDBRiverDefinition35.isSkipInitialImport();
        docScoreSearchScript0.setNextVar("local", (java.lang.Object) mongoDBRiverDefinition35);
        // The following exception was thrown during execution in test generation
        try {
            double double45 = docScoreSearchScript0.runAsDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "null.null" + "'", str39, "null.null");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "null.null" + "'", str40, "null.null");
        org.junit.Assert.assertNull(strSet41);
        org.junit.Assert.assertNull(wildcardTimestamp42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test08771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08771");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) 8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoClientOptions(mongoClientOptions5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder4.mongoCollectionFilter(basicDBObject9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder4.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder4.riverName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.socketTimeout((int) (byte) 100);
        docScoreSearchScript0.setNextVar("", (java.lang.Object) builder14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.mongoClientOptions(mongoClientOptions21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder20.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject25 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder20.mongoCollectionFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder20.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray38 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder30.includeFields((java.util.Set<java.lang.String>) strSet39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.mongoSecondaryReadPreference(false);
        java.lang.Object obj44 = docScoreSearchScript0.unwrap((java.lang.Object) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions47 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoClientOptions(mongoClientOptions47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder46.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder50.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder50.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions55 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder54.mongoClientOptions(mongoClientOptions55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition57 = builder56.build();
        java.lang.String str58 = mongoDBRiverDefinition57.getMongoDb();
        java.lang.String str59 = mongoDBRiverDefinition57.getStatisticsTypeName();
        boolean boolean60 = mongoDBRiverDefinition57.isImportAllCollections();
        java.lang.String str61 = mongoDBRiverDefinition57.getRiverIndexName();
        docScoreSearchScript0.setNextVar("index", (java.lang.Object) str61);
        docScoreSearchScript0.setNextScore((float) 10);
        docScoreSearchScript0.setNextScore(0.0f);
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext67 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 8 + "'", obj2, 8);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertEquals("'" + obj44 + "' != '" + false + "'", obj44, false);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(str61);
    }

    @Test
    public void test08772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08772");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder12.indexName("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder12.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.mongoSecondaryReadPreference(true);
        java.lang.Class<?> wildcardClass25 = builder24.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test08773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08773");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        com.mongodb.MongoClientOptions mongoClientOptions10 = mongoDBRiverDefinition9.getMongoClientOptions();
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition9.getIncludeFields();
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition9.getMongoOplogFilter();
        com.mongodb.BasicDBObject basicDBObject13 = mongoDBRiverDefinition9.getMongoCollectionFilter();
        boolean boolean14 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        boolean boolean15 = mongoDBRiverDefinition9.isDropCollection();
        java.lang.String str16 = mongoDBRiverDefinition9.getMongoAdminUser();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNull(basicDBObject12);
        org.junit.Assert.assertNull(basicDBObject13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test08774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08774");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.mongoClientOptions(mongoClientOptions6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.mongoCollectionFilter(basicDBObject10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoLocalPassword("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.mongoAdminUser("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoAdminUser("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoClientOptions(mongoClientOptions19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder22.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions27 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.mongoClientOptions(mongoClientOptions27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = builder28.build();
        java.lang.String str30 = mongoDBRiverDefinition29.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions31 = mongoDBRiverDefinition29.getMongoClientOptions();
        boolean boolean32 = mongoDBRiverDefinition29.isMongoSecondaryReadPreference();
        int int33 = mongoDBRiverDefinition29.getThrottleSize();
        java.lang.String str34 = mongoDBRiverDefinition29.getMongoAdminUser();
        java.lang.String str35 = mongoDBRiverDefinition29.getScriptType();
        java.util.List<com.mongodb.ServerAddress> serverAddressList36 = mongoDBRiverDefinition29.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder15.mongoServers(serverAddressList36);
        java.lang.Object obj38 = docScoreSearchScript0.unwrap((java.lang.Object) builder37);
        org.elasticsearch.common.settings.Settings settings39 = null;
        org.elasticsearch.common.settings.Settings settings42 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions44 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoClientOptions(mongoClientOptions44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder43.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder47.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder47.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder47.throttleSize(0);
        org.elasticsearch.common.settings.Settings settings54 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions56 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder55.mongoClientOptions(mongoClientOptions56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder57.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder59.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions63 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder62.mongoClientOptions(mongoClientOptions63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder62.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder66.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder66.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions71 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder70.mongoClientOptions(mongoClientOptions71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition73 = builder72.build();
        java.lang.String str74 = mongoDBRiverDefinition73.getMongoAdminPassword();
        boolean boolean75 = mongoDBRiverDefinition73.isMongoSecondaryReadPreference();
        java.lang.String str76 = mongoDBRiverDefinition73.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet77 = mongoDBRiverDefinition73.getParentTypes();
        boolean boolean78 = mongoDBRiverDefinition73.isMongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject79 = mongoDBRiverDefinition73.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder59.mongoCollectionFilter(basicDBObject79);
        org.elasticsearch.river.RiverSettings riverSettings81 = new org.elasticsearch.river.RiverSettings(settings54, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject79);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder47.mongoCollectionFilter(basicDBObject79);
        org.elasticsearch.river.RiverSettings riverSettings83 = new org.elasticsearch.river.RiverSettings(settings42, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject79);
        org.elasticsearch.script.ScriptService scriptService84 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition85 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("drop_collection", "bulk_timeout", riverSettings83, scriptService84);
        java.util.Map<java.lang.String, java.lang.Object> strMap86 = riverSettings83.settings();
        org.elasticsearch.river.RiverSettings riverSettings87 = new org.elasticsearch.river.RiverSettings(settings39, strMap86);
        java.util.Map<java.lang.String, java.lang.Object> strMap88 = riverSettings87.settings();
        org.elasticsearch.common.settings.Settings settings89 = riverSettings87.globalSettings();
        java.util.Map<java.lang.String, java.lang.Object> strMap90 = riverSettings87.settings();
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextSource(strMap90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(mongoClientOptions31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(serverAddressList36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNull(strSet77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(basicDBObject79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition85);
        org.junit.Assert.assertNotNull(strMap86);
        org.junit.Assert.assertNotNull(strMap88);
        org.junit.Assert.assertNull(settings89);
        org.junit.Assert.assertNotNull(strMap90);
    }

    @Test
    public void test08775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08775");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj1 = null;
        java.lang.Object obj2 = docScoreSearchScript0.unwrap(obj1);
        docScoreSearchScript0.setNextScore((float) '#');
        docScoreSearchScript0.setNextScore((float) 1000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoClientOptions(mongoClientOptions8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoCollection("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder15.connectTimeout(1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.socketTimeout((int) 'a');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder19.riverIndexName("null.null");
        java.lang.Object obj24 = docScoreSearchScript0.unwrap((java.lang.Object) builder19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder19.riverName("null.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder19.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.mongoLocalPassword("disable_index_refresh.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions32 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.mongoClientOptions(mongoClientOptions32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.mongoLocalUser("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder39.socketTimeout((int) 'a');
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory42 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap43 = null;
        org.elasticsearch.script.ExecutableScript executableScript44 = docScoreNativeScriptFactory42.newScript(strMap43);
        java.util.Map<java.lang.String, java.lang.Object> strMap45 = null;
        org.elasticsearch.script.ExecutableScript executableScript46 = docScoreNativeScriptFactory42.newScript(strMap45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions48 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder47.mongoClientOptions(mongoClientOptions48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder47.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder51.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder51.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions56 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder55.mongoClientOptions(mongoClientOptions56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition58 = builder57.build();
        java.lang.String str59 = mongoDBRiverDefinition58.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions60 = mongoDBRiverDefinition58.getMongoClientOptions();
        boolean boolean61 = mongoDBRiverDefinition58.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions62 = mongoDBRiverDefinition58.getMongoClientOptions();
        java.lang.String str63 = mongoDBRiverDefinition58.getScript();
        com.mongodb.BasicDBObject basicDBObject64 = mongoDBRiverDefinition58.getMongoOplogFilter();
        java.lang.String str65 = mongoDBRiverDefinition58.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject66 = mongoDBRiverDefinition58.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript67 = docScoreNativeScriptFactory42.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder39.mongoCollectionFilter(basicDBObject66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder28.mongoOplogFilter(basicDBObject66);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(executableScript44);
        org.junit.Assert.assertNotNull(executableScript46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNull(mongoClientOptions60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(mongoClientOptions62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(basicDBObject64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(basicDBObject66);
        org.junit.Assert.assertNotNull(executableScript67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test08776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08776");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.riverName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.socketTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder14.indexName("exclude_fields");
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.mongoClientOptions(mongoClientOptions21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.script("include_fields.include_fields");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test08777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08777");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str13 = mongoDBRiverDefinition11.getScript();
        boolean boolean14 = mongoDBRiverDefinition11.isStoreStatistics();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition11.getParentTypes();
        boolean boolean16 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        boolean boolean17 = mongoDBRiverDefinition11.isImportAllCollections();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test08778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08778");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isSkipInitialImport();
        boolean boolean12 = mongoDBRiverDefinition9.isMongoGridFS();
        int int13 = mongoDBRiverDefinition9.getSocketTimeout();
        java.lang.String str14 = mongoDBRiverDefinition9.getRiverName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test08779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08779");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.riverIndexName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.includeCollection("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoUseSSL(false);
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoClientOptions(mongoClientOptions19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.mongoAdminPassword("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.mongoLocalUser("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoCollection("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder24.throttleSize(27017);
        org.elasticsearch.common.settings.Settings settings31 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.mongoClientOptions(mongoClientOptions33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder32.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder36.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions41 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.mongoClientOptions(mongoClientOptions41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition43 = builder42.build();
        java.lang.String str44 = mongoDBRiverDefinition43.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions45 = mongoDBRiverDefinition43.getMongoClientOptions();
        boolean boolean46 = mongoDBRiverDefinition43.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions47 = mongoDBRiverDefinition43.getMongoClientOptions();
        java.lang.String str48 = mongoDBRiverDefinition43.getScript();
        com.mongodb.BasicDBObject basicDBObject49 = mongoDBRiverDefinition43.getMongoOplogFilter();
        java.lang.String str50 = mongoDBRiverDefinition43.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject51 = mongoDBRiverDefinition43.getMongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings52 = new org.elasticsearch.river.RiverSettings(settings31, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject51);
        org.elasticsearch.script.ScriptService scriptService53 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition54 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("null.null", "servers", riverSettings52, scriptService53);
        java.lang.String str55 = mongoDBRiverDefinition54.getRiverName();
        java.lang.String str56 = mongoDBRiverDefinition54.getMongoAdminPassword();
        com.mongodb.BasicDBObject basicDBObject57 = mongoDBRiverDefinition54.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder28.mongoOplogFilter(basicDBObject57);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(mongoClientOptions45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(mongoClientOptions47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(basicDBObject49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(basicDBObject51);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "null.null" + "'", str55, "null.null");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(basicDBObject57);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test08780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08780");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.scriptType("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.riverName("flush_interval");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.storeStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.skipInitialImport(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test08781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08781");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.mongoAdminPassword("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoAdminPassword("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.riverName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoLocalPassword("ssl.null");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test08782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08782");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        com.mongodb.MongoClientOptions mongoClientOptions13 = mongoDBRiverDefinition11.getMongoClientOptions();
        java.lang.String str14 = mongoDBRiverDefinition11.getScriptType();
        java.lang.String str15 = mongoDBRiverDefinition11.getScript();
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition11.getParentTypes();
        boolean boolean17 = mongoDBRiverDefinition11.isMongoSSLVerifyCertificate();
        int int18 = mongoDBRiverDefinition11.getThrottleSize();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test08783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08783");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        java.lang.String[] strArray49 = new java.lang.String[] { "actions", "user", "name", "bulk_size", "", "script_type", "db", "disable_index_refresh", "local", "port", "filter", "gridfs", "drop_collection", "hi!", "include_collection", "secondary_read_preference", "options", "script_type", "index", "import_all_collections", "options", "connect_timeout", "index", "name", "gridfs", "name", "db", "script", "bulk_timeout", "flush_interval", "", "ssl_verify_certificate", "collection", "admin", "include_collection", "concurrent_requests", "secondary_read_preference", "bulk_timeout", "collection", "script_type", "gridfs", "script_type" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder6.excludeFields((java.util.Set<java.lang.String>) strSet50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder52.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder52.connectTimeout((int) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder56.connectTimeout((-1));
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test08784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08784");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoDb();
        boolean boolean13 = mongoDBRiverDefinition9.isDisableIndexRefresh();
        java.lang.String str14 = mongoDBRiverDefinition9.getIndexName();
        int int15 = mongoDBRiverDefinition9.getSocketTimeout();
        java.lang.String str16 = mongoDBRiverDefinition9.getScript();
        boolean boolean17 = mongoDBRiverDefinition9.isSkipInitialImport();
        boolean boolean18 = mongoDBRiverDefinition9.isSkipInitialImport();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "bulk_size" + "'", str14, "bulk_size");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test08785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08785");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        boolean boolean12 = mongoDBRiverDefinition9.isMongoSecondaryReadPreference();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition9.getIncludeFields();
        java.lang.String str14 = mongoDBRiverDefinition9.getIndexName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "bulk_size" + "'", str14, "bulk_size");
    }

    @Test
    public void test08786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08786");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition9.getMongoServers();
        boolean boolean14 = mongoDBRiverDefinition9.isAdvancedTransformation();
        boolean boolean15 = mongoDBRiverDefinition9.isSkipInitialImport();
        boolean boolean16 = mongoDBRiverDefinition9.isMongoUseSSL();
        int int17 = mongoDBRiverDefinition9.getConnectTimeout();
        boolean boolean18 = mongoDBRiverDefinition9.isMongoUseSSL();
        java.lang.String str19 = mongoDBRiverDefinition9.getIncludeCollection();
        int int20 = mongoDBRiverDefinition9.getConnectTimeout();
        com.mongodb.MongoClientOptions mongoClientOptions21 = mongoDBRiverDefinition9.getMongoClientOptions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(mongoClientOptions21);
    }

    @Test
    public void test08787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08787");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSSLVerifyCertificate(false);
        com.mongodb.BasicDBObject basicDBObject13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.mongoOplogFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoLocalPassword("type");
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.mongoClientOptions(mongoClientOptions21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.mongoAdminUser("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder22.mongoLocalPassword("disable_index_refresh");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test08788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08788");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoAdminPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.getTypeName();
        java.lang.String str14 = mongoDBRiverDefinition9.getMongoCollection();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition9.getParentTypes();
        boolean boolean16 = mongoDBRiverDefinition9.isDropCollection();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test08789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08789");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        int int10 = mongoDBRiverDefinition9.getSocketTimeout();
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition9.getIncludeFields();
        java.lang.String str12 = mongoDBRiverDefinition9.getStatisticsTypeName();
        boolean boolean13 = mongoDBRiverDefinition9.isMongoUseSSL();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test08790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08790");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.riverName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.indexName("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.mongoAdminUser("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder12.mongoCollection("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder12.mongoAdminPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder12.script("drop_collection.drop_collection");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test08791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08791");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoAdminPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.getTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList14 = mongoDBRiverDefinition9.getMongoServers();
        boolean boolean15 = mongoDBRiverDefinition9.isDisableIndexRefresh();
        java.lang.String str16 = mongoDBRiverDefinition9.getStatisticsIndexName();
        java.lang.String str17 = mongoDBRiverDefinition9.getStatisticsIndexName();
        java.lang.String str18 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str19 = mongoDBRiverDefinition9.getMongoOplogNamespace();
        boolean boolean20 = mongoDBRiverDefinition9.isStoreStatistics();
        java.lang.String str21 = mongoDBRiverDefinition9.getIncludeCollection();
        java.lang.String str22 = mongoDBRiverDefinition9.getTypeName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(serverAddressList14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "bulk_size" + "'", str18, "bulk_size");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "null.null" + "'", str19, "null.null");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test08792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08792");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.statisticsIndexName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.mongoSecondaryReadPreference(false);
        org.elasticsearch.common.settings.Settings settings15 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions17 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoClientOptions(mongoClientOptions17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.socketTimeout((int) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.mongoDb("include_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions26 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.mongoClientOptions(mongoClientOptions26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder25.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder29.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions34 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.mongoClientOptions(mongoClientOptions34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder33.statisticsIndexName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.mongoAdminUser("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder37.mongoLocalPassword("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder37.statisticsTypeName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder37.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions47 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoClientOptions(mongoClientOptions47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder46.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject51 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder46.mongoCollectionFilter(basicDBObject51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder46.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder46.riverName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder56.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.indexName("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder58.mongoAdminUser("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions64 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder63.mongoClientOptions(mongoClientOptions64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder63.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder67.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder67.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions72 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder71.mongoClientOptions(mongoClientOptions72);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition74 = builder73.build();
        java.lang.String str75 = mongoDBRiverDefinition74.getMongoDb();
        java.lang.String str76 = mongoDBRiverDefinition74.getStatisticsTypeName();
        boolean boolean77 = mongoDBRiverDefinition74.isImportAllCollections();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp78 = mongoDBRiverDefinition74.getInitialTimestamp();
        int int79 = mongoDBRiverDefinition74.getSocketTimeout();
        int int80 = mongoDBRiverDefinition74.getConnectTimeout();
        java.lang.String str81 = mongoDBRiverDefinition74.getMongoAdminUser();
        java.lang.String str82 = mongoDBRiverDefinition74.getMongoAdminUser();
        java.lang.String str83 = mongoDBRiverDefinition74.getTypeName();
        java.util.Set<java.lang.String> strSet84 = mongoDBRiverDefinition74.getIncludeFields();
        java.lang.String str85 = mongoDBRiverDefinition74.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject86 = mongoDBRiverDefinition74.getMongoCollectionFilter();
        com.mongodb.BasicDBObject basicDBObject87 = mongoDBRiverDefinition74.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder62.mongoCollectionFilter(basicDBObject87);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder89 = builder37.mongoCollectionFilter(basicDBObject87);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder24.mongoOplogFilter(basicDBObject87);
        org.elasticsearch.river.RiverSettings riverSettings91 = new org.elasticsearch.river.RiverSettings(settings15, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject87);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder92 = builder8.mongoCollectionFilter(basicDBObject87);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder94 = builder92.riverName("concurrent_requests");
        com.mongodb.BasicDBObject basicDBObject95 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder96 = builder94.mongoCollectionFilter(basicDBObject95);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(wildcardTimestamp78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNull(strSet84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(basicDBObject86);
        org.junit.Assert.assertNotNull(basicDBObject87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test08793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08793");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.typeName("include_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.statisticsIndexName("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder6.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.mongoClientOptions(mongoClientOptions14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder17.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions22 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.mongoClientOptions(mongoClientOptions22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = builder23.build();
        java.lang.String str25 = mongoDBRiverDefinition24.getMongoDb();
        boolean boolean26 = mongoDBRiverDefinition24.isMongoSecondaryReadPreference();
        com.mongodb.BasicDBObject basicDBObject27 = mongoDBRiverDefinition24.getMongoOplogFilter();
        com.mongodb.BasicDBObject basicDBObject28 = mongoDBRiverDefinition24.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder6.mongoCollectionFilter(basicDBObject28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions31 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.mongoClientOptions(mongoClientOptions31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder30.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject35 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder30.mongoCollectionFilter(basicDBObject35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder30.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder38.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.mongoSSLVerifyCertificate(false);
        com.mongodb.BasicDBObject basicDBObject43 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder40.mongoOplogFilter(basicDBObject43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder40.indexName("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.statisticsIndexName("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder50.throttleSize(0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder50.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions56 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder55.mongoClientOptions(mongoClientOptions56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder55.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject60 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder55.mongoCollectionFilter(basicDBObject60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder55.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition64 = builder63.build();
        boolean boolean65 = mongoDBRiverDefinition64.isStoreStatistics();
        boolean boolean66 = mongoDBRiverDefinition64.isMongoSSLVerifyCertificate();
        java.lang.String str67 = mongoDBRiverDefinition64.getStatisticsTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList68 = mongoDBRiverDefinition64.getMongoServers();
        boolean boolean69 = mongoDBRiverDefinition64.isMongoUseSSL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList70 = mongoDBRiverDefinition64.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder54.mongoServers(serverAddressList70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder29.mongoServers(serverAddressList70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder29.mongoLocalUser("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(basicDBObject27);
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(serverAddressList68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(serverAddressList70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test08794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08794");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str13 = mongoDBRiverDefinition11.getStatisticsTypeName();
        boolean boolean14 = mongoDBRiverDefinition11.isImportAllCollections();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp15 = mongoDBRiverDefinition11.getInitialTimestamp();
        int int16 = mongoDBRiverDefinition11.getSocketTimeout();
        java.util.Set<java.lang.String> strSet17 = mongoDBRiverDefinition11.getIncludeFields();
        java.lang.String str18 = mongoDBRiverDefinition11.getMongoAdminPassword();
        java.lang.String str19 = mongoDBRiverDefinition11.getScript();
        com.mongodb.BasicDBObject basicDBObject20 = mongoDBRiverDefinition11.getMongoOplogFilter();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(wildcardTimestamp15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(basicDBObject20);
    }

    @Test
    public void test08795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08795");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        com.mongodb.MongoClientOptions mongoClientOptions10 = mongoDBRiverDefinition9.getMongoClientOptions();
        java.lang.String str11 = mongoDBRiverDefinition9.getIncludeCollection();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoCollection();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition9.getExcludeFields();
        java.lang.String str14 = mongoDBRiverDefinition9.getScript();
        java.lang.String str15 = mongoDBRiverDefinition9.getMongoDb();
        com.mongodb.BasicDBObject basicDBObject16 = mongoDBRiverDefinition9.getMongoOplogFilter();
        boolean boolean17 = mongoDBRiverDefinition9.isImportAllCollections();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(basicDBObject16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test08796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08796");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.typeName("options");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript9 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj11 = docScoreSearchScript9.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript9.setNextScore((float) 1);
        docScoreSearchScript9.setNextScore((float) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.mongoClientOptions(mongoClientOptions18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder19.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder19.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.typeName("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder25.indexName("host");
        docScoreSearchScript9.setNextVar("drop_collection", (java.lang.Object) builder25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions32 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.mongoClientOptions(mongoClientOptions32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder31.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject36 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder31.mongoCollectionFilter(basicDBObject36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder31.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder39.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray49 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder41.includeFields((java.util.Set<java.lang.String>) strSet50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder25.includeFields((java.util.Set<java.lang.String>) strSet50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder4.excludeFields((java.util.Set<java.lang.String>) strSet50);
        java.util.List<com.mongodb.ServerAddress> serverAddressList55 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder4.mongoServers(serverAddressList55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder4.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder60.typeName("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder60.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder60.indexName("ssl.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder60.mongoCollection("name");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + "hi!" + "'", obj11, "hi!");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test08797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08797");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str13 = mongoDBRiverDefinition11.getStatisticsTypeName();
        boolean boolean14 = mongoDBRiverDefinition11.isImportAllCollections();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp15 = mongoDBRiverDefinition11.getInitialTimestamp();
        int int16 = mongoDBRiverDefinition11.getSocketTimeout();
        int int17 = mongoDBRiverDefinition11.getConnectTimeout();
        java.lang.String str18 = mongoDBRiverDefinition11.getMongoAdminUser();
        java.lang.String str19 = mongoDBRiverDefinition11.getMongoAdminUser();
        java.lang.String str20 = mongoDBRiverDefinition11.getTypeName();
        java.util.Set<java.lang.String> strSet21 = mongoDBRiverDefinition11.getIncludeFields();
        java.lang.String str22 = mongoDBRiverDefinition11.getMongoCollection();
        java.lang.String str23 = mongoDBRiverDefinition11.getMongoOplogNamespace();
        com.mongodb.BasicDBObject basicDBObject24 = mongoDBRiverDefinition11.getMongoCollectionFilter();
        java.util.Set<java.lang.String> strSet25 = mongoDBRiverDefinition11.getExcludeFields();
        com.mongodb.BasicDBObject basicDBObject26 = mongoDBRiverDefinition11.getMongoCollectionFilter();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(wildcardTimestamp15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "null.null" + "'", str23, "null.null");
        org.junit.Assert.assertNotNull(basicDBObject24);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNotNull(basicDBObject26);
    }

    @Test
    public void test08798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08798");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.typeName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.connectTimeout((int) (byte) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = builder2.build();
        int int8 = mongoDBRiverDefinition7.getConnectTimeout();
        int int9 = mongoDBRiverDefinition7.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test08799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08799");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray18 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder10.includeFields((java.util.Set<java.lang.String>) strSet19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder10.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder10.statisticsTypeName("db");
        com.mongodb.MongoClientOptions mongoClientOptions26 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder10.mongoClientOptions(mongoClientOptions26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder10.mongoSSLVerifyCertificate(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test08800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08800");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str13 = mongoDBRiverDefinition11.getScript();
        com.mongodb.MongoClientOptions mongoClientOptions14 = mongoDBRiverDefinition11.getMongoClientOptions();
        java.lang.String str15 = mongoDBRiverDefinition11.getMongoCollection();
        boolean boolean16 = mongoDBRiverDefinition11.isMongoGridFS();
        java.lang.String str17 = mongoDBRiverDefinition11.getRiverName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(mongoClientOptions14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test08801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08801");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.riverIndexName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.connectTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder10.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.advancedTransformation(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test08802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08802");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions13 = mongoDBRiverDefinition11.getMongoClientOptions();
        boolean boolean14 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions15 = mongoDBRiverDefinition11.getMongoClientOptions();
        java.lang.String str16 = mongoDBRiverDefinition11.getRiverName();
        java.util.Set<java.lang.String> strSet17 = mongoDBRiverDefinition11.getParentTypes();
        java.util.Set<java.lang.String> strSet18 = mongoDBRiverDefinition11.getParentTypes();
        com.mongodb.MongoClientOptions mongoClientOptions19 = mongoDBRiverDefinition11.getMongoClientOptions();
        java.lang.String str20 = mongoDBRiverDefinition11.getStatisticsIndexName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNull(mongoClientOptions19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test08803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08803");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str13 = mongoDBRiverDefinition11.getScript();
        java.lang.String str14 = mongoDBRiverDefinition11.getMongoCollection();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition11.getIncludeFields();
        com.mongodb.MongoClientOptions mongoClientOptions16 = mongoDBRiverDefinition11.getMongoClientOptions();
        boolean boolean17 = mongoDBRiverDefinition11.isMongoUseSSL();
        java.lang.String str18 = mongoDBRiverDefinition11.getScript();
        java.lang.String str19 = mongoDBRiverDefinition11.getTypeName();
        boolean boolean20 = mongoDBRiverDefinition11.isMongoGridFS();
        int int21 = mongoDBRiverDefinition11.getThrottleSize();
        java.util.Set<java.lang.String> strSet22 = mongoDBRiverDefinition11.getIncludeFields();
        java.lang.String str23 = mongoDBRiverDefinition11.getTypeName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test08804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08804");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.mongoClientOptions(mongoClientOptions6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.mongoCollectionFilter(basicDBObject10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray23 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder15.includeFields((java.util.Set<java.lang.String>) strSet24);
        java.lang.Object obj27 = docScoreSearchScript0.unwrap((java.lang.Object) builder15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder15.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.riverName("port");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory32 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap33 = null;
        org.elasticsearch.script.ExecutableScript executableScript34 = docScoreNativeScriptFactory32.newScript(strMap33);
        java.util.Map<java.lang.String, java.lang.Object> strMap35 = null;
        org.elasticsearch.script.ExecutableScript executableScript36 = docScoreNativeScriptFactory32.newScript(strMap35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions38 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.mongoClientOptions(mongoClientOptions38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder37.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder41.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions46 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder45.mongoClientOptions(mongoClientOptions46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = builder47.build();
        java.lang.String str49 = mongoDBRiverDefinition48.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions50 = mongoDBRiverDefinition48.getMongoClientOptions();
        boolean boolean51 = mongoDBRiverDefinition48.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions52 = mongoDBRiverDefinition48.getMongoClientOptions();
        java.lang.String str53 = mongoDBRiverDefinition48.getScript();
        com.mongodb.BasicDBObject basicDBObject54 = mongoDBRiverDefinition48.getMongoOplogFilter();
        java.lang.String str55 = mongoDBRiverDefinition48.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject56 = mongoDBRiverDefinition48.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript57 = docScoreNativeScriptFactory32.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder31.mongoCollectionFilter(basicDBObject56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.mongoLocalPassword("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder60.statisticsTypeName("socket_timeout.socket_timeout");
        com.mongodb.MongoClientOptions mongoClientOptions63 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder62.mongoClientOptions(mongoClientOptions63);
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(executableScript34);
        org.junit.Assert.assertNotNull(executableScript36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNull(mongoClientOptions50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(mongoClientOptions52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(basicDBObject54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(basicDBObject56);
        org.junit.Assert.assertNotNull(executableScript57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test08805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08805");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str13 = mongoDBRiverDefinition11.getScript();
        com.mongodb.MongoClientOptions mongoClientOptions14 = mongoDBRiverDefinition11.getMongoClientOptions();
        java.lang.String str15 = mongoDBRiverDefinition11.getStatisticsTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = mongoDBRiverDefinition11.getMongoServers();
        java.util.Set<java.lang.String> strSet17 = mongoDBRiverDefinition11.getIncludeFields();
        boolean boolean18 = mongoDBRiverDefinition11.isStoreStatistics();
        java.lang.String str19 = mongoDBRiverDefinition11.getIndexName();
        java.lang.String str20 = mongoDBRiverDefinition11.getStatisticsIndexName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(mongoClientOptions14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test08806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08806");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.typeName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.connectTimeout((int) (byte) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.throttleSize((-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoClientOptions(mongoClientOptions12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.socketTimeout((int) (byte) 100);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript20 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj22 = docScoreSearchScript20.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript20.setNextScore((float) 1);
        docScoreSearchScript20.setNextScore((float) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions29 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.mongoClientOptions(mongoClientOptions29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder30.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder30.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.typeName("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder36.indexName("host");
        docScoreSearchScript20.setNextVar("drop_collection", (java.lang.Object) builder36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions43 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.mongoClientOptions(mongoClientOptions43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder42.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject47 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder42.mongoCollectionFilter(basicDBObject47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder42.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder50.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder52.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray60 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder52.includeFields((java.util.Set<java.lang.String>) strSet61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder36.includeFields((java.util.Set<java.lang.String>) strSet61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder17.parentTypes((java.util.Set<java.lang.String>) strSet61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder6.parentTypes((java.util.Set<java.lang.String>) strSet61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder6.mongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions70 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder69.mongoClientOptions(mongoClientOptions70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder69.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder73.mongoAdminUser("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder75.statisticsIndexName("flush_interval");
        com.mongodb.MongoClientOptions mongoClientOptions78 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder77.mongoClientOptions(mongoClientOptions78);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions81 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder80.mongoClientOptions(mongoClientOptions81);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder80.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject85 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder80.mongoCollectionFilter(basicDBObject85);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder80.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition89 = builder88.build();
        boolean boolean90 = mongoDBRiverDefinition89.isDisableIndexRefresh();
        java.util.List<com.mongodb.ServerAddress> serverAddressList91 = mongoDBRiverDefinition89.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder92 = builder77.mongoServers(serverAddressList91);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder93 = builder6.mongoServers(serverAddressList91);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder95 = builder6.importAllCollections(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + "hi!" + "'", obj22, "hi!");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(serverAddressList91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test08807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08807");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        boolean boolean13 = mongoDBRiverDefinition11.isDisableIndexRefresh();
        int int14 = mongoDBRiverDefinition11.getConnectTimeout();
        java.lang.String str15 = mongoDBRiverDefinition11.getStatisticsTypeName();
        boolean boolean16 = mongoDBRiverDefinition11.isMongoSSLVerifyCertificate();
        java.util.Set<java.lang.String> strSet17 = mongoDBRiverDefinition11.getIncludeFields();
        boolean boolean18 = mongoDBRiverDefinition11.isMongoGridFS();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test08808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08808");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getRiverName();
        java.lang.String str13 = mongoDBRiverDefinition9.getScriptType();
        java.lang.String str14 = mongoDBRiverDefinition9.getStatisticsIndexName();
        boolean boolean15 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.lang.String str16 = mongoDBRiverDefinition9.getMongoOplogNamespace();
        java.lang.String str17 = mongoDBRiverDefinition9.getRiverIndexName();
        boolean boolean18 = mongoDBRiverDefinition9.isMongoGridFS();
        boolean boolean19 = mongoDBRiverDefinition9.isMongoSecondaryReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "bulk_size" + "'", str11, "bulk_size");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "null.null" + "'", str16, "null.null");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test08809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08809");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        com.mongodb.BasicDBObject basicDBObject9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoCollectionFilter(basicDBObject9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoUseSSL(true);
        java.util.Set<java.lang.String> strSet13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.includeFields(strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.scriptType("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.mongoClientOptions(mongoClientOptions20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder19.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder23.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.connectTimeout((int) (short) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.indexName("hi!");
        java.lang.String[] strArray45 = new java.lang.String[] { "disable_index_refresh", "collection", "host", "user", "script_type", "socket_timeout", "include_fields", "bulk", "connect_timeout", "actions", "collection", "connect_timeout", "type" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder29.excludeFields((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder18.includeFields((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder18.mongoLocalPassword("flush_interval");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test08810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08810");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.typeName("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.riverName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.mongoClientOptions(mongoClientOptions18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder17.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder21.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions26 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.mongoClientOptions(mongoClientOptions26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = builder27.build();
        java.lang.String str29 = mongoDBRiverDefinition28.getMongoDb();
        com.mongodb.MongoClientOptions mongoClientOptions30 = mongoDBRiverDefinition28.getMongoClientOptions();
        java.lang.String str31 = mongoDBRiverDefinition28.getScriptType();
        boolean boolean32 = mongoDBRiverDefinition28.isDropCollection();
        int int33 = mongoDBRiverDefinition28.getConnectTimeout();
        boolean boolean34 = mongoDBRiverDefinition28.isMongoSecondaryReadPreference();
        java.util.List<com.mongodb.ServerAddress> serverAddressList35 = mongoDBRiverDefinition28.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder16.mongoServers(serverAddressList35);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(mongoClientOptions30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(serverAddressList35);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test08811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08811");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.common.settings.Settings settings3 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory4 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = null;
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory4.newScript(strMap5);
        java.util.Map<java.lang.String, java.lang.Object> strMap7 = null;
        org.elasticsearch.script.ExecutableScript executableScript8 = docScoreNativeScriptFactory4.newScript(strMap7);
        java.util.Map<java.lang.String, java.lang.Object> strMap9 = null;
        org.elasticsearch.script.ExecutableScript executableScript10 = docScoreNativeScriptFactory4.newScript(strMap9);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript11 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj13 = docScoreSearchScript11.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript11.setNextScore((float) 1);
        docScoreSearchScript11.setNextScore((float) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.mongoClientOptions(mongoClientOptions20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder21.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder21.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.typeName("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder27.indexName("host");
        docScoreSearchScript11.setNextVar("drop_collection", (java.lang.Object) builder27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions34 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.mongoClientOptions(mongoClientOptions34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder33.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject38 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder33.mongoCollectionFilter(basicDBObject38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder33.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray51 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder43.includeFields((java.util.Set<java.lang.String>) strSet52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder27.includeFields((java.util.Set<java.lang.String>) strSet52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions57 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder56.mongoClientOptions(mongoClientOptions57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder56.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder60.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder60.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions65 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder64.mongoClientOptions(mongoClientOptions65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition67 = builder66.build();
        java.lang.String str68 = mongoDBRiverDefinition67.getMongoAdminPassword();
        boolean boolean69 = mongoDBRiverDefinition67.isMongoSecondaryReadPreference();
        java.lang.String str70 = mongoDBRiverDefinition67.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet71 = mongoDBRiverDefinition67.getParentTypes();
        boolean boolean72 = mongoDBRiverDefinition67.isMongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject73 = mongoDBRiverDefinition67.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder55.mongoCollectionFilter(basicDBObject73);
        org.elasticsearch.script.ExecutableScript executableScript75 = docScoreNativeScriptFactory4.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject73);
        org.elasticsearch.river.RiverSettings riverSettings76 = new org.elasticsearch.river.RiverSettings(settings3, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject73);
        java.util.Map<java.lang.String, java.lang.Object> strMap77 = riverSettings76.settings();
        java.util.Map<java.lang.String, java.lang.Object> strMap78 = riverSettings76.settings();
        org.elasticsearch.river.RiverSettings riverSettings79 = new org.elasticsearch.river.RiverSettings(settings2, strMap78);
        org.elasticsearch.script.ScriptService scriptService80 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition81 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("options", "connect_timeout", riverSettings79, scriptService80);
        boolean boolean82 = mongoDBRiverDefinition81.isImportAllCollections();
        boolean boolean83 = mongoDBRiverDefinition81.isMongoSecondaryReadPreference();
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertNotNull(executableScript8);
        org.junit.Assert.assertNotNull(executableScript10);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + "hi!" + "'", obj13, "hi!");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNull(strSet71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(basicDBObject73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(executableScript75);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNotNull(strMap78);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test08812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08812");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoDb();
        int int13 = mongoDBRiverDefinition9.getConnectTimeout();
        java.lang.String str14 = mongoDBRiverDefinition9.getStatisticsTypeName();
        int int15 = mongoDBRiverDefinition9.getSocketTimeout();
        java.lang.String str16 = mongoDBRiverDefinition9.getRiverName();
        int int17 = mongoDBRiverDefinition9.getConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test08813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08813");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.typeName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.typeName("include_fields");
        com.mongodb.BasicDBObject basicDBObject9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoCollectionFilter(basicDBObject9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = builder12.build();
        java.lang.String str14 = mongoDBRiverDefinition13.getMongoAdminUser();
        com.mongodb.BasicDBObject basicDBObject15 = mongoDBRiverDefinition13.getMongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = mongoDBRiverDefinition13.getMongoServers();
        java.lang.String str17 = mongoDBRiverDefinition13.getScriptType();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(basicDBObject15);
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test08814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08814");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.mongoClientOptions(mongoClientOptions14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder17.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder17.includeCollection("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.throttleSize((int) (byte) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = builder25.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions28 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.mongoClientOptions(mongoClientOptions28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.typeName("options");
        java.lang.String[] strArray70 = new java.lang.String[] { "script_type", "flush_interval", "localhost", "credentials", "local", "localhost", "user", "exclude_fields", "include_collection", "user", "localhost", "actions", "secondary_read_preference", "gridfs", "exclude_fields", "", "type", "store_statistics", "credentials", "include_collection", "options", "ssl_verify_certificate", "initial_timestamp", "", "localhost", "size", "servers", "disable_index_refresh", "ssl_verify_certificate", "initial_timestamp", "flush_interval", "", "user", "skip_initial_import", "", "parent_types", "filter", "" };
        java.util.LinkedHashSet<java.lang.String> strSet71 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet71, strArray70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder31.includeFields((java.util.Set<java.lang.String>) strSet71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder25.includeFields((java.util.Set<java.lang.String>) strSet71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder10.parentTypes((java.util.Set<java.lang.String>) strSet71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder75.mongoLocalPassword("host");
        com.mongodb.MongoClientOptions mongoClientOptions78 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder75.mongoClientOptions(mongoClientOptions78);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test08815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08815");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(10.0f);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoClientOptions(mongoClientOptions4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder7.throttleSize(0);
        java.lang.Object obj14 = docScoreSearchScript0.unwrap((java.lang.Object) builder7);
        docScoreSearchScript0.setNextScore((float) 0);
        docScoreSearchScript0.setNextScore((float) (byte) 100);
        docScoreSearchScript0.setNextScore((float) (short) -1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(obj14);
    }

    @Test
    public void test08816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08816");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoDb();
        int int13 = mongoDBRiverDefinition9.getConnectTimeout();
        java.lang.String str14 = mongoDBRiverDefinition9.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject15 = mongoDBRiverDefinition9.getMongoOplogFilter();
        com.mongodb.BasicDBObject basicDBObject16 = mongoDBRiverDefinition9.getMongoOplogFilter();
        java.lang.String str17 = mongoDBRiverDefinition9.getMongoAdminPassword();
        boolean boolean18 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        boolean boolean19 = mongoDBRiverDefinition9.isImportAllCollections();
        com.mongodb.BasicDBObject basicDBObject20 = mongoDBRiverDefinition9.getMongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList21 = mongoDBRiverDefinition9.getMongoServers();
        int int22 = mongoDBRiverDefinition9.getConnectTimeout();
        boolean boolean23 = mongoDBRiverDefinition9.isMongoUseSSL();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(basicDBObject15);
        org.junit.Assert.assertNull(basicDBObject16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(basicDBObject20);
        org.junit.Assert.assertNotNull(serverAddressList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test08817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08817");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        com.mongodb.MongoClientOptions mongoClientOptions10 = mongoDBRiverDefinition9.getMongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition9.getMongoCollectionFilter();
        boolean boolean12 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.lang.String str13 = mongoDBRiverDefinition9.getScript();
        boolean boolean14 = mongoDBRiverDefinition9.isSkipInitialImport();
        com.mongodb.BasicDBObject basicDBObject15 = mongoDBRiverDefinition9.getMongoCollectionFilter();
        java.lang.String str16 = mongoDBRiverDefinition9.getMongoDb();
        java.util.List<com.mongodb.ServerAddress> serverAddressList17 = mongoDBRiverDefinition9.getMongoServers();
        java.lang.String str18 = mongoDBRiverDefinition9.getMongoAdminPassword();
        java.util.List<com.mongodb.ServerAddress> serverAddressList19 = mongoDBRiverDefinition9.getMongoServers();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(basicDBObject15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(serverAddressList17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(serverAddressList19);
    }

    @Test
    public void test08818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08818");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        boolean boolean13 = mongoDBRiverDefinition11.isDisableIndexRefresh();
        java.lang.String str14 = mongoDBRiverDefinition11.getIndexName();
        java.lang.String str15 = mongoDBRiverDefinition11.getScript();
        java.lang.String str16 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str17 = mongoDBRiverDefinition11.getTypeName();
        boolean boolean18 = mongoDBRiverDefinition11.isMongoGridFS();
        java.util.Set<java.lang.String> strSet19 = mongoDBRiverDefinition11.getExcludeFields();
        boolean boolean20 = mongoDBRiverDefinition11.isMongoUseSSL();
        boolean boolean21 = mongoDBRiverDefinition11.isMongoUseSSL();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test08819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08819");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.riverIndexName("include_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.mongoClientOptions(mongoClientOptions14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject18 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder13.mongoCollectionFilter(basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder13.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = builder21.build();
        boolean boolean23 = mongoDBRiverDefinition22.isStoreStatistics();
        boolean boolean24 = mongoDBRiverDefinition22.isMongoSSLVerifyCertificate();
        java.lang.String str25 = mongoDBRiverDefinition22.getStatisticsTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList26 = mongoDBRiverDefinition22.getMongoServers();
        java.lang.String str27 = mongoDBRiverDefinition22.getMongoLocalUser();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp28 = mongoDBRiverDefinition22.getInitialTimestamp();
        java.lang.String str29 = mongoDBRiverDefinition22.getTypeName();
        java.util.Set<java.lang.String> strSet30 = mongoDBRiverDefinition22.getIncludeFields();
        java.util.List<com.mongodb.ServerAddress> serverAddressList31 = mongoDBRiverDefinition22.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder12.mongoServers(serverAddressList31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder12.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder12.mongoAdminPassword("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.connectTimeout(8);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(serverAddressList26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(wildcardTimestamp28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertNotNull(serverAddressList31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test08820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08820");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.socketTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.statisticsTypeName("admin");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test08821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08821");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = mongoDBRiverDefinition9.getInitialTimestamp();
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition9.getParentTypes();
        boolean boolean12 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition9.getExcludeFields();
        java.lang.String str14 = mongoDBRiverDefinition9.getMongoAdminPassword();
        boolean boolean15 = mongoDBRiverDefinition9.isDropCollection();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test08822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08822");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoAdminPassword("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.riverIndexName("include_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.script("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoAdminUser("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test08823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08823");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoDb();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition9.getMongoServers();
        boolean boolean14 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        boolean boolean15 = mongoDBRiverDefinition9.isDisableIndexRefresh();
        boolean boolean16 = mongoDBRiverDefinition9.isAdvancedTransformation();
        boolean boolean17 = mongoDBRiverDefinition9.isDisableIndexRefresh();
        boolean boolean18 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean19 = mongoDBRiverDefinition9.isAdvancedTransformation();
        boolean boolean20 = mongoDBRiverDefinition9.isAdvancedTransformation();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test08824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08824");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        int int10 = mongoDBRiverDefinition9.getSocketTimeout();
        java.lang.String str11 = mongoDBRiverDefinition9.getMongoLocalUser();
        boolean boolean12 = mongoDBRiverDefinition9.isMongoUseSSL();
        java.lang.String str13 = mongoDBRiverDefinition9.getStatisticsIndexName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList14 = mongoDBRiverDefinition9.getMongoServers();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(serverAddressList14);
    }

    @Test
    public void test08825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08825");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.riverIndexName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.riverIndexName("connect_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("throttle_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder16.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.mongoAdminPassword("ssl");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test08826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08826");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.riverIndexName("include_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.mongoClientOptions(mongoClientOptions18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder17.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject22 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder17.mongoCollectionFilter(basicDBObject22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder17.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = builder25.build();
        com.mongodb.MongoClientOptions mongoClientOptions27 = mongoDBRiverDefinition26.getMongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject28 = mongoDBRiverDefinition26.getMongoCollectionFilter();
        boolean boolean29 = mongoDBRiverDefinition26.isDisableIndexRefresh();
        boolean boolean30 = mongoDBRiverDefinition26.isStoreStatistics();
        java.lang.String str31 = mongoDBRiverDefinition26.getMongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList32 = mongoDBRiverDefinition26.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder16.mongoServers(serverAddressList32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder16.skipInitialImport(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition26);
        org.junit.Assert.assertNull(mongoClientOptions27);
        org.junit.Assert.assertNull(basicDBObject28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(serverAddressList32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test08827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08827");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder2.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder2.typeName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder2.mongoDb("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder2.socketTimeout(1);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript15 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript15.setNextScore((float) (short) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.mongoClientOptions(mongoClientOptions20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder19.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder23.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions28 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.mongoClientOptions(mongoClientOptions28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder27.statisticsIndexName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder27.mongoSecondaryReadPreference(false);
        com.mongodb.MongoClientOptions mongoClientOptions34 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder27.mongoClientOptions(mongoClientOptions34);
        docScoreSearchScript15.setNextVar("advanced_transformation", (java.lang.Object) builder27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions39 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder38.mongoClientOptions(mongoClientOptions39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.mongoLocalPassword("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder42.riverName("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.socketTimeout((int) (byte) -1);
        docScoreSearchScript15.setNextVar("store_statistics", (java.lang.Object) builder46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder46.mongoLocalUser("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions53 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder52.mongoClientOptions(mongoClientOptions53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder54.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder56.socketTimeout((int) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder56.statisticsIndexName("script_type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions62 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder61.mongoClientOptions(mongoClientOptions62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder61.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject66 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder61.mongoCollectionFilter(basicDBObject66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder61.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder69.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder69.includeCollection("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder69.mongoLocalPassword("gridfs");
        java.util.Set<java.lang.String> strSet76 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder69.includeFields(strSet76);
        java.lang.String[] strArray81 = new java.lang.String[] { "advanced_transformation", "ssl", "secondary_read_preference" };
        java.util.LinkedHashSet<java.lang.String> strSet82 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet82, strArray81);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder77.includeFields((java.util.Set<java.lang.String>) strSet82);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder56.parentTypes((java.util.Set<java.lang.String>) strSet82);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder46.parentTypes((java.util.Set<java.lang.String>) strSet82);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder14.parentTypes((java.util.Set<java.lang.String>) strSet82);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test08828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08828");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoLocalPassword("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.typeName("parent_types");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.mongoDb("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder20.includeCollection("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoUseSSL(true);
        org.elasticsearch.common.settings.Settings settings27 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions29 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.mongoClientOptions(mongoClientOptions29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder28.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder32.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder32.throttleSize(0);
        org.elasticsearch.common.settings.Settings settings39 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions41 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.mongoClientOptions(mongoClientOptions41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions48 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder47.mongoClientOptions(mongoClientOptions48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder47.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder51.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder51.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions56 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder55.mongoClientOptions(mongoClientOptions56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition58 = builder57.build();
        java.lang.String str59 = mongoDBRiverDefinition58.getMongoAdminPassword();
        boolean boolean60 = mongoDBRiverDefinition58.isMongoSecondaryReadPreference();
        java.lang.String str61 = mongoDBRiverDefinition58.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet62 = mongoDBRiverDefinition58.getParentTypes();
        boolean boolean63 = mongoDBRiverDefinition58.isMongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject64 = mongoDBRiverDefinition58.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder44.mongoCollectionFilter(basicDBObject64);
        org.elasticsearch.river.RiverSettings riverSettings66 = new org.elasticsearch.river.RiverSettings(settings39, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder32.mongoCollectionFilter(basicDBObject64);
        org.elasticsearch.river.RiverSettings riverSettings68 = new org.elasticsearch.river.RiverSettings(settings27, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder26.mongoOplogFilter(basicDBObject64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder26.mongoCollection("connect_timeout");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNull(strSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(basicDBObject64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test08829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08829");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoLocalUser("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.typeName("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.typeName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoClientOptions(mongoClientOptions16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.mongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder17.mongoAdminPassword("drop_collection");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript22 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj24 = docScoreSearchScript22.unwrap((java.lang.Object) 8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions27 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.mongoClientOptions(mongoClientOptions27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder26.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject31 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder26.mongoCollectionFilter(basicDBObject31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder26.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder26.riverName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder36.socketTimeout((int) (byte) 100);
        docScoreSearchScript22.setNextVar("", (java.lang.Object) builder36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder36.riverIndexName("connect_timeout");
        java.util.Set<java.lang.String> strSet44 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder36.excludeFields(strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions47 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoClientOptions(mongoClientOptions47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder46.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject51 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder46.mongoCollectionFilter(basicDBObject51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder46.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder54.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder56.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray64 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder56.includeFields((java.util.Set<java.lang.String>) strSet65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder45.parentTypes((java.util.Set<java.lang.String>) strSet65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder21.excludeFields((java.util.Set<java.lang.String>) strSet65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder10.includeFields((java.util.Set<java.lang.String>) strSet65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder10.riverName("localhost");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder72.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder72.mongoDb("disable_index_refresh.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder72.mongoUseSSL(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + obj24 + "' != '" + 8 + "'", obj24, 8);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test08830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08830");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.riverIndexName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.riverIndexName("connect_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("throttle_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.advancedTransformation(false);
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoClientOptions(mongoClientOptions15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoLocalPassword("db");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.connectTimeout((int) (short) 0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test08831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08831");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.connectTimeout((int) (short) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.indexName("hi!");
        java.lang.String[] strArray26 = new java.lang.String[] { "disable_index_refresh", "collection", "host", "user", "script_type", "socket_timeout", "include_fields", "bulk", "connect_timeout", "actions", "collection", "connect_timeout", "type" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder10.excludeFields((java.util.Set<java.lang.String>) strSet27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.riverName("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder33.mongoDb("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.mongoAdminPassword("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test08832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08832");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.common.settings.Settings settings7 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory8 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap9 = null;
        org.elasticsearch.script.ExecutableScript executableScript10 = docScoreNativeScriptFactory8.newScript(strMap9);
        java.util.Map<java.lang.String, java.lang.Object> strMap11 = null;
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory8.newScript(strMap11);
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = null;
        org.elasticsearch.script.ExecutableScript executableScript14 = docScoreNativeScriptFactory8.newScript(strMap13);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript15 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj17 = docScoreSearchScript15.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript15.setNextScore((float) 1);
        docScoreSearchScript15.setNextScore((float) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions24 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.mongoClientOptions(mongoClientOptions24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder25.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder25.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.typeName("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder31.indexName("host");
        docScoreSearchScript15.setNextVar("drop_collection", (java.lang.Object) builder31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions38 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.mongoClientOptions(mongoClientOptions38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder37.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject42 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder37.mongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder37.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder45.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder47.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray55 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder47.includeFields((java.util.Set<java.lang.String>) strSet56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder31.includeFields((java.util.Set<java.lang.String>) strSet56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions61 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder60.mongoClientOptions(mongoClientOptions61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder60.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder64.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder64.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions69 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder68.mongoClientOptions(mongoClientOptions69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition71 = builder70.build();
        java.lang.String str72 = mongoDBRiverDefinition71.getMongoAdminPassword();
        boolean boolean73 = mongoDBRiverDefinition71.isMongoSecondaryReadPreference();
        java.lang.String str74 = mongoDBRiverDefinition71.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet75 = mongoDBRiverDefinition71.getParentTypes();
        boolean boolean76 = mongoDBRiverDefinition71.isMongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject77 = mongoDBRiverDefinition71.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder59.mongoCollectionFilter(basicDBObject77);
        org.elasticsearch.script.ExecutableScript executableScript79 = docScoreNativeScriptFactory8.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject77);
        org.elasticsearch.river.RiverSettings riverSettings80 = new org.elasticsearch.river.RiverSettings(settings7, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject77);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder6.mongoCollectionFilter(basicDBObject77);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder6.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder6.mongoLocalPassword("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder6.connectTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions mongoClientOptions88 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder89 = builder6.mongoClientOptions(mongoClientOptions88);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder91 = builder89.riverName("null.null.null.null");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(executableScript10);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(executableScript14);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "hi!" + "'", obj17, "hi!");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(basicDBObject77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(executableScript79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test08833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08833");
        org.elasticsearch.common.settings.Settings settings8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.mongoClientOptions(mongoClientOptions10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.script("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.mongoClientOptions(mongoClientOptions21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder20.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject25 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder20.mongoCollectionFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.mongoLocalPassword("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.mongoAdminUser("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.mongoAdminUser("gridfs");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory33 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap34 = null;
        org.elasticsearch.script.ExecutableScript executableScript35 = docScoreNativeScriptFactory33.newScript(strMap34);
        java.util.Map<java.lang.String, java.lang.Object> strMap36 = null;
        org.elasticsearch.script.ExecutableScript executableScript37 = docScoreNativeScriptFactory33.newScript(strMap36);
        org.elasticsearch.common.settings.Settings settings38 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions40 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder39.mongoClientOptions(mongoClientOptions40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions47 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoClientOptions(mongoClientOptions47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder46.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder50.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder50.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions55 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder54.mongoClientOptions(mongoClientOptions55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition57 = builder56.build();
        java.lang.String str58 = mongoDBRiverDefinition57.getMongoAdminPassword();
        boolean boolean59 = mongoDBRiverDefinition57.isMongoSecondaryReadPreference();
        java.lang.String str60 = mongoDBRiverDefinition57.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet61 = mongoDBRiverDefinition57.getParentTypes();
        boolean boolean62 = mongoDBRiverDefinition57.isMongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject63 = mongoDBRiverDefinition57.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder43.mongoCollectionFilter(basicDBObject63);
        org.elasticsearch.river.RiverSettings riverSettings65 = new org.elasticsearch.river.RiverSettings(settings38, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject63);
        org.elasticsearch.script.ExecutableScript executableScript66 = docScoreNativeScriptFactory33.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder30.mongoCollectionFilter(basicDBObject63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder19.mongoCollectionFilter(basicDBObject63);
        org.elasticsearch.river.RiverSettings riverSettings69 = new org.elasticsearch.river.RiverSettings(settings8, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject63);
        org.elasticsearch.script.ScriptService scriptService70 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition71 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("throttle_size", "type", riverSettings69, scriptService70);
        org.elasticsearch.common.settings.Settings settings72 = riverSettings69.globalSettings();
        java.util.Map<java.lang.String, java.lang.Object> strMap73 = riverSettings69.settings();
        org.elasticsearch.script.ScriptService scriptService74 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition75 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("include_fields", "user", riverSettings69, scriptService74);
        org.elasticsearch.script.ScriptService scriptService76 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition77 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("script", "gridfs", riverSettings69, scriptService76);
        org.elasticsearch.script.ScriptService scriptService78 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition79 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("", "advanced_transformation", riverSettings69, scriptService78);
        int int80 = mongoDBRiverDefinition79.getConnectTimeout();
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(executableScript35);
        org.junit.Assert.assertNotNull(executableScript37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNull(strSet61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(basicDBObject63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(executableScript66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition71);
        org.junit.Assert.assertNull(settings72);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition75);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition77);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test08834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08834");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isSkipInitialImport();
        boolean boolean12 = mongoDBRiverDefinition9.isMongoSecondaryReadPreference();
        boolean boolean13 = mongoDBRiverDefinition9.isMongoSecondaryReadPreference();
        boolean boolean14 = mongoDBRiverDefinition9.isDropCollection();
        java.lang.String str15 = mongoDBRiverDefinition9.getMongoAdminPassword();
        boolean boolean16 = mongoDBRiverDefinition9.isDropCollection();
        com.mongodb.MongoClientOptions mongoClientOptions17 = mongoDBRiverDefinition9.getMongoClientOptions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(mongoClientOptions17);
    }

    @Test
    public void test08835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08835");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = builder6.build();
        java.lang.String str8 = mongoDBRiverDefinition7.getStatisticsIndexName();
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition7.getExcludeFields();
        java.lang.String str10 = mongoDBRiverDefinition7.getStatisticsIndexName();
        boolean boolean11 = mongoDBRiverDefinition7.isSkipInitialImport();
        java.lang.String str12 = mongoDBRiverDefinition7.getIndexName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test08836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08836");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoAdminPassword();
        boolean boolean13 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        java.lang.String str14 = mongoDBRiverDefinition11.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition11.getParentTypes();
        boolean boolean16 = mongoDBRiverDefinition11.isDisableIndexRefresh();
        java.util.Set<java.lang.String> strSet17 = mongoDBRiverDefinition11.getExcludeFields();
        java.lang.String str18 = mongoDBRiverDefinition11.getTypeName();
        int int19 = mongoDBRiverDefinition11.getThrottleSize();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test08837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08837");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory4 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = null;
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory4.newScript(strMap5);
        docScoreSearchScript0.setNextVar("localhost", (java.lang.Object) docScoreNativeScriptFactory4);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript9 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj11 = docScoreSearchScript9.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript9.setNextScore((float) 1);
        docScoreSearchScript0.setNextVar("credentials", (java.lang.Object) 1);
        docScoreSearchScript0.setNextScore((float) 0L);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoClientOptions(mongoClientOptions19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject23 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder18.mongoCollectionFilter(basicDBObject23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder18.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder28.riverIndexName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.includeCollection("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.scriptType("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoDb("include_fields");
        docScoreSearchScript0.setNextVar("db", (java.lang.Object) builder38);
        docScoreSearchScript0.setNextScore(1.0f);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions43 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.mongoClientOptions(mongoClientOptions43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder42.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject47 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder42.mongoCollectionFilter(basicDBObject47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.mongoLocalPassword("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder48.includeCollection("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder52.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder54.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder54.mongoUseSSL(false);
        java.lang.Object obj59 = docScoreSearchScript0.unwrap((java.lang.Object) builder54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions61 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder60.mongoClientOptions(mongoClientOptions61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder60.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder64.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder64.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions69 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder68.mongoClientOptions(mongoClientOptions69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition71 = builder70.build();
        java.lang.String str72 = mongoDBRiverDefinition71.getMongoDb();
        boolean boolean73 = mongoDBRiverDefinition71.isDisableIndexRefresh();
        boolean boolean74 = mongoDBRiverDefinition71.isSkipInitialImport();
        java.lang.String str75 = mongoDBRiverDefinition71.getMongoOplogNamespace();
        java.lang.String str76 = mongoDBRiverDefinition71.getTypeName();
        java.lang.String str77 = mongoDBRiverDefinition71.getStatisticsTypeName();
        java.util.Set<java.lang.String> strSet78 = mongoDBRiverDefinition71.getIncludeFields();
        java.lang.String str79 = mongoDBRiverDefinition71.getMongoOplogNamespace();
        java.util.List<com.mongodb.ServerAddress> serverAddressList80 = mongoDBRiverDefinition71.getMongoServers();
        java.lang.Object obj81 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition71);
        com.mongodb.MongoClientOptions mongoClientOptions82 = mongoDBRiverDefinition71.getMongoClientOptions();
        java.util.Set<java.lang.String> strSet83 = mongoDBRiverDefinition71.getParentTypes();
        com.mongodb.MongoClientOptions mongoClientOptions84 = mongoDBRiverDefinition71.getMongoClientOptions();
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + "hi!" + "'", obj11, "hi!");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "null.null" + "'", str75, "null.null");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNull(strSet78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "null.null" + "'", str79, "null.null");
        org.junit.Assert.assertNotNull(serverAddressList80);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertNull(mongoClientOptions82);
        org.junit.Assert.assertNull(strSet83);
        org.junit.Assert.assertNull(mongoClientOptions84);
    }

    @Test
    public void test08838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08838");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj1 = null;
        java.lang.Object obj2 = docScoreSearchScript0.unwrap(obj1);
        docScoreSearchScript0.setNextScore((float) '#');
        docScoreSearchScript0.setNextScore((float) 1000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoClientOptions(mongoClientOptions8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoCollection("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder15.connectTimeout(1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.socketTimeout((int) 'a');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder19.riverIndexName("null.null");
        java.lang.Object obj24 = docScoreSearchScript0.unwrap((java.lang.Object) builder19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder19.riverName("null.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions28 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.mongoClientOptions(mongoClientOptions28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder27.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject32 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder27.mongoCollectionFilter(basicDBObject32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.mongoLocalPassword("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.mongoAdminUser("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.mongoAdminUser("gridfs");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory40 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap41 = null;
        org.elasticsearch.script.ExecutableScript executableScript42 = docScoreNativeScriptFactory40.newScript(strMap41);
        java.util.Map<java.lang.String, java.lang.Object> strMap43 = null;
        org.elasticsearch.script.ExecutableScript executableScript44 = docScoreNativeScriptFactory40.newScript(strMap43);
        org.elasticsearch.common.settings.Settings settings45 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions47 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoClientOptions(mongoClientOptions47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder50.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions54 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder53.mongoClientOptions(mongoClientOptions54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder53.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder57.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder57.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions62 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder61.mongoClientOptions(mongoClientOptions62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition64 = builder63.build();
        java.lang.String str65 = mongoDBRiverDefinition64.getMongoAdminPassword();
        boolean boolean66 = mongoDBRiverDefinition64.isMongoSecondaryReadPreference();
        java.lang.String str67 = mongoDBRiverDefinition64.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet68 = mongoDBRiverDefinition64.getParentTypes();
        boolean boolean69 = mongoDBRiverDefinition64.isMongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject70 = mongoDBRiverDefinition64.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder50.mongoCollectionFilter(basicDBObject70);
        org.elasticsearch.river.RiverSettings riverSettings72 = new org.elasticsearch.river.RiverSettings(settings45, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject70);
        org.elasticsearch.script.ExecutableScript executableScript73 = docScoreNativeScriptFactory40.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder37.mongoCollectionFilter(basicDBObject70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition75 = builder74.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList76 = mongoDBRiverDefinition75.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder26.mongoServers(serverAddressList76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder26.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder26.mongoDb("");
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(executableScript42);
        org.junit.Assert.assertNotNull(executableScript44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNull(strSet68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(basicDBObject70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(executableScript73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition75);
        org.junit.Assert.assertNotNull(serverAddressList76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test08839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08839");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoDb();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition9.getMongoServers();
        boolean boolean14 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        boolean boolean15 = mongoDBRiverDefinition9.isDisableIndexRefresh();
        java.lang.String str16 = mongoDBRiverDefinition9.getStatisticsTypeName();
        boolean boolean17 = mongoDBRiverDefinition9.isDropCollection();
        com.mongodb.BasicDBObject basicDBObject18 = mongoDBRiverDefinition9.getMongoOplogFilter();
        java.lang.String str19 = mongoDBRiverDefinition9.getStatisticsIndexName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(basicDBObject18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test08840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08840");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder1.mongoClientOptions(mongoClientOptions2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder1.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder1.mongoCollectionFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder1.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoClientOptions(mongoClientOptions19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.importAllCollections(false);
        com.mongodb.ServerAddress[] serverAddressArray23 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList24 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList24, serverAddressArray23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder18.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder17.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.mongoLocalPassword("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.mongoClientOptions(mongoClientOptions33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder36.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.script("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions44 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoClientOptions(mongoClientOptions44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder43.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject48 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder43.mongoCollectionFilter(basicDBObject48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder49.mongoLocalPassword("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder51.mongoAdminUser("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder53.mongoAdminUser("gridfs");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory56 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap57 = null;
        org.elasticsearch.script.ExecutableScript executableScript58 = docScoreNativeScriptFactory56.newScript(strMap57);
        java.util.Map<java.lang.String, java.lang.Object> strMap59 = null;
        org.elasticsearch.script.ExecutableScript executableScript60 = docScoreNativeScriptFactory56.newScript(strMap59);
        org.elasticsearch.common.settings.Settings settings61 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions63 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder62.mongoClientOptions(mongoClientOptions63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder64.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder66.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions70 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder69.mongoClientOptions(mongoClientOptions70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder69.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder73.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder73.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions78 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder77.mongoClientOptions(mongoClientOptions78);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition80 = builder79.build();
        java.lang.String str81 = mongoDBRiverDefinition80.getMongoAdminPassword();
        boolean boolean82 = mongoDBRiverDefinition80.isMongoSecondaryReadPreference();
        java.lang.String str83 = mongoDBRiverDefinition80.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet84 = mongoDBRiverDefinition80.getParentTypes();
        boolean boolean85 = mongoDBRiverDefinition80.isMongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject86 = mongoDBRiverDefinition80.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder66.mongoCollectionFilter(basicDBObject86);
        org.elasticsearch.river.RiverSettings riverSettings88 = new org.elasticsearch.river.RiverSettings(settings61, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject86);
        org.elasticsearch.script.ExecutableScript executableScript89 = docScoreNativeScriptFactory56.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject86);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder53.mongoCollectionFilter(basicDBObject86);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder91 = builder42.mongoCollectionFilter(basicDBObject86);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder92 = builder29.mongoOplogFilter(basicDBObject86);
        org.elasticsearch.river.RiverSettings riverSettings93 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject86);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(serverAddressArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(executableScript58);
        org.junit.Assert.assertNotNull(executableScript60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNull(strSet84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(basicDBObject86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(executableScript89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test08841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08841");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition9.getMongoOplogFilter();
        boolean boolean13 = mongoDBRiverDefinition9.isDropCollection();
        java.lang.String str14 = mongoDBRiverDefinition9.getMongoAdminUser();
        java.lang.String str15 = mongoDBRiverDefinition9.getRiverIndexName();
        boolean boolean16 = mongoDBRiverDefinition9.isSkipInitialImport();
        java.lang.String str17 = mongoDBRiverDefinition9.getMongoAdminUser();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(basicDBObject12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test08842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08842");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.riverIndexName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.riverIndexName("connect_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("throttle_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.script("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.includeCollection("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder22.riverIndexName("connect_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder28.mongoSSLVerifyCertificate(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test08843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08843");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str13 = mongoDBRiverDefinition11.getStatisticsTypeName();
        boolean boolean14 = mongoDBRiverDefinition11.isImportAllCollections();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp15 = mongoDBRiverDefinition11.getInitialTimestamp();
        int int16 = mongoDBRiverDefinition11.getSocketTimeout();
        int int17 = mongoDBRiverDefinition11.getConnectTimeout();
        java.lang.String str18 = mongoDBRiverDefinition11.getMongoAdminUser();
        java.lang.String str19 = mongoDBRiverDefinition11.getMongoAdminUser();
        java.lang.String str20 = mongoDBRiverDefinition11.getTypeName();
        java.util.Set<java.lang.String> strSet21 = mongoDBRiverDefinition11.getIncludeFields();
        java.lang.String str22 = mongoDBRiverDefinition11.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject23 = mongoDBRiverDefinition11.getMongoCollectionFilter();
        com.mongodb.BasicDBObject basicDBObject24 = mongoDBRiverDefinition11.getMongoCollectionFilter();
        boolean boolean25 = mongoDBRiverDefinition11.isSkipInitialImport();
        java.lang.String str26 = mongoDBRiverDefinition11.getMongoDb();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(wildcardTimestamp15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(basicDBObject23);
        org.junit.Assert.assertNotNull(basicDBObject24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test08844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08844");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSSLVerifyCertificate(false);
        com.mongodb.BasicDBObject basicDBObject13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.mongoOplogFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoAdminPassword("script_type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.statisticsTypeName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions22 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.mongoClientOptions(mongoClientOptions22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder21.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject26 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder21.mongoCollectionFilter(basicDBObject26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.mongoLocalPassword("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.mongoAdminUser("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.mongoAdminUser("gridfs");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory34 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap35 = null;
        org.elasticsearch.script.ExecutableScript executableScript36 = docScoreNativeScriptFactory34.newScript(strMap35);
        java.util.Map<java.lang.String, java.lang.Object> strMap37 = null;
        org.elasticsearch.script.ExecutableScript executableScript38 = docScoreNativeScriptFactory34.newScript(strMap37);
        org.elasticsearch.common.settings.Settings settings39 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions41 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.mongoClientOptions(mongoClientOptions41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions48 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder47.mongoClientOptions(mongoClientOptions48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder47.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder51.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder51.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions56 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder55.mongoClientOptions(mongoClientOptions56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition58 = builder57.build();
        java.lang.String str59 = mongoDBRiverDefinition58.getMongoAdminPassword();
        boolean boolean60 = mongoDBRiverDefinition58.isMongoSecondaryReadPreference();
        java.lang.String str61 = mongoDBRiverDefinition58.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet62 = mongoDBRiverDefinition58.getParentTypes();
        boolean boolean63 = mongoDBRiverDefinition58.isMongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject64 = mongoDBRiverDefinition58.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder44.mongoCollectionFilter(basicDBObject64);
        org.elasticsearch.river.RiverSettings riverSettings66 = new org.elasticsearch.river.RiverSettings(settings39, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject64);
        org.elasticsearch.script.ExecutableScript executableScript67 = docScoreNativeScriptFactory34.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder31.mongoCollectionFilter(basicDBObject64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition69 = builder68.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList70 = mongoDBRiverDefinition69.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder20.mongoServers(serverAddressList70);
        org.bson.types.Binary binary72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder71.initialTimestamp(binary72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(executableScript36);
        org.junit.Assert.assertNotNull(executableScript38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNull(strSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(basicDBObject64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(executableScript67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition69);
        org.junit.Assert.assertNotNull(serverAddressList70);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test08845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08845");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = builder2.build();
        java.lang.String str6 = mongoDBRiverDefinition5.getMongoOplogNamespace();
        boolean boolean7 = mongoDBRiverDefinition5.isStoreStatistics();
        java.lang.String str8 = mongoDBRiverDefinition5.getRiverName();
        boolean boolean9 = mongoDBRiverDefinition5.isDropCollection();
        java.util.Set<java.lang.String> strSet10 = mongoDBRiverDefinition5.getExcludeFields();
        boolean boolean11 = mongoDBRiverDefinition5.isDropCollection();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "null.null" + "'", str6, "null.null");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test08846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08846");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.includeCollection("concurrent_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.throttleSize(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder6.importAllCollections(false);
        org.bson.types.BSONTimestamp bSONTimestamp13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder6.initialTimestamp(bSONTimestamp13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test08847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08847");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions13 = mongoDBRiverDefinition11.getMongoClientOptions();
        boolean boolean14 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions15 = mongoDBRiverDefinition11.getMongoClientOptions();
        java.lang.String str16 = mongoDBRiverDefinition11.getScript();
        boolean boolean17 = mongoDBRiverDefinition11.isMongoGridFS();
        java.util.Set<java.lang.String> strSet18 = mongoDBRiverDefinition11.getIncludeFields();
        java.lang.String str19 = mongoDBRiverDefinition11.getStatisticsIndexName();
        int int20 = mongoDBRiverDefinition11.getConnectTimeout();
        int int21 = mongoDBRiverDefinition11.getThrottleSize();
        boolean boolean22 = mongoDBRiverDefinition11.isMongoUseSSL();
        int int23 = mongoDBRiverDefinition11.getConnectTimeout();
        java.lang.String str24 = mongoDBRiverDefinition11.getMongoOplogNamespace();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "null.null" + "'", str24, "null.null");
    }

    @Test
    public void test08848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08848");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.socketTimeout((int) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.includeCollection("script_type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoDb("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.scriptType("gridfs");
        org.elasticsearch.common.settings.Settings settings15 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions17 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoClientOptions(mongoClientOptions17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject21 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder16.mongoCollectionFilter(basicDBObject21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder16.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder28.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder28.indexName("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder28.statisticsIndexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder28.mongoAdminPassword("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder28.connectTimeout((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions42 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.mongoClientOptions(mongoClientOptions42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder41.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder45.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder45.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions50 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder49.mongoClientOptions(mongoClientOptions50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = builder51.build();
        java.lang.String str53 = mongoDBRiverDefinition52.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions54 = mongoDBRiverDefinition52.getMongoClientOptions();
        boolean boolean55 = mongoDBRiverDefinition52.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions56 = mongoDBRiverDefinition52.getMongoClientOptions();
        java.lang.String str57 = mongoDBRiverDefinition52.getScript();
        boolean boolean58 = mongoDBRiverDefinition52.isMongoGridFS();
        java.util.Set<java.lang.String> strSet59 = mongoDBRiverDefinition52.getIncludeFields();
        com.mongodb.BasicDBObject basicDBObject60 = mongoDBRiverDefinition52.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder28.mongoCollectionFilter(basicDBObject60);
        org.elasticsearch.river.RiverSettings riverSettings62 = new org.elasticsearch.river.RiverSettings(settings15, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder10.mongoOplogFilter(basicDBObject60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions65 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder64.mongoClientOptions(mongoClientOptions65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder66.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition69 = builder66.build();
        java.lang.String str70 = mongoDBRiverDefinition69.getMongoOplogNamespace();
        com.mongodb.BasicDBObject basicDBObject71 = mongoDBRiverDefinition69.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder10.mongoOplogFilter(basicDBObject71);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNull(mongoClientOptions54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(mongoClientOptions56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(strSet59);
        org.junit.Assert.assertNotNull(basicDBObject60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "null.null" + "'", str70, "null.null");
        org.junit.Assert.assertNotNull(basicDBObject71);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test08849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08849");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript0.setNextScore((float) 1000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.mongoClientOptions(mongoClientOptions6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.mongoCollectionFilter(basicDBObject10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = builder13.build();
        boolean boolean15 = mongoDBRiverDefinition14.isStoreStatistics();
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = mongoDBRiverDefinition14.getMongoServers();
        java.lang.String str17 = mongoDBRiverDefinition14.getScriptType();
        java.lang.Object obj18 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition14);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory19 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap20 = null;
        org.elasticsearch.script.ExecutableScript executableScript21 = docScoreNativeScriptFactory19.newScript(strMap20);
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = null;
        org.elasticsearch.script.ExecutableScript executableScript23 = docScoreNativeScriptFactory19.newScript(strMap22);
        org.elasticsearch.common.settings.Settings settings24 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions26 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.mongoClientOptions(mongoClientOptions26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.mongoClientOptions(mongoClientOptions33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder32.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder36.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions41 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.mongoClientOptions(mongoClientOptions41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition43 = builder42.build();
        java.lang.String str44 = mongoDBRiverDefinition43.getMongoAdminPassword();
        boolean boolean45 = mongoDBRiverDefinition43.isMongoSecondaryReadPreference();
        java.lang.String str46 = mongoDBRiverDefinition43.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet47 = mongoDBRiverDefinition43.getParentTypes();
        boolean boolean48 = mongoDBRiverDefinition43.isMongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject49 = mongoDBRiverDefinition43.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder29.mongoCollectionFilter(basicDBObject49);
        org.elasticsearch.river.RiverSettings riverSettings51 = new org.elasticsearch.river.RiverSettings(settings24, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject49);
        org.elasticsearch.script.ExecutableScript executableScript52 = docScoreNativeScriptFactory19.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions54 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder53.mongoClientOptions(mongoClientOptions54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder53.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder53.socketTimeout((int) 'a');
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory60 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap61 = null;
        org.elasticsearch.script.ExecutableScript executableScript62 = docScoreNativeScriptFactory60.newScript(strMap61);
        java.util.Map<java.lang.String, java.lang.Object> strMap63 = null;
        org.elasticsearch.script.ExecutableScript executableScript64 = docScoreNativeScriptFactory60.newScript(strMap63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions66 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder65.mongoClientOptions(mongoClientOptions66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder65.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder69.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder69.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions74 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder73.mongoClientOptions(mongoClientOptions74);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition76 = builder75.build();
        java.lang.String str77 = mongoDBRiverDefinition76.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions78 = mongoDBRiverDefinition76.getMongoClientOptions();
        boolean boolean79 = mongoDBRiverDefinition76.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions80 = mongoDBRiverDefinition76.getMongoClientOptions();
        java.lang.String str81 = mongoDBRiverDefinition76.getScript();
        com.mongodb.BasicDBObject basicDBObject82 = mongoDBRiverDefinition76.getMongoOplogFilter();
        java.lang.String str83 = mongoDBRiverDefinition76.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject84 = mongoDBRiverDefinition76.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript85 = docScoreNativeScriptFactory60.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject84);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder53.mongoCollectionFilter(basicDBObject84);
        org.elasticsearch.script.ExecutableScript executableScript87 = docScoreNativeScriptFactory19.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject84);
        java.lang.Object obj88 = docScoreSearchScript0.unwrap((java.lang.Object) basicDBObject84);
        docScoreSearchScript0.setNextScore(1.0f);
        docScoreSearchScript0.setNextScore((float) (-1));
        // The following exception was thrown during execution in test generation
        try {
            double double93 = docScoreSearchScript0.runAsDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(executableScript21);
        org.junit.Assert.assertNotNull(executableScript23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNull(strSet47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(basicDBObject49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(executableScript52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(executableScript62);
        org.junit.Assert.assertNotNull(executableScript64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNull(mongoClientOptions78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(mongoClientOptions80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(basicDBObject82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(basicDBObject84);
        org.junit.Assert.assertNotNull(executableScript85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(executableScript87);
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertEquals(obj88.toString(), "{ }");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj88), "{ }");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj88), "{ }");
    }

    @Test
    public void test08850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08850");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.riverName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = builder12.build();
        boolean boolean14 = mongoDBRiverDefinition13.isDropCollection();
        java.lang.String str15 = mongoDBRiverDefinition13.getStatisticsIndexName();
        java.lang.String str16 = mongoDBRiverDefinition13.getMongoCollection();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test08851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08851");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoDb();
        boolean boolean13 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        boolean boolean14 = mongoDBRiverDefinition9.isMongoUseSSL();
        java.lang.String str15 = mongoDBRiverDefinition9.getMongoAdminUser();
        java.lang.String str16 = mongoDBRiverDefinition9.getMongoCollection();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test08852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08852");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition9.getMongoServers();
        boolean boolean14 = mongoDBRiverDefinition9.isMongoUseSSL();
        java.lang.String str15 = mongoDBRiverDefinition9.getMongoAdminUser();
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition9.getParentTypes();
        java.util.Set<java.lang.String> strSet17 = mongoDBRiverDefinition9.getParentTypes();
        boolean boolean18 = mongoDBRiverDefinition9.isDropCollection();
        boolean boolean19 = mongoDBRiverDefinition9.isMongoSecondaryReadPreference();
        java.util.List<com.mongodb.ServerAddress> serverAddressList20 = mongoDBRiverDefinition9.getMongoServers();
        com.mongodb.MongoClientOptions mongoClientOptions21 = mongoDBRiverDefinition9.getMongoClientOptions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(serverAddressList20);
        org.junit.Assert.assertNull(mongoClientOptions21);
    }

    @Test
    public void test08853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08853");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition9.getMongoServers();
        boolean boolean14 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.lang.String str15 = mongoDBRiverDefinition9.getScriptType();
        int int16 = mongoDBRiverDefinition9.getSocketTimeout();
        java.lang.String str17 = mongoDBRiverDefinition9.getStatisticsIndexName();
        java.lang.String str18 = mongoDBRiverDefinition9.getRiverIndexName();
        boolean boolean19 = mongoDBRiverDefinition9.isImportAllCollections();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test08854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08854");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder4.throttleSize(0);
        org.elasticsearch.common.settings.Settings settings11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoClientOptions(mongoClientOptions13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.mongoClientOptions(mongoClientOptions20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder19.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder23.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions28 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.mongoClientOptions(mongoClientOptions28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = builder29.build();
        java.lang.String str31 = mongoDBRiverDefinition30.getMongoAdminPassword();
        boolean boolean32 = mongoDBRiverDefinition30.isMongoSecondaryReadPreference();
        java.lang.String str33 = mongoDBRiverDefinition30.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet34 = mongoDBRiverDefinition30.getParentTypes();
        boolean boolean35 = mongoDBRiverDefinition30.isMongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject36 = mongoDBRiverDefinition30.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder16.mongoCollectionFilter(basicDBObject36);
        org.elasticsearch.river.RiverSettings riverSettings38 = new org.elasticsearch.river.RiverSettings(settings11, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder4.mongoCollectionFilter(basicDBObject36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions41 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.mongoClientOptions(mongoClientOptions41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder40.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder44.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions49 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.mongoClientOptions(mongoClientOptions49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = builder50.build();
        java.lang.String str52 = mongoDBRiverDefinition51.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions53 = mongoDBRiverDefinition51.getMongoClientOptions();
        boolean boolean54 = mongoDBRiverDefinition51.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions55 = mongoDBRiverDefinition51.getMongoClientOptions();
        java.lang.String str56 = mongoDBRiverDefinition51.getScript();
        boolean boolean57 = mongoDBRiverDefinition51.isMongoGridFS();
        java.util.Set<java.lang.String> strSet58 = mongoDBRiverDefinition51.getIncludeFields();
        com.mongodb.BasicDBObject basicDBObject59 = mongoDBRiverDefinition51.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder39.mongoCollectionFilter(basicDBObject59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder39.riverIndexName("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder62.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder64.includeCollection("throttle_size");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(basicDBObject36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNull(mongoClientOptions53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(mongoClientOptions55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(strSet58);
        org.junit.Assert.assertNotNull(basicDBObject59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test08855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08855");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder2.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.statisticsTypeName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.script("null.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.statisticsTypeName("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test08856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08856");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) 8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoClientOptions(mongoClientOptions5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder6.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.typeName("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.indexName("host");
        docScoreSearchScript0.setNextVar("collection", (java.lang.Object) builder16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.mongoDb("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder16.mongoLocalUser("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder21.riverName("localhost.localhost");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 8 + "'", obj2, 8);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test08857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08857");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.includeCollection("concurrent_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.mongoLocalPassword("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder6.connectTimeout((-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder6.typeName("filter");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test08858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08858");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory0 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap1 = null;
        org.elasticsearch.script.ExecutableScript executableScript2 = docScoreNativeScriptFactory0.newScript(strMap1);
        org.elasticsearch.common.settings.Settings settings3 = null;
        org.elasticsearch.common.settings.Settings settings4 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.mongoClientOptions(mongoClientOptions6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.mongoClientOptions(mongoClientOptions14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = builder15.build();
        java.lang.String str17 = mongoDBRiverDefinition16.getMongoDb();
        java.lang.String str18 = mongoDBRiverDefinition16.getStatisticsTypeName();
        java.lang.String str19 = mongoDBRiverDefinition16.getScriptType();
        boolean boolean20 = mongoDBRiverDefinition16.isMongoSecondaryReadPreference();
        com.mongodb.BasicDBObject basicDBObject21 = mongoDBRiverDefinition16.getMongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings22 = new org.elasticsearch.river.RiverSettings(settings4, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject21);
        org.elasticsearch.river.RiverSettings riverSettings23 = new org.elasticsearch.river.RiverSettings(settings3, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject21);
        org.elasticsearch.script.ExecutableScript executableScript24 = docScoreNativeScriptFactory0.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject21);
        org.elasticsearch.common.settings.Settings settings29 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions31 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.mongoClientOptions(mongoClientOptions31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder30.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder34.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions39 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder38.mongoClientOptions(mongoClientOptions39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition41 = builder40.build();
        java.lang.String str42 = mongoDBRiverDefinition41.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions43 = mongoDBRiverDefinition41.getMongoClientOptions();
        boolean boolean44 = mongoDBRiverDefinition41.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions45 = mongoDBRiverDefinition41.getMongoClientOptions();
        java.lang.String str46 = mongoDBRiverDefinition41.getScript();
        com.mongodb.BasicDBObject basicDBObject47 = mongoDBRiverDefinition41.getMongoOplogFilter();
        java.lang.String str48 = mongoDBRiverDefinition41.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject49 = mongoDBRiverDefinition41.getMongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings50 = new org.elasticsearch.river.RiverSettings(settings29, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject49);
        org.elasticsearch.common.settings.Settings settings51 = riverSettings50.globalSettings();
        org.elasticsearch.script.ScriptService scriptService52 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition53 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("size", "index", riverSettings50, scriptService52);
        org.elasticsearch.script.ScriptService scriptService54 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition55 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("gridfs", "ssl_verify_certificate", riverSettings50, scriptService54);
        org.elasticsearch.common.settings.Settings settings56 = riverSettings50.globalSettings();
        java.util.Map<java.lang.String, java.lang.Object> strMap57 = riverSettings50.settings();
        org.elasticsearch.script.ExecutableScript executableScript58 = docScoreNativeScriptFactory0.newScript(strMap57);
        org.junit.Assert.assertNotNull(executableScript2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(basicDBObject21);
        org.junit.Assert.assertNotNull(executableScript24);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNull(mongoClientOptions43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(mongoClientOptions45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(basicDBObject47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(basicDBObject49);
        org.junit.Assert.assertNull(settings51);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition53);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition55);
        org.junit.Assert.assertNull(settings56);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(executableScript58);
    }

    @Test
    public void test08859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08859");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.connectTimeout(1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoCollection("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.typeName("db");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.mongoClientOptions(mongoClientOptions20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.mongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder21.mongoAdminPassword("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.mongoDb("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions29 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.mongoClientOptions(mongoClientOptions29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder28.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder32.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.connectTimeout((int) (short) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder38.indexName("hi!");
        java.lang.String[] strArray54 = new java.lang.String[] { "disable_index_refresh", "collection", "host", "user", "script_type", "socket_timeout", "include_fields", "bulk", "connect_timeout", "actions", "collection", "connect_timeout", "type" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder38.excludeFields((java.util.Set<java.lang.String>) strSet55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder25.parentTypes((java.util.Set<java.lang.String>) strSet55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder25.mongoDb("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder25.mongoDb("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder62.mongoAdminUser("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions66 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder65.mongoClientOptions(mongoClientOptions66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder65.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject70 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder65.mongoCollectionFilter(basicDBObject70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder65.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder73.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder75.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder77.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder77.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions83 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder82.mongoClientOptions(mongoClientOptions83);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder82.importAllCollections(false);
        com.mongodb.ServerAddress[] serverAddressArray87 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList88 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList88, serverAddressArray87);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder82.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList88);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder91 = builder81.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList88);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder92 = builder64.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList88);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder93 = builder16.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList88);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(serverAddressArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test08860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08860");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.mongoClientOptions(mongoClientOptions6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.mongoCollectionFilter(basicDBObject10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray23 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder15.includeFields((java.util.Set<java.lang.String>) strSet24);
        java.lang.Object obj27 = docScoreSearchScript0.unwrap((java.lang.Object) builder15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder15.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.statisticsIndexName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder33.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.includeCollection("gridfs");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test08861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08861");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj1 = null;
        java.lang.Object obj2 = docScoreSearchScript0.unwrap(obj1);
        docScoreSearchScript0.setNextScore((float) '#');
        docScoreSearchScript0.setNextScore((float) 1000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.mongoLocalUser("ssl_verify_certificate");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.mongoClientOptions(mongoClientOptions18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder17.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder21.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions26 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.mongoClientOptions(mongoClientOptions26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = builder27.build();
        java.lang.String str29 = mongoDBRiverDefinition28.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions30 = mongoDBRiverDefinition28.getMongoClientOptions();
        boolean boolean31 = mongoDBRiverDefinition28.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions32 = mongoDBRiverDefinition28.getMongoClientOptions();
        java.lang.String str33 = mongoDBRiverDefinition28.getScript();
        com.mongodb.BasicDBObject basicDBObject34 = mongoDBRiverDefinition28.getMongoOplogFilter();
        java.lang.String str35 = mongoDBRiverDefinition28.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject36 = mongoDBRiverDefinition28.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder12.mongoOplogFilter(basicDBObject36);
        docScoreSearchScript0.setNextVar("actions", (java.lang.Object) basicDBObject36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions41 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.mongoClientOptions(mongoClientOptions41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder40.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder44.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions49 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.mongoClientOptions(mongoClientOptions49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = builder50.build();
        java.lang.String str52 = mongoDBRiverDefinition51.getMongoDb();
        com.mongodb.MongoClientOptions mongoClientOptions53 = mongoDBRiverDefinition51.getMongoClientOptions();
        java.lang.String str54 = mongoDBRiverDefinition51.getScriptType();
        java.lang.String str55 = mongoDBRiverDefinition51.getScript();
        java.util.Set<java.lang.String> strSet56 = mongoDBRiverDefinition51.getParentTypes();
        boolean boolean57 = mongoDBRiverDefinition51.isImportAllCollections();
        boolean boolean58 = mongoDBRiverDefinition51.isMongoGridFS();
        docScoreSearchScript0.setNextVar("db", (java.lang.Object) boolean58);
        docScoreSearchScript0.setNextScore((float) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj62 = docScoreSearchScript0.run();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNull(mongoClientOptions30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(mongoClientOptions32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(basicDBObject34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(basicDBObject36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(mongoClientOptions53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(strSet56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test08862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08862");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.includeCollection("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.mongoLocalPassword("gridfs");
        java.util.Set<java.lang.String> strSet15 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.includeFields(strSet15);
        java.lang.String[] strArray20 = new java.lang.String[] { "advanced_transformation", "ssl", "secondary_read_preference" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder16.includeFields((java.util.Set<java.lang.String>) strSet21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder16.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.mongoAdminPassword("flush_interval");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.scriptType("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.mongoSSLVerifyCertificate(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test08863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08863");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.statisticsIndexName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoAdminUser("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.mongoAdminUser("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.includeCollection("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.mongoCollection("bulk_timeout");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test08864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08864");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.riverIndexName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = builder10.build();
        java.lang.String str18 = mongoDBRiverDefinition17.getMongoCollection();
        java.lang.String str19 = mongoDBRiverDefinition17.getRiverIndexName();
        boolean boolean20 = mongoDBRiverDefinition17.isMongoSSLVerifyCertificate();
        int int21 = mongoDBRiverDefinition17.getSocketTimeout();
        boolean boolean22 = mongoDBRiverDefinition17.isMongoUseSSL();
        java.lang.String str23 = mongoDBRiverDefinition17.getScript();
        java.lang.String str24 = mongoDBRiverDefinition17.getRiverName();
        boolean boolean25 = mongoDBRiverDefinition17.isSkipInitialImport();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "import_all_collections" + "'", str19, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test08865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08865");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoAdminPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.getTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList14 = mongoDBRiverDefinition9.getMongoServers();
        boolean boolean15 = mongoDBRiverDefinition9.isDisableIndexRefresh();
        java.lang.String str16 = mongoDBRiverDefinition9.getStatisticsIndexName();
        java.lang.String str17 = mongoDBRiverDefinition9.getStatisticsIndexName();
        java.lang.String str18 = mongoDBRiverDefinition9.getMongoAdminUser();
        boolean boolean19 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        com.mongodb.MongoClientOptions mongoClientOptions20 = mongoDBRiverDefinition9.getMongoClientOptions();
        java.lang.String str21 = mongoDBRiverDefinition9.getMongoDb();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(serverAddressList14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(mongoClientOptions20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test08866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08866");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder1.mongoClientOptions(mongoClientOptions2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.typeName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.typeName("include_fields");
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.mongoClientOptions(mongoClientOptions10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.storeStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder9.throttleSize((int) (byte) 0);
        org.elasticsearch.common.settings.Settings settings16 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.mongoClientOptions(mongoClientOptions18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder17.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder21.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder21.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder21.script("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions31 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.mongoClientOptions(mongoClientOptions31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder30.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder34.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions39 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder38.mongoClientOptions(mongoClientOptions39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition41 = builder40.build();
        java.lang.String str42 = mongoDBRiverDefinition41.getMongoDb();
        java.lang.String str43 = mongoDBRiverDefinition41.getStatisticsTypeName();
        boolean boolean44 = mongoDBRiverDefinition41.isImportAllCollections();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp45 = mongoDBRiverDefinition41.getInitialTimestamp();
        int int46 = mongoDBRiverDefinition41.getSocketTimeout();
        int int47 = mongoDBRiverDefinition41.getConnectTimeout();
        java.lang.String str48 = mongoDBRiverDefinition41.getMongoAdminUser();
        java.lang.String str49 = mongoDBRiverDefinition41.getMongoAdminUser();
        java.lang.String str50 = mongoDBRiverDefinition41.getTypeName();
        java.util.Set<java.lang.String> strSet51 = mongoDBRiverDefinition41.getIncludeFields();
        java.lang.String str52 = mongoDBRiverDefinition41.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject53 = mongoDBRiverDefinition41.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder21.mongoCollectionFilter(basicDBObject53);
        org.elasticsearch.river.RiverSettings riverSettings55 = new org.elasticsearch.river.RiverSettings(settings16, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder9.mongoCollectionFilter(basicDBObject53);
        org.elasticsearch.river.RiverSettings riverSettings57 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject53);
        java.util.Map<java.lang.String, java.lang.Object> strMap58 = riverSettings57.settings();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(wildcardTimestamp45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(strSet51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(basicDBObject53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(strMap58);
    }

    @Test
    public void test08867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08867");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition9.getMongoServers();
        java.lang.String str14 = mongoDBRiverDefinition9.getStatisticsTypeName();
        boolean boolean15 = mongoDBRiverDefinition9.isDisableIndexRefresh();
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition9.getExcludeFields();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strSet16);
    }

    @Test
    public void test08868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08868");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory4 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = null;
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory4.newScript(strMap5);
        docScoreSearchScript0.setNextVar("localhost", (java.lang.Object) docScoreNativeScriptFactory4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.mongoClientOptions(mongoClientOptions10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions18 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.mongoClientOptions(mongoClientOptions18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = builder19.build();
        java.lang.String str21 = mongoDBRiverDefinition20.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions22 = mongoDBRiverDefinition20.getMongoClientOptions();
        boolean boolean23 = mongoDBRiverDefinition20.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions24 = mongoDBRiverDefinition20.getMongoClientOptions();
        java.lang.String str25 = mongoDBRiverDefinition20.getScript();
        com.mongodb.BasicDBObject basicDBObject26 = mongoDBRiverDefinition20.getMongoOplogFilter();
        java.lang.String str27 = mongoDBRiverDefinition20.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject28 = mongoDBRiverDefinition20.getMongoCollectionFilter();
        docScoreSearchScript0.setNextVar("type", (java.lang.Object) basicDBObject28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions31 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.mongoClientOptions(mongoClientOptions31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder30.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder34.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions39 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder38.mongoClientOptions(mongoClientOptions39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition41 = builder40.build();
        java.lang.String str42 = mongoDBRiverDefinition41.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions43 = mongoDBRiverDefinition41.getMongoClientOptions();
        boolean boolean44 = mongoDBRiverDefinition41.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions45 = mongoDBRiverDefinition41.getMongoClientOptions();
        int int46 = mongoDBRiverDefinition41.getThrottleSize();
        java.lang.String str47 = mongoDBRiverDefinition41.getMongoAdminUser();
        java.lang.String str48 = mongoDBRiverDefinition41.getTypeName();
        java.lang.String str49 = mongoDBRiverDefinition41.getMongoOplogNamespace();
        java.lang.Object obj50 = docScoreSearchScript0.unwrap((java.lang.Object) str49);
        java.lang.Object obj51 = null;
        java.lang.Object obj52 = docScoreSearchScript0.unwrap(obj51);
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextDocId((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(mongoClientOptions24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(basicDBObject26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNull(mongoClientOptions43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(mongoClientOptions45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "null.null" + "'", str49, "null.null");
        org.junit.Assert.assertEquals("'" + obj50 + "' != '" + "null.null" + "'", obj50, "null.null");
        org.junit.Assert.assertNull(obj52);
    }

    @Test
    public void test08869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08869");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.socketTimeout((int) (short) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoClientOptions(mongoClientOptions8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.typeName("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.riverName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.mongoClientOptions(mongoClientOptions21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder20.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.connectTimeout((int) (short) 10);
        java.lang.String[] strArray69 = new java.lang.String[] { "actions", "user", "name", "bulk_size", "", "script_type", "db", "disable_index_refresh", "local", "port", "filter", "gridfs", "drop_collection", "hi!", "include_collection", "secondary_read_preference", "options", "script_type", "index", "import_all_collections", "options", "connect_timeout", "index", "name", "gridfs", "name", "db", "script", "bulk_timeout", "flush_interval", "", "ssl_verify_certificate", "collection", "admin", "include_collection", "concurrent_requests", "secondary_read_preference", "bulk_timeout", "collection", "script_type", "gridfs", "script_type" };
        java.util.LinkedHashSet<java.lang.String> strSet70 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet70, strArray69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder26.excludeFields((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder17.parentTypes((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder4.excludeFields((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder74.mongoLocalPassword("script_type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder76.connectTimeout((int) '#');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test08870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08870");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition9.getMongoServers();
        boolean boolean14 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.lang.String str15 = mongoDBRiverDefinition9.getRiverName();
        java.lang.String str16 = mongoDBRiverDefinition9.getScriptType();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test08871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08871");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.mongoClientOptions(mongoClientOptions14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.typeName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder17.typeName("include_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.statisticsTypeName("ssl_verify_certificate");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions25 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoClientOptions(mongoClientOptions25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder24.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder28.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.connectTimeout((int) (short) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.indexName("hi!");
        java.lang.String[] strArray50 = new java.lang.String[] { "disable_index_refresh", "collection", "host", "user", "script_type", "socket_timeout", "include_fields", "bulk", "connect_timeout", "actions", "collection", "connect_timeout", "type" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder34.excludeFields((java.util.Set<java.lang.String>) strSet51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder21.parentTypes((java.util.Set<java.lang.String>) strSet51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder12.includeFields((java.util.Set<java.lang.String>) strSet51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder12.mongoDb("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder57.importAllCollections(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test08872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08872");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.mongoClientOptions(mongoClientOptions6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.mongoCollectionFilter(basicDBObject10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray23 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder15.includeFields((java.util.Set<java.lang.String>) strSet24);
        java.lang.Object obj27 = docScoreSearchScript0.unwrap((java.lang.Object) builder15);
        docScoreSearchScript0.setNextScore((float) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions32 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.mongoClientOptions(mongoClientOptions32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder31.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder35.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions40 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder39.mongoClientOptions(mongoClientOptions40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = builder41.build();
        java.lang.String str43 = mongoDBRiverDefinition42.getMongoDb();
        java.lang.String str44 = mongoDBRiverDefinition42.getStatisticsTypeName();
        boolean boolean45 = mongoDBRiverDefinition42.isImportAllCollections();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp46 = mongoDBRiverDefinition42.getInitialTimestamp();
        int int47 = mongoDBRiverDefinition42.getSocketTimeout();
        int int48 = mongoDBRiverDefinition42.getConnectTimeout();
        java.lang.String str49 = mongoDBRiverDefinition42.getMongoAdminUser();
        java.lang.String str50 = mongoDBRiverDefinition42.getMongoAdminUser();
        java.lang.String str51 = mongoDBRiverDefinition42.getTypeName();
        java.util.Set<java.lang.String> strSet52 = mongoDBRiverDefinition42.getIncludeFields();
        java.lang.String str53 = mongoDBRiverDefinition42.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject54 = mongoDBRiverDefinition42.getMongoCollectionFilter();
        com.mongodb.BasicDBObject basicDBObject55 = mongoDBRiverDefinition42.getMongoCollectionFilter();
        java.lang.String str56 = mongoDBRiverDefinition42.getScriptType();
        docScoreSearchScript0.setNextVar("options", (java.lang.Object) str56);
        docScoreSearchScript0.setNextScore((float) '4');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions61 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder60.mongoClientOptions(mongoClientOptions61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder60.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject65 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder60.mongoCollectionFilter(basicDBObject65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder60.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder68.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder70.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder70.riverIndexName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder74.includeCollection("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder74.mongoCollection("parent_types");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder74.riverName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder74.mongoSecondaryReadPreference(true);
        java.lang.Object obj83 = docScoreSearchScript0.unwrap((java.lang.Object) true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj84 = docScoreSearchScript0.run();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(wildcardTimestamp46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(strSet52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(basicDBObject54);
        org.junit.Assert.assertNotNull(basicDBObject55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertEquals("'" + obj83 + "' != '" + true + "'", obj83, true);
    }

    @Test
    public void test08873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08873");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.typeName("include_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder6.build();
        boolean boolean10 = mongoDBRiverDefinition9.isMongoGridFS();
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition9.getIncludeFields();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoAdminUser();
        com.mongodb.BasicDBObject basicDBObject13 = mongoDBRiverDefinition9.getMongoCollectionFilter();
        java.lang.Class<?> wildcardClass14 = basicDBObject13.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test08874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08874");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory4 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = null;
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory4.newScript(strMap5);
        docScoreSearchScript0.setNextVar("localhost", (java.lang.Object) docScoreNativeScriptFactory4);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript9 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj11 = docScoreSearchScript9.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript9.setNextScore((float) 1);
        docScoreSearchScript0.setNextVar("credentials", (java.lang.Object) 1);
        docScoreSearchScript0.setNextScore((float) 0L);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoClientOptions(mongoClientOptions19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject23 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder18.mongoCollectionFilter(basicDBObject23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder18.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder28.riverIndexName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.includeCollection("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.scriptType("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoDb("include_fields");
        docScoreSearchScript0.setNextVar("db", (java.lang.Object) builder38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions41 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.mongoClientOptions(mongoClientOptions41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder40.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder44.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions49 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.mongoClientOptions(mongoClientOptions49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = builder50.build();
        java.lang.String str52 = mongoDBRiverDefinition51.getMongoAdminPassword();
        boolean boolean53 = mongoDBRiverDefinition51.isMongoSecondaryReadPreference();
        java.lang.String str54 = mongoDBRiverDefinition51.getMongoLocalUser();
        java.lang.Object obj55 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition51);
        docScoreSearchScript0.setNextScore((float) 8);
        docScoreSearchScript0.setNextScore((float) 1L);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions62 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder61.mongoClientOptions(mongoClientOptions62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder61.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject66 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder61.mongoCollectionFilter(basicDBObject66);
        docScoreSearchScript0.setNextVar("null.null", (java.lang.Object) builder61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions71 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder70.mongoClientOptions(mongoClientOptions71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder72.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder72.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder72.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder72.typeName("password");
        docScoreSearchScript0.setNextVar("", (java.lang.Object) "password");
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext82 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + "hi!" + "'", obj11, "hi!");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test08875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08875");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        com.mongodb.MongoClientOptions mongoClientOptions10 = mongoDBRiverDefinition9.getMongoClientOptions();
        java.lang.String str11 = mongoDBRiverDefinition9.getIncludeCollection();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoCollection();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition9.getExcludeFields();
        boolean boolean14 = mongoDBRiverDefinition9.isDropCollection();
        java.lang.String str15 = mongoDBRiverDefinition9.getRiverName();
        boolean boolean16 = mongoDBRiverDefinition9.isSkipInitialImport();
        java.lang.String str17 = mongoDBRiverDefinition9.getMongoLocalUser();
        boolean boolean18 = mongoDBRiverDefinition9.isMongoGridFS();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test08876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08876");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder2.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.riverName("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoClientOptions(mongoClientOptions16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder19.typeName("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder19.mongoDb("");
        com.mongodb.MongoClientOptions mongoClientOptions26 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder19.mongoClientOptions(mongoClientOptions26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.riverName("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions31 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.mongoClientOptions(mongoClientOptions31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder30.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder34.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder34.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions42 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.mongoClientOptions(mongoClientOptions42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder41.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder41.socketTimeout((int) 'a');
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory48 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap49 = null;
        org.elasticsearch.script.ExecutableScript executableScript50 = docScoreNativeScriptFactory48.newScript(strMap49);
        java.util.Map<java.lang.String, java.lang.Object> strMap51 = null;
        org.elasticsearch.script.ExecutableScript executableScript52 = docScoreNativeScriptFactory48.newScript(strMap51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions54 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder53.mongoClientOptions(mongoClientOptions54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder53.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder57.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder57.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions62 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder61.mongoClientOptions(mongoClientOptions62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition64 = builder63.build();
        java.lang.String str65 = mongoDBRiverDefinition64.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions66 = mongoDBRiverDefinition64.getMongoClientOptions();
        boolean boolean67 = mongoDBRiverDefinition64.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions68 = mongoDBRiverDefinition64.getMongoClientOptions();
        java.lang.String str69 = mongoDBRiverDefinition64.getScript();
        com.mongodb.BasicDBObject basicDBObject70 = mongoDBRiverDefinition64.getMongoOplogFilter();
        java.lang.String str71 = mongoDBRiverDefinition64.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject72 = mongoDBRiverDefinition64.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript73 = docScoreNativeScriptFactory48.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject72);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder41.mongoCollectionFilter(basicDBObject72);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder34.mongoOplogFilter(basicDBObject72);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder27.mongoCollectionFilter(basicDBObject72);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder14.mongoCollectionFilter(basicDBObject72);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder14.advancedTransformation(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(executableScript50);
        org.junit.Assert.assertNotNull(executableScript52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNull(mongoClientOptions66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(mongoClientOptions68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(basicDBObject70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(basicDBObject72);
        org.junit.Assert.assertNotNull(executableScript73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test08877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08877");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.riverIndexName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.throttleSize((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoClientOptions(mongoClientOptions12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject16 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder11.mongoCollectionFilter(basicDBObject16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder11.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = builder19.build();
        boolean boolean21 = mongoDBRiverDefinition20.isStoreStatistics();
        boolean boolean22 = mongoDBRiverDefinition20.isMongoSSLVerifyCertificate();
        java.lang.String str23 = mongoDBRiverDefinition20.getMongoDb();
        int int24 = mongoDBRiverDefinition20.getConnectTimeout();
        java.lang.String str25 = mongoDBRiverDefinition20.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject26 = mongoDBRiverDefinition20.getMongoOplogFilter();
        com.mongodb.BasicDBObject basicDBObject27 = mongoDBRiverDefinition20.getMongoOplogFilter();
        java.lang.String str28 = mongoDBRiverDefinition20.getMongoAdminPassword();
        java.lang.String str29 = mongoDBRiverDefinition20.getRiverIndexName();
        java.lang.String str30 = mongoDBRiverDefinition20.getIncludeCollection();
        java.lang.String str31 = mongoDBRiverDefinition20.getIndexName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList32 = mongoDBRiverDefinition20.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder8.mongoServers(serverAddressList32);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(basicDBObject26);
        org.junit.Assert.assertNull(basicDBObject27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "bulk_size" + "'", str31, "bulk_size");
        org.junit.Assert.assertNotNull(serverAddressList32);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test08878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08878");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str13 = mongoDBRiverDefinition11.getStatisticsTypeName();
        boolean boolean14 = mongoDBRiverDefinition11.isImportAllCollections();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp15 = mongoDBRiverDefinition11.getInitialTimestamp();
        int int16 = mongoDBRiverDefinition11.getSocketTimeout();
        int int17 = mongoDBRiverDefinition11.getConnectTimeout();
        java.lang.String str18 = mongoDBRiverDefinition11.getMongoAdminUser();
        java.lang.String str19 = mongoDBRiverDefinition11.getMongoAdminUser();
        java.lang.String str20 = mongoDBRiverDefinition11.getTypeName();
        java.util.Set<java.lang.String> strSet21 = mongoDBRiverDefinition11.getIncludeFields();
        java.lang.String str22 = mongoDBRiverDefinition11.getMongoCollection();
        boolean boolean23 = mongoDBRiverDefinition11.isStoreStatistics();
        boolean boolean24 = mongoDBRiverDefinition11.isMongoGridFS();
        boolean boolean25 = mongoDBRiverDefinition11.isStoreStatistics();
        java.lang.String str26 = mongoDBRiverDefinition11.getMongoDb();
        boolean boolean27 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(wildcardTimestamp15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test08879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08879");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoClientOptions(mongoClientOptions4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoLocalPassword("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.riverName("secondary_read_preference");
        java.lang.Object obj12 = docScoreSearchScript0.unwrap((java.lang.Object) "secondary_read_preference");
        java.lang.Object obj13 = null;
        java.lang.Object obj14 = docScoreSearchScript0.unwrap(obj13);
        // The following exception was thrown during execution in test generation
        try {
            long long15 = docScoreSearchScript0.runAsLong();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "secondary_read_preference" + "'", obj12, "secondary_read_preference");
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test08880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08880");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.mongoClientOptions(mongoClientOptions6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.mongoCollectionFilter(basicDBObject10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray23 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder15.includeFields((java.util.Set<java.lang.String>) strSet24);
        java.lang.Object obj27 = docScoreSearchScript0.unwrap((java.lang.Object) builder15);
        docScoreSearchScript0.setNextScore((float) (byte) 100);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript31 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj33 = docScoreSearchScript31.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript31.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions38 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.mongoClientOptions(mongoClientOptions38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder37.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject42 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder37.mongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder37.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder45.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder47.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder49.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder49.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions55 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder54.mongoClientOptions(mongoClientOptions55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder54.importAllCollections(false);
        com.mongodb.ServerAddress[] serverAddressArray59 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList60 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList60, serverAddressArray59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder54.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder53.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder53.skipInitialImport(false);
        docScoreSearchScript31.setNextVar("import_all_collections", (java.lang.Object) builder53);
        docScoreSearchScript0.setNextVar("bulk", (java.lang.Object) docScoreSearchScript31);
        java.lang.Object obj69 = null;
        docScoreSearchScript0.setNextVar("db", obj69);
        docScoreSearchScript0.setNextScore((float) 1000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions74 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder73.mongoClientOptions(mongoClientOptions74);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder73.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject78 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder73.mongoCollectionFilter(basicDBObject78);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder73.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition82 = builder81.build();
        com.mongodb.MongoClientOptions mongoClientOptions83 = mongoDBRiverDefinition82.getMongoClientOptions();
        com.mongodb.MongoClientOptions mongoClientOptions84 = mongoDBRiverDefinition82.getMongoClientOptions();
        java.lang.String str85 = mongoDBRiverDefinition82.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions86 = mongoDBRiverDefinition82.getMongoClientOptions();
        java.lang.String str87 = mongoDBRiverDefinition82.getMongoAdminUser();
        int int88 = mongoDBRiverDefinition82.getConnectTimeout();
        java.lang.Object obj89 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition82);
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextDocId((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals("'" + obj33 + "' != '" + "hi!" + "'", obj33, "hi!");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(serverAddressArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition82);
        org.junit.Assert.assertNull(mongoClientOptions83);
        org.junit.Assert.assertNull(mongoClientOptions84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNull(mongoClientOptions86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(obj89);
    }

    @Test
    public void test08881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08881");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.riverIndexName("null.null.null.null");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test08882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08882");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.typeName("options");
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoOplogFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.mongoAdminPassword("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.typeName("import_all_collections");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test08883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08883");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.socketTimeout((int) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.includeCollection("script_type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoDb("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.includeCollection("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.includeCollection("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder10.mongoAdminUser("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.dropCollection(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test08884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08884");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder4.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder4.indexName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoClientOptions(mongoClientOptions16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder15.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject20 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder15.mongoCollectionFilter(basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder15.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = builder23.build();
        boolean boolean25 = mongoDBRiverDefinition24.isStoreStatistics();
        boolean boolean26 = mongoDBRiverDefinition24.isMongoSSLVerifyCertificate();
        java.lang.String str27 = mongoDBRiverDefinition24.getStatisticsTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList28 = mongoDBRiverDefinition24.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder12.mongoServers(serverAddressList28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder12.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder12.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.mongoDb("actions");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(serverAddressList28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test08885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08885");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoUseSSL();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.getParentTypes();
        java.lang.String str13 = mongoDBRiverDefinition9.getRiverName();
        int int14 = mongoDBRiverDefinition9.getConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test08886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08886");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        boolean boolean12 = mongoDBRiverDefinition9.isMongoSecondaryReadPreference();
        int int13 = mongoDBRiverDefinition9.getConnectTimeout();
        java.util.Set<java.lang.String> strSet14 = mongoDBRiverDefinition9.getIncludeFields();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(strSet14);
    }

    @Test
    public void test08887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08887");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory4 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = null;
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory4.newScript(strMap5);
        docScoreSearchScript0.setNextVar("localhost", (java.lang.Object) docScoreNativeScriptFactory4);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript9 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj11 = docScoreSearchScript9.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript9.setNextScore((float) 1);
        docScoreSearchScript0.setNextVar("credentials", (java.lang.Object) 1);
        docScoreSearchScript0.setNextScore((float) 0L);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoClientOptions(mongoClientOptions19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject23 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder18.mongoCollectionFilter(basicDBObject23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder18.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder28.riverIndexName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.includeCollection("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.scriptType("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoDb("include_fields");
        docScoreSearchScript0.setNextVar("db", (java.lang.Object) builder38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions41 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.mongoClientOptions(mongoClientOptions41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder40.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder44.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions49 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.mongoClientOptions(mongoClientOptions49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = builder50.build();
        java.lang.String str52 = mongoDBRiverDefinition51.getMongoAdminPassword();
        boolean boolean53 = mongoDBRiverDefinition51.isMongoSecondaryReadPreference();
        java.lang.String str54 = mongoDBRiverDefinition51.getMongoLocalUser();
        java.lang.Object obj55 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition51);
        docScoreSearchScript0.setNextScore((float) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions60 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder59.mongoClientOptions(mongoClientOptions60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder59.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject64 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder59.mongoCollectionFilter(basicDBObject64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder59.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder67.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder69.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder71.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder73.scriptType("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder73.statisticsIndexName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder73.riverIndexName("parent_types");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder73.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder73.disableIndexRefresh(true);
        docScoreSearchScript0.setNextVar("localhost.localhost", (java.lang.Object) builder73);
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext85 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + "hi!" + "'", obj11, "hi!");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test08888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08888");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.riverIndexName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.includeCollection("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.throttleSize(1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder16.riverName("include_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.statisticsIndexName("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder22.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder22.riverIndexName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = builder22.build();
        java.util.Set<java.lang.String> strSet30 = mongoDBRiverDefinition29.getParentTypes();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition29);
        org.junit.Assert.assertNull(strSet30);
    }

    @Test
    public void test08889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08889");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition9.getMongoOplogFilter();
        boolean boolean13 = mongoDBRiverDefinition9.isDropCollection();
        java.lang.String str14 = mongoDBRiverDefinition9.getMongoLocalUser();
        boolean boolean15 = mongoDBRiverDefinition9.isDropCollection();
        boolean boolean16 = mongoDBRiverDefinition9.isMongoGridFS();
        java.lang.String str17 = mongoDBRiverDefinition9.getTypeName();
        java.util.Set<java.lang.String> strSet18 = mongoDBRiverDefinition9.getExcludeFields();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(basicDBObject12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(strSet18);
    }

    @Test
    public void test08890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08890");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.mongoAdminPassword("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoClientOptions(mongoClientOptions12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject16 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder11.mongoCollectionFilter(basicDBObject16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder11.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = builder19.build();
        boolean boolean21 = mongoDBRiverDefinition20.isStoreStatistics();
        boolean boolean22 = mongoDBRiverDefinition20.isMongoSSLVerifyCertificate();
        java.lang.String str23 = mongoDBRiverDefinition20.getMongoDb();
        java.util.List<com.mongodb.ServerAddress> serverAddressList24 = mongoDBRiverDefinition20.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder6.mongoServers(serverAddressList24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder6.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.socketTimeout((int) '#');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(serverAddressList24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test08891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08891");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.riverIndexName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = builder4.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder4.includeCollection("concurrent_bulk_requests");
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.common.settings.Settings settings11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoClientOptions(mongoClientOptions13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.mongoClientOptions(mongoClientOptions21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = builder22.build();
        java.lang.String str24 = mongoDBRiverDefinition23.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions25 = mongoDBRiverDefinition23.getMongoClientOptions();
        boolean boolean26 = mongoDBRiverDefinition23.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions27 = mongoDBRiverDefinition23.getMongoClientOptions();
        java.lang.String str28 = mongoDBRiverDefinition23.getScript();
        com.mongodb.BasicDBObject basicDBObject29 = mongoDBRiverDefinition23.getMongoOplogFilter();
        java.lang.String str30 = mongoDBRiverDefinition23.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject31 = mongoDBRiverDefinition23.getMongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings32 = new org.elasticsearch.river.RiverSettings(settings11, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject31);
        org.elasticsearch.river.RiverSettings riverSettings33 = new org.elasticsearch.river.RiverSettings(settings10, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder9.mongoOplogFilter(basicDBObject31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder9.scriptType("null.null");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(mongoClientOptions27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(basicDBObject29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(basicDBObject31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test08892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08892");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.mongoClientOptions(mongoClientOptions6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.mongoCollectionFilter(basicDBObject10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray23 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder15.includeFields((java.util.Set<java.lang.String>) strSet24);
        java.lang.Object obj27 = docScoreSearchScript0.unwrap((java.lang.Object) builder15);
        docScoreSearchScript0.setNextScore((float) (-1L));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions32 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.mongoClientOptions(mongoClientOptions32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder31.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject36 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder31.mongoCollectionFilter(basicDBObject36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder31.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder39.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.mongoSSLVerifyCertificate(false);
        com.mongodb.BasicDBObject basicDBObject44 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder41.mongoOplogFilter(basicDBObject44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder41.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder41.storeStatistics(false);
        java.lang.Class<?> wildcardClass50 = builder49.getClass();
        docScoreSearchScript0.setNextVar("drop_collection", (java.lang.Object) wildcardClass50);
        docScoreSearchScript0.setNextScore((float) 10L);
        docScoreSearchScript0.setNextScore((float) '4');
        docScoreSearchScript0.setNextScore(0.0f);
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test08893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08893");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str13 = mongoDBRiverDefinition11.getStatisticsTypeName();
        boolean boolean14 = mongoDBRiverDefinition11.isDisableIndexRefresh();
        com.mongodb.MongoClientOptions mongoClientOptions15 = mongoDBRiverDefinition11.getMongoClientOptions();
        java.lang.String str16 = mongoDBRiverDefinition11.getMongoDb();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test08894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08894");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoClientOptions(mongoClientOptions4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoLocalPassword("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.riverName("secondary_read_preference");
        java.lang.Object obj12 = docScoreSearchScript0.unwrap((java.lang.Object) "secondary_read_preference");
        java.lang.Object obj13 = null;
        java.lang.Object obj14 = docScoreSearchScript0.unwrap(obj13);
        docScoreSearchScript0.setNextScore((float) 100);
        docScoreSearchScript0.setNextScore((float) (short) 10);
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext19 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "secondary_read_preference" + "'", obj12, "secondary_read_preference");
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test08895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08895");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder12.indexName("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder12.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.mongoAdminUser("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.riverIndexName("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = builder24.build();
        java.lang.String str26 = mongoDBRiverDefinition25.getScriptType();
        boolean boolean27 = mongoDBRiverDefinition25.isAdvancedTransformation();
        boolean boolean28 = mongoDBRiverDefinition25.isAdvancedTransformation();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test08896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08896");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        java.lang.String[] strArray49 = new java.lang.String[] { "actions", "user", "name", "bulk_size", "", "script_type", "db", "disable_index_refresh", "local", "port", "filter", "gridfs", "drop_collection", "hi!", "include_collection", "secondary_read_preference", "options", "script_type", "index", "import_all_collections", "options", "connect_timeout", "index", "name", "gridfs", "name", "db", "script", "bulk_timeout", "flush_interval", "", "ssl_verify_certificate", "collection", "admin", "include_collection", "concurrent_requests", "secondary_read_preference", "bulk_timeout", "collection", "script_type", "gridfs", "script_type" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder6.excludeFields((java.util.Set<java.lang.String>) strSet50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder6.mongoCollection("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder54.mongoAdminPassword("localhost");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test08897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08897");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.typeName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.typeName("include_fields");
        com.mongodb.BasicDBObject basicDBObject9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoCollectionFilter(basicDBObject9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoClientOptions(mongoClientOptions12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.connectTimeout((int) (short) 10);
        java.lang.String[] strArray60 = new java.lang.String[] { "actions", "user", "name", "bulk_size", "", "script_type", "db", "disable_index_refresh", "local", "port", "filter", "gridfs", "drop_collection", "hi!", "include_collection", "secondary_read_preference", "options", "script_type", "index", "import_all_collections", "options", "connect_timeout", "index", "name", "gridfs", "name", "db", "script", "bulk_timeout", "flush_interval", "", "ssl_verify_certificate", "collection", "admin", "include_collection", "concurrent_requests", "secondary_read_preference", "bulk_timeout", "collection", "script_type", "gridfs", "script_type" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder17.excludeFields((java.util.Set<java.lang.String>) strSet61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder10.parentTypes((java.util.Set<java.lang.String>) strSet61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder10.socketTimeout(27017);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions68 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder67.mongoClientOptions(mongoClientOptions68);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder67.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder71.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder71.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions76 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder75.mongoClientOptions(mongoClientOptions76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition78 = builder77.build();
        java.lang.String str79 = mongoDBRiverDefinition78.getMongoDb();
        java.lang.String str80 = mongoDBRiverDefinition78.getScript();
        java.lang.String str81 = mongoDBRiverDefinition78.getIncludeCollection();
        java.lang.String str82 = mongoDBRiverDefinition78.getMongoLocalUser();
        int int83 = mongoDBRiverDefinition78.getConnectTimeout();
        com.mongodb.BasicDBObject basicDBObject84 = mongoDBRiverDefinition78.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder10.mongoCollectionFilter(basicDBObject84);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder85.connectTimeout(27017);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder89 = builder87.storeStatistics(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 10 + "'", int83 == 10);
        org.junit.Assert.assertNotNull(basicDBObject84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test08898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08898");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoClientOptions(mongoClientOptions4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoClientOptions(mongoClientOptions12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = builder13.build();
        java.lang.String str15 = mongoDBRiverDefinition14.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions16 = mongoDBRiverDefinition14.getMongoClientOptions();
        boolean boolean17 = mongoDBRiverDefinition14.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions18 = mongoDBRiverDefinition14.getMongoClientOptions();
        java.lang.String str19 = mongoDBRiverDefinition14.getScript();
        boolean boolean20 = mongoDBRiverDefinition14.isMongoGridFS();
        java.util.Set<java.lang.String> strSet21 = mongoDBRiverDefinition14.getIncludeFields();
        com.mongodb.BasicDBObject basicDBObject22 = mongoDBRiverDefinition14.getMongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings23 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject22);
        org.elasticsearch.script.ScriptService scriptService24 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("localhost", "concurrent_bulk_requests", riverSettings23, scriptService24);
        java.lang.String str26 = mongoDBRiverDefinition25.getMongoAdminUser();
        java.lang.String str27 = mongoDBRiverDefinition25.getMongoAdminPassword();
        java.util.List<com.mongodb.ServerAddress> serverAddressList28 = mongoDBRiverDefinition25.getMongoServers();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(mongoClientOptions18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertNotNull(basicDBObject22);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(serverAddressList28);
    }

    @Test
    public void test08899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08899");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        com.mongodb.MongoClientOptions mongoClientOptions13 = mongoDBRiverDefinition11.getMongoClientOptions();
        java.lang.String str14 = mongoDBRiverDefinition11.getScript();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp15 = mongoDBRiverDefinition11.getInitialTimestamp();
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition11.getIncludeFields();
        int int17 = mongoDBRiverDefinition11.getThrottleSize();
        boolean boolean18 = mongoDBRiverDefinition11.isDisableIndexRefresh();
        java.lang.String str19 = mongoDBRiverDefinition11.getMongoLocalPassword();
        boolean boolean20 = mongoDBRiverDefinition11.isDisableIndexRefresh();
        java.lang.String str21 = mongoDBRiverDefinition11.getMongoAdminUser();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(wildcardTimestamp15);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test08900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08900");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.includeCollection("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.mongoLocalPassword("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.mongoClientOptions(mongoClientOptions18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.mongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder19.mongoAdminPassword("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.mongoDb("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions27 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.mongoClientOptions(mongoClientOptions27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder26.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder30.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.connectTimeout((int) (short) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.indexName("hi!");
        java.lang.String[] strArray52 = new java.lang.String[] { "disable_index_refresh", "collection", "host", "user", "script_type", "socket_timeout", "include_fields", "bulk", "connect_timeout", "actions", "collection", "connect_timeout", "type" };
        java.util.LinkedHashSet<java.lang.String> strSet53 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet53, strArray52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder36.excludeFields((java.util.Set<java.lang.String>) strSet53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder23.parentTypes((java.util.Set<java.lang.String>) strSet53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder16.excludeFields((java.util.Set<java.lang.String>) strSet53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder16.mongoAdminPassword("exclude_fields");
        com.mongodb.MongoClientOptions mongoClientOptions60 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder59.mongoClientOptions(mongoClientOptions60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder61.advancedTransformation(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test08901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08901");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoAdminPassword();
        boolean boolean13 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        java.lang.String str14 = mongoDBRiverDefinition11.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition11.getParentTypes();
        boolean boolean16 = mongoDBRiverDefinition11.isMongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject17 = mongoDBRiverDefinition11.getMongoCollectionFilter();
        java.lang.String str18 = mongoDBRiverDefinition11.getScriptType();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp19 = mongoDBRiverDefinition11.getInitialTimestamp();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(wildcardTimestamp19);
    }

    @Test
    public void test08902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08902");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.statisticsIndexName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoAdminUser("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.mongoLocalPassword("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder12.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder12.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.storeStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder20.mongoLocalUser("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.connectTimeout((int) (byte) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test08903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08903");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoAdminPassword();
        boolean boolean13 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        boolean boolean14 = mongoDBRiverDefinition11.isSkipInitialImport();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition11.getIncludeFields();
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = mongoDBRiverDefinition11.getMongoServers();
        int int17 = mongoDBRiverDefinition11.getSocketTimeout();
        java.lang.String str18 = mongoDBRiverDefinition11.getIncludeCollection();
        boolean boolean19 = mongoDBRiverDefinition11.isMongoSSLVerifyCertificate();
        int int20 = mongoDBRiverDefinition11.getConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
    }

    @Test
    public void test08904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08904");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        java.lang.String[] strArray49 = new java.lang.String[] { "actions", "user", "name", "bulk_size", "", "script_type", "db", "disable_index_refresh", "local", "port", "filter", "gridfs", "drop_collection", "hi!", "include_collection", "secondary_read_preference", "options", "script_type", "index", "import_all_collections", "options", "connect_timeout", "index", "name", "gridfs", "name", "db", "script", "bulk_timeout", "flush_interval", "", "ssl_verify_certificate", "collection", "admin", "include_collection", "concurrent_requests", "secondary_read_preference", "bulk_timeout", "collection", "script_type", "gridfs", "script_type" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder6.excludeFields((java.util.Set<java.lang.String>) strSet50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder52.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder52.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder56.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder56.mongoDb("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder60.mongoDb("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder60.includeCollection("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder64.mongoSecondaryReadPreference(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test08905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08905");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        com.mongodb.MongoClientOptions mongoClientOptions10 = mongoDBRiverDefinition9.getMongoClientOptions();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoGridFS();
        int int12 = mongoDBRiverDefinition9.getConnectTimeout();
        boolean boolean13 = mongoDBRiverDefinition9.isMongoGridFS();
        java.lang.String str14 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition9.getIncludeFields();
        java.lang.String str16 = mongoDBRiverDefinition9.getTypeName();
        boolean boolean17 = mongoDBRiverDefinition9.isMongoGridFS();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp18 = mongoDBRiverDefinition9.getInitialTimestamp();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardTimestamp18);
    }

    @Test
    public void test08906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08906");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        com.mongodb.MongoClientOptions mongoClientOptions13 = mongoDBRiverDefinition11.getMongoClientOptions();
        java.lang.String str14 = mongoDBRiverDefinition11.getScriptType();
        boolean boolean15 = mongoDBRiverDefinition11.isDropCollection();
        java.lang.String str16 = mongoDBRiverDefinition11.getIncludeCollection();
        boolean boolean17 = mongoDBRiverDefinition11.isImportAllCollections();
        java.lang.String str18 = mongoDBRiverDefinition11.getRiverIndexName();
        java.lang.String str19 = mongoDBRiverDefinition11.getStatisticsIndexName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test08907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08907");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        com.mongodb.MongoClientOptions mongoClientOptions10 = mongoDBRiverDefinition9.getMongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition9.getMongoCollectionFilter();
        boolean boolean12 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.lang.String str13 = mongoDBRiverDefinition9.getScript();
        java.lang.String str14 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str15 = mongoDBRiverDefinition9.getMongoAdminPassword();
        java.lang.String str16 = mongoDBRiverDefinition9.getMongoOplogNamespace();
        java.lang.String str17 = mongoDBRiverDefinition9.getTypeName();
        java.lang.String str18 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.lang.String str19 = mongoDBRiverDefinition9.getScriptType();
        boolean boolean20 = mongoDBRiverDefinition9.isImportAllCollections();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "bulk_size" + "'", str14, "bulk_size");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "null.null" + "'", str16, "null.null");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test08908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08908");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.typeName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.typeName("include_fields");
        com.mongodb.BasicDBObject basicDBObject9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoCollectionFilter(basicDBObject9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.riverName("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.mongoAdminUser("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.mongoUseSSL(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test08909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08909");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoLocalUser("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.statisticsTypeName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder6.typeName("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = builder12.build();
        boolean boolean14 = mongoDBRiverDefinition13.isMongoSSLVerifyCertificate();
        java.lang.String str15 = mongoDBRiverDefinition13.getScript();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test08910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08910");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.typeName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.typeName("include_fields");
        com.mongodb.BasicDBObject basicDBObject9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoCollectionFilter(basicDBObject9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.riverName("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.socketTimeout(8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder8.includeCollection("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder8.throttleSize(8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.importAllCollections(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test08911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08911");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoLocalPassword("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.includeCollection("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder6.script("flush_interval");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder6.mongoDb("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder6.throttleSize((int) (short) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoAdminUser("user");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript19 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj21 = docScoreSearchScript19.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript19.setNextScore((float) 1);
        docScoreSearchScript19.setNextScore((float) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions28 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.mongoClientOptions(mongoClientOptions28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder29.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder29.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.typeName("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder35.indexName("host");
        docScoreSearchScript19.setNextVar("drop_collection", (java.lang.Object) builder35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions42 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.mongoClientOptions(mongoClientOptions42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder41.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject46 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder41.mongoCollectionFilter(basicDBObject46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder41.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder49.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder51.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray59 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder51.includeFields((java.util.Set<java.lang.String>) strSet60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder35.includeFields((java.util.Set<java.lang.String>) strSet60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions65 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder64.mongoClientOptions(mongoClientOptions65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder64.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder68.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder68.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions73 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder72.mongoClientOptions(mongoClientOptions73);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition75 = builder74.build();
        java.lang.String str76 = mongoDBRiverDefinition75.getMongoAdminPassword();
        boolean boolean77 = mongoDBRiverDefinition75.isMongoSecondaryReadPreference();
        java.lang.String str78 = mongoDBRiverDefinition75.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet79 = mongoDBRiverDefinition75.getParentTypes();
        boolean boolean80 = mongoDBRiverDefinition75.isMongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject81 = mongoDBRiverDefinition75.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder63.mongoCollectionFilter(basicDBObject81);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder18.mongoCollectionFilter(basicDBObject81);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder18.mongoCollection("script_type");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + "hi!" + "'", obj21, "hi!");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNull(strSet79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(basicDBObject81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test08912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08912");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition9.getMongoServers();
        java.lang.String str14 = mongoDBRiverDefinition9.getIncludeCollection();
        int int15 = mongoDBRiverDefinition9.getSocketTimeout();
        java.lang.String str16 = mongoDBRiverDefinition9.getScriptType();
        com.mongodb.BasicDBObject basicDBObject17 = mongoDBRiverDefinition9.getMongoOplogFilter();
        java.lang.String str18 = mongoDBRiverDefinition9.getMongoLocalUser();
        boolean boolean19 = mongoDBRiverDefinition9.isDropCollection();
        java.lang.String str20 = mongoDBRiverDefinition9.getIndexName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(basicDBObject17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "bulk_size" + "'", str20, "bulk_size");
    }

    @Test
    public void test08913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08913");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getTypeName();
        boolean boolean13 = mongoDBRiverDefinition11.isDropCollection();
        java.lang.String str14 = mongoDBRiverDefinition11.getIncludeCollection();
        boolean boolean15 = mongoDBRiverDefinition11.isSkipInitialImport();
        boolean boolean16 = mongoDBRiverDefinition11.isMongoGridFS();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test08914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08914");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(10.0f);
        java.lang.Object obj3 = null;
        java.lang.Object obj4 = docScoreSearchScript0.unwrap(obj3);
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextScore((float) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            long long9 = docScoreSearchScript0.runAsLong();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test08915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08915");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder2.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.mongoDb("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.skipInitialImport(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test08916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08916");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder4.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder4.mongoCollection("flush_interval");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder4.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder4.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder4.mongoCollection("user");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test08917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08917");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition9.getMongoServers();
        boolean boolean14 = mongoDBRiverDefinition9.isAdvancedTransformation();
        boolean boolean15 = mongoDBRiverDefinition9.isSkipInitialImport();
        boolean boolean16 = mongoDBRiverDefinition9.isMongoUseSSL();
        int int17 = mongoDBRiverDefinition9.getSocketTimeout();
        int int18 = mongoDBRiverDefinition9.getThrottleSize();
        boolean boolean19 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        int int20 = mongoDBRiverDefinition9.getThrottleSize();
        java.util.Set<java.lang.String> strSet21 = mongoDBRiverDefinition9.getParentTypes();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(strSet21);
    }

    @Test
    public void test08918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08918");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str13 = mongoDBRiverDefinition11.getStatisticsTypeName();
        java.lang.String str14 = mongoDBRiverDefinition11.getScriptType();
        boolean boolean15 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        com.mongodb.BasicDBObject basicDBObject16 = mongoDBRiverDefinition11.getMongoCollectionFilter();
        java.lang.String str17 = mongoDBRiverDefinition11.getMongoCollection();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test08919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08919");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.storeStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.throttleSize(27017);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.mongoCollection("ssl_verify_certificate");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.indexName("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = builder12.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition13);
    }

    @Test
    public void test08920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08920");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions13 = mongoDBRiverDefinition11.getMongoClientOptions();
        boolean boolean14 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions15 = mongoDBRiverDefinition11.getMongoClientOptions();
        java.lang.String str16 = mongoDBRiverDefinition11.getRiverName();
        boolean boolean17 = mongoDBRiverDefinition11.isImportAllCollections();
        java.lang.String str18 = mongoDBRiverDefinition11.getScriptType();
        java.util.List<com.mongodb.ServerAddress> serverAddressList19 = mongoDBRiverDefinition11.getMongoServers();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(serverAddressList19);
    }

    @Test
    public void test08921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08921");
        org.elasticsearch.common.settings.Settings settings0 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap1 = null;
        org.elasticsearch.river.RiverSettings riverSettings2 = new org.elasticsearch.river.RiverSettings(settings0, strMap1);
        org.elasticsearch.common.settings.Settings settings3 = riverSettings2.globalSettings();
        org.elasticsearch.common.settings.Settings settings4 = riverSettings2.globalSettings();
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = riverSettings2.settings();
        java.util.Map<java.lang.String, java.lang.Object> strMap6 = riverSettings2.settings();
        org.elasticsearch.common.settings.Settings settings7 = riverSettings2.globalSettings();
        org.elasticsearch.common.settings.Settings settings8 = riverSettings2.globalSettings();
        org.elasticsearch.common.settings.Settings settings9 = riverSettings2.globalSettings();
        java.util.Map<java.lang.String, java.lang.Object> strMap10 = riverSettings2.settings();
        org.elasticsearch.common.settings.Settings settings11 = riverSettings2.globalSettings();
        org.junit.Assert.assertNull(settings3);
        org.junit.Assert.assertNull(settings4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNull(settings7);
        org.junit.Assert.assertNull(settings8);
        org.junit.Assert.assertNull(settings9);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertNull(settings11);
    }

    @Test
    public void test08922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08922");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.riverIndexName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.riverIndexName("connect_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("throttle_size");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript13 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj15 = docScoreSearchScript13.unwrap((java.lang.Object) "hi!");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory17 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap18 = null;
        org.elasticsearch.script.ExecutableScript executableScript19 = docScoreNativeScriptFactory17.newScript(strMap18);
        docScoreSearchScript13.setNextVar("localhost", (java.lang.Object) docScoreNativeScriptFactory17);
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = null;
        org.elasticsearch.script.ExecutableScript executableScript22 = docScoreNativeScriptFactory17.newScript(strMap21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions24 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.mongoClientOptions(mongoClientOptions24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder23.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder27.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions32 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.mongoClientOptions(mongoClientOptions32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition34 = builder33.build();
        java.lang.String str35 = mongoDBRiverDefinition34.getMongoDb();
        boolean boolean36 = mongoDBRiverDefinition34.isDisableIndexRefresh();
        boolean boolean37 = mongoDBRiverDefinition34.isSkipInitialImport();
        java.lang.String str38 = mongoDBRiverDefinition34.getMongoDb();
        java.lang.String str39 = mongoDBRiverDefinition34.getMongoOplogNamespace();
        java.lang.String str40 = mongoDBRiverDefinition34.getStatisticsTypeName();
        boolean boolean41 = mongoDBRiverDefinition34.isMongoSecondaryReadPreference();
        java.lang.String str42 = mongoDBRiverDefinition34.getMongoLocalPassword();
        java.lang.String str43 = mongoDBRiverDefinition34.getStatisticsTypeName();
        java.lang.String str44 = mongoDBRiverDefinition34.getStatisticsIndexName();
        java.lang.String str45 = mongoDBRiverDefinition34.getIndexName();
        com.mongodb.BasicDBObject basicDBObject46 = mongoDBRiverDefinition34.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript47 = docScoreNativeScriptFactory17.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions49 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.mongoClientOptions(mongoClientOptions49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder48.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder52.typeName("include_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder54.statisticsIndexName("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder54.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder54.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions62 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder61.mongoClientOptions(mongoClientOptions62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder61.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder65.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder65.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions70 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder69.mongoClientOptions(mongoClientOptions70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition72 = builder71.build();
        java.lang.String str73 = mongoDBRiverDefinition72.getMongoDb();
        boolean boolean74 = mongoDBRiverDefinition72.isMongoSecondaryReadPreference();
        com.mongodb.BasicDBObject basicDBObject75 = mongoDBRiverDefinition72.getMongoOplogFilter();
        com.mongodb.BasicDBObject basicDBObject76 = mongoDBRiverDefinition72.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder54.mongoCollectionFilter(basicDBObject76);
        org.elasticsearch.script.ExecutableScript executableScript78 = docScoreNativeScriptFactory17.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions80 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder79.mongoClientOptions(mongoClientOptions80);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder79.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder83.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder83.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions88 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder89 = builder87.mongoClientOptions(mongoClientOptions88);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition90 = builder89.build();
        java.lang.String str91 = mongoDBRiverDefinition90.getMongoDb();
        com.mongodb.MongoClientOptions mongoClientOptions92 = mongoDBRiverDefinition90.getMongoClientOptions();
        java.lang.String str93 = mongoDBRiverDefinition90.getScriptType();
        com.mongodb.MongoClientOptions mongoClientOptions94 = mongoDBRiverDefinition90.getMongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject95 = mongoDBRiverDefinition90.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript96 = docScoreNativeScriptFactory17.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject95);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder97 = builder10.mongoOplogFilter(basicDBObject95);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + "hi!" + "'", obj15, "hi!");
        org.junit.Assert.assertNotNull(executableScript19);
        org.junit.Assert.assertNotNull(executableScript22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "null.null" + "'", str39, "null.null");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(basicDBObject46);
        org.junit.Assert.assertNotNull(executableScript47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(basicDBObject75);
        org.junit.Assert.assertNotNull(basicDBObject76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(executableScript78);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition90);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertNull(mongoClientOptions92);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertNull(mongoClientOptions94);
        org.junit.Assert.assertNotNull(basicDBObject95);
        org.junit.Assert.assertNotNull(executableScript96);
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test08923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08923");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.statisticsIndexName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoAdminUser("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.riverIndexName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.script("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = builder18.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder18.scriptType("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder18.indexName("null.null.null.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder18.indexName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions27 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.mongoClientOptions(mongoClientOptions27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder26.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder30.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions35 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.mongoClientOptions(mongoClientOptions35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition37 = builder36.build();
        java.lang.String str38 = mongoDBRiverDefinition37.getMongoDb();
        boolean boolean39 = mongoDBRiverDefinition37.isDisableIndexRefresh();
        java.lang.String str40 = mongoDBRiverDefinition37.getIndexName();
        boolean boolean41 = mongoDBRiverDefinition37.isDropCollection();
        int int42 = mongoDBRiverDefinition37.getThrottleSize();
        java.util.List<com.mongodb.ServerAddress> serverAddressList43 = mongoDBRiverDefinition37.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder18.mongoServers(serverAddressList43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.socketTimeout(1000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(serverAddressList43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test08924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08924");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition9.getMongoServers();
        boolean boolean14 = mongoDBRiverDefinition9.isAdvancedTransformation();
        boolean boolean15 = mongoDBRiverDefinition9.isDropCollection();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test08925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08925");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        boolean boolean13 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        java.lang.String str14 = mongoDBRiverDefinition11.getMongoCollection();
        java.lang.String str15 = mongoDBRiverDefinition11.getMongoLocalPassword();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test08926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08926");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) 8);
        docScoreSearchScript0.setNextScore(1.0f);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoClientOptions(mongoClientOptions7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.connectTimeout(1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.socketTimeout(8);
        docScoreSearchScript0.setNextVar("parent_types", (java.lang.Object) 8);
        docScoreSearchScript0.setNextScore((float) 8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.mongoClientOptions(mongoClientOptions23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.mongoLocalUser("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder28.typeName("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.typeName("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder32.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions38 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.mongoClientOptions(mongoClientOptions38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder37.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder41.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions46 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder45.mongoClientOptions(mongoClientOptions46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = builder47.build();
        java.lang.String str49 = mongoDBRiverDefinition48.getMongoDb();
        boolean boolean50 = mongoDBRiverDefinition48.isDisableIndexRefresh();
        java.lang.String str51 = mongoDBRiverDefinition48.getIndexName();
        com.mongodb.BasicDBObject basicDBObject52 = mongoDBRiverDefinition48.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder32.mongoCollectionFilter(basicDBObject52);
        java.lang.Object obj54 = docScoreSearchScript0.unwrap((java.lang.Object) builder32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions56 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder55.mongoClientOptions(mongoClientOptions56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder57.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder59.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder61.mongoLocalUser("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder63.socketTimeout((int) 'a');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder65.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder65.statisticsIndexName("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder69.importAllCollections(true);
        java.lang.Object obj72 = docScoreSearchScript0.unwrap((java.lang.Object) builder69);
        docScoreSearchScript0.setNextScore((float) (short) 100);
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 8 + "'", obj2, 8);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(basicDBObject52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(obj72);
    }

    @Test
    public void test08927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08927");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = mongoDBRiverDefinition9.getInitialTimestamp();
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition9.getParentTypes();
        java.lang.String str12 = mongoDBRiverDefinition9.getStatisticsIndexName();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition9.getParentTypes();
        java.lang.String str14 = mongoDBRiverDefinition9.getRiverName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test08928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08928");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.common.settings.Settings settings1 = null;
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap4 = null;
        org.elasticsearch.script.ExecutableScript executableScript5 = docScoreNativeScriptFactory3.newScript(strMap4);
        java.util.Map<java.lang.String, java.lang.Object> strMap6 = null;
        org.elasticsearch.script.ExecutableScript executableScript7 = docScoreNativeScriptFactory3.newScript(strMap6);
        org.elasticsearch.common.settings.Settings settings8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.mongoClientOptions(mongoClientOptions10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.socketTimeout((int) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions17 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoClientOptions(mongoClientOptions17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder20.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder20.throttleSize(0);
        org.elasticsearch.common.settings.Settings settings27 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions29 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.mongoClientOptions(mongoClientOptions29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions36 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.mongoClientOptions(mongoClientOptions36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder35.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder39.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder39.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions44 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoClientOptions(mongoClientOptions44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = builder45.build();
        java.lang.String str47 = mongoDBRiverDefinition46.getMongoAdminPassword();
        boolean boolean48 = mongoDBRiverDefinition46.isMongoSecondaryReadPreference();
        java.lang.String str49 = mongoDBRiverDefinition46.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet50 = mongoDBRiverDefinition46.getParentTypes();
        boolean boolean51 = mongoDBRiverDefinition46.isMongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject52 = mongoDBRiverDefinition46.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder32.mongoCollectionFilter(basicDBObject52);
        org.elasticsearch.river.RiverSettings riverSettings54 = new org.elasticsearch.river.RiverSettings(settings27, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder20.mongoCollectionFilter(basicDBObject52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder13.mongoOplogFilter(basicDBObject52);
        org.elasticsearch.river.RiverSettings riverSettings57 = new org.elasticsearch.river.RiverSettings(settings8, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject52);
        org.elasticsearch.script.ExecutableScript executableScript58 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject52);
        org.elasticsearch.river.RiverSettings riverSettings59 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject52);
        org.elasticsearch.river.RiverSettings riverSettings60 = new org.elasticsearch.river.RiverSettings(settings1, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject52);
        java.util.Map<java.lang.String, java.lang.Object> strMap61 = riverSettings60.settings();
        org.elasticsearch.river.RiverSettings riverSettings62 = new org.elasticsearch.river.RiverSettings(settings0, strMap61);
        org.junit.Assert.assertNotNull(executableScript5);
        org.junit.Assert.assertNotNull(executableScript7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(basicDBObject52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(executableScript58);
        org.junit.Assert.assertNotNull(strMap61);
    }

    @Test
    public void test08929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08929");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoClientOptions(mongoClientOptions12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.mongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.mongoAdminPassword("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.mongoDb("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.mongoClientOptions(mongoClientOptions21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder20.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder24.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.connectTimeout((int) (short) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.indexName("hi!");
        java.lang.String[] strArray46 = new java.lang.String[] { "disable_index_refresh", "collection", "host", "user", "script_type", "socket_timeout", "include_fields", "bulk", "connect_timeout", "actions", "collection", "connect_timeout", "type" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder30.excludeFields((java.util.Set<java.lang.String>) strSet47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder17.parentTypes((java.util.Set<java.lang.String>) strSet47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder8.includeFields((java.util.Set<java.lang.String>) strSet47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder8.includeCollection("null.null");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test08930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08930");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.includeCollection("filter");
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder4.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoDb("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.connectTimeout((int) (byte) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoClientOptions(mongoClientOptions16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder15.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder19.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder19.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder19.script("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder19.riverIndexName("parent_types");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder19.includeCollection("script_type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.mongoClientOptions(mongoClientOptions33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder32.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder36.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions41 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.mongoClientOptions(mongoClientOptions41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition43 = builder42.build();
        java.lang.String str44 = mongoDBRiverDefinition43.getMongoDb();
        boolean boolean45 = mongoDBRiverDefinition43.isMongoSecondaryReadPreference();
        com.mongodb.BasicDBObject basicDBObject46 = mongoDBRiverDefinition43.getMongoOplogFilter();
        java.lang.String str47 = mongoDBRiverDefinition43.getScriptType();
        java.util.List<com.mongodb.ServerAddress> serverAddressList48 = mongoDBRiverDefinition43.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder19.mongoServers(serverAddressList48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder12.mongoServers(serverAddressList48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder12.mongoSSLVerifyCertificate(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(basicDBObject46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(serverAddressList48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test08931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08931");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoLocalPassword("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.typeName("parent_types");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.mongoDb("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder20.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoLocalPassword("ssl_verify_certificate");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.scriptType("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder28.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.mongoCollection("script_type");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test08932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08932");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str13 = mongoDBRiverDefinition11.getMongoDb();
        boolean boolean14 = mongoDBRiverDefinition11.isSkipInitialImport();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test08933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08933");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions13 = mongoDBRiverDefinition11.getMongoClientOptions();
        boolean boolean14 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions15 = mongoDBRiverDefinition11.getMongoClientOptions();
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition11.getParentTypes();
        java.lang.String str17 = mongoDBRiverDefinition11.getIncludeCollection();
        boolean boolean18 = mongoDBRiverDefinition11.isStoreStatistics();
        java.lang.String str19 = mongoDBRiverDefinition11.getScriptType();
        java.lang.String str20 = mongoDBRiverDefinition11.getIndexName();
        com.mongodb.MongoClientOptions mongoClientOptions21 = mongoDBRiverDefinition11.getMongoClientOptions();
        java.lang.String str22 = mongoDBRiverDefinition11.getStatisticsTypeName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(mongoClientOptions21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test08934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08934");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        com.mongodb.MongoClientOptions mongoClientOptions10 = mongoDBRiverDefinition9.getMongoClientOptions();
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition9.getIncludeFields();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp12 = mongoDBRiverDefinition9.getInitialTimestamp();
        java.lang.String str13 = mongoDBRiverDefinition9.getMongoAdminUser();
        int int14 = mongoDBRiverDefinition9.getConnectTimeout();
        boolean boolean15 = mongoDBRiverDefinition9.isMongoGridFS();
        boolean boolean16 = mongoDBRiverDefinition9.isImportAllCollections();
        java.lang.String str17 = mongoDBRiverDefinition9.getStatisticsIndexName();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp18 = mongoDBRiverDefinition9.getInitialTimestamp();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNull(wildcardTimestamp12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(wildcardTimestamp18);
    }

    @Test
    public void test08935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08935");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.mongoClientOptions(mongoClientOptions6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.mongoCollectionFilter(basicDBObject10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray23 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder15.includeFields((java.util.Set<java.lang.String>) strSet24);
        java.lang.Object obj27 = docScoreSearchScript0.unwrap((java.lang.Object) builder15);
        docScoreSearchScript0.setNextScore((float) (byte) 100);
        docScoreSearchScript0.setNextScore((float) '4');
        org.elasticsearch.common.settings.Settings settings33 = null;
        org.elasticsearch.common.settings.Settings settings36 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions38 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.mongoClientOptions(mongoClientOptions38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder37.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder41.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions46 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder45.mongoClientOptions(mongoClientOptions46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = builder47.build();
        java.lang.String str49 = mongoDBRiverDefinition48.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions50 = mongoDBRiverDefinition48.getMongoClientOptions();
        boolean boolean51 = mongoDBRiverDefinition48.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions52 = mongoDBRiverDefinition48.getMongoClientOptions();
        java.lang.String str53 = mongoDBRiverDefinition48.getScript();
        com.mongodb.BasicDBObject basicDBObject54 = mongoDBRiverDefinition48.getMongoOplogFilter();
        java.lang.String str55 = mongoDBRiverDefinition48.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject56 = mongoDBRiverDefinition48.getMongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings57 = new org.elasticsearch.river.RiverSettings(settings36, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        org.elasticsearch.common.settings.Settings settings58 = riverSettings57.globalSettings();
        org.elasticsearch.script.ScriptService scriptService59 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition60 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("size", "index", riverSettings57, scriptService59);
        org.elasticsearch.common.settings.Settings settings61 = riverSettings57.globalSettings();
        java.util.Map<java.lang.String, java.lang.Object> strMap62 = riverSettings57.settings();
        org.elasticsearch.river.RiverSettings riverSettings63 = new org.elasticsearch.river.RiverSettings(settings33, strMap62);
        docScoreSearchScript0.setNextVar("localhost.localhost", (java.lang.Object) settings33);
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNull(mongoClientOptions50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(mongoClientOptions52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(basicDBObject54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(basicDBObject56);
        org.junit.Assert.assertNull(settings58);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition60);
        org.junit.Assert.assertNull(settings61);
        org.junit.Assert.assertNotNull(strMap62);
    }

    @Test
    public void test08936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08936");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        com.mongodb.MongoClientOptions mongoClientOptions13 = mongoDBRiverDefinition11.getMongoClientOptions();
        java.lang.String str14 = mongoDBRiverDefinition11.getScriptType();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition11.getExcludeFields();
        java.lang.String str16 = mongoDBRiverDefinition11.getStatisticsTypeName();
        boolean boolean17 = mongoDBRiverDefinition11.isMongoSSLVerifyCertificate();
        java.lang.String str18 = mongoDBRiverDefinition11.getTypeName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test08937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08937");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoDb();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition9.getMongoServers();
        boolean boolean14 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str15 = mongoDBRiverDefinition9.getMongoAdminPassword();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test08938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08938");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.mongoUseSSL(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test08939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08939");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.statisticsTypeName("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder6.throttleSize(8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.statisticsIndexName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.riverName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder12.mongoGridFS(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test08940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08940");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.riverIndexName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.includeCollection("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoUseSSL(false);
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoClientOptions(mongoClientOptions19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.mongoAdminPassword("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.mongoLocalUser("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder24.statisticsIndexName("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder24.script("bulk");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test08941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08941");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoClientOptions(mongoClientOptions7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSecondaryReadPreference(true);
        docScoreSearchScript0.setNextVar("import_all_collections", (java.lang.Object) builder12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoClientOptions(mongoClientOptions15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder18.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder18.script("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder18.riverIndexName("parent_types");
        java.lang.Object obj29 = docScoreSearchScript0.unwrap((java.lang.Object) builder28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions31 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.mongoClientOptions(mongoClientOptions31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.mongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.riverIndexName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder34.riverName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder34.scriptType("connect_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions42 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.mongoClientOptions(mongoClientOptions42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder41.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder45.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder45.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions50 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder49.mongoClientOptions(mongoClientOptions50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = builder51.build();
        java.lang.String str53 = mongoDBRiverDefinition52.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions54 = mongoDBRiverDefinition52.getMongoClientOptions();
        boolean boolean55 = mongoDBRiverDefinition52.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions56 = mongoDBRiverDefinition52.getMongoClientOptions();
        java.lang.String str57 = mongoDBRiverDefinition52.getScript();
        com.mongodb.BasicDBObject basicDBObject58 = mongoDBRiverDefinition52.getMongoOplogFilter();
        java.lang.String str59 = mongoDBRiverDefinition52.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject60 = mongoDBRiverDefinition52.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder34.mongoOplogFilter(basicDBObject60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder34.includeCollection("");
        java.lang.Object obj64 = docScoreSearchScript0.unwrap((java.lang.Object) "");
        // The following exception was thrown during execution in test generation
        try {
            float float65 = docScoreSearchScript0.runAsFloat();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNull(mongoClientOptions54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(mongoClientOptions56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(basicDBObject58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(basicDBObject60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertEquals("'" + obj64 + "' != '" + "" + "'", obj64, "");
    }

    @Test
    public void test08942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08942");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str13 = mongoDBRiverDefinition11.getStatisticsTypeName();
        java.lang.String str14 = mongoDBRiverDefinition11.getScriptType();
        boolean boolean15 = mongoDBRiverDefinition11.isMongoGridFS();
        java.lang.String str16 = mongoDBRiverDefinition11.getIndexName();
        java.lang.String str17 = mongoDBRiverDefinition11.getMongoLocalPassword();
        java.lang.String str18 = mongoDBRiverDefinition11.getRiverIndexName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test08943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08943");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.statisticsIndexName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.typeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.mongoClientOptions(mongoClientOptions20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder19.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject24 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder19.mongoCollectionFilter(basicDBObject24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.mongoLocalPassword("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions29 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.mongoClientOptions(mongoClientOptions29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder28.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder32.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder32.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder32.indexName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder32.mongoCollection("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.mongoLocalPassword("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions46 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder45.mongoClientOptions(mongoClientOptions46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder45.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder49.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder49.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder53.connectTimeout((int) (short) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder55.indexName("hi!");
        java.lang.String[] strArray71 = new java.lang.String[] { "disable_index_refresh", "collection", "host", "user", "script_type", "socket_timeout", "include_fields", "bulk", "connect_timeout", "actions", "collection", "connect_timeout", "type" };
        java.util.LinkedHashSet<java.lang.String> strSet72 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet72, strArray71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder55.excludeFields((java.util.Set<java.lang.String>) strSet72);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder42.includeFields((java.util.Set<java.lang.String>) strSet72);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder25.parentTypes((java.util.Set<java.lang.String>) strSet72);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder18.excludeFields((java.util.Set<java.lang.String>) strSet72);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder77.mongoDb("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition80 = builder79.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder79.storeStatistics(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition80);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test08944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08944");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition9.getMongoServers();
        boolean boolean14 = mongoDBRiverDefinition9.isAdvancedTransformation();
        boolean boolean15 = mongoDBRiverDefinition9.isMongoUseSSL();
        boolean boolean16 = mongoDBRiverDefinition9.isMongoUseSSL();
        boolean boolean17 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.lang.String str18 = mongoDBRiverDefinition9.getIncludeCollection();
        boolean boolean19 = mongoDBRiverDefinition9.isImportAllCollections();
        com.mongodb.BasicDBObject basicDBObject20 = mongoDBRiverDefinition9.getMongoCollectionFilter();
        boolean boolean21 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.lang.String str22 = mongoDBRiverDefinition9.getScriptType();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(basicDBObject20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test08945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08945");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript0.setNextScore((float) 1);
        docScoreSearchScript0.setNextScore((float) (-1L));
        docScoreSearchScript0.setNextScore((float) 0L);
        docScoreSearchScript0.setNextScore((float) 100L);
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
    }

    @Test
    public void test08946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08946");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript0.setNextScore((float) 1);
        docScoreSearchScript0.setNextScore((float) (-1L));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.mongoCollectionFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.riverIndexName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder18.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder18.connectTimeout((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = builder18.build();
        java.lang.String str28 = mongoDBRiverDefinition27.getMongoAdminUser();
        docScoreSearchScript0.setNextVar("localhost", (java.lang.Object) mongoDBRiverDefinition27);
        // The following exception was thrown during execution in test generation
        try {
            long long30 = docScoreSearchScript0.runAsLong();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test08947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08947");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.typeName("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.riverName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.script("ssl_verify_certificate");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.riverName("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.mongoLocalPassword("gridfs");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test08948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08948");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoAdminPassword();
        java.lang.String str13 = mongoDBRiverDefinition11.getMongoCollection();
        java.lang.String str14 = mongoDBRiverDefinition11.getRiverName();
        int int15 = mongoDBRiverDefinition11.getThrottleSize();
        com.mongodb.MongoClientOptions mongoClientOptions16 = mongoDBRiverDefinition11.getMongoClientOptions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(mongoClientOptions16);
    }

    @Test
    public void test08949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08949");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        com.mongodb.MongoClientOptions mongoClientOptions10 = mongoDBRiverDefinition9.getMongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition9.getMongoCollectionFilter();
        boolean boolean12 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.lang.String str13 = mongoDBRiverDefinition9.getScript();
        java.lang.String str14 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str15 = mongoDBRiverDefinition9.getRiverName();
        com.mongodb.BasicDBObject basicDBObject16 = mongoDBRiverDefinition9.getMongoCollectionFilter();
        java.lang.String str17 = mongoDBRiverDefinition9.getMongoOplogNamespace();
        java.lang.String str18 = mongoDBRiverDefinition9.getIndexName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "bulk_size" + "'", str14, "bulk_size");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(basicDBObject16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "null.null" + "'", str17, "null.null");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "bulk_size" + "'", str18, "bulk_size");
    }

    @Test
    public void test08950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08950");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.mongoAdminPassword("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoDb("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder6.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoAdminPassword("ssl.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder6.statisticsIndexName("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder6.mongoLocalPassword("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder6.riverIndexName("drop_collection");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test08951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08951");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoClientOptions(mongoClientOptions4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder7.throttleSize(0);
        org.elasticsearch.common.settings.Settings settings14 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoClientOptions(mongoClientOptions16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.mongoClientOptions(mongoClientOptions23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder22.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder26.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions31 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.mongoClientOptions(mongoClientOptions31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = builder32.build();
        java.lang.String str34 = mongoDBRiverDefinition33.getMongoAdminPassword();
        boolean boolean35 = mongoDBRiverDefinition33.isMongoSecondaryReadPreference();
        java.lang.String str36 = mongoDBRiverDefinition33.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet37 = mongoDBRiverDefinition33.getParentTypes();
        boolean boolean38 = mongoDBRiverDefinition33.isMongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject39 = mongoDBRiverDefinition33.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder19.mongoCollectionFilter(basicDBObject39);
        org.elasticsearch.river.RiverSettings riverSettings41 = new org.elasticsearch.river.RiverSettings(settings14, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder7.mongoCollectionFilter(basicDBObject39);
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject39);
        org.elasticsearch.script.ScriptService scriptService44 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition45 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("drop_collection", "bulk_timeout", riverSettings43, scriptService44);
        int int46 = mongoDBRiverDefinition45.getThrottleSize();
        boolean boolean47 = mongoDBRiverDefinition45.isMongoUseSSL();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNull(strSet37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(basicDBObject39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test08952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08952");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript0.setNextScore((float) 1000);
        docScoreSearchScript0.setNextScore((float) 1000);
        docScoreSearchScript0.setNextScore((float) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.mongoClientOptions(mongoClientOptions10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject14 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder9.mongoCollectionFilter(basicDBObject14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder9.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder9.riverName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.indexName("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder21.mongoAdminUser("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder21.mongoLocalUser("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder21.includeCollection("store_statistics");
        java.lang.Object obj30 = docScoreSearchScript0.unwrap((java.lang.Object) "store_statistics");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertEquals("'" + obj30 + "' != '" + "store_statistics" + "'", obj30, "store_statistics");
    }

    @Test
    public void test08953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08953");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.riverName("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.mongoAdminUser("include_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.skipInitialImport(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test08954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08954");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.mongoClientOptions(mongoClientOptions6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.mongoCollectionFilter(basicDBObject10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray23 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder15.includeFields((java.util.Set<java.lang.String>) strSet24);
        java.lang.Object obj27 = docScoreSearchScript0.unwrap((java.lang.Object) builder15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder15.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.statisticsIndexName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder31.mongoGridFS(true);
        com.mongodb.MongoClientOptions mongoClientOptions36 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder31.mongoClientOptions(mongoClientOptions36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder37.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.mongoSecondaryReadPreference(true);
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test08955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08955");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoLocalUser("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.typeName("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.typeName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.mongoLocalUser("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder14.riverName("filter");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test08956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08956");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        com.mongodb.MongoClientOptions mongoClientOptions10 = mongoDBRiverDefinition9.getMongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition9.getMongoCollectionFilter();
        boolean boolean12 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.lang.String str13 = mongoDBRiverDefinition9.getScript();
        com.mongodb.MongoClientOptions mongoClientOptions14 = mongoDBRiverDefinition9.getMongoClientOptions();
        boolean boolean15 = mongoDBRiverDefinition9.isDisableIndexRefresh();
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition9.getIncludeFields();
        java.lang.String str17 = mongoDBRiverDefinition9.getScript();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test08957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08957");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isSkipInitialImport();
        boolean boolean12 = mongoDBRiverDefinition9.isMongoSecondaryReadPreference();
        boolean boolean13 = mongoDBRiverDefinition9.isImportAllCollections();
        java.lang.String str14 = mongoDBRiverDefinition9.getMongoOplogNamespace();
        boolean boolean15 = mongoDBRiverDefinition9.isImportAllCollections();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "null.null" + "'", str14, "null.null");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test08958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08958");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition9.getMongoServers();
        boolean boolean14 = mongoDBRiverDefinition9.isAdvancedTransformation();
        boolean boolean15 = mongoDBRiverDefinition9.isSkipInitialImport();
        boolean boolean16 = mongoDBRiverDefinition9.isMongoUseSSL();
        int int17 = mongoDBRiverDefinition9.getConnectTimeout();
        boolean boolean18 = mongoDBRiverDefinition9.isMongoUseSSL();
        java.lang.String str19 = mongoDBRiverDefinition9.getScriptType();
        boolean boolean20 = mongoDBRiverDefinition9.isMongoUseSSL();
        java.util.Set<java.lang.String> strSet21 = mongoDBRiverDefinition9.getExcludeFields();
        boolean boolean22 = mongoDBRiverDefinition9.isDisableIndexRefresh();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test08959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08959");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.typeName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.connectTimeout((int) (byte) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.throttleSize((-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoLocalUser("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.statisticsIndexName("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoLocalPassword("concurrent_requests");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test08960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08960");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.socketTimeout((int) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.statisticsIndexName("script_type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.mongoClientOptions(mongoClientOptions10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject14 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder9.mongoCollectionFilter(basicDBObject14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder9.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder17.includeCollection("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder17.mongoLocalPassword("gridfs");
        java.util.Set<java.lang.String> strSet24 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder17.includeFields(strSet24);
        java.lang.String[] strArray29 = new java.lang.String[] { "advanced_transformation", "ssl", "secondary_read_preference" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder25.includeFields((java.util.Set<java.lang.String>) strSet30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder4.parentTypes((java.util.Set<java.lang.String>) strSet30);
        com.mongodb.BasicDBObject basicDBObject34 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.mongoOplogFilter(basicDBObject34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.socketTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.skipInitialImport(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test08961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08961");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.mongoClientOptions(mongoClientOptions6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.mongoCollectionFilter(basicDBObject10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray23 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder15.includeFields((java.util.Set<java.lang.String>) strSet24);
        java.lang.Object obj27 = docScoreSearchScript0.unwrap((java.lang.Object) builder15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder15.statisticsIndexName("localhost");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.mongoDb("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder29.typeName("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = builder35.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions38 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.mongoClientOptions(mongoClientOptions38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder39.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder39.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder39.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder39.typeName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder39.mongoLocalUser("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder49.socketTimeout((int) (byte) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions53 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder52.mongoClientOptions(mongoClientOptions53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder52.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject57 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder52.mongoCollectionFilter(basicDBObject57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder52.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition61 = builder60.build();
        boolean boolean62 = mongoDBRiverDefinition61.isStoreStatistics();
        boolean boolean63 = mongoDBRiverDefinition61.isMongoSSLVerifyCertificate();
        java.lang.String str64 = mongoDBRiverDefinition61.getMongoAdminPassword();
        java.lang.String str65 = mongoDBRiverDefinition61.getTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList66 = mongoDBRiverDefinition61.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder51.mongoServers(serverAddressList66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder35.mongoServers(serverAddressList66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder35.storeStatistics(true);
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(serverAddressList66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test08962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08962");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoClientOptions(mongoClientOptions4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoClientOptions(mongoClientOptions12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = builder13.build();
        java.lang.String str15 = mongoDBRiverDefinition14.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions16 = mongoDBRiverDefinition14.getMongoClientOptions();
        boolean boolean17 = mongoDBRiverDefinition14.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions18 = mongoDBRiverDefinition14.getMongoClientOptions();
        java.lang.String str19 = mongoDBRiverDefinition14.getScript();
        com.mongodb.BasicDBObject basicDBObject20 = mongoDBRiverDefinition14.getMongoOplogFilter();
        java.lang.String str21 = mongoDBRiverDefinition14.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject22 = mongoDBRiverDefinition14.getMongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings23 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject22);
        org.elasticsearch.common.settings.Settings settings24 = riverSettings23.globalSettings();
        java.util.Map<java.lang.String, java.lang.Object> strMap25 = riverSettings23.settings();
        org.elasticsearch.script.ScriptService scriptService26 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("exclude_fields", "flush_interval", riverSettings23, scriptService26);
        java.util.Map<java.lang.String, java.lang.Object> strMap28 = riverSettings23.settings();
        org.elasticsearch.common.settings.Settings settings29 = riverSettings23.globalSettings();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(mongoClientOptions18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(basicDBObject20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(basicDBObject22);
        org.junit.Assert.assertNull(settings24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNull(settings29);
    }

    @Test
    public void test08963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08963");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder4.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder4.connectTimeout(0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.socketTimeout(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = builder16.build();
        int int18 = mongoDBRiverDefinition17.getThrottleSize();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test08964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08964");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.mongoClientOptions(mongoClientOptions6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.mongoCollectionFilter(basicDBObject10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray23 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder15.includeFields((java.util.Set<java.lang.String>) strSet24);
        java.lang.Object obj27 = docScoreSearchScript0.unwrap((java.lang.Object) builder15);
        docScoreSearchScript0.setNextScore((float) (-1L));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions32 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.mongoClientOptions(mongoClientOptions32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder31.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject36 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder31.mongoCollectionFilter(basicDBObject36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder31.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder39.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.mongoSSLVerifyCertificate(false);
        com.mongodb.BasicDBObject basicDBObject44 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder41.mongoOplogFilter(basicDBObject44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder41.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder41.storeStatistics(false);
        java.lang.Class<?> wildcardClass50 = builder49.getClass();
        docScoreSearchScript0.setNextVar("drop_collection", (java.lang.Object) wildcardClass50);
        docScoreSearchScript0.setNextScore((float) 10L);
        docScoreSearchScript0.setNextScore((float) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions58 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder57.mongoClientOptions(mongoClientOptions58);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder57.importAllCollections(false);
        com.mongodb.ServerAddress[] serverAddressArray62 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList63 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList63, serverAddressArray62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder57.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList63);
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) builder65);
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(serverAddressArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test08965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08965");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.scriptType("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder14.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder20.dropCollection(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test08966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08966");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.typeName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.typeName("include_fields");
        com.mongodb.BasicDBObject basicDBObject9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoCollectionFilter(basicDBObject9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.riverName("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.socketTimeout(8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder8.includeCollection("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder8.throttleSize(8);
        org.bson.types.BSONTimestamp bSONTimestamp21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.initialTimestamp(bSONTimestamp21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test08967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08967");
        org.elasticsearch.common.settings.Settings settings4 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.mongoClientOptions(mongoClientOptions6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoClientOptions(mongoClientOptions13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.mongoClientOptions(mongoClientOptions21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = builder22.build();
        java.lang.String str24 = mongoDBRiverDefinition23.getMongoAdminPassword();
        boolean boolean25 = mongoDBRiverDefinition23.isMongoSecondaryReadPreference();
        java.lang.String str26 = mongoDBRiverDefinition23.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet27 = mongoDBRiverDefinition23.getParentTypes();
        boolean boolean28 = mongoDBRiverDefinition23.isMongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject29 = mongoDBRiverDefinition23.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder9.mongoCollectionFilter(basicDBObject29);
        org.elasticsearch.river.RiverSettings riverSettings31 = new org.elasticsearch.river.RiverSettings(settings4, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject29);
        java.util.Map<java.lang.String, java.lang.Object> strMap32 = riverSettings31.settings();
        org.elasticsearch.script.ScriptService scriptService33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition34 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("concurrent_bulk_requests", "advanced_transformation", riverSettings31, scriptService33);
        org.elasticsearch.script.ScriptService scriptService35 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("include_fields", "advanced_transformation", riverSettings31, scriptService35);
        java.util.List<com.mongodb.ServerAddress> serverAddressList37 = mongoDBRiverDefinition36.getMongoServers();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(basicDBObject29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition34);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition36);
        org.junit.Assert.assertNotNull(serverAddressList37);
    }

    @Test
    public void test08968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08968");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.mongoAdminPassword("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoDb("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder6.build();
        boolean boolean10 = mongoDBRiverDefinition9.isDisableIndexRefresh();
        boolean boolean11 = mongoDBRiverDefinition9.isDropCollection();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoOplogNamespace();
        java.lang.String str13 = mongoDBRiverDefinition9.getScriptType();
        boolean boolean14 = mongoDBRiverDefinition9.isDropCollection();
        java.lang.String str15 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.lang.String str16 = mongoDBRiverDefinition9.getScript();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ssl.null" + "'", str12, "ssl.null");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test08969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08969");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder4.socketTimeout((int) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder4.riverIndexName("null.null.null.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.mongoClientOptions(mongoClientOptions14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoClientOptions(mongoClientOptions19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.connectTimeout((int) (short) 10);
        java.lang.String[] strArray67 = new java.lang.String[] { "actions", "user", "name", "bulk_size", "", "script_type", "db", "disable_index_refresh", "local", "port", "filter", "gridfs", "drop_collection", "hi!", "include_collection", "secondary_read_preference", "options", "script_type", "index", "import_all_collections", "options", "connect_timeout", "index", "name", "gridfs", "name", "db", "script", "bulk_timeout", "flush_interval", "", "ssl_verify_certificate", "collection", "admin", "include_collection", "concurrent_requests", "secondary_read_preference", "bulk_timeout", "collection", "script_type", "gridfs", "script_type" };
        java.util.LinkedHashSet<java.lang.String> strSet68 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet68, strArray67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder24.excludeFields((java.util.Set<java.lang.String>) strSet68);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder15.includeFields((java.util.Set<java.lang.String>) strSet68);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder12.includeFields((java.util.Set<java.lang.String>) strSet68);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder72.disableIndexRefresh(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test08970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08970");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.mongoClientOptions(mongoClientOptions6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.mongoCollectionFilter(basicDBObject10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray23 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder15.includeFields((java.util.Set<java.lang.String>) strSet24);
        java.lang.Object obj27 = docScoreSearchScript0.unwrap((java.lang.Object) builder15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder15.statisticsIndexName("localhost");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder29.riverIndexName("secondary_read_preference");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test08971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08971");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.typeName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.typeName("include_fields");
        com.mongodb.BasicDBObject basicDBObject9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoCollectionFilter(basicDBObject9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.riverName("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.socketTimeout(8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.socketTimeout(1000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.socketTimeout((int) (short) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.script("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder20.throttleSize(8);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test08972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08972");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.riverName("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.mongoSSLVerifyCertificate(true);
        com.mongodb.BasicDBObject basicDBObject13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.mongoCollectionFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.riverName("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder8.scriptType("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoAdminPassword("script_type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.skipInitialImport(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test08973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08973");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.typeName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.typeName("include_fields");
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("include_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.mongoAdminUser("throttle_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder12.mongoLocalUser("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = builder18.build();
        org.bson.types.BSONTimestamp bSONTimestamp20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder18.initialTimestamp(bSONTimestamp20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition19);
    }

    @Test
    public void test08974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08974");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.socketTimeout((int) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.socketTimeout(1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.storeStatistics(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test08975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08975");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.mongoClientOptions(mongoClientOptions6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.mongoCollectionFilter(basicDBObject10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray23 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder15.includeFields((java.util.Set<java.lang.String>) strSet24);
        java.lang.Object obj27 = docScoreSearchScript0.unwrap((java.lang.Object) builder15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder15.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.riverName("port");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory32 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap33 = null;
        org.elasticsearch.script.ExecutableScript executableScript34 = docScoreNativeScriptFactory32.newScript(strMap33);
        java.util.Map<java.lang.String, java.lang.Object> strMap35 = null;
        org.elasticsearch.script.ExecutableScript executableScript36 = docScoreNativeScriptFactory32.newScript(strMap35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions38 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.mongoClientOptions(mongoClientOptions38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder37.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder41.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions46 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder45.mongoClientOptions(mongoClientOptions46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = builder47.build();
        java.lang.String str49 = mongoDBRiverDefinition48.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions50 = mongoDBRiverDefinition48.getMongoClientOptions();
        boolean boolean51 = mongoDBRiverDefinition48.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions52 = mongoDBRiverDefinition48.getMongoClientOptions();
        java.lang.String str53 = mongoDBRiverDefinition48.getScript();
        com.mongodb.BasicDBObject basicDBObject54 = mongoDBRiverDefinition48.getMongoOplogFilter();
        java.lang.String str55 = mongoDBRiverDefinition48.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject56 = mongoDBRiverDefinition48.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript57 = docScoreNativeScriptFactory32.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder31.mongoCollectionFilter(basicDBObject56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder31.statisticsIndexName("filter");
        com.mongodb.MongoClientOptions mongoClientOptions61 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder60.mongoClientOptions(mongoClientOptions61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder60.statisticsTypeName("parent_types");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder60.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder66.includeCollection("disable_index_refresh");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(executableScript34);
        org.junit.Assert.assertNotNull(executableScript36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNull(mongoClientOptions50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(mongoClientOptions52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(basicDBObject54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(basicDBObject56);
        org.junit.Assert.assertNotNull(executableScript57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test08976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08976");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.mongoLocalPassword("include_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.mongoClientOptions(mongoClientOptions10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject14 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder9.mongoCollectionFilter(basicDBObject14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder9.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = builder17.build();
        boolean boolean19 = mongoDBRiverDefinition18.isStoreStatistics();
        boolean boolean20 = mongoDBRiverDefinition18.isMongoSSLVerifyCertificate();
        java.lang.String str21 = mongoDBRiverDefinition18.getStatisticsTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList22 = mongoDBRiverDefinition18.getMongoServers();
        java.lang.String str23 = mongoDBRiverDefinition18.getStatisticsTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList24 = mongoDBRiverDefinition18.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder8.mongoServers(serverAddressList24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder8.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder8.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder8.mongoAdminPassword("throttle_size");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(serverAddressList22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(serverAddressList24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test08977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08977");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.riverIndexName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = builder10.build();
        java.lang.String str18 = mongoDBRiverDefinition17.getMongoCollection();
        java.lang.String str19 = mongoDBRiverDefinition17.getRiverIndexName();
        com.mongodb.BasicDBObject basicDBObject20 = mongoDBRiverDefinition17.getMongoOplogFilter();
        boolean boolean21 = mongoDBRiverDefinition17.isDisableIndexRefresh();
        boolean boolean22 = mongoDBRiverDefinition17.isSkipInitialImport();
        java.lang.String str23 = mongoDBRiverDefinition17.getMongoDb();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "import_all_collections" + "'", str19, "import_all_collections");
        org.junit.Assert.assertNull(basicDBObject20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test08978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08978");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition9.getMongoServers();
        boolean boolean14 = mongoDBRiverDefinition9.isAdvancedTransformation();
        boolean boolean15 = mongoDBRiverDefinition9.isSkipInitialImport();
        boolean boolean16 = mongoDBRiverDefinition9.isMongoUseSSL();
        int int17 = mongoDBRiverDefinition9.getSocketTimeout();
        java.lang.String str18 = mongoDBRiverDefinition9.getMongoCollection();
        java.lang.String str19 = mongoDBRiverDefinition9.getRiverName();
        java.util.Set<java.lang.String> strSet20 = mongoDBRiverDefinition9.getParentTypes();
        boolean boolean21 = mongoDBRiverDefinition9.isStoreStatistics();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp22 = mongoDBRiverDefinition9.getInitialTimestamp();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardTimestamp22);
    }

    @Test
    public void test08979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08979");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        boolean boolean13 = mongoDBRiverDefinition11.isDisableIndexRefresh();
        java.lang.String str14 = mongoDBRiverDefinition11.getIndexName();
        java.lang.String str15 = mongoDBRiverDefinition11.getScript();
        java.lang.String str16 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str17 = mongoDBRiverDefinition11.getTypeName();
        java.lang.String str18 = mongoDBRiverDefinition11.getScriptType();
        boolean boolean19 = mongoDBRiverDefinition11.isStoreStatistics();
        java.lang.String str20 = mongoDBRiverDefinition11.getStatisticsTypeName();
        boolean boolean21 = mongoDBRiverDefinition11.isMongoSSLVerifyCertificate();
        java.lang.String str22 = mongoDBRiverDefinition11.getScriptType();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test08980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08980");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoDb();
        int int13 = mongoDBRiverDefinition9.getConnectTimeout();
        java.lang.String str14 = mongoDBRiverDefinition9.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject15 = mongoDBRiverDefinition9.getMongoOplogFilter();
        com.mongodb.BasicDBObject basicDBObject16 = mongoDBRiverDefinition9.getMongoOplogFilter();
        java.lang.String str17 = mongoDBRiverDefinition9.getMongoAdminPassword();
        java.lang.String str18 = mongoDBRiverDefinition9.getRiverIndexName();
        java.lang.String str19 = mongoDBRiverDefinition9.getIncludeCollection();
        java.lang.String str20 = mongoDBRiverDefinition9.getIndexName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList21 = mongoDBRiverDefinition9.getMongoServers();
        int int22 = mongoDBRiverDefinition9.getThrottleSize();
        java.lang.String str23 = mongoDBRiverDefinition9.getRiverName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(basicDBObject15);
        org.junit.Assert.assertNull(basicDBObject16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "bulk_size" + "'", str20, "bulk_size");
        org.junit.Assert.assertNotNull(serverAddressList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test08981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08981");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray18 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder10.includeFields((java.util.Set<java.lang.String>) strSet19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder10.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder10.statisticsTypeName("db");
        com.mongodb.MongoClientOptions mongoClientOptions26 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder10.mongoClientOptions(mongoClientOptions26);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript28 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj30 = docScoreSearchScript28.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript28.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions34 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.mongoClientOptions(mongoClientOptions34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder33.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject38 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder33.mongoCollectionFilter(basicDBObject38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder33.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoSSLVerifyCertificate(false);
        java.lang.String[] strArray51 = new java.lang.String[] { "collection", "admin", "store_statistics", "include_fields", "script" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder43.includeFields((java.util.Set<java.lang.String>) strSet52);
        java.lang.Object obj55 = docScoreSearchScript28.unwrap((java.lang.Object) builder43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder43.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder57.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder59.statisticsIndexName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder59.mongoGridFS(true);
        com.mongodb.MongoClientOptions mongoClientOptions64 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder59.mongoClientOptions(mongoClientOptions64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition66 = builder59.build();
        java.util.Set<java.lang.String> strSet67 = mongoDBRiverDefinition66.getIncludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder10.excludeFields(strSet67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition69 = builder68.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + obj30 + "' != '" + "hi!" + "'", obj30, "hi!");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition66);
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition69);
    }

    @Test
    public void test08982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08982");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "hi!");
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoClientOptions(mongoClientOptions7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSecondaryReadPreference(true);
        docScoreSearchScript0.setNextVar("import_all_collections", (java.lang.Object) builder12);
        docScoreSearchScript0.setNextScore((float) (byte) 10);
        docScoreSearchScript0.setNextScore((float) 1);
        docScoreSearchScript0.setNextScore((float) 0);
        org.apache.lucene.search.Scorer scorer20 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setScorer(scorer20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "hi!" + "'", obj2, "hi!");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test08983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08983");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str13 = mongoDBRiverDefinition11.getStatisticsTypeName();
        boolean boolean14 = mongoDBRiverDefinition11.isImportAllCollections();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp15 = mongoDBRiverDefinition11.getInitialTimestamp();
        int int16 = mongoDBRiverDefinition11.getSocketTimeout();
        int int17 = mongoDBRiverDefinition11.getConnectTimeout();
        java.lang.String str18 = mongoDBRiverDefinition11.getMongoAdminUser();
        java.util.Set<java.lang.String> strSet19 = mongoDBRiverDefinition11.getExcludeFields();
        java.lang.String str20 = mongoDBRiverDefinition11.getIncludeCollection();
        java.util.Set<java.lang.String> strSet21 = mongoDBRiverDefinition11.getExcludeFields();
        java.lang.String str22 = mongoDBRiverDefinition11.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet23 = mongoDBRiverDefinition11.getExcludeFields();
        java.lang.String str24 = mongoDBRiverDefinition11.getIncludeCollection();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(wildcardTimestamp15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test08984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08984");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str13 = mongoDBRiverDefinition11.getStatisticsTypeName();
        java.lang.String str14 = mongoDBRiverDefinition11.getScriptType();
        boolean boolean15 = mongoDBRiverDefinition11.isMongoGridFS();
        java.lang.String str16 = mongoDBRiverDefinition11.getIndexName();
        int int17 = mongoDBRiverDefinition11.getThrottleSize();
        boolean boolean18 = mongoDBRiverDefinition11.isMongoSSLVerifyCertificate();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test08985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08985");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str13 = mongoDBRiverDefinition11.getScript();
        java.lang.String str14 = mongoDBRiverDefinition11.getMongoCollection();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition11.getIncludeFields();
        com.mongodb.MongoClientOptions mongoClientOptions16 = mongoDBRiverDefinition11.getMongoClientOptions();
        boolean boolean17 = mongoDBRiverDefinition11.isMongoUseSSL();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp18 = mongoDBRiverDefinition11.getInitialTimestamp();
        int int19 = mongoDBRiverDefinition11.getThrottleSize();
        java.util.Set<java.lang.String> strSet20 = mongoDBRiverDefinition11.getIncludeFields();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp21 = mongoDBRiverDefinition11.getInitialTimestamp();
        java.lang.String str22 = mongoDBRiverDefinition11.getStatisticsTypeName();
        java.util.Set<java.lang.String> strSet23 = mongoDBRiverDefinition11.getParentTypes();
        java.lang.String str24 = mongoDBRiverDefinition11.getScriptType();
        java.lang.String str25 = mongoDBRiverDefinition11.getIncludeCollection();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardTimestamp18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertNull(wildcardTimestamp21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test08986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08986");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        boolean boolean13 = mongoDBRiverDefinition11.isDisableIndexRefresh();
        java.lang.String str14 = mongoDBRiverDefinition11.getIndexName();
        java.lang.String str15 = mongoDBRiverDefinition11.getIncludeCollection();
        java.lang.String str16 = mongoDBRiverDefinition11.getMongoOplogNamespace();
        com.mongodb.BasicDBObject basicDBObject17 = mongoDBRiverDefinition11.getMongoOplogFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp18 = mongoDBRiverDefinition11.getInitialTimestamp();
        com.mongodb.BasicDBObject basicDBObject19 = mongoDBRiverDefinition11.getMongoOplogFilter();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "null.null" + "'", str16, "null.null");
        org.junit.Assert.assertNull(basicDBObject17);
        org.junit.Assert.assertNull(wildcardTimestamp18);
        org.junit.Assert.assertNull(basicDBObject19);
    }

    @Test
    public void test08987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08987");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str13 = mongoDBRiverDefinition11.getStatisticsTypeName();
        boolean boolean14 = mongoDBRiverDefinition11.isImportAllCollections();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp15 = mongoDBRiverDefinition11.getInitialTimestamp();
        int int16 = mongoDBRiverDefinition11.getSocketTimeout();
        int int17 = mongoDBRiverDefinition11.getConnectTimeout();
        java.lang.String str18 = mongoDBRiverDefinition11.getMongoAdminUser();
        java.lang.String str19 = mongoDBRiverDefinition11.getMongoAdminUser();
        java.lang.String str20 = mongoDBRiverDefinition11.getTypeName();
        java.util.Set<java.lang.String> strSet21 = mongoDBRiverDefinition11.getIncludeFields();
        java.lang.String str22 = mongoDBRiverDefinition11.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject23 = mongoDBRiverDefinition11.getMongoCollectionFilter();
        java.lang.String str24 = mongoDBRiverDefinition11.getMongoAdminPassword();
        boolean boolean25 = mongoDBRiverDefinition11.isImportAllCollections();
        java.lang.String str26 = mongoDBRiverDefinition11.getScript();
        java.lang.String str27 = mongoDBRiverDefinition11.getStatisticsTypeName();
        java.lang.String str28 = mongoDBRiverDefinition11.getIncludeCollection();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp29 = mongoDBRiverDefinition11.getInitialTimestamp();
        java.lang.String str30 = mongoDBRiverDefinition11.getMongoCollection();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(wildcardTimestamp15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(basicDBObject23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(wildcardTimestamp29);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test08988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08988");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.typeName("options");
        java.lang.String[] strArray43 = new java.lang.String[] { "script_type", "flush_interval", "localhost", "credentials", "local", "localhost", "user", "exclude_fields", "include_collection", "user", "localhost", "actions", "secondary_read_preference", "gridfs", "exclude_fields", "", "type", "store_statistics", "credentials", "include_collection", "options", "ssl_verify_certificate", "initial_timestamp", "", "localhost", "size", "servers", "disable_index_refresh", "ssl_verify_certificate", "initial_timestamp", "flush_interval", "", "user", "skip_initial_import", "", "parent_types", "filter", "" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder4.includeFields((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder4.riverIndexName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder4.typeName("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder50.mongoAdminPassword("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition53 = builder52.build();
        java.lang.String str54 = mongoDBRiverDefinition53.getMongoLocalPassword();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
    }

    @Test
    public void test08989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08989");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        boolean boolean13 = mongoDBRiverDefinition11.isDisableIndexRefresh();
        java.lang.String str14 = mongoDBRiverDefinition11.getIndexName();
        boolean boolean15 = mongoDBRiverDefinition11.isMongoGridFS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = mongoDBRiverDefinition11.getMongoServers();
        boolean boolean17 = mongoDBRiverDefinition11.isAdvancedTransformation();
        java.lang.String str18 = mongoDBRiverDefinition11.getMongoOplogNamespace();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "null.null" + "'", str18, "null.null");
    }

    @Test
    public void test08990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08990");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.riverIndexName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.includeCollection("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.throttleSize(1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder16.riverName("include_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder16.indexName("connect_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder16.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder26.mongoUseSSL(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test08991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08991");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition9.getMongoServers();
        java.lang.String str14 = mongoDBRiverDefinition9.getMongoLocalUser();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp15 = mongoDBRiverDefinition9.getInitialTimestamp();
        java.lang.String str16 = mongoDBRiverDefinition9.getTypeName();
        java.lang.String str17 = mongoDBRiverDefinition9.getMongoAdminPassword();
        java.lang.String str18 = mongoDBRiverDefinition9.getStatisticsIndexName();
        boolean boolean19 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str20 = mongoDBRiverDefinition9.getStatisticsTypeName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(wildcardTimestamp15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test08992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08992");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.includeCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.disableIndexRefresh(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoLocalUser("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.includeCollection("null.null");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test08993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08993");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition9.getMongoServers();
        boolean boolean14 = mongoDBRiverDefinition9.isAdvancedTransformation();
        boolean boolean15 = mongoDBRiverDefinition9.isSkipInitialImport();
        boolean boolean16 = mongoDBRiverDefinition9.isMongoUseSSL();
        int int17 = mongoDBRiverDefinition9.getConnectTimeout();
        boolean boolean18 = mongoDBRiverDefinition9.isMongoUseSSL();
        int int19 = mongoDBRiverDefinition9.getSocketTimeout();
        boolean boolean20 = mongoDBRiverDefinition9.isMongoGridFS();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp21 = mongoDBRiverDefinition9.getInitialTimestamp();
        java.lang.String str22 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str23 = mongoDBRiverDefinition9.getMongoOplogNamespace();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(wildcardTimestamp21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "bulk_size" + "'", str22, "bulk_size");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "null.null" + "'", str23, "null.null");
    }

    @Test
    public void test08994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08994");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions13 = mongoDBRiverDefinition11.getMongoClientOptions();
        boolean boolean14 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions15 = mongoDBRiverDefinition11.getMongoClientOptions();
        java.lang.String str16 = mongoDBRiverDefinition11.getScript();
        boolean boolean17 = mongoDBRiverDefinition11.isMongoGridFS();
        java.lang.String str18 = mongoDBRiverDefinition11.getMongoLocalPassword();
        com.mongodb.BasicDBObject basicDBObject19 = mongoDBRiverDefinition11.getMongoCollectionFilter();
        java.lang.String str20 = mongoDBRiverDefinition11.getTypeName();
        java.util.Set<java.lang.String> strSet21 = mongoDBRiverDefinition11.getExcludeFields();
        boolean boolean22 = mongoDBRiverDefinition11.isMongoUseSSL();
        boolean boolean23 = mongoDBRiverDefinition11.isSkipInitialImport();
        boolean boolean24 = mongoDBRiverDefinition11.isDisableIndexRefresh();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test08995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08995");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoLocalUser("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.typeName("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder6.statisticsTypeName("parent_types");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder6.throttleSize((int) (byte) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder6.statisticsTypeName("null.null");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test08996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08996");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isDisableIndexRefresh();
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = mongoDBRiverDefinition9.getMongoServers();
        boolean boolean12 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean13 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str14 = mongoDBRiverDefinition9.getMongoAdminPassword();
        boolean boolean15 = mongoDBRiverDefinition9.isMongoSecondaryReadPreference();
        boolean boolean16 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test08997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08997");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.statisticsIndexName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.typeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder8.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder8.socketTimeout(27017);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder8.statisticsIndexName("db");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder8.riverName("concurrent_requests");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test08998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08998");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoDb();
        java.lang.String str13 = mongoDBRiverDefinition11.getStatisticsTypeName();
        boolean boolean14 = mongoDBRiverDefinition11.isImportAllCollections();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp15 = mongoDBRiverDefinition11.getInitialTimestamp();
        int int16 = mongoDBRiverDefinition11.getSocketTimeout();
        int int17 = mongoDBRiverDefinition11.getConnectTimeout();
        java.lang.String str18 = mongoDBRiverDefinition11.getMongoAdminUser();
        java.lang.String str19 = mongoDBRiverDefinition11.getMongoAdminUser();
        java.lang.String str20 = mongoDBRiverDefinition11.getTypeName();
        java.util.Set<java.lang.String> strSet21 = mongoDBRiverDefinition11.getIncludeFields();
        java.lang.String str22 = mongoDBRiverDefinition11.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject23 = mongoDBRiverDefinition11.getMongoCollectionFilter();
        java.lang.String str24 = mongoDBRiverDefinition11.getMongoCollection();
        java.lang.String str25 = mongoDBRiverDefinition11.getStatisticsTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList26 = mongoDBRiverDefinition11.getMongoServers();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(wildcardTimestamp15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(basicDBObject23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(serverAddressList26);
    }

    @Test
    public void test08999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08999");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        boolean boolean10 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoDb();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition9.getMongoServers();
        boolean boolean14 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        boolean boolean15 = mongoDBRiverDefinition9.isDisableIndexRefresh();
        java.lang.String str16 = mongoDBRiverDefinition9.getStatisticsIndexName();
        com.mongodb.MongoClientOptions mongoClientOptions17 = mongoDBRiverDefinition9.getMongoClientOptions();
        java.lang.String str18 = mongoDBRiverDefinition9.getScript();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(mongoClientOptions17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test09000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test09000");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.indexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        com.mongodb.MongoClientOptions mongoClientOptions10 = mongoDBRiverDefinition9.getMongoClientOptions();
        com.mongodb.MongoClientOptions mongoClientOptions11 = mongoDBRiverDefinition9.getMongoClientOptions();
        java.lang.String str12 = mongoDBRiverDefinition9.getStatisticsIndexName();
        java.lang.String str13 = mongoDBRiverDefinition9.getIncludeCollection();
        java.lang.String str14 = mongoDBRiverDefinition9.getScriptType();
        java.lang.String str15 = mongoDBRiverDefinition9.getMongoOplogNamespace();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(mongoClientOptions11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "null.null" + "'", str15, "null.null");
    }
}

