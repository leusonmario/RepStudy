/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 23:37:00 GMT 2021
 */

package org.elasticsearch.river.mongodb;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mongodb.DBCollection;
import com.mongodb.ServerAddress;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.function.Consumer;
import org.elasticsearch.client.Client;
import org.elasticsearch.common.collect.ImmutableList;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.env.Environment;
import org.elasticsearch.river.RiverSettings;
import org.elasticsearch.river.mongodb.MongoDBRiver;
import org.elasticsearch.river.mongodb.MongoDBRiverDefinition;
import org.elasticsearch.river.mongodb.SharedContext;
import org.elasticsearch.river.mongodb.Slurper;
import org.elasticsearch.river.mongodb.Status;
import org.elasticsearch.script.ScriptEngineService;
import org.elasticsearch.script.ScriptService;
import org.elasticsearch.watcher.ResourceWatcherService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Slurper_ESTest extends Slurper_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      String string0 = "$natural";
      int int0 = 3;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(string0, int0);
      assertNotNull(mockInetSocketAddress0);
      
      ServerAddress serverAddress0 = new ServerAddress(mockInetSocketAddress0);
      assertNotNull(serverAddress0);
      assertEquals("200.42.42.0", mockInetSocketAddress0.getHostString());
      assertEquals(3, mockInetSocketAddress0.getPort());
      assertEquals("200.42.42.0/200.42.42.0:3", mockInetSocketAddress0.toString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("127.0.0.1", serverAddress0.defaultHost());
      assertEquals(27017, serverAddress0.defaultPort());
      assertEquals("200.42.42.0/200.42.42.0:3", serverAddress0.toString());
      assertEquals("200.42.42.0", serverAddress0.getHost());
      assertEquals(3, serverAddress0.getPort());
      
      ServerAddress serverAddress1 = new ServerAddress(string0);
      assertFalse(serverAddress1.equals((Object)serverAddress0));
      assertNotNull(serverAddress1);
      assertEquals("$natural/200.42.42.0:27017", serverAddress1.toString());
      assertEquals(27017, serverAddress1.defaultPort());
      assertEquals("$natural", serverAddress1.getHost());
      assertEquals(27017, serverAddress1.getPort());
      assertEquals("127.0.0.1", serverAddress1.defaultHost());
      
      ImmutableList<ServerAddress> immutableList0 = ImmutableList.of(serverAddress0, serverAddress0, serverAddress0, serverAddress1, serverAddress1, serverAddress1);
      assertFalse(serverAddress0.equals((Object)serverAddress1));
      assertFalse(serverAddress1.equals((Object)serverAddress0));
      assertNotNull(immutableList0);
      assertNotSame(serverAddress0, serverAddress1);
      assertNotSame(serverAddress1, serverAddress0);
      assertEquals("200.42.42.0", mockInetSocketAddress0.getHostString());
      assertEquals(3, mockInetSocketAddress0.getPort());
      assertEquals("200.42.42.0/200.42.42.0:3", mockInetSocketAddress0.toString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("127.0.0.1", serverAddress0.defaultHost());
      assertEquals(27017, serverAddress0.defaultPort());
      assertEquals("200.42.42.0/200.42.42.0:3", serverAddress0.toString());
      assertEquals("200.42.42.0", serverAddress0.getHost());
      assertEquals(3, serverAddress0.getPort());
      assertEquals("$natural/200.42.42.0:27017", serverAddress1.toString());
      assertEquals(27017, serverAddress1.defaultPort());
      assertEquals("$natural", serverAddress1.getHost());
      assertEquals(27017, serverAddress1.getPort());
      assertEquals("127.0.0.1", serverAddress1.defaultHost());
      assertEquals(6, immutableList0.size());
      assertTrue(immutableList0.contains(serverAddress1));
      
      String string1 = "";
      Settings settings0 = null;
      Map<String, Object> map0 = null;
      RiverSettings riverSettings0 = new RiverSettings(settings0, map0);
      assertNotNull(riverSettings0);
      
      Environment environment0 = null;
      try {
        environment0 = new Environment(settings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.env.Environment", e);
      }
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      List<ServerAddress> list0 = null;
      MongoDBRiverDefinition mongoDBRiverDefinition0 = null;
      PriorityBlockingQueue<MongoDBRiver.QueueEntry> priorityBlockingQueue0 = new PriorityBlockingQueue<MongoDBRiver.QueueEntry>();
      assertNotNull(priorityBlockingQueue0);
      
      Status status0 = Status.SCRIPT_IMPORT_FAILED;
      SharedContext sharedContext0 = new SharedContext(priorityBlockingQueue0, status0);
      assertNotNull(sharedContext0);
      assertEquals(Status.SCRIPT_IMPORT_FAILED, sharedContext0.getStatus());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = priorityBlockingQueue0.contains(object0);
      assertFalse(boolean0);
      
      Status status1 = Status.IMPORT_FAILED;
      sharedContext0.setStatus(status1);
      assertFalse(status0.equals((Object)status1));
      assertFalse(status1.equals((Object)status0));
      assertNotSame(status0, status1);
      assertNotSame(status1, status0);
      assertEquals(Status.IMPORT_FAILED, sharedContext0.getStatus());
      
      Client client0 = null;
      Slurper slurper0 = null;
      try {
        slurper0 = new Slurper(list0, mongoDBRiverDefinition0, sharedContext0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.river.mongodb.Slurper", e);
      }
  }
}
