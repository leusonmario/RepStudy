/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 07 00:24:34 GMT 2021
 */

package org.elasticsearch.river.mongodb;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mongodb.DBAddress;
import com.mongodb.ServerAddress;
import java.util.List;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.SynchronousQueue;
import org.bson.LazyBSONCallback;
import org.bson.LazyDBList;
import org.elasticsearch.client.Client;
import org.elasticsearch.common.collect.ImmutableList;
import org.elasticsearch.river.mongodb.MongoDBRiver;
import org.elasticsearch.river.mongodb.MongoDBRiverDefinition;
import org.elasticsearch.river.mongodb.Operation;
import org.elasticsearch.river.mongodb.SharedContext;
import org.elasticsearch.river.mongodb.Slurper;
import org.elasticsearch.river.mongodb.Status;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Slurper_ESTest extends Slurper_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      MongoDBRiverDefinition.Builder mongoDBRiverDefinition_Builder0 = null;
      MongoDBRiverDefinition mongoDBRiverDefinition0 = null;
      try {
        mongoDBRiverDefinition0 = new MongoDBRiverDefinition(mongoDBRiverDefinition_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.river.mongodb.MongoDBRiverDefinition", e);
      }
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)5;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-39);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      LazyBSONCallback lazyBSONCallback0 = new LazyBSONCallback();
      assertNotNull(lazyBSONCallback0);
      
      LazyDBList lazyDBList0 = new LazyDBList(byteArray0, lazyBSONCallback0);
      assertEquals(3, byteArray0.length);
      assertFalse(lazyDBList0.isPartialObject());
      assertNotNull(lazyDBList0);
      assertArrayEquals(new byte[] {(byte)5, (byte) (-39), (byte)0}, byteArray0);
      
      MongoDBRiverDefinition.Builder mongoDBRiverDefinition_Builder0 = new MongoDBRiverDefinition.Builder();
      assertEquals(0, mongoDBRiverDefinition_Builder0.socketTimeout);
      assertFalse(mongoDBRiverDefinition_Builder0.advancedTransformation);
      assertFalse(mongoDBRiverDefinition_Builder0.dropCollection);
      assertEquals(0, mongoDBRiverDefinition_Builder0.connectTimeout);
      assertFalse(mongoDBRiverDefinition_Builder0.mongoGridFS);
      assertFalse(mongoDBRiverDefinition_Builder0.skipInitialImport);
      assertFalse(mongoDBRiverDefinition_Builder0.mongoSSLVerifyCertificate);
      assertEquals(0, mongoDBRiverDefinition_Builder0.throttleSize);
      assertFalse(mongoDBRiverDefinition_Builder0.mongoUseSSL);
      assertFalse(mongoDBRiverDefinition_Builder0.disableIndexRefresh);
      assertFalse(mongoDBRiverDefinition_Builder0.importAllCollections);
      assertFalse(mongoDBRiverDefinition_Builder0.mongoSecondaryReadPreference);
      assertFalse(mongoDBRiverDefinition_Builder0.storeStatistics);
      assertEquals(0, mongoDBRiverDefinition_Builder0.getconnectTimeout());
      assertEquals("", mongoDBRiverDefinition_Builder0.getmongoLocalUser());
      assertNull(mongoDBRiverDefinition_Builder0.getindexName());
      assertFalse(mongoDBRiverDefinition_Builder0.getstoreStatistics());
      assertNull(mongoDBRiverDefinition_Builder0.getscript());
      assertFalse(mongoDBRiverDefinition_Builder0.getdisableIndexRefresh());
      assertFalse(mongoDBRiverDefinition_Builder0.getmongoGridFS());
      assertFalse(mongoDBRiverDefinition_Builder0.getdropCollection());
      assertNull(mongoDBRiverDefinition_Builder0.getmongoCollection());
      assertEquals("", mongoDBRiverDefinition_Builder0.getmongoLocalPassword());
      assertEquals(0, mongoDBRiverDefinition_Builder0.getthrottleSize());
      assertNull(mongoDBRiverDefinition_Builder0.getstatisticsIndexName());
      assertNull(mongoDBRiverDefinition_Builder0.getriverIndexName());
      assertNull(mongoDBRiverDefinition_Builder0.getriverName());
      assertFalse(mongoDBRiverDefinition_Builder0.getskipInitialImport());
      assertFalse(mongoDBRiverDefinition_Builder0.getmongoSecondaryReadPreference());
      assertFalse(mongoDBRiverDefinition_Builder0.getmongoSSLVerifyCertificate());
      assertNull(mongoDBRiverDefinition_Builder0.gettypeName());
      assertEquals(0, mongoDBRiverDefinition_Builder0.getsocketTimeout());
      assertNull(mongoDBRiverDefinition_Builder0.getstatisticsTypeName());
      assertNull(mongoDBRiverDefinition_Builder0.getmongoDb());
      assertEquals("", mongoDBRiverDefinition_Builder0.getmongoAdminPassword());
      assertEquals("", mongoDBRiverDefinition_Builder0.getmongoAdminUser());
      assertFalse(mongoDBRiverDefinition_Builder0.getmongoUseSSL());
      assertFalse(mongoDBRiverDefinition_Builder0.getimportAllCollections());
      assertNull(mongoDBRiverDefinition_Builder0.getscriptType());
      assertFalse(mongoDBRiverDefinition_Builder0.getadvancedTransformation());
      assertEquals("", mongoDBRiverDefinition_Builder0.getincludeCollection());
      assertNotNull(mongoDBRiverDefinition_Builder0);
      
      String string0 = "org.elasticsearch.client.node.NodeAdminClient";
      MongoDBRiverDefinition.Builder mongoDBRiverDefinition_Builder1 = mongoDBRiverDefinition_Builder0.mongoDb(string0);
      assertEquals(0, mongoDBRiverDefinition_Builder0.socketTimeout);
      assertFalse(mongoDBRiverDefinition_Builder0.advancedTransformation);
      assertFalse(mongoDBRiverDefinition_Builder0.dropCollection);
      assertEquals(0, mongoDBRiverDefinition_Builder0.connectTimeout);
      assertFalse(mongoDBRiverDefinition_Builder0.mongoGridFS);
      assertFalse(mongoDBRiverDefinition_Builder0.skipInitialImport);
      assertFalse(mongoDBRiverDefinition_Builder0.mongoSSLVerifyCertificate);
      assertEquals(0, mongoDBRiverDefinition_Builder0.throttleSize);
      assertFalse(mongoDBRiverDefinition_Builder0.mongoUseSSL);
      assertFalse(mongoDBRiverDefinition_Builder0.disableIndexRefresh);
      assertFalse(mongoDBRiverDefinition_Builder0.importAllCollections);
      assertFalse(mongoDBRiverDefinition_Builder0.mongoSecondaryReadPreference);
      assertFalse(mongoDBRiverDefinition_Builder0.storeStatistics);
      assertFalse(mongoDBRiverDefinition_Builder1.advancedTransformation);
      assertFalse(mongoDBRiverDefinition_Builder1.storeStatistics);
      assertFalse(mongoDBRiverDefinition_Builder1.mongoGridFS);
      assertFalse(mongoDBRiverDefinition_Builder1.dropCollection);
      assertEquals(0, mongoDBRiverDefinition_Builder1.connectTimeout);
      assertFalse(mongoDBRiverDefinition_Builder1.mongoSSLVerifyCertificate);
      assertFalse(mongoDBRiverDefinition_Builder1.disableIndexRefresh);
      assertEquals(0, mongoDBRiverDefinition_Builder1.throttleSize);
      assertFalse(mongoDBRiverDefinition_Builder1.mongoUseSSL);
      assertFalse(mongoDBRiverDefinition_Builder1.skipInitialImport);
      assertFalse(mongoDBRiverDefinition_Builder1.mongoSecondaryReadPreference);
      assertFalse(mongoDBRiverDefinition_Builder1.importAllCollections);
      assertEquals(0, mongoDBRiverDefinition_Builder1.socketTimeout);
      assertEquals(0, mongoDBRiverDefinition_Builder0.getconnectTimeout());
      assertEquals("", mongoDBRiverDefinition_Builder0.getmongoLocalUser());
      assertNull(mongoDBRiverDefinition_Builder0.getindexName());
      assertFalse(mongoDBRiverDefinition_Builder0.getstoreStatistics());
      assertNull(mongoDBRiverDefinition_Builder0.getscript());
      assertFalse(mongoDBRiverDefinition_Builder0.getdisableIndexRefresh());
      assertFalse(mongoDBRiverDefinition_Builder0.getmongoGridFS());
      assertFalse(mongoDBRiverDefinition_Builder0.getdropCollection());
      assertNull(mongoDBRiverDefinition_Builder0.getmongoCollection());
      assertEquals("", mongoDBRiverDefinition_Builder0.getmongoLocalPassword());
      assertEquals(0, mongoDBRiverDefinition_Builder0.getthrottleSize());
      assertNull(mongoDBRiverDefinition_Builder0.getstatisticsIndexName());
      assertNull(mongoDBRiverDefinition_Builder0.getriverIndexName());
      assertNull(mongoDBRiverDefinition_Builder0.getriverName());
      assertFalse(mongoDBRiverDefinition_Builder0.getskipInitialImport());
      assertFalse(mongoDBRiverDefinition_Builder0.getmongoSecondaryReadPreference());
      assertFalse(mongoDBRiverDefinition_Builder0.getmongoSSLVerifyCertificate());
      assertNull(mongoDBRiverDefinition_Builder0.gettypeName());
      assertEquals(0, mongoDBRiverDefinition_Builder0.getsocketTimeout());
      assertNull(mongoDBRiverDefinition_Builder0.getstatisticsTypeName());
      assertEquals("", mongoDBRiverDefinition_Builder0.getmongoAdminPassword());
      assertEquals("", mongoDBRiverDefinition_Builder0.getmongoAdminUser());
      assertFalse(mongoDBRiverDefinition_Builder0.getmongoUseSSL());
      assertFalse(mongoDBRiverDefinition_Builder0.getimportAllCollections());
      assertNull(mongoDBRiverDefinition_Builder0.getscriptType());
      assertFalse(mongoDBRiverDefinition_Builder0.getadvancedTransformation());
      assertEquals("", mongoDBRiverDefinition_Builder0.getincludeCollection());
      assertEquals("org.elasticsearch.client.node.NodeAdminClient", mongoDBRiverDefinition_Builder0.getmongoDb());
      assertEquals("", mongoDBRiverDefinition_Builder1.getmongoLocalUser());
      assertFalse(mongoDBRiverDefinition_Builder1.getdisableIndexRefresh());
      assertFalse(mongoDBRiverDefinition_Builder1.getstoreStatistics());
      assertNull(mongoDBRiverDefinition_Builder1.getindexName());
      assertEquals(0, mongoDBRiverDefinition_Builder1.getconnectTimeout());
      assertNull(mongoDBRiverDefinition_Builder1.getscript());
      assertFalse(mongoDBRiverDefinition_Builder1.getdropCollection());
      assertFalse(mongoDBRiverDefinition_Builder1.getmongoSSLVerifyCertificate());
      assertNull(mongoDBRiverDefinition_Builder1.getmongoCollection());
      assertEquals(0, mongoDBRiverDefinition_Builder1.getthrottleSize());
      assertEquals("", mongoDBRiverDefinition_Builder1.getmongoLocalPassword());
      assertNull(mongoDBRiverDefinition_Builder1.getstatisticsIndexName());
      assertNull(mongoDBRiverDefinition_Builder1.getriverName());
      assertFalse(mongoDBRiverDefinition_Builder1.getskipInitialImport());
      assertFalse(mongoDBRiverDefinition_Builder1.getadvancedTransformation());
      assertEquals("", mongoDBRiverDefinition_Builder1.getincludeCollection());
      assertNull(mongoDBRiverDefinition_Builder1.getriverIndexName());
      assertNull(mongoDBRiverDefinition_Builder1.getstatisticsTypeName());
      assertEquals(0, mongoDBRiverDefinition_Builder1.getsocketTimeout());
      assertFalse(mongoDBRiverDefinition_Builder1.getmongoGridFS());
      assertFalse(mongoDBRiverDefinition_Builder1.getmongoSecondaryReadPreference());
      assertFalse(mongoDBRiverDefinition_Builder1.getmongoUseSSL());
      assertNull(mongoDBRiverDefinition_Builder1.gettypeName());
      assertFalse(mongoDBRiverDefinition_Builder1.getimportAllCollections());
      assertEquals("org.elasticsearch.client.node.NodeAdminClient", mongoDBRiverDefinition_Builder1.getmongoDb());
      assertEquals("", mongoDBRiverDefinition_Builder1.getmongoAdminUser());
      assertNull(mongoDBRiverDefinition_Builder1.getscriptType());
      assertEquals("", mongoDBRiverDefinition_Builder1.getmongoAdminPassword());
      assertNotNull(mongoDBRiverDefinition_Builder1);
      assertSame(mongoDBRiverDefinition_Builder0, mongoDBRiverDefinition_Builder1);
      assertSame(mongoDBRiverDefinition_Builder1, mongoDBRiverDefinition_Builder0);
      
      MongoDBRiverDefinition.Builder mongoDBRiverDefinition_Builder2 = mongoDBRiverDefinition_Builder1.script(mongoDBRiverDefinition_Builder0.riverName);
      assertEquals(0, mongoDBRiverDefinition_Builder0.socketTimeout);
      assertFalse(mongoDBRiverDefinition_Builder0.advancedTransformation);
      assertFalse(mongoDBRiverDefinition_Builder0.dropCollection);
      assertEquals(0, mongoDBRiverDefinition_Builder0.connectTimeout);
      assertFalse(mongoDBRiverDefinition_Builder0.mongoGridFS);
      assertFalse(mongoDBRiverDefinition_Builder0.skipInitialImport);
      assertFalse(mongoDBRiverDefinition_Builder0.mongoSSLVerifyCertificate);
      assertEquals(0, mongoDBRiverDefinition_Builder0.throttleSize);
      assertFalse(mongoDBRiverDefinition_Builder0.mongoUseSSL);
      assertFalse(mongoDBRiverDefinition_Builder0.disableIndexRefresh);
      assertFalse(mongoDBRiverDefinition_Builder0.importAllCollections);
      assertFalse(mongoDBRiverDefinition_Builder0.mongoSecondaryReadPreference);
      assertFalse(mongoDBRiverDefinition_Builder0.storeStatistics);
      assertFalse(mongoDBRiverDefinition_Builder1.advancedTransformation);
      assertFalse(mongoDBRiverDefinition_Builder1.storeStatistics);
      assertFalse(mongoDBRiverDefinition_Builder1.mongoGridFS);
      assertFalse(mongoDBRiverDefinition_Builder1.dropCollection);
      assertEquals(0, mongoDBRiverDefinition_Builder1.connectTimeout);
      assertFalse(mongoDBRiverDefinition_Builder1.mongoSSLVerifyCertificate);
      assertFalse(mongoDBRiverDefinition_Builder1.disableIndexRefresh);
      assertEquals(0, mongoDBRiverDefinition_Builder1.throttleSize);
      assertFalse(mongoDBRiverDefinition_Builder1.mongoUseSSL);
      assertFalse(mongoDBRiverDefinition_Builder1.skipInitialImport);
      assertFalse(mongoDBRiverDefinition_Builder1.mongoSecondaryReadPreference);
      assertFalse(mongoDBRiverDefinition_Builder1.importAllCollections);
      assertEquals(0, mongoDBRiverDefinition_Builder1.socketTimeout);
      assertFalse(mongoDBRiverDefinition_Builder2.storeStatistics);
      assertEquals(0, mongoDBRiverDefinition_Builder2.connectTimeout);
      assertFalse(mongoDBRiverDefinition_Builder2.mongoSSLVerifyCertificate);
      assertFalse(mongoDBRiverDefinition_Builder2.importAllCollections);
      assertFalse(mongoDBRiverDefinition_Builder2.mongoSecondaryReadPreference);
      assertFalse(mongoDBRiverDefinition_Builder2.mongoUseSSL);
      assertFalse(mongoDBRiverDefinition_Builder2.dropCollection);
      assertFalse(mongoDBRiverDefinition_Builder2.mongoGridFS);
      assertFalse(mongoDBRiverDefinition_Builder2.disableIndexRefresh);
      assertEquals(0, mongoDBRiverDefinition_Builder2.throttleSize);
      assertEquals(0, mongoDBRiverDefinition_Builder2.socketTimeout);
      assertFalse(mongoDBRiverDefinition_Builder2.skipInitialImport);
      assertFalse(mongoDBRiverDefinition_Builder2.advancedTransformation);
      assertEquals(0, mongoDBRiverDefinition_Builder0.getconnectTimeout());
      assertEquals("", mongoDBRiverDefinition_Builder0.getmongoLocalUser());
      assertNull(mongoDBRiverDefinition_Builder0.getindexName());
      assertFalse(mongoDBRiverDefinition_Builder0.getstoreStatistics());
      assertNull(mongoDBRiverDefinition_Builder0.getscript());
      assertFalse(mongoDBRiverDefinition_Builder0.getdisableIndexRefresh());
      assertFalse(mongoDBRiverDefinition_Builder0.getmongoGridFS());
      assertFalse(mongoDBRiverDefinition_Builder0.getdropCollection());
      assertNull(mongoDBRiverDefinition_Builder0.getmongoCollection());
      assertEquals("", mongoDBRiverDefinition_Builder0.getmongoLocalPassword());
      assertEquals(0, mongoDBRiverDefinition_Builder0.getthrottleSize());
      assertNull(mongoDBRiverDefinition_Builder0.getstatisticsIndexName());
      assertNull(mongoDBRiverDefinition_Builder0.getriverIndexName());
      assertNull(mongoDBRiverDefinition_Builder0.getriverName());
      assertFalse(mongoDBRiverDefinition_Builder0.getskipInitialImport());
      assertFalse(mongoDBRiverDefinition_Builder0.getmongoSecondaryReadPreference());
      assertFalse(mongoDBRiverDefinition_Builder0.getmongoSSLVerifyCertificate());
      assertNull(mongoDBRiverDefinition_Builder0.gettypeName());
      assertEquals(0, mongoDBRiverDefinition_Builder0.getsocketTimeout());
      assertNull(mongoDBRiverDefinition_Builder0.getstatisticsTypeName());
      assertEquals("", mongoDBRiverDefinition_Builder0.getmongoAdminPassword());
      assertEquals("", mongoDBRiverDefinition_Builder0.getmongoAdminUser());
      assertFalse(mongoDBRiverDefinition_Builder0.getmongoUseSSL());
      assertFalse(mongoDBRiverDefinition_Builder0.getimportAllCollections());
      assertNull(mongoDBRiverDefinition_Builder0.getscriptType());
      assertFalse(mongoDBRiverDefinition_Builder0.getadvancedTransformation());
      assertEquals("", mongoDBRiverDefinition_Builder0.getincludeCollection());
      assertEquals("org.elasticsearch.client.node.NodeAdminClient", mongoDBRiverDefinition_Builder0.getmongoDb());
      assertEquals("", mongoDBRiverDefinition_Builder1.getmongoLocalUser());
      assertFalse(mongoDBRiverDefinition_Builder1.getdisableIndexRefresh());
      assertFalse(mongoDBRiverDefinition_Builder1.getstoreStatistics());
      assertNull(mongoDBRiverDefinition_Builder1.getindexName());
      assertEquals(0, mongoDBRiverDefinition_Builder1.getconnectTimeout());
      assertNull(mongoDBRiverDefinition_Builder1.getscript());
      assertFalse(mongoDBRiverDefinition_Builder1.getdropCollection());
      assertFalse(mongoDBRiverDefinition_Builder1.getmongoSSLVerifyCertificate());
      assertNull(mongoDBRiverDefinition_Builder1.getmongoCollection());
      assertEquals(0, mongoDBRiverDefinition_Builder1.getthrottleSize());
      assertEquals("", mongoDBRiverDefinition_Builder1.getmongoLocalPassword());
      assertNull(mongoDBRiverDefinition_Builder1.getstatisticsIndexName());
      assertNull(mongoDBRiverDefinition_Builder1.getriverName());
      assertFalse(mongoDBRiverDefinition_Builder1.getskipInitialImport());
      assertFalse(mongoDBRiverDefinition_Builder1.getadvancedTransformation());
      assertEquals("", mongoDBRiverDefinition_Builder1.getincludeCollection());
      assertNull(mongoDBRiverDefinition_Builder1.getriverIndexName());
      assertNull(mongoDBRiverDefinition_Builder1.getstatisticsTypeName());
      assertEquals(0, mongoDBRiverDefinition_Builder1.getsocketTimeout());
      assertFalse(mongoDBRiverDefinition_Builder1.getmongoGridFS());
      assertFalse(mongoDBRiverDefinition_Builder1.getmongoSecondaryReadPreference());
      assertFalse(mongoDBRiverDefinition_Builder1.getmongoUseSSL());
      assertNull(mongoDBRiverDefinition_Builder1.gettypeName());
      assertFalse(mongoDBRiverDefinition_Builder1.getimportAllCollections());
      assertEquals("org.elasticsearch.client.node.NodeAdminClient", mongoDBRiverDefinition_Builder1.getmongoDb());
      assertEquals("", mongoDBRiverDefinition_Builder1.getmongoAdminUser());
      assertNull(mongoDBRiverDefinition_Builder1.getscriptType());
      assertEquals("", mongoDBRiverDefinition_Builder1.getmongoAdminPassword());
      assertNull(mongoDBRiverDefinition_Builder2.getriverName());
      assertNull(mongoDBRiverDefinition_Builder2.getriverIndexName());
      assertNull(mongoDBRiverDefinition_Builder2.getscriptType());
      assertEquals("", mongoDBRiverDefinition_Builder2.getmongoLocalPassword());
      assertEquals(0, mongoDBRiverDefinition_Builder2.getthrottleSize());
      assertFalse(mongoDBRiverDefinition_Builder2.getmongoGridFS());
      assertEquals("org.elasticsearch.client.node.NodeAdminClient", mongoDBRiverDefinition_Builder2.getmongoDb());
      assertFalse(mongoDBRiverDefinition_Builder2.getmongoUseSSL());
      assertEquals("", mongoDBRiverDefinition_Builder2.getincludeCollection());
      assertFalse(mongoDBRiverDefinition_Builder2.getadvancedTransformation());
      assertFalse(mongoDBRiverDefinition_Builder2.getmongoSSLVerifyCertificate());
      assertNull(mongoDBRiverDefinition_Builder2.getstatisticsIndexName());
      assertFalse(mongoDBRiverDefinition_Builder2.getskipInitialImport());
      assertNull(mongoDBRiverDefinition_Builder2.getmongoCollection());
      assertNull(mongoDBRiverDefinition_Builder2.getindexName());
      assertEquals("", mongoDBRiverDefinition_Builder2.getmongoLocalUser());
      assertNull(mongoDBRiverDefinition_Builder2.getscript());
      assertFalse(mongoDBRiverDefinition_Builder2.getdisableIndexRefresh());
      assertFalse(mongoDBRiverDefinition_Builder2.getdropCollection());
      assertEquals(0, mongoDBRiverDefinition_Builder2.getconnectTimeout());
      assertFalse(mongoDBRiverDefinition_Builder2.getstoreStatistics());
      assertNull(mongoDBRiverDefinition_Builder2.gettypeName());
      assertEquals(0, mongoDBRiverDefinition_Builder2.getsocketTimeout());
      assertFalse(mongoDBRiverDefinition_Builder2.getmongoSecondaryReadPreference());
      assertNull(mongoDBRiverDefinition_Builder2.getstatisticsTypeName());
      assertEquals("", mongoDBRiverDefinition_Builder2.getmongoAdminPassword());
      assertEquals("", mongoDBRiverDefinition_Builder2.getmongoAdminUser());
      assertFalse(mongoDBRiverDefinition_Builder2.getimportAllCollections());
      assertNotNull(mongoDBRiverDefinition_Builder2);
      assertSame(mongoDBRiverDefinition_Builder0, mongoDBRiverDefinition_Builder1);
      assertSame(mongoDBRiverDefinition_Builder0, mongoDBRiverDefinition_Builder2);
      assertSame(mongoDBRiverDefinition_Builder1, mongoDBRiverDefinition_Builder0);
      assertSame(mongoDBRiverDefinition_Builder1, mongoDBRiverDefinition_Builder2);
      assertSame(mongoDBRiverDefinition_Builder2, mongoDBRiverDefinition_Builder0);
      assertSame(mongoDBRiverDefinition_Builder2, mongoDBRiverDefinition_Builder1);
      
      MongoDBRiverDefinition mongoDBRiverDefinition0 = mongoDBRiverDefinition_Builder2.build();
      assertEquals(0, mongoDBRiverDefinition_Builder0.socketTimeout);
      assertFalse(mongoDBRiverDefinition_Builder0.advancedTransformation);
      assertFalse(mongoDBRiverDefinition_Builder0.dropCollection);
      assertEquals(0, mongoDBRiverDefinition_Builder0.connectTimeout);
      assertFalse(mongoDBRiverDefinition_Builder0.mongoGridFS);
      assertFalse(mongoDBRiverDefinition_Builder0.skipInitialImport);
      assertFalse(mongoDBRiverDefinition_Builder0.mongoSSLVerifyCertificate);
      assertEquals(0, mongoDBRiverDefinition_Builder0.throttleSize);
      assertFalse(mongoDBRiverDefinition_Builder0.mongoUseSSL);
      assertFalse(mongoDBRiverDefinition_Builder0.disableIndexRefresh);
      assertFalse(mongoDBRiverDefinition_Builder0.importAllCollections);
      assertFalse(mongoDBRiverDefinition_Builder0.mongoSecondaryReadPreference);
      assertFalse(mongoDBRiverDefinition_Builder0.storeStatistics);
      assertFalse(mongoDBRiverDefinition_Builder1.advancedTransformation);
      assertFalse(mongoDBRiverDefinition_Builder1.storeStatistics);
      assertFalse(mongoDBRiverDefinition_Builder1.mongoGridFS);
      assertFalse(mongoDBRiverDefinition_Builder1.dropCollection);
      assertEquals(0, mongoDBRiverDefinition_Builder1.connectTimeout);
      assertFalse(mongoDBRiverDefinition_Builder1.mongoSSLVerifyCertificate);
      assertFalse(mongoDBRiverDefinition_Builder1.disableIndexRefresh);
      assertEquals(0, mongoDBRiverDefinition_Builder1.throttleSize);
      assertFalse(mongoDBRiverDefinition_Builder1.mongoUseSSL);
      assertFalse(mongoDBRiverDefinition_Builder1.skipInitialImport);
      assertFalse(mongoDBRiverDefinition_Builder1.mongoSecondaryReadPreference);
      assertFalse(mongoDBRiverDefinition_Builder1.importAllCollections);
      assertEquals(0, mongoDBRiverDefinition_Builder1.socketTimeout);
      assertFalse(mongoDBRiverDefinition_Builder2.storeStatistics);
      assertEquals(0, mongoDBRiverDefinition_Builder2.connectTimeout);
      assertFalse(mongoDBRiverDefinition_Builder2.mongoSSLVerifyCertificate);
      assertFalse(mongoDBRiverDefinition_Builder2.importAllCollections);
      assertFalse(mongoDBRiverDefinition_Builder2.mongoSecondaryReadPreference);
      assertFalse(mongoDBRiverDefinition_Builder2.mongoUseSSL);
      assertFalse(mongoDBRiverDefinition_Builder2.dropCollection);
      assertFalse(mongoDBRiverDefinition_Builder2.mongoGridFS);
      assertFalse(mongoDBRiverDefinition_Builder2.disableIndexRefresh);
      assertEquals(0, mongoDBRiverDefinition_Builder2.throttleSize);
      assertEquals(0, mongoDBRiverDefinition_Builder2.socketTimeout);
      assertFalse(mongoDBRiverDefinition_Builder2.skipInitialImport);
      assertFalse(mongoDBRiverDefinition_Builder2.advancedTransformation);
      assertFalse(mongoDBRiverDefinition0.importAllCollections);
      assertEquals(0, mongoDBRiverDefinition0.connectTimeout);
      assertEquals(0, mongoDBRiverDefinition0.socketTimeout);
      assertFalse(mongoDBRiverDefinition0.mongoGridFS);
      assertFalse(mongoDBRiverDefinition0.advancedTransformation);
      assertEquals(1, MongoDBRiverDefinition.DEFAULT_CONCURRENT_REQUESTS);
      assertFalse(mongoDBRiverDefinition0.dropCollection);
      assertFalse(mongoDBRiverDefinition0.skipInitialImport);
      assertFalse(mongoDBRiverDefinition0.mongoSSLVerifyCertificate);
      assertEquals(27017, MongoDBRiverDefinition.DEFAULT_DB_PORT);
      assertFalse(mongoDBRiverDefinition0.storeStatistics);
      assertFalse(mongoDBRiverDefinition0.disableIndexRefresh);
      assertEquals(0, mongoDBRiverDefinition0.throttleSize);
      assertEquals(1000, MongoDBRiverDefinition.DEFAULT_BULK_ACTIONS);
      assertFalse(mongoDBRiverDefinition0.mongoSecondaryReadPreference);
      assertFalse(mongoDBRiverDefinition0.mongoUseSSL);
      assertEquals(0, mongoDBRiverDefinition_Builder0.getconnectTimeout());
      assertEquals("", mongoDBRiverDefinition_Builder0.getmongoLocalUser());
      assertNull(mongoDBRiverDefinition_Builder0.getindexName());
      assertFalse(mongoDBRiverDefinition_Builder0.getstoreStatistics());
      assertNull(mongoDBRiverDefinition_Builder0.getscript());
      assertFalse(mongoDBRiverDefinition_Builder0.getdisableIndexRefresh());
      assertFalse(mongoDBRiverDefinition_Builder0.getmongoGridFS());
      assertFalse(mongoDBRiverDefinition_Builder0.getdropCollection());
      assertNull(mongoDBRiverDefinition_Builder0.getmongoCollection());
      assertEquals("", mongoDBRiverDefinition_Builder0.getmongoLocalPassword());
      assertEquals(0, mongoDBRiverDefinition_Builder0.getthrottleSize());
      assertNull(mongoDBRiverDefinition_Builder0.getstatisticsIndexName());
      assertNull(mongoDBRiverDefinition_Builder0.getriverIndexName());
      assertNull(mongoDBRiverDefinition_Builder0.getriverName());
      assertFalse(mongoDBRiverDefinition_Builder0.getskipInitialImport());
      assertFalse(mongoDBRiverDefinition_Builder0.getmongoSecondaryReadPreference());
      assertFalse(mongoDBRiverDefinition_Builder0.getmongoSSLVerifyCertificate());
      assertNull(mongoDBRiverDefinition_Builder0.gettypeName());
      assertEquals(0, mongoDBRiverDefinition_Builder0.getsocketTimeout());
      assertNull(mongoDBRiverDefinition_Builder0.getstatisticsTypeName());
      assertEquals("", mongoDBRiverDefinition_Builder0.getmongoAdminPassword());
      assertEquals("", mongoDBRiverDefinition_Builder0.getmongoAdminUser());
      assertFalse(mongoDBRiverDefinition_Builder0.getmongoUseSSL());
      assertFalse(mongoDBRiverDefinition_Builder0.getimportAllCollections());
      assertNull(mongoDBRiverDefinition_Builder0.getscriptType());
      assertFalse(mongoDBRiverDefinition_Builder0.getadvancedTransformation());
      assertEquals("", mongoDBRiverDefinition_Builder0.getincludeCollection());
      assertEquals("org.elasticsearch.client.node.NodeAdminClient", mongoDBRiverDefinition_Builder0.getmongoDb());
      assertEquals("", mongoDBRiverDefinition_Builder1.getmongoLocalUser());
      assertFalse(mongoDBRiverDefinition_Builder1.getdisableIndexRefresh());
      assertFalse(mongoDBRiverDefinition_Builder1.getstoreStatistics());
      assertNull(mongoDBRiverDefinition_Builder1.getindexName());
      assertEquals(0, mongoDBRiverDefinition_Builder1.getconnectTimeout());
      assertNull(mongoDBRiverDefinition_Builder1.getscript());
      assertFalse(mongoDBRiverDefinition_Builder1.getdropCollection());
      assertFalse(mongoDBRiverDefinition_Builder1.getmongoSSLVerifyCertificate());
      assertNull(mongoDBRiverDefinition_Builder1.getmongoCollection());
      assertEquals(0, mongoDBRiverDefinition_Builder1.getthrottleSize());
      assertEquals("", mongoDBRiverDefinition_Builder1.getmongoLocalPassword());
      assertNull(mongoDBRiverDefinition_Builder1.getstatisticsIndexName());
      assertNull(mongoDBRiverDefinition_Builder1.getriverName());
      assertFalse(mongoDBRiverDefinition_Builder1.getskipInitialImport());
      assertFalse(mongoDBRiverDefinition_Builder1.getadvancedTransformation());
      assertEquals("", mongoDBRiverDefinition_Builder1.getincludeCollection());
      assertNull(mongoDBRiverDefinition_Builder1.getriverIndexName());
      assertNull(mongoDBRiverDefinition_Builder1.getstatisticsTypeName());
      assertEquals(0, mongoDBRiverDefinition_Builder1.getsocketTimeout());
      assertFalse(mongoDBRiverDefinition_Builder1.getmongoGridFS());
      assertFalse(mongoDBRiverDefinition_Builder1.getmongoSecondaryReadPreference());
      assertFalse(mongoDBRiverDefinition_Builder1.getmongoUseSSL());
      assertNull(mongoDBRiverDefinition_Builder1.gettypeName());
      assertFalse(mongoDBRiverDefinition_Builder1.getimportAllCollections());
      assertEquals("org.elasticsearch.client.node.NodeAdminClient", mongoDBRiverDefinition_Builder1.getmongoDb());
      assertEquals("", mongoDBRiverDefinition_Builder1.getmongoAdminUser());
      assertNull(mongoDBRiverDefinition_Builder1.getscriptType());
      assertEquals("", mongoDBRiverDefinition_Builder1.getmongoAdminPassword());
      assertNull(mongoDBRiverDefinition_Builder2.getriverName());
      assertNull(mongoDBRiverDefinition_Builder2.getriverIndexName());
      assertNull(mongoDBRiverDefinition_Builder2.getscriptType());
      assertEquals("", mongoDBRiverDefinition_Builder2.getmongoLocalPassword());
      assertEquals(0, mongoDBRiverDefinition_Builder2.getthrottleSize());
      assertFalse(mongoDBRiverDefinition_Builder2.getmongoGridFS());
      assertEquals("org.elasticsearch.client.node.NodeAdminClient", mongoDBRiverDefinition_Builder2.getmongoDb());
      assertFalse(mongoDBRiverDefinition_Builder2.getmongoUseSSL());
      assertEquals("", mongoDBRiverDefinition_Builder2.getincludeCollection());
      assertFalse(mongoDBRiverDefinition_Builder2.getadvancedTransformation());
      assertFalse(mongoDBRiverDefinition_Builder2.getmongoSSLVerifyCertificate());
      assertNull(mongoDBRiverDefinition_Builder2.getstatisticsIndexName());
      assertFalse(mongoDBRiverDefinition_Builder2.getskipInitialImport());
      assertNull(mongoDBRiverDefinition_Builder2.getmongoCollection());
      assertNull(mongoDBRiverDefinition_Builder2.getindexName());
      assertEquals("", mongoDBRiverDefinition_Builder2.getmongoLocalUser());
      assertNull(mongoDBRiverDefinition_Builder2.getscript());
      assertFalse(mongoDBRiverDefinition_Builder2.getdisableIndexRefresh());
      assertFalse(mongoDBRiverDefinition_Builder2.getdropCollection());
      assertEquals(0, mongoDBRiverDefinition_Builder2.getconnectTimeout());
      assertFalse(mongoDBRiverDefinition_Builder2.getstoreStatistics());
      assertNull(mongoDBRiverDefinition_Builder2.gettypeName());
      assertEquals(0, mongoDBRiverDefinition_Builder2.getsocketTimeout());
      assertFalse(mongoDBRiverDefinition_Builder2.getmongoSecondaryReadPreference());
      assertNull(mongoDBRiverDefinition_Builder2.getstatisticsTypeName());
      assertEquals("", mongoDBRiverDefinition_Builder2.getmongoAdminPassword());
      assertEquals("", mongoDBRiverDefinition_Builder2.getmongoAdminUser());
      assertFalse(mongoDBRiverDefinition_Builder2.getimportAllCollections());
      assertEquals("include_collection", mongoDBRiverDefinition0.getINCLUDE_COLLECTION_FIELD());
      assertEquals("password", mongoDBRiverDefinition0.getPASSWORD_FIELD());
      assertFalse(mongoDBRiverDefinition0.isSkipInitialImport());
      assertEquals("drop_collection", mongoDBRiverDefinition0.getDROP_COLLECTION_FIELD());
      assertEquals("", mongoDBRiverDefinition0.getMongoLocalPassword());
      assertEquals("secondary_read_preference", mongoDBRiverDefinition0.getSECONDARY_READ_PREFERENCE_FIELD());
      assertEquals("flush_interval", mongoDBRiverDefinition0.getFLUSH_INTERVAL_FIELD());
      assertEquals("actions", mongoDBRiverDefinition0.getACTIONS_FIELD());
      assertFalse(mongoDBRiverDefinition0.getstoreStatistics());
      assertEquals("servers", mongoDBRiverDefinition0.getSERVERS_FIELD());
      assertEquals("script", mongoDBRiverDefinition0.getSCRIPT_FIELD());
      assertNull(mongoDBRiverDefinition0.getScriptType());
      assertFalse(mongoDBRiverDefinition0.getdisableIndexRefresh());
      assertEquals("bulk_timeout", mongoDBRiverDefinition0.getBULK_TIMEOUT_FIELD());
      assertEquals("gridfs", mongoDBRiverDefinition0.getGRIDFS_FIELD());
      assertEquals("throttle_size", mongoDBRiverDefinition0.getTHROTTLE_SIZE_FIELD());
      assertEquals("connect_timeout", mongoDBRiverDefinition0.getCONNECTION_TIMEOUT());
      assertNull(mongoDBRiverDefinition0.getRiverName());
      assertEquals("credentials", mongoDBRiverDefinition0.getCREDENTIALS_FIELD());
      assertEquals(0, mongoDBRiverDefinition0.getConnectTimeout());
      assertEquals("store_statistics", mongoDBRiverDefinition0.getSTORE_STATISTICS_FIELD());
      assertNull(mongoDBRiverDefinition0.getIndexName());
      assertEquals("db", mongoDBRiverDefinition0.getDB_FIELD());
      assertNull(mongoDBRiverDefinition0.getScript());
      assertEquals("bulk", mongoDBRiverDefinition0.getBULK_FIELD());
      assertEquals("", mongoDBRiverDefinition0.getIncludeCollection());
      assertEquals("host", mongoDBRiverDefinition0.getHOST_FIELD());
      assertEquals("bulk_size", mongoDBRiverDefinition0.getBULK_SIZE_FIELD());
      assertEquals("user", mongoDBRiverDefinition0.getUSER_FIELD());
      assertFalse(mongoDBRiverDefinition0.isDisableIndexRefresh());
      assertEquals("localhost", mongoDBRiverDefinition0.getDEFAULT_DB_HOST());
      assertEquals("size", mongoDBRiverDefinition0.getSIZE_FIELD());
      assertFalse(mongoDBRiverDefinition0.getmongoSecondaryReadPreference());
      assertEquals("initial_timestamp", mongoDBRiverDefinition0.getINITIAL_TIMESTAMP_FIELD());
      assertNull(mongoDBRiverDefinition0.getStatisticsIndexName());
      assertEquals("port", mongoDBRiverDefinition0.getPORT_FIELD());
      assertFalse(mongoDBRiverDefinition0.getdropCollection());
      assertEquals("script_type", mongoDBRiverDefinition0.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD());
      assertEquals("name", mongoDBRiverDefinition0.getNAME_FIELD());
      assertEquals("collection", mongoDBRiverDefinition0.getCOLLECTION_FIELD());
      assertEquals("ssl_verify_certificate", mongoDBRiverDefinition0.getSSL_VERIFY_CERT_FIELD());
      assertEquals(27017, mongoDBRiverDefinition0.getDEFAULT_DB_PORT());
      assertEquals("script", mongoDBRiverDefinition0.getINITIAL_TIMESTAMP_SCRIPT_FIELD());
      assertEquals(1000, mongoDBRiverDefinition0.getDEFAULT_BULK_ACTIONS());
      assertFalse(mongoDBRiverDefinition0.getmongoSSLVerifyCertificate());
      assertFalse(mongoDBRiverDefinition0.isStoreStatistics());
      assertEquals("script_type", mongoDBRiverDefinition0.getSCRIPT_TYPE_FIELD());
      assertEquals("admin", mongoDBRiverDefinition0.getADMIN_DB_FIELD());
      assertEquals(0, mongoDBRiverDefinition0.getSocketTimeout());
      assertFalse(mongoDBRiverDefinition0.getadvancedTransformation());
      assertNull(mongoDBRiverDefinition0.getMongoCollection());
      assertFalse(mongoDBRiverDefinition0.getimportAllCollections());
      assertEquals("options", mongoDBRiverDefinition0.getOPTIONS_FIELD());
      assertEquals("", mongoDBRiverDefinition0.getMongoAdminUser());
      assertEquals("parent_types", mongoDBRiverDefinition0.getPARENT_TYPES_FIELD());
      assertEquals("exclude_fields", mongoDBRiverDefinition0.getEXCLUDE_FIELDS_FIELD());
      assertEquals("import_all_collections", mongoDBRiverDefinition0.getIMPORT_ALL_COLLECTIONS_FIELD());
      assertFalse(mongoDBRiverDefinition0.isImportAllCollections());
      assertNull(mongoDBRiverDefinition0.getTypeName());
      assertFalse(mongoDBRiverDefinition0.getmongoGridFS());
      assertEquals("concurrent_requests", mongoDBRiverDefinition0.getCONCURRENT_REQUESTS_FIELD());
      assertEquals("", mongoDBRiverDefinition0.getMongoLocalUser());
      assertFalse(mongoDBRiverDefinition0.getmongoUseSSL());
      assertEquals("ssl", mongoDBRiverDefinition0.getSSL_CONNECTION_FIELD());
      assertNull(mongoDBRiverDefinition0.getStatisticsTypeName());
      assertFalse(mongoDBRiverDefinition0.isMongoSSLVerifyCertificate());
      assertFalse(mongoDBRiverDefinition0.isAdvancedTransformation());
      assertNull(mongoDBRiverDefinition0.getRiverIndexName());
      assertEquals("include_fields", mongoDBRiverDefinition0.getINCLUDE_FIELDS_FIELD());
      assertFalse(mongoDBRiverDefinition0.getskipInitialImport());
      assertEquals("filter", mongoDBRiverDefinition0.getFILTER_FIELD());
      assertEquals(1, mongoDBRiverDefinition0.getDEFAULT_CONCURRENT_REQUESTS());
      assertEquals("", mongoDBRiverDefinition0.getMongoAdminPassword());
      assertFalse(mongoDBRiverDefinition0.isDropCollection());
      assertEquals("skip_initial_import", mongoDBRiverDefinition0.getSKIP_INITIAL_IMPORT_FIELD());
      assertEquals(0, mongoDBRiverDefinition0.getThrottleSize());
      assertEquals("local", mongoDBRiverDefinition0.getLOCAL_DB_FIELD());
      assertEquals("index", mongoDBRiverDefinition0.getINDEX_OBJECT());
      assertFalse(mongoDBRiverDefinition0.isMongoSecondaryReadPreference());
      assertEquals("disable_index_refresh", mongoDBRiverDefinition0.getDISABLE_INDEX_REFRESH_FIELD());
      assertFalse(mongoDBRiverDefinition0.isMongoGridFS());
      assertFalse(mongoDBRiverDefinition0.isMongoUseSSL());
      assertEquals("org.elasticsearch.client.node.NodeAdminClient", mongoDBRiverDefinition0.getMongoDb());
      assertEquals("type", mongoDBRiverDefinition0.getTYPE_FIELD());
      assertEquals("concurrent_bulk_requests", mongoDBRiverDefinition0.getCONCURRENT_BULK_REQUESTS_FIELD());
      assertEquals("advanced_transformation", mongoDBRiverDefinition0.getADVANCED_TRANSFORMATION_FIELD());
      assertEquals("socket_timeout", mongoDBRiverDefinition0.getSOCKET_TIMEOUT());
      assertNotNull(mongoDBRiverDefinition0);
      assertSame(mongoDBRiverDefinition_Builder0, mongoDBRiverDefinition_Builder1);
      assertSame(mongoDBRiverDefinition_Builder0, mongoDBRiverDefinition_Builder2);
      assertSame(mongoDBRiverDefinition_Builder1, mongoDBRiverDefinition_Builder0);
      assertSame(mongoDBRiverDefinition_Builder1, mongoDBRiverDefinition_Builder2);
      assertSame(mongoDBRiverDefinition_Builder2, mongoDBRiverDefinition_Builder0);
      assertSame(mongoDBRiverDefinition_Builder2, mongoDBRiverDefinition_Builder1);
      
      LinkedBlockingDeque<MongoDBRiver.QueueEntry> linkedBlockingDeque0 = new LinkedBlockingDeque<MongoDBRiver.QueueEntry>();
      assertNotNull(linkedBlockingDeque0);
      
      Status status0 = Status.START_FAILED;
      SharedContext sharedContext0 = new SharedContext(linkedBlockingDeque0, status0);
      assertEquals(Status.START_FAILED, sharedContext0.getStatus());
      assertNotNull(sharedContext0);
      
      Client client0 = null;
      Slurper slurper0 = null;
      try {
        slurper0 = new Slurper(lazyDBList0, mongoDBRiverDefinition0, sharedContext0, client0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not Supported
         //
         verifyException("org.bson.LazyBSONList", e);
      }
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      String string0 = "WUL^HuBH_,<e";
      DBAddress dBAddress0 = new DBAddress(string0, string0);
      assertEquals("127.0.0.1", dBAddress0.defaultHost());
      assertEquals(27017, dBAddress0.defaultPort());
      assertEquals("WUL^HuBH_,<e", dBAddress0.getHost());
      assertEquals("WUL^HuBH_,<e", dBAddress0.getDBName());
      assertEquals(27017, dBAddress0.getPort());
      assertNotNull(dBAddress0);
      
      ServerAddress[] serverAddressArray0 = new ServerAddress[7];
      serverAddressArray0[0] = (ServerAddress) dBAddress0;
      serverAddressArray0[1] = (ServerAddress) dBAddress0;
      serverAddressArray0[2] = (ServerAddress) dBAddress0;
      serverAddressArray0[3] = (ServerAddress) dBAddress0;
      serverAddressArray0[4] = (ServerAddress) dBAddress0;
      serverAddressArray0[5] = (ServerAddress) dBAddress0;
      serverAddressArray0[6] = (ServerAddress) dBAddress0;
      String string1 = "";
      DBAddress dBAddress1 = dBAddress0.getSister(string1);
      assertEquals("127.0.0.1", dBAddress0.defaultHost());
      assertEquals(27017, dBAddress0.defaultPort());
      assertEquals("WUL^HuBH_,<e", dBAddress0.getHost());
      assertEquals("WUL^HuBH_,<e", dBAddress0.getDBName());
      assertEquals(27017, dBAddress0.getPort());
      assertEquals("WUL^HuBH_,<e", dBAddress1.getHost());
      assertEquals("127.0.0.1", dBAddress1.defaultHost());
      assertEquals(27017, dBAddress1.getPort());
      assertEquals("", dBAddress1.getDBName());
      assertEquals(27017, dBAddress1.defaultPort());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(dBAddress1.equals((Object)dBAddress0));
      assertNotNull(dBAddress1);
      assertNotSame(string0, string1);
      assertNotSame(dBAddress0, dBAddress1);
      assertNotSame(string1, string0);
      assertNotSame(dBAddress1, dBAddress0);
      
      ImmutableList<ServerAddress> immutableList0 = ImmutableList.of((ServerAddress) dBAddress0, (ServerAddress) dBAddress0, (ServerAddress) dBAddress0, (ServerAddress) dBAddress0, (ServerAddress) dBAddress0, (ServerAddress) dBAddress0, (ServerAddress) dBAddress0, (ServerAddress) dBAddress0, (ServerAddress) dBAddress0, (ServerAddress) dBAddress0, (ServerAddress) dBAddress0, (ServerAddress) dBAddress0, serverAddressArray0);
      assertEquals(7, serverAddressArray0.length);
      assertEquals("127.0.0.1", dBAddress0.defaultHost());
      assertEquals(27017, dBAddress0.defaultPort());
      assertEquals("WUL^HuBH_,<e", dBAddress0.getHost());
      assertEquals("WUL^HuBH_,<e", dBAddress0.getDBName());
      assertEquals(27017, dBAddress0.getPort());
      assertEquals(19, immutableList0.size());
      assertFalse(string0.equals((Object)string1));
      assertFalse(dBAddress0.equals((Object)dBAddress1));
      assertNotNull(immutableList0);
      assertNotSame(string0, string1);
      assertNotSame(dBAddress0, dBAddress1);
      
      ImmutableList<ServerAddress> immutableList1 = ImmutableList.copyOf((Iterable<? extends ServerAddress>) immutableList0);
      assertEquals(7, serverAddressArray0.length);
      assertEquals("127.0.0.1", dBAddress0.defaultHost());
      assertEquals(27017, dBAddress0.defaultPort());
      assertEquals("WUL^HuBH_,<e", dBAddress0.getHost());
      assertEquals("WUL^HuBH_,<e", dBAddress0.getDBName());
      assertEquals(27017, dBAddress0.getPort());
      assertEquals(19, immutableList0.size());
      assertEquals(19, immutableList1.size());
      assertFalse(string0.equals((Object)string1));
      assertFalse(dBAddress0.equals((Object)dBAddress1));
      assertNotNull(immutableList1);
      assertNotSame(string0, string1);
      assertNotSame(dBAddress0, dBAddress1);
      assertSame(immutableList0, immutableList1);
      assertSame(immutableList1, immutableList0);
      
      MongoDBRiverDefinition mongoDBRiverDefinition0 = null;
      LinkedTransferQueue<MongoDBRiver.QueueEntry> linkedTransferQueue0 = new LinkedTransferQueue<MongoDBRiver.QueueEntry>();
      assertNotNull(linkedTransferQueue0);
      
      Status status0 = Status.START_FAILED;
      SharedContext sharedContext0 = new SharedContext(linkedTransferQueue0, status0);
      assertEquals(Status.START_FAILED, sharedContext0.getStatus());
      assertNotNull(sharedContext0);
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)69;
      byteArray0[1] = byte1;
      byte byte2 = (byte)1;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-114);
      byteArray0[5] = byte5;
      LazyBSONCallback lazyBSONCallback0 = new LazyBSONCallback();
      assertNotNull(lazyBSONCallback0);
      
      LazyDBList lazyDBList0 = new LazyDBList(byteArray0, lazyBSONCallback0);
      assertEquals(6, byteArray0.length);
      assertFalse(lazyDBList0.isPartialObject());
      assertNotNull(lazyDBList0);
      assertArrayEquals(new byte[] {(byte)0, (byte)69, (byte)1, (byte)0, (byte)0, (byte) (-114)}, byteArray0);
      
      String string2 = "";
      MongoDBRiver.QueueEntry mongoDBRiver_QueueEntry0 = new MongoDBRiver.QueueEntry(lazyDBList0, string2);
      assertEquals(6, byteArray0.length);
      assertFalse(lazyDBList0.isPartialObject());
      assertFalse(mongoDBRiver_QueueEntry0.isAttachment());
      assertEquals("", mongoDBRiver_QueueEntry0.getCollection());
      assertEquals(Operation.INSERT, mongoDBRiver_QueueEntry0.getOperation());
      assertFalse(mongoDBRiver_QueueEntry0.isOplogEntry());
      assertFalse(string2.equals((Object)string0));
      assertNotNull(mongoDBRiver_QueueEntry0);
      assertArrayEquals(new byte[] {(byte)0, (byte)69, (byte)1, (byte)0, (byte)0, (byte) (-114)}, byteArray0);
      
      boolean boolean0 = linkedTransferQueue0.add(mongoDBRiver_QueueEntry0);
      assertTrue(boolean0);
      assertTrue(linkedTransferQueue0.contains(mongoDBRiver_QueueEntry0));
      assertEquals(6, byteArray0.length);
      assertFalse(lazyDBList0.isPartialObject());
      assertFalse(mongoDBRiver_QueueEntry0.isAttachment());
      assertEquals("", mongoDBRiver_QueueEntry0.getCollection());
      assertEquals(Operation.INSERT, mongoDBRiver_QueueEntry0.getOperation());
      assertFalse(mongoDBRiver_QueueEntry0.isOplogEntry());
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)0, (byte)69, (byte)1, (byte)0, (byte)0, (byte) (-114)}, byteArray0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      
      Client client0 = null;
      Slurper slurper0 = null;
      try {
        slurper0 = new Slurper(immutableList1, mongoDBRiverDefinition0, sharedContext0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.river.mongodb.Slurper", e);
      }
  }
}
