/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 05 12:43:12 GMT 2021
 */

package org.atmosphere.cpr;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.function.Predicate;
import javax.swing.JLayeredPane;
import javax.swing.JScrollBar;
import org.atmosphere.config.AtmosphereHandlerConfig;
import org.atmosphere.config.AtmosphereHandlerProperty;
import org.atmosphere.cpr.AtmosphereConfig;
import org.atmosphere.cpr.AtmosphereFramework;
import org.atmosphere.cpr.AtmosphereHandler;
import org.atmosphere.cpr.AtmosphereRequest;
import org.atmosphere.cpr.AtmosphereResource;
import org.atmosphere.cpr.AtmosphereResourceImpl;
import org.atmosphere.cpr.AtmosphereResourceSessionFactory;
import org.atmosphere.cpr.BroadcastFilter;
import org.atmosphere.cpr.BroadcastFilterTest;
import org.atmosphere.cpr.Broadcaster;
import org.atmosphere.cpr.BroadcasterLifecyclePolicyTest;
import org.atmosphere.cpr.BroadcasterTest;
import org.atmosphere.cpr.DefaultAtmosphereResourceFactory;
import org.atmosphere.cpr.DefaultBroadcaster;
import org.atmosphere.cpr.DefaultBroadcasterFactory;
import org.atmosphere.cpr.ExcludeSessionBroadcasterTest;
import org.atmosphere.cpr.ServiceTest;
import org.atmosphere.cpr.WriteTimeoutTest;
import org.atmosphere.util.UUIDProvider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.glassfish.grizzly.Transport;
import org.glassfish.grizzly.nio.NIOTransport;
import org.glassfish.grizzly.nio.SelectorRunner;
import org.glassfish.grizzly.nio.transport.UDPNIOTransport;
import org.junit.runner.RunWith;
import org.mortbay.util.MultiMap;
import org.slf4j.Logger;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AtmosphereConfig_ESTest extends AtmosphereConfig_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      List<AtmosphereHandlerConfig> list0 = atmosphereConfig0.getAtmosphereHandlerConfig();
      assertNotNull(list0);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      String string0 = "g!aBKI9!sQ%";
      String string1 = "";
      String string2 = "~B";
      boolean boolean0 = true;
      boolean boolean1 = atmosphereConfig0.getInitParameter(string2, boolean0);
      assertTrue(boolean1);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.startupHook(atmosphereConfig_StartupHook0);
      assertNotNull(atmosphereConfig1);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      
      atmosphereConfig1.sessionTimeoutRemovalAllowed = atmosphereConfig0.supportSession;
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      
      atmosphereConfig0.setSupportSession(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      
      int int0 = 0;
      int int1 = atmosphereConfig1.getInitParameter(string0, int0);
      assertEquals(0, int1);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(int1 == int0);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      
      atmosphereConfig0.setuseServletContextParameters(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      
      atmosphereConfig0.setstartUpHook(atmosphereConfig1.startUpHook);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      
      boolean boolean2 = atmosphereConfig0.isThrowExceptionOnCloned();
      assertFalse(boolean2);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      atmosphereConfig0.destroy();
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      // Undeclared exception!
      try { 
        atmosphereConfig0.getServletConfig();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      ServiceTest.B serviceTest_B0 = new ServiceTest.B();
      assertNotNull(serviceTest_B0);
      assertEquals(100, DefaultBroadcaster.POLLING_DEFAULT);
      assertEquals(Broadcaster.SCOPE.APPLICATION, serviceTest_B0.getScope());
      assertFalse(serviceTest_B0.outOfOrderBroadcastSupported());
      assertEquals("DefaultBroadcaster", serviceTest_B0.getID());
      assertFalse(serviceTest_B0.isDestroyed());
      assertEquals(Broadcaster.POLICY.FIFO, serviceTest_B0.policy());
      
      DefaultAtmosphereResourceFactory defaultAtmosphereResourceFactory0 = new DefaultAtmosphereResourceFactory();
      assertNotNull(defaultAtmosphereResourceFactory0);
      
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = null;
      byte byte0 = (byte)26;
      byte byte1 = (byte) (-110);
      String string0 = "g4y`}V^D6";
      MockPrintStream mockPrintStream0 = new MockPrintStream(serviceTest_B0.ASYNC_TOKEN);
      assertNotNull(mockPrintStream0);
      assertEquals(100, DefaultBroadcaster.POLLING_DEFAULT);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      boolean boolean0 = true;
      AtmosphereFramework atmosphereFramework0 = null;
      try {
        atmosphereFramework0 = new AtmosphereFramework();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereFramework", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      // Undeclared exception!
      try { 
        atmosphereConfig0.sessionFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.shutdownHook(atmosphereConfig_ShutdownHook0);
      assertNotNull(atmosphereConfig1);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      
      atmosphereConfig1.destroy();
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      
      atmosphereConfig1.setframework(atmosphereConfig0.framework);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      
      // Undeclared exception!
      try { 
        atmosphereConfig0.getWebServerName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      String string0 = "kS,Dvc[r";
      String string1 = atmosphereConfig0.getInitParameter(string0, string0);
      assertEquals("kS,Dvc[r", string1);
      assertNotNull(string1);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.startupHook(atmosphereConfig_StartupHook0);
      assertNotNull(atmosphereConfig1);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isSupportSession());
      
      AtmosphereFramework atmosphereFramework0 = atmosphereConfig0.framework();
      assertNull(atmosphereFramework0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      boolean boolean0 = true;
      atmosphereConfig0.supportSession = boolean0;
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertTrue(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      boolean boolean1 = false;
      atmosphereConfig0.setThrowExceptionOnCloned(boolean1);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertFalse(boolean1 == boolean0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertTrue(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      boolean boolean2 = atmosphereConfig0.isSupportSession();
      assertTrue(boolean2);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertTrue(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      boolean boolean3 = atmosphereConfig0.supportSession;
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      List<AtmosphereConfig.ShutdownHook> list0 = atmosphereConfig0.getshutdownHooks();
      assertNotNull(list0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertTrue(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      // Undeclared exception!
      try { 
        atmosphereConfig0.getInitParameterNames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      String string0 = "W1`4S2}>fpOBVAXWSAv";
      boolean boolean0 = false;
      boolean boolean1 = atmosphereConfig0.getInitParameter(string0, atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(boolean1);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertTrue(boolean1 == boolean0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.startupHook(atmosphereConfig_StartupHook0);
      assertNotNull(atmosphereConfig1);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      
      atmosphereConfig0.initComplete();
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      boolean boolean2 = true;
      boolean boolean3 = false;
      String string1 = "]C!";
      List<AtmosphereConfig.StartupHook> list0 = atmosphereConfig0.getstartUpHook();
      assertNotNull(list0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertFalse(list0.contains(atmosphereConfig_StartupHook0));
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      // Undeclared exception!
      try { 
        atmosphereConfig0.metaBroadcaster();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = true;
      boolean boolean1 = false;
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      Map<String, Object> map0 = null;
      atmosphereConfig0.setproperties(map0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      boolean boolean2 = atmosphereConfig0.getuseServletContextParameters();
      assertFalse(boolean2);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      Logger logger0 = atmosphereConfig0.getlogger();
      assertNotNull(logger0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      // Undeclared exception!
      try { 
        atmosphereConfig0.getBroadcasterFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      boolean boolean0 = atmosphereConfig0.isSessionTimeoutRemovalAllowed();
      assertFalse(boolean0);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      // Undeclared exception!
      try { 
        atmosphereConfig0.resourcesFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      boolean boolean0 = true;
      atmosphereConfig0.throwExceptionOnCloned = boolean0;
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = true;
      atmosphereConfig0.initComplete();
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      Stack<AtmosphereConfig.ShutdownHook> stack0 = new Stack<AtmosphereConfig.ShutdownHook>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      atmosphereConfig0.shutdownHooks = (List<AtmosphereConfig.ShutdownHook>) stack0;
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(atmosphereConfig0.shutdownHooks.isEmpty());
      assertEquals(0, atmosphereConfig0.shutdownHooks.size());
      
      boolean boolean3 = stack0.retainAll(atmosphereConfig0.shutdownHooks);
      assertFalse(boolean3);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("org.atmosphere.cpr.AtmosphereConfig", 12345);
      boolean boolean4 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      
      atmosphereConfig0.setshutdownHooks(stack0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      atmosphereConfig0.setSessionTimeoutRemovalAllowed(boolean0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertTrue(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean0 == boolean4);
      assertFalse(boolean0 == boolean3);
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      boolean boolean5 = false;
      atmosphereConfig0.supportSession = boolean5;
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      boolean boolean6 = stack0.add(atmosphereConfig_ShutdownHook0);
      assertTrue(boolean6);
      assertTrue(stack0.contains(atmosphereConfig_ShutdownHook0));
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      
      String string0 = "org.atmosphere.cpr.AtmosphereConfig";
      String string1 = atmosphereConfig0.getInitParameter(string0);
      assertNull(string1);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertTrue(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      AtmosphereFramework atmosphereFramework0 = atmosphereConfig0.getframework();
      assertNull(atmosphereFramework0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertTrue(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      // Undeclared exception!
      try { 
        atmosphereConfig0.uuidProvider();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      boolean boolean0 = false;
      atmosphereConfig0.setuseServletContextParameters(boolean0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      String string0 = "B=fMBu%e/iLiB$Ba/|m";
      int int0 = (-201326592);
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = false;
      String string1 = null;
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = null;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[1] = byte0;
      byte byte1 = (byte)53;
      atmosphereConfig0.initComplete();
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      byteArray0[2] = byte1;
      byte byte2 = (byte) (-47);
      byteArray0[3] = byte2;
      byte byte3 = (byte)69;
      byteArray0[4] = byte3;
      byte byte4 = (byte)1;
      byteArray0[5] = byte4;
      byte byte5 = (byte) (-104);
      byteArray0[6] = byte5;
      byte byte6 = (byte)94;
      byteArray0[7] = byte6;
      boolean boolean2 = NetworkHandling.sendDataOnTcp(evoSuiteLocalAddress0, byteArray0);
      assertFalse(boolean2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)53, (byte) (-47), (byte)69, (byte)1, (byte) (-104), (byte)94}, byteArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(8, byteArray0.length);
      
      boolean boolean3 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string1);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = true;
      boolean boolean5 = true;
      boolean boolean6 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean1, boolean4, boolean5);
      assertFalse(boolean6);
      assertTrue(boolean1 == boolean2);
      assertFalse(boolean1 == boolean5);
      assertFalse(boolean1 == boolean4);
      assertTrue(boolean1 == boolean3);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean5);
      
      int int1 = atmosphereConfig0.getInitParameter(string0, int0);
      assertEquals((-201326592), int1);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(int1 == int0);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      String string2 = "k#.(bWa`s7ph0Dv";
      String string3 = atmosphereConfig0.getInitParameter(string0, string2);
      assertEquals("k#.(bWa`s7ph0Dv", string3);
      assertNotNull(string3);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      String string4 = null;
      String string5 = ")`";
      String string6 = atmosphereConfig0.getInitParameter(string4, string5);
      assertEquals(")`", string6);
      assertNotNull(string6);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertNotSame(string5, string2);
      assertSame(string5, string6);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertSame(string6, string5);
      assertNotSame(string6, string3);
      assertNotSame(string6, string2);
      assertNotSame(string6, string0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      String string7 = atmosphereConfig0.getInitParameter(string5);
      assertNull(string7);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertNotSame(string5, string2);
      assertSame(string5, string6);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.shutdownHook(atmosphereConfig_ShutdownHook0);
      assertNotNull(atmosphereConfig1);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      
      // Undeclared exception!
      try { 
        atmosphereConfig1.handlers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      MultiMap multiMap0 = new MultiMap();
      assertNotNull(multiMap0);
      assertEquals(0, multiMap0.size());
      assertTrue(multiMap0.isEmpty());
      
      atmosphereConfig0.properties = (Map<String, Object>) multiMap0;
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertEquals(0, multiMap0.size());
      assertTrue(multiMap0.isEmpty());
      assertTrue(atmosphereConfig0.properties.isEmpty());
      assertEquals(0, atmosphereConfig0.properties.size());
      
      DefaultAtmosphereResourceFactory defaultAtmosphereResourceFactory0 = new DefaultAtmosphereResourceFactory();
      assertNotNull(defaultAtmosphereResourceFactory0);
      
      boolean boolean0 = false;
      atmosphereConfig0.throwExceptionOnCloned = atmosphereConfig0.useServletContextParameters;
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      boolean boolean1 = false;
      atmosphereConfig0.setThrowExceptionOnCloned(boolean1);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      Map<String, Object> map0 = atmosphereConfig0.getproperties();
      assertNotNull(map0);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      atmosphereConfig0.setproperties(map0);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      atmosphereConfig0.destroy();
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      List<AtmosphereConfig.ShutdownHook> list0 = atmosphereConfig0.getshutdownHooks();
      assertNotNull(list0);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Map<String, Object> map0 = atmosphereConfig0.properties();
      assertNotNull(map0);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      AtmosphereConfig atmosphereConfig1 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig1);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.equals((Object)atmosphereConfig0));
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      
      AtmosphereConfig atmosphereConfig2 = atmosphereConfig0.populate(atmosphereConfig1);
      assertNotNull(atmosphereConfig2);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig2.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig2.useServletContextParameters);
      assertFalse(atmosphereConfig2.throwExceptionOnCloned);
      assertFalse(atmosphereConfig2.supportSession);
      assertSame(atmosphereConfig0, atmosphereConfig2);
      assertNotSame(atmosphereConfig0, atmosphereConfig1);
      assertNotSame(atmosphereConfig1, atmosphereConfig0);
      assertNotSame(atmosphereConfig1, atmosphereConfig2);
      assertSame(atmosphereConfig2, atmosphereConfig0);
      assertNotSame(atmosphereConfig2, atmosphereConfig1);
      assertFalse(atmosphereConfig0.equals((Object)atmosphereConfig1));
      assertFalse(atmosphereConfig1.equals((Object)atmosphereConfig0));
      assertFalse(atmosphereConfig2.equals((Object)atmosphereConfig1));
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig2.isSupportSession());
      assertFalse(atmosphereConfig2.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig2.getuseServletContextParameters());
      assertFalse(atmosphereConfig2.isSessionTimeoutRemovalAllowed());
      
      String string0 = "Q";
      atmosphereConfig2.framework = atmosphereConfig0.framework;
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig2.isSupportSession());
      assertFalse(atmosphereConfig2.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig2.getuseServletContextParameters());
      assertFalse(atmosphereConfig2.isSessionTimeoutRemovalAllowed());
      
      String string1 = atmosphereConfig2.getInitParameter(string0);
      assertNull(string1);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig2.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig2.useServletContextParameters);
      assertFalse(atmosphereConfig2.throwExceptionOnCloned);
      assertFalse(atmosphereConfig2.supportSession);
      assertSame(atmosphereConfig0, atmosphereConfig2);
      assertNotSame(atmosphereConfig0, atmosphereConfig1);
      assertNotSame(atmosphereConfig1, atmosphereConfig0);
      assertNotSame(atmosphereConfig1, atmosphereConfig2);
      assertSame(atmosphereConfig2, atmosphereConfig0);
      assertNotSame(atmosphereConfig2, atmosphereConfig1);
      assertFalse(atmosphereConfig0.equals((Object)atmosphereConfig1));
      assertFalse(atmosphereConfig1.equals((Object)atmosphereConfig0));
      assertFalse(atmosphereConfig1.equals((Object)atmosphereConfig2));
      assertFalse(atmosphereConfig2.equals((Object)atmosphereConfig1));
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig2.isSupportSession());
      assertFalse(atmosphereConfig2.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig2.getuseServletContextParameters());
      assertFalse(atmosphereConfig2.isSessionTimeoutRemovalAllowed());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string1);
      assertFalse(boolean0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig2.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig2.useServletContextParameters);
      assertFalse(atmosphereConfig2.throwExceptionOnCloned);
      assertFalse(atmosphereConfig2.supportSession);
      assertSame(atmosphereConfig0, atmosphereConfig2);
      assertNotSame(atmosphereConfig0, atmosphereConfig1);
      assertNotSame(atmosphereConfig1, atmosphereConfig0);
      assertNotSame(atmosphereConfig1, atmosphereConfig2);
      assertSame(atmosphereConfig2, atmosphereConfig0);
      assertNotSame(atmosphereConfig2, atmosphereConfig1);
      assertFalse(atmosphereConfig0.equals((Object)atmosphereConfig1));
      assertFalse(atmosphereConfig1.equals((Object)atmosphereConfig0));
      assertFalse(atmosphereConfig1.equals((Object)atmosphereConfig2));
      assertFalse(atmosphereConfig2.equals((Object)atmosphereConfig1));
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig2.isSupportSession());
      assertFalse(atmosphereConfig2.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig2.getuseServletContextParameters());
      assertFalse(atmosphereConfig2.isSessionTimeoutRemovalAllowed());
      
      atmosphereConfig0.destroy();
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertSame(atmosphereConfig0, atmosphereConfig2);
      assertNotSame(atmosphereConfig0, atmosphereConfig1);
      assertFalse(atmosphereConfig0.equals((Object)atmosphereConfig1));
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      atmosphereConfig1.sessionTimeoutRemovalAllowed = atmosphereConfig0.throwExceptionOnCloned;
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      
      AtmosphereConfig atmosphereConfig3 = atmosphereConfig1.populate(atmosphereConfig2);
      assertNotNull(atmosphereConfig3);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig2.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig2.useServletContextParameters);
      assertFalse(atmosphereConfig2.throwExceptionOnCloned);
      assertFalse(atmosphereConfig2.supportSession);
      assertFalse(atmosphereConfig3.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig3.useServletContextParameters);
      assertFalse(atmosphereConfig3.supportSession);
      assertFalse(atmosphereConfig3.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig2);
      assertNotSame(atmosphereConfig0, atmosphereConfig1);
      assertNotSame(atmosphereConfig0, atmosphereConfig3);
      assertNotSame(atmosphereConfig1, atmosphereConfig0);
      assertSame(atmosphereConfig1, atmosphereConfig3);
      assertNotSame(atmosphereConfig1, atmosphereConfig2);
      assertSame(atmosphereConfig2, atmosphereConfig0);
      assertNotSame(atmosphereConfig2, atmosphereConfig3);
      assertNotSame(atmosphereConfig2, atmosphereConfig1);
      assertNotSame(atmosphereConfig3, atmosphereConfig0);
      assertSame(atmosphereConfig3, atmosphereConfig1);
      assertNotSame(atmosphereConfig3, atmosphereConfig2);
      assertFalse(atmosphereConfig0.equals((Object)atmosphereConfig1));
      assertFalse(atmosphereConfig1.equals((Object)atmosphereConfig0));
      assertFalse(atmosphereConfig1.equals((Object)atmosphereConfig2));
      assertFalse(atmosphereConfig2.equals((Object)atmosphereConfig1));
      assertFalse(atmosphereConfig3.equals((Object)atmosphereConfig0));
      assertFalse(atmosphereConfig3.equals((Object)atmosphereConfig2));
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig2.isSupportSession());
      assertFalse(atmosphereConfig2.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig2.getuseServletContextParameters());
      assertFalse(atmosphereConfig2.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig3.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig3.getuseServletContextParameters());
      assertFalse(atmosphereConfig3.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig3.isSupportSession());
      
      // Undeclared exception!
      try { 
        atmosphereConfig3.getServletContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = null;
      try {
        atmosphereFramework0 = new AtmosphereFramework();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereFramework", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      atmosphereConfig0.destroy();
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      boolean boolean0 = true;
      atmosphereConfig0.setSessionTimeoutRemovalAllowed(boolean0);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertTrue(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      // Undeclared exception!
      try { 
        atmosphereConfig0.getServletContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      String string0 = null;
      String string1 = atmosphereConfig0.getInitParameter(string0);
      assertNull(string1);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      String string0 = null;
      Stack<AtmosphereConfig.StartupHook> stack0 = new Stack<AtmosphereConfig.StartupHook>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.negate();
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      boolean boolean0 = stack0.removeIf(predicate1);
      assertFalse(boolean0);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      atmosphereConfig0.setstartUpHook(stack0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      String string1 = atmosphereConfig0.getInitParameter(string0, string0);
      assertNull(string1);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      // Undeclared exception!
      try { 
        atmosphereConfig0.getServletContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      String string0 = "W1`4S2}>fpOBVAXWSAv";
      boolean boolean0 = false;
      boolean boolean1 = false;
      atmosphereConfig0.setuseServletContextParameters(boolean1);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      boolean boolean2 = atmosphereConfig0.getInitParameter(string0, boolean0);
      assertFalse(boolean2);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      atmosphereConfig0.initComplete();
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      BroadcasterLifecyclePolicyTest.B broadcasterLifecyclePolicyTest_B0 = new BroadcasterLifecyclePolicyTest.B();
      assertNotNull(broadcasterLifecyclePolicyTest_B0);
      assertEquals(100, DefaultBroadcaster.POLLING_DEFAULT);
      assertEquals("DefaultBroadcaster", broadcasterLifecyclePolicyTest_B0.getID());
      assertFalse(broadcasterLifecyclePolicyTest_B0.outOfOrderBroadcastSupported());
      assertFalse(broadcasterLifecyclePolicyTest_B0.isDestroyed());
      assertEquals(Broadcaster.SCOPE.APPLICATION, broadcasterLifecyclePolicyTest_B0.getScope());
      assertEquals(Broadcaster.POLICY.FIFO, broadcasterLifecyclePolicyTest_B0.policy());
      
      AtmosphereConfig atmosphereConfig1 = broadcasterLifecyclePolicyTest_B0.config;
      assertNull(atmosphereConfig1);
      
      // Undeclared exception!
      try { 
        atmosphereConfig0.populate(atmosphereConfig1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      AtmosphereRequest atmosphereRequest0 = AtmosphereRequest.newInstance();
      assertNotNull(atmosphereRequest0);
      assertFalse(atmosphereRequest0.dispatchRequestAsynchronously());
      assertNull(atmosphereRequest0.requestURL());
      assertFalse(atmosphereRequest0.destroyed());
      assertTrue(atmosphereRequest0.isDestroyable());
      
      Map<String, Object> map0 = atmosphereRequest0.localAttributes();
      assertNotNull(map0);
      assertFalse(atmosphereRequest0.dispatchRequestAsynchronously());
      assertNull(atmosphereRequest0.requestURL());
      assertFalse(atmosphereRequest0.destroyed());
      assertTrue(atmosphereRequest0.isDestroyable());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      atmosphereConfig0.properties = map0;
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereRequest0.dispatchRequestAsynchronously());
      assertNull(atmosphereRequest0.requestURL());
      assertFalse(atmosphereRequest0.destroyed());
      assertTrue(atmosphereRequest0.isDestroyable());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertTrue(atmosphereConfig0.properties.isEmpty());
      assertEquals(0, atmosphereConfig0.properties.size());
      
      // Undeclared exception!
      try { 
        atmosphereConfig0.getWebServerName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      boolean boolean0 = atmosphereConfig0.isSessionTimeoutRemovalAllowed();
      assertFalse(boolean0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      // Undeclared exception!
      try { 
        atmosphereConfig0.getInitParameterNames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      String string0 = "";
      String string1 = atmosphereConfig0.getInitParameter(string0);
      assertNull(string1);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      List<AtmosphereConfig.ShutdownHook> list0 = atmosphereConfig0.shutdownHooks;
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      atmosphereConfig0.setshutdownHooks(list0);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      boolean boolean0 = true;
      boolean boolean1 = atmosphereConfig0.getInitParameter(string1, boolean0);
      assertTrue(boolean1);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(boolean1 == boolean0);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      MultiMap multiMap0 = new MultiMap(atmosphereConfig0.properties);
      assertNotNull(multiMap0);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(multiMap0.isEmpty());
      assertEquals(0, multiMap0.size());
      
      AtmosphereHandlerConfig atmosphereHandlerConfig0 = new AtmosphereHandlerConfig();
      assertNotNull(atmosphereHandlerConfig0);
      assertNull(atmosphereHandlerConfig0.getBroadcaster());
      assertEquals("false", atmosphereHandlerConfig0.getSupportSession());
      assertNull(atmosphereHandlerConfig0.getClassName());
      assertNull(atmosphereHandlerConfig0.getContextRoot());
      assertNull(atmosphereHandlerConfig0.getBroadcasterCache());
      assertNull(atmosphereHandlerConfig0.getCometSupport());
      
      Object object0 = multiMap0.put(string1, atmosphereHandlerConfig0);
      assertNull(object0);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertEquals(1, multiMap0.size());
      assertFalse(multiMap0.isEmpty());
      assertNull(atmosphereHandlerConfig0.getBroadcaster());
      assertEquals("false", atmosphereHandlerConfig0.getSupportSession());
      assertNull(atmosphereHandlerConfig0.getClassName());
      assertNull(atmosphereHandlerConfig0.getContextRoot());
      assertNull(atmosphereHandlerConfig0.getBroadcasterCache());
      assertNull(atmosphereHandlerConfig0.getCometSupport());
      
      atmosphereConfig0.setproperties(multiMap0);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertEquals(1, multiMap0.size());
      assertFalse(multiMap0.isEmpty());
      
      Logger logger0 = atmosphereConfig0.getlogger();
      assertNotNull(logger0);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      AtmosphereFramework atmosphereFramework0 = atmosphereConfig0.getframework();
      assertNull(atmosphereFramework0);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      boolean boolean2 = atmosphereConfig0.isSessionTimeoutRemovalAllowed();
      assertFalse(boolean2);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      // Undeclared exception!
      try { 
        atmosphereConfig0.getWebServerName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      LinkedList<AtmosphereConfig.ShutdownHook> linkedList0 = new LinkedList<AtmosphereConfig.ShutdownHook>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      atmosphereConfig0.shutdownHooks = (List<AtmosphereConfig.ShutdownHook>) linkedList0;
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertEquals(0, linkedList0.size());
      assertEquals(0, atmosphereConfig0.shutdownHooks.size());
      assertTrue(atmosphereConfig0.shutdownHooks.isEmpty());
      
      // Undeclared exception!
      try { 
        atmosphereConfig0.getServletConfig();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      String string0 = "HlJ6OH.ZI";
      org.eclipse.jetty.util.MultiMap<AtmosphereHandlerConfig> multiMap0 = new org.eclipse.jetty.util.MultiMap<AtmosphereHandlerConfig>();
      assertNotNull(multiMap0);
      assertEquals(0, multiMap0.size());
      assertTrue(multiMap0.isEmpty());
      
      org.eclipse.jetty.util.MultiMap<AtmosphereHandlerConfig> multiMap1 = new org.eclipse.jetty.util.MultiMap<AtmosphereHandlerConfig>(multiMap0);
      assertNotNull(multiMap1);
      assertTrue(multiMap1.equals((Object)multiMap0));
      assertEquals(0, multiMap0.size());
      assertTrue(multiMap0.isEmpty());
      assertEquals(0, multiMap1.size());
      assertTrue(multiMap1.isEmpty());
      
      org.eclipse.jetty.util.MultiMap<AtmosphereHandlerConfig> multiMap2 = new org.eclipse.jetty.util.MultiMap<AtmosphereHandlerConfig>(multiMap1);
      assertNotNull(multiMap2);
      assertTrue(multiMap0.equals((Object)multiMap1));
      assertTrue(multiMap1.equals((Object)multiMap0));
      assertTrue(multiMap2.equals((Object)multiMap0));
      assertTrue(multiMap2.equals((Object)multiMap1));
      assertEquals(0, multiMap0.size());
      assertTrue(multiMap0.isEmpty());
      assertEquals(0, multiMap1.size());
      assertTrue(multiMap1.isEmpty());
      assertEquals(0, multiMap2.size());
      assertTrue(multiMap2.isEmpty());
      
      String string1 = "";
      atmosphereConfig0.initComplete();
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      AtmosphereHandlerConfig[] atmosphereHandlerConfigArray0 = new AtmosphereHandlerConfig[0];
      List<AtmosphereHandlerConfig> list0 = multiMap2.putValues(string1, atmosphereHandlerConfigArray0);
      assertNull(list0);
      assertNotSame(multiMap0, multiMap2);
      assertNotSame(multiMap0, multiMap1);
      assertNotSame(multiMap1, multiMap0);
      assertNotSame(multiMap1, multiMap2);
      assertNotSame(multiMap2, multiMap1);
      assertNotSame(multiMap2, multiMap0);
      assertNotSame(string1, string0);
      assertTrue(multiMap0.equals((Object)multiMap1));
      assertFalse(multiMap0.equals((Object)multiMap2));
      assertFalse(multiMap1.equals((Object)multiMap2));
      assertTrue(multiMap1.equals((Object)multiMap0));
      assertFalse(multiMap2.equals((Object)multiMap1));
      assertFalse(multiMap2.equals((Object)multiMap0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, multiMap0.size());
      assertTrue(multiMap0.isEmpty());
      assertEquals(0, multiMap1.size());
      assertTrue(multiMap1.isEmpty());
      assertFalse(multiMap2.isEmpty());
      assertEquals(1, multiMap2.size());
      assertEquals(0, atmosphereHandlerConfigArray0.length);
      
      atmosphereConfig0.atmosphereHandlerConfig = list0;
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertEquals(0, multiMap0.size());
      assertTrue(multiMap0.isEmpty());
      assertEquals(0, multiMap1.size());
      assertTrue(multiMap1.isEmpty());
      assertFalse(multiMap2.isEmpty());
      assertEquals(1, multiMap2.size());
      
      boolean boolean0 = false;
      boolean boolean1 = atmosphereConfig0.getInitParameter(string0, boolean0);
      assertFalse(boolean1);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean1 == boolean0);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      String string2 = "";
      String string3 = atmosphereConfig0.getInitParameter(string0, string2);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      // Undeclared exception!
      try { 
        atmosphereConfig0.sessionFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      boolean boolean0 = atmosphereConfig0.getuseServletContextParameters();
      assertFalse(boolean0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      Vector<AtmosphereConfig.StartupHook> vector0 = new Vector<AtmosphereConfig.StartupHook>(atmosphereConfig0.startUpHook);
      assertNotNull(vector0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(0, vector0.capacity());
      
      atmosphereConfig0.startUpHook = (List<AtmosphereConfig.StartupHook>) vector0;
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(0, vector0.capacity());
      assertTrue(atmosphereConfig0.startUpHook.isEmpty());
      assertEquals(0, atmosphereConfig0.startUpHook.size());
      
      List<AtmosphereConfig.StartupHook> list0 = atmosphereConfig0.startUpHook;
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      String string0 = "";
      boolean boolean1 = true;
      boolean boolean2 = atmosphereConfig0.getInitParameter(string0, boolean1);
      assertTrue(boolean2);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      atmosphereConfig0.setstartUpHook(list0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      // Undeclared exception!
      try { 
        atmosphereConfig0.handlers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      Map<String, Object> map0 = atmosphereConfig0.getproperties();
      assertNotNull(map0);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.startupHook(atmosphereConfig_StartupHook0);
      assertNotNull(atmosphereConfig1);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      
      boolean boolean0 = false;
      atmosphereConfig1.useServletContextParameters = boolean0;
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      
      boolean boolean1 = false;
      atmosphereConfig0.useServletContextParameters = boolean1;
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      // Undeclared exception!
      try { 
        atmosphereConfig0.uuidProvider();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.shutdownHook(atmosphereConfig_ShutdownHook0);
      assertNotNull(atmosphereConfig1);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      
      // Undeclared exception!
      try { 
        atmosphereConfig0.getWebServerName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = null;
      AtmosphereConfig atmosphereConfig0 = null;
      try {
        atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      Map<String, Object> map0 = atmosphereConfig0.properties();
      assertNotNull(map0);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      boolean boolean0 = false;
      atmosphereConfig0.supportSession = boolean0;
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      // Undeclared exception!
      try { 
        atmosphereConfig0.getBroadcasterFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      // Undeclared exception!
      try { 
        atmosphereConfig0.sessionFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      Stack<AtmosphereConfig.ShutdownHook> stack0 = new Stack<AtmosphereConfig.ShutdownHook>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(atmosphereConfig_ShutdownHook0));
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      atmosphereConfig0.setshutdownHooks(stack0);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(stack0.contains(atmosphereConfig_ShutdownHook0));
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.shutdownHook(atmosphereConfig_ShutdownHook0);
      assertNotNull(atmosphereConfig1);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      
      String string0 = "pR$hJew0RhRmPVyVJ\\";
      String string1 = atmosphereConfig0.getInitParameter(string0, string0);
      assertEquals("pR$hJew0RhRmPVyVJ\\", string1);
      assertNotNull(string1);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      String string2 = "DISCONNECT";
      boolean boolean0 = false;
      atmosphereConfig0.setSessionTimeoutRemovalAllowed(boolean0);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      MultiMap multiMap0 = new MultiMap(atmosphereConfig0.properties);
      assertNotNull(multiMap0);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertEquals(0, multiMap0.size());
      assertTrue(multiMap0.isEmpty());
      
      atmosphereConfig0.setproperties(multiMap0);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertEquals(0, multiMap0.size());
      assertTrue(multiMap0.isEmpty());
      
      String string3 = atmosphereConfig0.getInitParameter(string2);
      assertNull(string3);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      // Undeclared exception!
      try { 
        atmosphereConfig0.getInitParameterNames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      String string0 = "";
      int int0 = (-1279);
      int int1 = atmosphereConfig0.getInitParameter(string0, int0);
      assertEquals((-1279), int1);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(int1 == int0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      String string1 = ">5P!}JQx>";
      boolean boolean0 = true;
      boolean boolean1 = atmosphereConfig0.getInitParameter(string1, boolean0);
      assertTrue(boolean1);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      // Undeclared exception!
      try { 
        atmosphereConfig0.getWebServerName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      List<AtmosphereHandlerConfig> list0 = atmosphereConfig0.getAtmosphereHandlerConfig();
      assertNotNull(list0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string0 = "g!aBKI9!sQ%";
      String string1 = "";
      String string2 = atmosphereConfig0.getInitParameter(string0, string1);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      String string3 = "~B";
      boolean boolean0 = true;
      boolean boolean1 = atmosphereConfig0.getInitParameter(string3, boolean0);
      assertTrue(boolean1);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(boolean1 == boolean0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.startupHook(atmosphereConfig_StartupHook0);
      assertNotNull(atmosphereConfig1);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      
      atmosphereConfig1.setSessionTimeoutRemovalAllowed(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      
      atmosphereConfig1.sessionTimeoutRemovalAllowed = atmosphereConfig0.supportSession;
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      
      boolean boolean2 = false;
      atmosphereConfig0.setSupportSession(boolean2);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      atmosphereConfig0.setuseServletContextParameters(boolean2);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      atmosphereConfig0.setstartUpHook(atmosphereConfig1.startUpHook);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      org.eclipse.jetty.util.MultiMap<AtmosphereHandlerConfig> multiMap0 = new org.eclipse.jetty.util.MultiMap<AtmosphereHandlerConfig>();
      assertNotNull(multiMap0);
      assertTrue(multiMap0.isEmpty());
      assertEquals(0, multiMap0.size());
      
      org.eclipse.jetty.util.MultiMap<AtmosphereHandlerConfig> multiMap1 = new org.eclipse.jetty.util.MultiMap<AtmosphereHandlerConfig>(multiMap0);
      assertNotNull(multiMap1);
      assertTrue(multiMap1.equals((Object)multiMap0));
      assertTrue(multiMap0.isEmpty());
      assertEquals(0, multiMap0.size());
      assertTrue(multiMap1.isEmpty());
      assertEquals(0, multiMap1.size());
      
      org.eclipse.jetty.util.MultiMap<AtmosphereHandlerConfig> multiMap2 = new org.eclipse.jetty.util.MultiMap<AtmosphereHandlerConfig>(multiMap1);
      assertNotNull(multiMap2);
      assertTrue(multiMap0.equals((Object)multiMap1));
      assertTrue(multiMap1.equals((Object)multiMap0));
      assertTrue(multiMap2.equals((Object)multiMap1));
      assertTrue(multiMap2.equals((Object)multiMap0));
      assertTrue(multiMap0.isEmpty());
      assertEquals(0, multiMap0.size());
      assertTrue(multiMap1.isEmpty());
      assertEquals(0, multiMap1.size());
      assertTrue(multiMap2.isEmpty());
      assertEquals(0, multiMap2.size());
      
      String string0 = "GnEt#R\\:_N[j[mKv\\L";
      AtmosphereHandlerConfig[] atmosphereHandlerConfigArray0 = new AtmosphereHandlerConfig[7];
      AtmosphereHandlerConfig atmosphereHandlerConfig0 = new AtmosphereHandlerConfig();
      assertNotNull(atmosphereHandlerConfig0);
      assertNull(atmosphereHandlerConfig0.getBroadcaster());
      assertEquals("false", atmosphereHandlerConfig0.getSupportSession());
      assertNull(atmosphereHandlerConfig0.getClassName());
      assertNull(atmosphereHandlerConfig0.getBroadcasterCache());
      assertNull(atmosphereHandlerConfig0.getCometSupport());
      assertNull(atmosphereHandlerConfig0.getContextRoot());
      
      atmosphereHandlerConfigArray0[0] = atmosphereHandlerConfig0;
      AtmosphereHandlerConfig atmosphereHandlerConfig1 = new AtmosphereHandlerConfig();
      assertNotNull(atmosphereHandlerConfig1);
      assertFalse(atmosphereHandlerConfig1.equals((Object)atmosphereHandlerConfig0));
      assertNull(atmosphereHandlerConfig1.getCometSupport());
      assertNull(atmosphereHandlerConfig1.getBroadcaster());
      assertEquals("false", atmosphereHandlerConfig1.getSupportSession());
      assertNull(atmosphereHandlerConfig1.getBroadcasterCache());
      assertNull(atmosphereHandlerConfig1.getClassName());
      assertNull(atmosphereHandlerConfig1.getContextRoot());
      
      atmosphereHandlerConfigArray0[1] = atmosphereHandlerConfig1;
      AtmosphereHandlerConfig atmosphereHandlerConfig2 = new AtmosphereHandlerConfig();
      assertNotNull(atmosphereHandlerConfig2);
      assertFalse(atmosphereHandlerConfig2.equals((Object)atmosphereHandlerConfig0));
      assertFalse(atmosphereHandlerConfig2.equals((Object)atmosphereHandlerConfig1));
      assertNull(atmosphereHandlerConfig2.getBroadcasterCache());
      assertNull(atmosphereHandlerConfig2.getContextRoot());
      assertEquals("false", atmosphereHandlerConfig2.getSupportSession());
      assertNull(atmosphereHandlerConfig2.getClassName());
      assertNull(atmosphereHandlerConfig2.getBroadcaster());
      assertNull(atmosphereHandlerConfig2.getCometSupport());
      
      org.eclipse.jetty.util.MultiMap multiMap3 = (org.eclipse.jetty.util.MultiMap)multiMap1.clone();
      assertNotNull(multiMap3);
      assertNotSame(multiMap0, multiMap1);
      assertNotSame(multiMap0, multiMap2);
      assertNotSame(multiMap1, multiMap2);
      assertNotSame(multiMap1, multiMap0);
      assertTrue(multiMap0.equals((Object)multiMap2));
      assertTrue(multiMap0.equals((Object)multiMap1));
      assertTrue(multiMap1.equals((Object)multiMap0));
      assertTrue(multiMap1.equals((Object)multiMap2));
      assertTrue(multiMap0.isEmpty());
      assertEquals(0, multiMap0.size());
      assertTrue(multiMap1.isEmpty());
      assertEquals(0, multiMap1.size());
      assertEquals(0, multiMap3.size());
      assertTrue(multiMap3.isEmpty());
      
      atmosphereHandlerConfigArray0[2] = atmosphereHandlerConfig2;
      AtmosphereHandlerConfig atmosphereHandlerConfig3 = new AtmosphereHandlerConfig();
      assertNotNull(atmosphereHandlerConfig3);
      assertFalse(atmosphereHandlerConfig3.equals((Object)atmosphereHandlerConfig0));
      assertFalse(atmosphereHandlerConfig3.equals((Object)atmosphereHandlerConfig2));
      assertFalse(atmosphereHandlerConfig3.equals((Object)atmosphereHandlerConfig1));
      assertNull(atmosphereHandlerConfig3.getContextRoot());
      assertNull(atmosphereHandlerConfig3.getClassName());
      assertNull(atmosphereHandlerConfig3.getBroadcaster());
      assertNull(atmosphereHandlerConfig3.getBroadcasterCache());
      assertNull(atmosphereHandlerConfig3.getCometSupport());
      assertEquals("false", atmosphereHandlerConfig3.getSupportSession());
      
      atmosphereHandlerConfigArray0[3] = atmosphereHandlerConfig3;
      AtmosphereHandlerConfig atmosphereHandlerConfig4 = new AtmosphereHandlerConfig();
      assertNotNull(atmosphereHandlerConfig4);
      assertFalse(atmosphereHandlerConfig4.equals((Object)atmosphereHandlerConfig3));
      assertFalse(atmosphereHandlerConfig4.equals((Object)atmosphereHandlerConfig1));
      assertFalse(atmosphereHandlerConfig4.equals((Object)atmosphereHandlerConfig2));
      assertFalse(atmosphereHandlerConfig4.equals((Object)atmosphereHandlerConfig0));
      assertNull(atmosphereHandlerConfig4.getClassName());
      assertNull(atmosphereHandlerConfig4.getBroadcasterCache());
      assertEquals("false", atmosphereHandlerConfig4.getSupportSession());
      assertNull(atmosphereHandlerConfig4.getBroadcaster());
      assertNull(atmosphereHandlerConfig4.getCometSupport());
      assertNull(atmosphereHandlerConfig4.getContextRoot());
      
      atmosphereHandlerConfigArray0[4] = atmosphereHandlerConfig4;
      AtmosphereHandlerConfig atmosphereHandlerConfig5 = new AtmosphereHandlerConfig();
      assertNotNull(atmosphereHandlerConfig5);
      assertFalse(atmosphereHandlerConfig5.equals((Object)atmosphereHandlerConfig2));
      assertFalse(atmosphereHandlerConfig5.equals((Object)atmosphereHandlerConfig0));
      assertFalse(atmosphereHandlerConfig5.equals((Object)atmosphereHandlerConfig3));
      assertFalse(atmosphereHandlerConfig5.equals((Object)atmosphereHandlerConfig1));
      assertFalse(atmosphereHandlerConfig5.equals((Object)atmosphereHandlerConfig4));
      assertNull(atmosphereHandlerConfig5.getBroadcaster());
      assertNull(atmosphereHandlerConfig5.getCometSupport());
      assertNull(atmosphereHandlerConfig5.getContextRoot());
      assertNull(atmosphereHandlerConfig5.getClassName());
      assertNull(atmosphereHandlerConfig5.getBroadcasterCache());
      assertEquals("false", atmosphereHandlerConfig5.getSupportSession());
      
      atmosphereHandlerConfigArray0[5] = atmosphereHandlerConfig5;
      AtmosphereHandlerConfig atmosphereHandlerConfig6 = new AtmosphereHandlerConfig();
      assertNotNull(atmosphereHandlerConfig6);
      assertFalse(atmosphereHandlerConfig6.equals((Object)atmosphereHandlerConfig0));
      assertFalse(atmosphereHandlerConfig6.equals((Object)atmosphereHandlerConfig4));
      assertFalse(atmosphereHandlerConfig6.equals((Object)atmosphereHandlerConfig3));
      assertFalse(atmosphereHandlerConfig6.equals((Object)atmosphereHandlerConfig5));
      assertFalse(atmosphereHandlerConfig6.equals((Object)atmosphereHandlerConfig2));
      assertFalse(atmosphereHandlerConfig6.equals((Object)atmosphereHandlerConfig1));
      assertNull(atmosphereHandlerConfig6.getBroadcasterCache());
      assertNull(atmosphereHandlerConfig6.getClassName());
      assertNull(atmosphereHandlerConfig6.getCometSupport());
      assertNull(atmosphereHandlerConfig6.getBroadcaster());
      assertNull(atmosphereHandlerConfig6.getContextRoot());
      assertEquals("false", atmosphereHandlerConfig6.getSupportSession());
      
      atmosphereHandlerConfigArray0[6] = atmosphereHandlerConfig6;
      List<AtmosphereHandlerConfig> list0 = multiMap2.putValues(string0, atmosphereHandlerConfigArray0);
      assertNull(list0);
      assertNotSame(multiMap0, multiMap1);
      assertNotSame(multiMap0, multiMap2);
      assertNotSame(multiMap1, multiMap2);
      assertNotSame(multiMap1, multiMap0);
      assertNotSame(multiMap2, multiMap1);
      assertNotSame(multiMap2, multiMap0);
      assertTrue(multiMap0.equals((Object)multiMap1));
      assertFalse(multiMap0.equals((Object)multiMap2));
      assertFalse(multiMap1.equals((Object)multiMap2));
      assertTrue(multiMap1.equals((Object)multiMap0));
      assertFalse(multiMap2.equals((Object)multiMap1));
      assertFalse(multiMap2.equals((Object)multiMap0));
      assertTrue(multiMap0.isEmpty());
      assertEquals(0, multiMap0.size());
      assertTrue(multiMap1.isEmpty());
      assertEquals(0, multiMap1.size());
      assertEquals(1, multiMap2.size());
      assertFalse(multiMap2.isEmpty());
      assertEquals(7, atmosphereHandlerConfigArray0.length);
      
      atmosphereConfig0.atmosphereHandlerConfig = list0;
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertTrue(multiMap0.isEmpty());
      assertEquals(0, multiMap0.size());
      assertTrue(multiMap1.isEmpty());
      assertEquals(0, multiMap1.size());
      assertEquals(1, multiMap2.size());
      assertFalse(multiMap2.isEmpty());
      
      MultiMap multiMap4 = new MultiMap(atmosphereConfig0.properties);
      assertNotNull(multiMap4);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertTrue(multiMap4.isEmpty());
      assertEquals(0, multiMap4.size());
      
      Vector<AtmosphereHandlerProperty> vector0 = new Vector<AtmosphereHandlerProperty>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      atmosphereHandlerConfig5.setProperties(vector0);
      assertNotSame(atmosphereHandlerConfig5, atmosphereHandlerConfig6);
      assertNotSame(atmosphereHandlerConfig5, atmosphereHandlerConfig2);
      assertNotSame(atmosphereHandlerConfig5, atmosphereHandlerConfig0);
      assertNotSame(atmosphereHandlerConfig5, atmosphereHandlerConfig3);
      assertNotSame(atmosphereHandlerConfig5, atmosphereHandlerConfig1);
      assertNotSame(atmosphereHandlerConfig5, atmosphereHandlerConfig4);
      assertFalse(atmosphereHandlerConfig5.equals((Object)atmosphereHandlerConfig6));
      assertFalse(atmosphereHandlerConfig5.equals((Object)atmosphereHandlerConfig2));
      assertFalse(atmosphereHandlerConfig5.equals((Object)atmosphereHandlerConfig0));
      assertFalse(atmosphereHandlerConfig5.equals((Object)atmosphereHandlerConfig3));
      assertFalse(atmosphereHandlerConfig5.equals((Object)atmosphereHandlerConfig1));
      assertFalse(atmosphereHandlerConfig5.equals((Object)atmosphereHandlerConfig4));
      assertNull(atmosphereHandlerConfig5.getBroadcaster());
      assertNull(atmosphereHandlerConfig5.getCometSupport());
      assertNull(atmosphereHandlerConfig5.getContextRoot());
      assertNull(atmosphereHandlerConfig5.getClassName());
      assertNull(atmosphereHandlerConfig5.getBroadcasterCache());
      assertEquals("false", atmosphereHandlerConfig5.getSupportSession());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      AtmosphereHandlerConfig atmosphereHandlerConfig7 = new AtmosphereHandlerConfig();
      assertNotNull(atmosphereHandlerConfig7);
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig1));
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig5));
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig2));
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig3));
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig6));
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig0));
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig4));
      assertNull(atmosphereHandlerConfig7.getBroadcaster());
      assertEquals("false", atmosphereHandlerConfig7.getSupportSession());
      assertNull(atmosphereHandlerConfig7.getClassName());
      assertNull(atmosphereHandlerConfig7.getBroadcasterCache());
      assertNull(atmosphereHandlerConfig7.getContextRoot());
      assertNull(atmosphereHandlerConfig7.getCometSupport());
      
      int int0 = 289;
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      assertNotNull(threadPoolExecutor_DiscardOldestPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_DiscardOldestPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      UDPNIOTransport uDPNIOTransport0 = new UDPNIOTransport(string0);
      assertNotNull(uDPNIOTransport0);
      assertFalse(NIOTransport.DEFAULT_OPTIMIZED_FOR_MULTIPLEXING);
      assertEquals(0, NIOTransport.DEFAULT_SERVER_SOCKET_SO_TIMEOUT);
      assertTrue(NIOTransport.DEFAULT_REUSE_ADDRESS);
      assertEquals(0, NIOTransport.DEFAULT_CLIENT_SOCKET_SO_TIMEOUT);
      assertEquals((-1), NIOTransport.DEFAULT_SELECTOR_RUNNER_COUNT);
      assertEquals(30000, NIOTransport.DEFAULT_CONNECTION_TIMEOUT);
      assertEquals("GnEt#R\\:_N[j[mKv\\L", uDPNIOTransport0.getName());
      assertFalse(uDPNIOTransport0.isBlocking());
      assertEquals((-1), uDPNIOTransport0.getWriteBufferSize());
      assertFalse(uDPNIOTransport0.isStandalone());
      assertEquals((-1), uDPNIOTransport0.getReadBufferSize());
      assertEquals(0, uDPNIOTransport0.getClientSocketSoTimeout());
      assertFalse(uDPNIOTransport0.isOptimizedForMultiplexing());
      assertTrue(uDPNIOTransport0.isStopped());
      assertEquals(0, uDPNIOTransport0.getServerSocketSoTimeout());
      assertEquals(30000, uDPNIOTransport0.getConnectionTimeout());
      assertFalse(uDPNIOTransport0.isPaused());
      assertTrue(uDPNIOTransport0.isReuseAddress());
      
      SelectorRunner selectorRunner0 = SelectorRunner.create(uDPNIOTransport0);
      assertNotNull(selectorRunner0);
      assertFalse(NIOTransport.DEFAULT_OPTIMIZED_FOR_MULTIPLEXING);
      assertEquals(0, NIOTransport.DEFAULT_SERVER_SOCKET_SO_TIMEOUT);
      assertTrue(NIOTransport.DEFAULT_REUSE_ADDRESS);
      assertEquals(0, NIOTransport.DEFAULT_CLIENT_SOCKET_SO_TIMEOUT);
      assertEquals((-1), NIOTransport.DEFAULT_SELECTOR_RUNNER_COUNT);
      assertEquals(30000, NIOTransport.DEFAULT_CONNECTION_TIMEOUT);
      assertEquals("GnEt#R\\:_N[j[mKv\\L", uDPNIOTransport0.getName());
      assertFalse(uDPNIOTransport0.isBlocking());
      assertEquals((-1), uDPNIOTransport0.getWriteBufferSize());
      assertFalse(uDPNIOTransport0.isStandalone());
      assertEquals((-1), uDPNIOTransport0.getReadBufferSize());
      assertEquals(0, uDPNIOTransport0.getClientSocketSoTimeout());
      assertFalse(uDPNIOTransport0.isOptimizedForMultiplexing());
      assertTrue(uDPNIOTransport0.isStopped());
      assertEquals(0, uDPNIOTransport0.getServerSocketSoTimeout());
      assertEquals(30000, uDPNIOTransport0.getConnectionTimeout());
      assertFalse(uDPNIOTransport0.isPaused());
      assertTrue(uDPNIOTransport0.isReuseAddress());
      assertEquals(0, selectorRunner0.getLastSelectedKeysCount());
      assertEquals(Transport.State.STOPPED, selectorRunner0.getState());
      
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy1 = (ThreadPoolExecutor.DiscardOldestPolicy)scheduledThreadPoolExecutor0.getRejectedExecutionHandler();
      assertNotNull(threadPoolExecutor_DiscardOldestPolicy1);
      assertSame(threadPoolExecutor_DiscardOldestPolicy1, threadPoolExecutor_DiscardOldestPolicy0);
      assertSame(threadPoolExecutor_DiscardOldestPolicy0, threadPoolExecutor_DiscardOldestPolicy1);
      
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.schedule((Runnable) selectorRunner0, (long) uDPNIOTransport0.DEFAULT_SERVER_SOCKET_SO_TIMEOUT, timeUnit0);
      assertNotNull(scheduledFuture0);
      assertFalse(NIOTransport.DEFAULT_OPTIMIZED_FOR_MULTIPLEXING);
      assertEquals(0, NIOTransport.DEFAULT_SERVER_SOCKET_SO_TIMEOUT);
      assertTrue(NIOTransport.DEFAULT_REUSE_ADDRESS);
      assertEquals(0, NIOTransport.DEFAULT_CLIENT_SOCKET_SO_TIMEOUT);
      assertEquals((-1), NIOTransport.DEFAULT_SELECTOR_RUNNER_COUNT);
      assertEquals(30000, NIOTransport.DEFAULT_CONNECTION_TIMEOUT);
      assertSame(threadPoolExecutor_DiscardOldestPolicy0, threadPoolExecutor_DiscardOldestPolicy1);
      assertEquals("GnEt#R\\:_N[j[mKv\\L", uDPNIOTransport0.getName());
      assertFalse(uDPNIOTransport0.isBlocking());
      assertEquals((-1), uDPNIOTransport0.getWriteBufferSize());
      assertFalse(uDPNIOTransport0.isStandalone());
      assertEquals((-1), uDPNIOTransport0.getReadBufferSize());
      assertEquals(0, uDPNIOTransport0.getClientSocketSoTimeout());
      assertFalse(uDPNIOTransport0.isOptimizedForMultiplexing());
      assertTrue(uDPNIOTransport0.isStopped());
      assertEquals(0, uDPNIOTransport0.getServerSocketSoTimeout());
      assertEquals(30000, uDPNIOTransport0.getConnectionTimeout());
      assertFalse(uDPNIOTransport0.isPaused());
      assertTrue(uDPNIOTransport0.isReuseAddress());
      assertEquals(0, selectorRunner0.getLastSelectedKeysCount());
      assertEquals(Transport.State.STOPPED, selectorRunner0.getState());
      
      Object object0 = multiMap4.put(atmosphereHandlerConfig7, scheduledFuture0);
      assertNull(object0);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(NIOTransport.DEFAULT_OPTIMIZED_FOR_MULTIPLEXING);
      assertEquals(0, NIOTransport.DEFAULT_SERVER_SOCKET_SO_TIMEOUT);
      assertTrue(NIOTransport.DEFAULT_REUSE_ADDRESS);
      assertEquals(0, NIOTransport.DEFAULT_CLIENT_SOCKET_SO_TIMEOUT);
      assertEquals((-1), NIOTransport.DEFAULT_SELECTOR_RUNNER_COUNT);
      assertEquals(30000, NIOTransport.DEFAULT_CONNECTION_TIMEOUT);
      assertNotSame(atmosphereHandlerConfig7, atmosphereHandlerConfig1);
      assertNotSame(atmosphereHandlerConfig7, atmosphereHandlerConfig5);
      assertNotSame(atmosphereHandlerConfig7, atmosphereHandlerConfig2);
      assertNotSame(atmosphereHandlerConfig7, atmosphereHandlerConfig3);
      assertNotSame(atmosphereHandlerConfig7, atmosphereHandlerConfig6);
      assertNotSame(atmosphereHandlerConfig7, atmosphereHandlerConfig0);
      assertNotSame(atmosphereHandlerConfig7, atmosphereHandlerConfig4);
      assertSame(threadPoolExecutor_DiscardOldestPolicy0, threadPoolExecutor_DiscardOldestPolicy1);
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig1));
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig5));
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig2));
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig3));
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig6));
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig0));
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig4));
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertEquals(1, multiMap4.size());
      assertFalse(multiMap4.isEmpty());
      assertNull(atmosphereHandlerConfig7.getBroadcaster());
      assertEquals("false", atmosphereHandlerConfig7.getSupportSession());
      assertNull(atmosphereHandlerConfig7.getClassName());
      assertNull(atmosphereHandlerConfig7.getBroadcasterCache());
      assertNull(atmosphereHandlerConfig7.getContextRoot());
      assertNull(atmosphereHandlerConfig7.getCometSupport());
      assertEquals("GnEt#R\\:_N[j[mKv\\L", uDPNIOTransport0.getName());
      assertFalse(uDPNIOTransport0.isBlocking());
      assertEquals((-1), uDPNIOTransport0.getWriteBufferSize());
      assertFalse(uDPNIOTransport0.isStandalone());
      assertEquals((-1), uDPNIOTransport0.getReadBufferSize());
      assertEquals(0, uDPNIOTransport0.getClientSocketSoTimeout());
      assertFalse(uDPNIOTransport0.isOptimizedForMultiplexing());
      assertTrue(uDPNIOTransport0.isStopped());
      assertEquals(0, uDPNIOTransport0.getServerSocketSoTimeout());
      assertEquals(30000, uDPNIOTransport0.getConnectionTimeout());
      assertFalse(uDPNIOTransport0.isPaused());
      assertTrue(uDPNIOTransport0.isReuseAddress());
      assertEquals(0, selectorRunner0.getLastSelectedKeysCount());
      assertEquals(Transport.State.STOPPED, selectorRunner0.getState());
      
      atmosphereConfig0.setproperties(multiMap4);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertEquals(1, multiMap4.size());
      assertFalse(multiMap4.isEmpty());
      
      List<AtmosphereConfig.ShutdownHook> list1 = atmosphereConfig0.getshutdownHooks();
      assertNotNull(list1);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      AtmosphereFramework atmosphereFramework0 = atmosphereConfig0.framework();
      assertNull(atmosphereFramework0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      List<AtmosphereHandlerConfig> list0 = atmosphereConfig0.getAtmosphereHandlerConfig();
      assertNotNull(list0);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      String string0 = "g!aBKI9!sQ%";
      String string1 = "";
      String string2 = atmosphereConfig0.getInitParameter(string1);
      assertNull(string2);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      String string3 = "~B";
      boolean boolean0 = true;
      boolean boolean1 = atmosphereConfig0.getInitParameter(string3, boolean0);
      assertTrue(boolean1);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.startupHook(atmosphereConfig_StartupHook0);
      assertNotNull(atmosphereConfig1);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      
      atmosphereConfig1.setSessionTimeoutRemovalAllowed(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      
      atmosphereConfig1.sessionTimeoutRemovalAllowed = atmosphereConfig0.supportSession;
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      
      boolean boolean2 = true;
      atmosphereConfig0.setSupportSession(boolean2);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertTrue(boolean2 == boolean1);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertTrue(atmosphereConfig0.isSupportSession());
      
      atmosphereConfig0.setuseServletContextParameters(boolean2);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig0.supportSession);
      assertTrue(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertTrue(boolean2 == boolean1);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertTrue(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertTrue(atmosphereConfig0.isSupportSession());
      
      atmosphereConfig0.setstartUpHook(atmosphereConfig1.startUpHook);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig0.supportSession);
      assertTrue(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig1.useServletContextParameters);
      assertTrue(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertTrue(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertTrue(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertTrue(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      AtmosphereRequest atmosphereRequest0 = AtmosphereRequest.newInstance();
      assertNotNull(atmosphereRequest0);
      assertFalse(atmosphereRequest0.dispatchRequestAsynchronously());
      assertFalse(atmosphereRequest0.destroyed());
      assertNull(atmosphereRequest0.requestURL());
      assertTrue(atmosphereRequest0.isDestroyable());
      
      Map<String, Object> map0 = atmosphereRequest0.localAttributes();
      assertNotNull(map0);
      assertFalse(atmosphereRequest0.dispatchRequestAsynchronously());
      assertFalse(atmosphereRequest0.destroyed());
      assertNull(atmosphereRequest0.requestURL());
      assertTrue(atmosphereRequest0.isDestroyable());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      AtmosphereRequest.NoOpsRequest atmosphereRequest_NoOpsRequest0 = (AtmosphereRequest.NoOpsRequest)atmosphereRequest0.getRequest();
      assertNotNull(atmosphereRequest_NoOpsRequest0);
      assertFalse(atmosphereRequest0.dispatchRequestAsynchronously());
      assertFalse(atmosphereRequest0.destroyed());
      assertNull(atmosphereRequest0.requestURL());
      assertTrue(atmosphereRequest0.isDestroyable());
      assertEquals("", atmosphereRequest_NoOpsRequest0.getContextPath());
      assertEquals(0, atmosphereRequest_NoOpsRequest0.getServerPort());
      assertNull(atmosphereRequest_NoOpsRequest0.getCharacterEncoding());
      assertFalse(atmosphereRequest_NoOpsRequest0.isRequestedSessionIdFromUrl());
      assertFalse(atmosphereRequest_NoOpsRequest0.isRequestedSessionIdFromURL());
      assertFalse(atmosphereRequest_NoOpsRequest0.isRequestedSessionIdValid());
      assertEquals(0, atmosphereRequest_NoOpsRequest0.getRemotePort());
      assertFalse(atmosphereRequest_NoOpsRequest0.isAsyncStarted());
      assertEquals("", atmosphereRequest_NoOpsRequest0.getRemoteHost());
      assertEquals("ws", atmosphereRequest_NoOpsRequest0.getScheme());
      assertNull(atmosphereRequest_NoOpsRequest0.getLocalName());
      assertEquals("/", atmosphereRequest_NoOpsRequest0.getRequestURI());
      assertEquals("", atmosphereRequest_NoOpsRequest0.getRemoteUser());
      assertFalse(atmosphereRequest_NoOpsRequest0.isSecure());
      assertEquals("", atmosphereRequest_NoOpsRequest0.getQueryString());
      assertEquals(0, atmosphereRequest_NoOpsRequest0.getContentLength());
      assertEquals("", atmosphereRequest_NoOpsRequest0.getPathTranslated());
      assertEquals("text/plain", atmosphereRequest_NoOpsRequest0.getContentType());
      assertEquals("", atmosphereRequest_NoOpsRequest0.getRemoteAddr());
      assertEquals(0, atmosphereRequest_NoOpsRequest0.getLocalPort());
      assertEquals("HTTP/1.1", atmosphereRequest_NoOpsRequest0.getProtocol());
      assertFalse(atmosphereRequest_NoOpsRequest0.isRequestedSessionIdFromCookie());
      assertEquals("", atmosphereRequest_NoOpsRequest0.getPathInfo());
      assertNull(atmosphereRequest_NoOpsRequest0.getAuthType());
      assertEquals("", atmosphereRequest_NoOpsRequest0.getLocalAddr());
      assertEquals("GET", atmosphereRequest_NoOpsRequest0.getMethod());
      assertEquals("", atmosphereRequest_NoOpsRequest0.getServerName());
      assertEquals("", atmosphereRequest_NoOpsRequest0.getRequestedSessionId());
      assertTrue(atmosphereRequest_NoOpsRequest0.isAsyncSupported());
      assertNull(atmosphereRequest_NoOpsRequest0.getDispatcherType());
      assertEquals("", atmosphereRequest_NoOpsRequest0.getServletPath());
      
      atmosphereConfig0.properties = map0;
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereRequest0.dispatchRequestAsynchronously());
      assertFalse(atmosphereRequest0.destroyed());
      assertNull(atmosphereRequest0.requestURL());
      assertTrue(atmosphereRequest0.isDestroyable());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, atmosphereConfig0.properties.size());
      assertTrue(atmosphereConfig0.properties.isEmpty());
      
      boolean boolean0 = atmosphereConfig0.getuseServletContextParameters();
      assertFalse(boolean0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      // Undeclared exception!
      try { 
        atmosphereConfig0.getWebServerName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      BroadcasterLifecyclePolicyTest.B broadcasterLifecyclePolicyTest_B0 = new BroadcasterLifecyclePolicyTest.B();
      assertNotNull(broadcasterLifecyclePolicyTest_B0);
      assertEquals(100, DefaultBroadcaster.POLLING_DEFAULT);
      assertFalse(broadcasterLifecyclePolicyTest_B0.isDestroyed());
      assertEquals(Broadcaster.SCOPE.APPLICATION, broadcasterLifecyclePolicyTest_B0.getScope());
      assertEquals("DefaultBroadcaster", broadcasterLifecyclePolicyTest_B0.getID());
      assertEquals(Broadcaster.POLICY.FIFO, broadcasterLifecyclePolicyTest_B0.policy());
      assertFalse(broadcasterLifecyclePolicyTest_B0.outOfOrderBroadcastSupported());
      
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      atmosphereConfig0.initComplete();
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      boolean boolean0 = true;
      atmosphereConfig0.setSessionTimeoutRemovalAllowed(boolean0);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertTrue(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      String string0 = "qsIS~WK/v\\&ANfOE";
      String string1 = atmosphereConfig0.getInitParameter(string0);
      assertNull(string1);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertTrue(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      Map<String, Object> map0 = atmosphereConfig0.getproperties();
      assertNotNull(map0);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertTrue(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      boolean boolean1 = atmosphereConfig0.isSupportSession();
      assertFalse(boolean1);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertTrue(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(boolean1 == boolean0);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      AtmosphereConfig atmosphereConfig1 = null;
      // Undeclared exception!
      try { 
        atmosphereConfig0.populate(atmosphereConfig1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      int int0 = 0;
      MultiMap multiMap0 = new MultiMap(int0);
      assertNotNull(multiMap0);
      assertEquals(0, multiMap0.size());
      assertTrue(multiMap0.isEmpty());
      
      Vector<AtmosphereConfig.StartupHook> vector0 = new Vector<AtmosphereConfig.StartupHook>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = vector0.add(atmosphereConfig_StartupHook0);
      assertTrue(boolean0);
      assertTrue(vector0.contains(atmosphereConfig_StartupHook0));
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      
      atmosphereConfig0.setstartUpHook(vector0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(vector0.contains(atmosphereConfig_StartupHook0));
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      
      atmosphereConfig0.setproperties(multiMap0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertEquals(0, multiMap0.size());
      assertTrue(multiMap0.isEmpty());
      
      String string0 = null;
      boolean boolean1 = false;
      boolean boolean2 = atmosphereConfig0.getInitParameter(string0, boolean1);
      assertFalse(boolean2);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      boolean boolean0 = atmosphereConfig0.isSessionTimeoutRemovalAllowed();
      assertFalse(boolean0);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      MultiMap multiMap0 = new MultiMap();
      assertNotNull(multiMap0);
      assertTrue(multiMap0.isEmpty());
      assertEquals(0, multiMap0.size());
      
      atmosphereConfig0.properties = (Map<String, Object>) multiMap0;
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertTrue(multiMap0.isEmpty());
      assertEquals(0, multiMap0.size());
      assertTrue(atmosphereConfig0.properties.isEmpty());
      assertEquals(0, atmosphereConfig0.properties.size());
      
      // Undeclared exception!
      try { 
        atmosphereConfig0.resourcesFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      // Undeclared exception!
      try { 
        atmosphereConfig0.resourcesFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      boolean boolean0 = true;
      atmosphereConfig0.useServletContextParameters = boolean0;
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      boolean boolean1 = atmosphereConfig0.isSessionTimeoutRemovalAllowed();
      assertFalse(boolean1);
      assertTrue(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(boolean1 == boolean0);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      // Undeclared exception!
      try { 
        atmosphereConfig0.getInitParameterNames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook1 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      List<AtmosphereConfig.StartupHook> list0 = atmosphereConfig0.getstartUpHook();
      assertNotNull(list0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook2 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = null;
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.startupHook(atmosphereConfig_StartupHook0);
      assertNotNull(atmosphereConfig1);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      
      AtmosphereFramework atmosphereFramework0 = atmosphereConfig0.getframework();
      assertNull(atmosphereFramework0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook3 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      List<AtmosphereHandlerConfig> list0 = atmosphereConfig0.getAtmosphereHandlerConfig();
      assertNotNull(list0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string0 = "g!aBKI9!sQ%";
      String string1 = "";
      String string2 = atmosphereConfig0.getInitParameter(string0, string1);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      String string3 = "~B";
      boolean boolean0 = true;
      boolean boolean1 = atmosphereConfig0.getInitParameter(string3, boolean0);
      assertTrue(boolean1);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(boolean1 == boolean0);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.startupHook(atmosphereConfig_StartupHook0);
      assertNotNull(atmosphereConfig1);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      
      atmosphereConfig1.setSessionTimeoutRemovalAllowed(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      
      atmosphereConfig1.useServletContextParameters = atmosphereConfig0.supportSession;
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      
      atmosphereConfig1.sessionTimeoutRemovalAllowed = atmosphereConfig0.supportSession;
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      
      boolean boolean2 = false;
      atmosphereConfig0.setSupportSession(boolean2);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      atmosphereConfig0.setuseServletContextParameters(boolean2);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      atmosphereConfig0.setstartUpHook(atmosphereConfig1.startUpHook);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      
      boolean boolean3 = true;
      atmosphereConfig1.setuseServletContextParameters(boolean3);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertTrue(atmosphereConfig1.useServletContextParameters);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertTrue(atmosphereConfig1.getuseServletContextParameters());
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.shutdownHook(atmosphereConfig_ShutdownHook0);
      assertNotNull(atmosphereConfig1);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      
      atmosphereConfig1.setThrowExceptionOnCloned(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      
      Map<String, Object> map0 = atmosphereConfig0.properties();
      assertNotNull(map0);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      // Undeclared exception!
      try { 
        atmosphereConfig0.getWebServerName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      String string0 = "kS,Dvc[ry";
      String string1 = atmosphereConfig0.getInitParameter(string0, string0);
      assertEquals("kS,Dvc[ry", string1);
      assertNotNull(string1);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      AtmosphereFramework atmosphereFramework0 = atmosphereConfig0.framework();
      assertNull(atmosphereFramework0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      boolean boolean0 = atmosphereConfig0.isThrowExceptionOnCloned();
      assertFalse(boolean0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      boolean boolean1 = atmosphereConfig0.isSessionTimeoutRemovalAllowed();
      assertFalse(boolean1);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(boolean1 == boolean0);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      List<AtmosphereHandlerConfig> list0 = atmosphereConfig0.getAtmosphereHandlerConfig();
      assertNotNull(list0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string0 = "g!aBKI9!sQ%";
      String string1 = "";
      String string2 = atmosphereConfig0.getInitParameter(string0, string1);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      String string3 = "~B";
      boolean boolean0 = true;
      boolean boolean1 = atmosphereConfig0.getInitParameter(string3, boolean0);
      assertTrue(boolean1);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(boolean1 == boolean0);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.startupHook(atmosphereConfig_StartupHook0);
      assertNotNull(atmosphereConfig1);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      
      atmosphereConfig1.setSessionTimeoutRemovalAllowed(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      
      atmosphereConfig1.useServletContextParameters = atmosphereConfig0.supportSession;
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      
      atmosphereConfig1.sessionTimeoutRemovalAllowed = atmosphereConfig0.supportSession;
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      
      boolean boolean2 = false;
      atmosphereConfig0.setSupportSession(boolean2);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      boolean boolean3 = false;
      atmosphereConfig0.sessionTimeoutRemovalAllowed = boolean3;
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      atmosphereConfig0.setuseServletContextParameters(boolean2);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      atmosphereConfig0.setstartUpHook(atmosphereConfig1.startUpHook);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      
      boolean boolean4 = true;
      atmosphereConfig1.setuseServletContextParameters(boolean4);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertTrue(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertTrue(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertTrue(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      
      atmosphereConfig0.setframework(atmosphereConfig1.framework);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertTrue(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertTrue(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertTrue(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.shutdownHook(atmosphereConfig_ShutdownHook0);
      assertNotNull(atmosphereConfig1);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      
      atmosphereConfig1.destroy();
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      
      // Undeclared exception!
      try { 
        atmosphereConfig0.getWebServerName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      String string0 = "W1`4S2}>fpOBVAXWSAv";
      boolean boolean0 = false;
      atmosphereConfig0.setuseServletContextParameters(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      boolean boolean1 = atmosphereConfig0.getInitParameter(string0, boolean0);
      assertFalse(boolean1);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(boolean1 == boolean0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      atmosphereConfig0.initComplete();
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      boolean boolean2 = true;
      atmosphereConfig0.supportSession = boolean2;
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertTrue(atmosphereConfig0.isSupportSession());
      
      String string1 = "]C!";
      List<AtmosphereConfig.StartupHook> list0 = atmosphereConfig0.getstartUpHook();
      assertNotNull(list0);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertTrue(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertTrue(atmosphereConfig0.isSupportSession());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      boolean boolean1 = false;
      AtmosphereResourceImpl atmosphereResourceImpl0 = new AtmosphereResourceImpl();
      assertNotNull(atmosphereResourceImpl0);
      assertTrue(atmosphereResourceImpl0.isInScope());
      assertFalse(atmosphereResourceImpl0.isSuspended());
      assertNull(atmosphereResourceImpl0.uuid());
      assertFalse(atmosphereResourceImpl0.isResumed());
      assertFalse(atmosphereResourceImpl0.isCancelled());
      assertFalse(atmosphereResourceImpl0.disableSuspendEvent());
      assertNull(atmosphereResourceImpl0.transport());
      assertFalse(atmosphereResourceImpl0.forceBinaryWrite());
      
      BroadcasterTest.AR broadcasterTest_AR0 = new BroadcasterTest.AR();
      assertNotNull(broadcasterTest_AR0);
      
      AtmosphereResourceImpl atmosphereResourceImpl1 = atmosphereResourceImpl0.atmosphereHandler(broadcasterTest_AR0);
      assertNotNull(atmosphereResourceImpl1);
      assertSame(atmosphereResourceImpl0, atmosphereResourceImpl1);
      assertSame(atmosphereResourceImpl1, atmosphereResourceImpl0);
      assertTrue(atmosphereResourceImpl0.isInScope());
      assertFalse(atmosphereResourceImpl0.isSuspended());
      assertNull(atmosphereResourceImpl0.uuid());
      assertFalse(atmosphereResourceImpl0.isResumed());
      assertFalse(atmosphereResourceImpl0.isCancelled());
      assertFalse(atmosphereResourceImpl0.disableSuspendEvent());
      assertNull(atmosphereResourceImpl0.transport());
      assertFalse(atmosphereResourceImpl0.forceBinaryWrite());
      assertFalse(atmosphereResourceImpl1.isResumed());
      assertFalse(atmosphereResourceImpl1.disableSuspendEvent());
      assertFalse(atmosphereResourceImpl1.isCancelled());
      assertFalse(atmosphereResourceImpl1.isSuspended());
      assertNull(atmosphereResourceImpl1.uuid());
      assertNull(atmosphereResourceImpl1.transport());
      assertFalse(atmosphereResourceImpl1.forceBinaryWrite());
      assertTrue(atmosphereResourceImpl1.isInScope());
      
      boolean boolean2 = true;
      // Undeclared exception!
      try { 
        atmosphereConfig0.metaBroadcaster();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      atmosphereConfig0.destroy();
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      boolean boolean0 = true;
      atmosphereConfig0.setSessionTimeoutRemovalAllowed(boolean0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertTrue(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      Vector<AtmosphereConfig.StartupHook> vector0 = new Vector<AtmosphereConfig.StartupHook>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      boolean boolean1 = atmosphereConfig0.getuseServletContextParameters();
      assertFalse(boolean1);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertTrue(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(boolean1 == boolean0);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      atmosphereConfig0.startUpHook = (List<AtmosphereConfig.StartupHook>) vector0;
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(0, atmosphereConfig0.startUpHook.size());
      assertTrue(atmosphereConfig0.startUpHook.isEmpty());
      
      atmosphereConfig0.initComplete();
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertTrue(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      Logger logger0 = atmosphereConfig0.getlogger();
      assertNotNull(logger0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertTrue(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      Map<String, Object> map0 = atmosphereConfig0.getproperties();
      assertNotNull(map0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertTrue(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      Map<String, Object> map1 = atmosphereConfig0.getproperties();
      assertNotNull(map1);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertTrue(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertSame(map1, map0);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      int int0 = 18;
      MultiMap multiMap0 = new MultiMap(int0);
      assertNotNull(multiMap0);
      assertTrue(multiMap0.isEmpty());
      assertEquals(0, multiMap0.size());
      
      Vector<AtmosphereConfig.StartupHook> vector0 = new Vector<AtmosphereConfig.StartupHook>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = vector0.add(atmosphereConfig_StartupHook0);
      assertTrue(boolean0);
      assertTrue(vector0.contains(atmosphereConfig_StartupHook0));
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      
      atmosphereConfig0.setstartUpHook(vector0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertTrue(vector0.contains(atmosphereConfig_StartupHook0));
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      
      atmosphereConfig0.setproperties(multiMap0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertTrue(multiMap0.isEmpty());
      assertEquals(0, multiMap0.size());
      
      String string0 = null;
      atmosphereConfig0.supportSession = boolean0;
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      
      boolean boolean1 = false;
      boolean boolean2 = atmosphereConfig0.isSessionTimeoutRemovalAllowed();
      assertFalse(boolean2);
      assertTrue(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      boolean boolean3 = atmosphereConfig0.isSupportSession();
      assertTrue(boolean3);
      assertTrue(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      org.eclipse.jetty.util.MultiMap<AtmosphereHandlerConfig> multiMap0 = new org.eclipse.jetty.util.MultiMap<AtmosphereHandlerConfig>();
      assertNotNull(multiMap0);
      assertTrue(multiMap0.isEmpty());
      assertEquals(0, multiMap0.size());
      
      org.eclipse.jetty.util.MultiMap<AtmosphereHandlerConfig> multiMap1 = new org.eclipse.jetty.util.MultiMap<AtmosphereHandlerConfig>(multiMap0);
      assertNotNull(multiMap1);
      assertTrue(multiMap1.equals((Object)multiMap0));
      assertTrue(multiMap0.isEmpty());
      assertEquals(0, multiMap0.size());
      assertEquals(0, multiMap1.size());
      assertTrue(multiMap1.isEmpty());
      
      org.eclipse.jetty.util.MultiMap<AtmosphereHandlerConfig> multiMap2 = new org.eclipse.jetty.util.MultiMap<AtmosphereHandlerConfig>(multiMap1);
      assertNotNull(multiMap2);
      assertTrue(multiMap0.equals((Object)multiMap1));
      assertTrue(multiMap1.equals((Object)multiMap0));
      assertTrue(multiMap2.equals((Object)multiMap0));
      assertTrue(multiMap2.equals((Object)multiMap1));
      assertTrue(multiMap0.isEmpty());
      assertEquals(0, multiMap0.size());
      assertEquals(0, multiMap1.size());
      assertTrue(multiMap1.isEmpty());
      assertEquals(0, multiMap2.size());
      assertTrue(multiMap2.isEmpty());
      
      String string0 = "GnEt#R\\:_N[j[mKv\\L";
      AtmosphereHandlerConfig[] atmosphereHandlerConfigArray0 = new AtmosphereHandlerConfig[7];
      AtmosphereHandlerConfig atmosphereHandlerConfig0 = new AtmosphereHandlerConfig();
      assertNotNull(atmosphereHandlerConfig0);
      assertEquals("false", atmosphereHandlerConfig0.getSupportSession());
      assertNull(atmosphereHandlerConfig0.getBroadcaster());
      assertNull(atmosphereHandlerConfig0.getClassName());
      assertNull(atmosphereHandlerConfig0.getContextRoot());
      assertNull(atmosphereHandlerConfig0.getBroadcasterCache());
      assertNull(atmosphereHandlerConfig0.getCometSupport());
      
      atmosphereHandlerConfigArray0[0] = atmosphereHandlerConfig0;
      AtmosphereHandlerConfig atmosphereHandlerConfig1 = new AtmosphereHandlerConfig();
      assertNotNull(atmosphereHandlerConfig1);
      assertFalse(atmosphereHandlerConfig1.equals((Object)atmosphereHandlerConfig0));
      assertNull(atmosphereHandlerConfig1.getClassName());
      assertNull(atmosphereHandlerConfig1.getContextRoot());
      assertEquals("false", atmosphereHandlerConfig1.getSupportSession());
      assertNull(atmosphereHandlerConfig1.getCometSupport());
      assertNull(atmosphereHandlerConfig1.getBroadcaster());
      assertNull(atmosphereHandlerConfig1.getBroadcasterCache());
      
      atmosphereHandlerConfigArray0[1] = atmosphereHandlerConfig1;
      AtmosphereHandlerConfig atmosphereHandlerConfig2 = new AtmosphereHandlerConfig();
      assertNotNull(atmosphereHandlerConfig2);
      assertFalse(atmosphereHandlerConfig2.equals((Object)atmosphereHandlerConfig1));
      assertFalse(atmosphereHandlerConfig2.equals((Object)atmosphereHandlerConfig0));
      assertNull(atmosphereHandlerConfig2.getContextRoot());
      assertNull(atmosphereHandlerConfig2.getBroadcasterCache());
      assertNull(atmosphereHandlerConfig2.getCometSupport());
      assertNull(atmosphereHandlerConfig2.getBroadcaster());
      assertEquals("false", atmosphereHandlerConfig2.getSupportSession());
      assertNull(atmosphereHandlerConfig2.getClassName());
      
      org.eclipse.jetty.util.MultiMap multiMap3 = (org.eclipse.jetty.util.MultiMap)multiMap1.clone();
      assertNotNull(multiMap3);
      assertNotSame(multiMap0, multiMap1);
      assertNotSame(multiMap0, multiMap2);
      assertNotSame(multiMap1, multiMap2);
      assertNotSame(multiMap1, multiMap0);
      assertTrue(multiMap0.equals((Object)multiMap2));
      assertTrue(multiMap0.equals((Object)multiMap1));
      assertTrue(multiMap1.equals((Object)multiMap0));
      assertTrue(multiMap1.equals((Object)multiMap2));
      assertTrue(multiMap0.isEmpty());
      assertEquals(0, multiMap0.size());
      assertEquals(0, multiMap1.size());
      assertTrue(multiMap1.isEmpty());
      assertTrue(multiMap3.isEmpty());
      assertEquals(0, multiMap3.size());
      
      atmosphereHandlerConfigArray0[2] = atmosphereHandlerConfig2;
      AtmosphereHandlerConfig atmosphereHandlerConfig3 = new AtmosphereHandlerConfig();
      assertNotNull(atmosphereHandlerConfig3);
      assertFalse(atmosphereHandlerConfig3.equals((Object)atmosphereHandlerConfig0));
      assertFalse(atmosphereHandlerConfig3.equals((Object)atmosphereHandlerConfig1));
      assertFalse(atmosphereHandlerConfig3.equals((Object)atmosphereHandlerConfig2));
      assertNull(atmosphereHandlerConfig3.getBroadcaster());
      assertEquals("false", atmosphereHandlerConfig3.getSupportSession());
      assertNull(atmosphereHandlerConfig3.getCometSupport());
      assertNull(atmosphereHandlerConfig3.getBroadcasterCache());
      assertNull(atmosphereHandlerConfig3.getContextRoot());
      assertNull(atmosphereHandlerConfig3.getClassName());
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(string0));
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      atmosphereHandlerConfig2.setAtmosphereInterceptorClasses(stack0);
      assertNotSame(atmosphereHandlerConfig2, atmosphereHandlerConfig1);
      assertNotSame(atmosphereHandlerConfig2, atmosphereHandlerConfig3);
      assertNotSame(atmosphereHandlerConfig2, atmosphereHandlerConfig0);
      assertFalse(stack0.contains(string0));
      assertFalse(atmosphereHandlerConfig2.equals((Object)atmosphereHandlerConfig1));
      assertFalse(atmosphereHandlerConfig2.equals((Object)atmosphereHandlerConfig3));
      assertFalse(atmosphereHandlerConfig2.equals((Object)atmosphereHandlerConfig0));
      assertNull(atmosphereHandlerConfig2.getContextRoot());
      assertNull(atmosphereHandlerConfig2.getBroadcasterCache());
      assertNull(atmosphereHandlerConfig2.getCometSupport());
      assertNull(atmosphereHandlerConfig2.getBroadcaster());
      assertEquals("false", atmosphereHandlerConfig2.getSupportSession());
      assertNull(atmosphereHandlerConfig2.getClassName());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      atmosphereHandlerConfigArray0[3] = atmosphereHandlerConfig3;
      AtmosphereHandlerConfig atmosphereHandlerConfig4 = new AtmosphereHandlerConfig();
      assertNotNull(atmosphereHandlerConfig4);
      assertFalse(atmosphereHandlerConfig4.equals((Object)atmosphereHandlerConfig2));
      assertFalse(atmosphereHandlerConfig4.equals((Object)atmosphereHandlerConfig1));
      assertFalse(atmosphereHandlerConfig4.equals((Object)atmosphereHandlerConfig3));
      assertFalse(atmosphereHandlerConfig4.equals((Object)atmosphereHandlerConfig0));
      assertNull(atmosphereHandlerConfig4.getBroadcaster());
      assertEquals("false", atmosphereHandlerConfig4.getSupportSession());
      assertNull(atmosphereHandlerConfig4.getClassName());
      assertNull(atmosphereHandlerConfig4.getContextRoot());
      assertNull(atmosphereHandlerConfig4.getBroadcasterCache());
      assertNull(atmosphereHandlerConfig4.getCometSupport());
      
      atmosphereHandlerConfigArray0[4] = atmosphereHandlerConfig4;
      AtmosphereHandlerConfig atmosphereHandlerConfig5 = new AtmosphereHandlerConfig();
      assertNotNull(atmosphereHandlerConfig5);
      assertFalse(atmosphereHandlerConfig5.equals((Object)atmosphereHandlerConfig1));
      assertFalse(atmosphereHandlerConfig5.equals((Object)atmosphereHandlerConfig3));
      assertFalse(atmosphereHandlerConfig5.equals((Object)atmosphereHandlerConfig2));
      assertFalse(atmosphereHandlerConfig5.equals((Object)atmosphereHandlerConfig4));
      assertFalse(atmosphereHandlerConfig5.equals((Object)atmosphereHandlerConfig0));
      assertNull(atmosphereHandlerConfig5.getBroadcasterCache());
      assertNull(atmosphereHandlerConfig5.getContextRoot());
      assertNull(atmosphereHandlerConfig5.getClassName());
      assertNull(atmosphereHandlerConfig5.getBroadcaster());
      assertNull(atmosphereHandlerConfig5.getCometSupport());
      assertEquals("false", atmosphereHandlerConfig5.getSupportSession());
      
      atmosphereHandlerConfigArray0[5] = atmosphereHandlerConfig5;
      AtmosphereHandlerConfig atmosphereHandlerConfig6 = new AtmosphereHandlerConfig();
      assertNotNull(atmosphereHandlerConfig6);
      assertFalse(atmosphereHandlerConfig6.equals((Object)atmosphereHandlerConfig0));
      assertFalse(atmosphereHandlerConfig6.equals((Object)atmosphereHandlerConfig3));
      assertFalse(atmosphereHandlerConfig6.equals((Object)atmosphereHandlerConfig5));
      assertFalse(atmosphereHandlerConfig6.equals((Object)atmosphereHandlerConfig4));
      assertFalse(atmosphereHandlerConfig6.equals((Object)atmosphereHandlerConfig2));
      assertFalse(atmosphereHandlerConfig6.equals((Object)atmosphereHandlerConfig1));
      assertNull(atmosphereHandlerConfig6.getContextRoot());
      assertNull(atmosphereHandlerConfig6.getCometSupport());
      assertEquals("false", atmosphereHandlerConfig6.getSupportSession());
      assertNull(atmosphereHandlerConfig6.getBroadcasterCache());
      assertNull(atmosphereHandlerConfig6.getBroadcaster());
      assertNull(atmosphereHandlerConfig6.getClassName());
      
      atmosphereHandlerConfigArray0[6] = atmosphereHandlerConfig6;
      List<AtmosphereHandlerConfig> list0 = multiMap2.putValues(string0, atmosphereHandlerConfigArray0);
      assertNull(list0);
      assertNotSame(multiMap0, multiMap1);
      assertNotSame(multiMap0, multiMap2);
      assertNotSame(multiMap1, multiMap2);
      assertNotSame(multiMap1, multiMap0);
      assertNotSame(multiMap2, multiMap0);
      assertNotSame(multiMap2, multiMap1);
      assertFalse(multiMap0.equals((Object)multiMap2));
      assertTrue(multiMap0.equals((Object)multiMap1));
      assertTrue(multiMap1.equals((Object)multiMap0));
      assertFalse(multiMap1.equals((Object)multiMap2));
      assertFalse(multiMap2.equals((Object)multiMap0));
      assertFalse(multiMap2.equals((Object)multiMap1));
      assertTrue(multiMap0.isEmpty());
      assertEquals(0, multiMap0.size());
      assertEquals(0, multiMap1.size());
      assertTrue(multiMap1.isEmpty());
      assertEquals(1, multiMap2.size());
      assertFalse(multiMap2.isEmpty());
      assertEquals(7, atmosphereHandlerConfigArray0.length);
      
      atmosphereConfig0.atmosphereHandlerConfig = list0;
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertTrue(multiMap0.isEmpty());
      assertEquals(0, multiMap0.size());
      assertEquals(0, multiMap1.size());
      assertTrue(multiMap1.isEmpty());
      assertEquals(1, multiMap2.size());
      assertFalse(multiMap2.isEmpty());
      
      MultiMap multiMap4 = new MultiMap(atmosphereConfig0.properties);
      assertNotNull(multiMap4);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertTrue(multiMap4.isEmpty());
      assertEquals(0, multiMap4.size());
      
      Vector<AtmosphereHandlerProperty> vector0 = new Vector<AtmosphereHandlerProperty>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      atmosphereHandlerConfig5.setProperties(vector0);
      assertNotSame(atmosphereHandlerConfig5, atmosphereHandlerConfig6);
      assertNotSame(atmosphereHandlerConfig5, atmosphereHandlerConfig1);
      assertNotSame(atmosphereHandlerConfig5, atmosphereHandlerConfig3);
      assertNotSame(atmosphereHandlerConfig5, atmosphereHandlerConfig2);
      assertNotSame(atmosphereHandlerConfig5, atmosphereHandlerConfig4);
      assertNotSame(atmosphereHandlerConfig5, atmosphereHandlerConfig0);
      assertFalse(atmosphereHandlerConfig5.equals((Object)atmosphereHandlerConfig6));
      assertFalse(atmosphereHandlerConfig5.equals((Object)atmosphereHandlerConfig1));
      assertFalse(atmosphereHandlerConfig5.equals((Object)atmosphereHandlerConfig3));
      assertFalse(atmosphereHandlerConfig5.equals((Object)atmosphereHandlerConfig2));
      assertFalse(atmosphereHandlerConfig5.equals((Object)atmosphereHandlerConfig4));
      assertFalse(atmosphereHandlerConfig5.equals((Object)atmosphereHandlerConfig0));
      assertNull(atmosphereHandlerConfig5.getBroadcasterCache());
      assertNull(atmosphereHandlerConfig5.getContextRoot());
      assertNull(atmosphereHandlerConfig5.getClassName());
      assertNull(atmosphereHandlerConfig5.getBroadcaster());
      assertNull(atmosphereHandlerConfig5.getCometSupport());
      assertEquals("false", atmosphereHandlerConfig5.getSupportSession());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      AtmosphereHandlerConfig atmosphereHandlerConfig7 = new AtmosphereHandlerConfig();
      assertNotNull(atmosphereHandlerConfig7);
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig1));
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig5));
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig3));
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig2));
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig4));
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig6));
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig0));
      assertNull(atmosphereHandlerConfig7.getContextRoot());
      assertNull(atmosphereHandlerConfig7.getClassName());
      assertNull(atmosphereHandlerConfig7.getBroadcaster());
      assertEquals("false", atmosphereHandlerConfig7.getSupportSession());
      assertNull(atmosphereHandlerConfig7.getBroadcasterCache());
      assertNull(atmosphereHandlerConfig7.getCometSupport());
      
      int int0 = 289;
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      assertNotNull(threadPoolExecutor_DiscardOldestPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_DiscardOldestPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      UDPNIOTransport uDPNIOTransport0 = new UDPNIOTransport(string0);
      assertNotNull(uDPNIOTransport0);
      assertTrue(NIOTransport.DEFAULT_REUSE_ADDRESS);
      assertEquals(0, NIOTransport.DEFAULT_SERVER_SOCKET_SO_TIMEOUT);
      assertEquals(30000, NIOTransport.DEFAULT_CONNECTION_TIMEOUT);
      assertFalse(NIOTransport.DEFAULT_OPTIMIZED_FOR_MULTIPLEXING);
      assertEquals((-1), NIOTransport.DEFAULT_SELECTOR_RUNNER_COUNT);
      assertEquals(0, NIOTransport.DEFAULT_CLIENT_SOCKET_SO_TIMEOUT);
      assertEquals(30000, uDPNIOTransport0.getConnectionTimeout());
      assertFalse(uDPNIOTransport0.isPaused());
      assertFalse(uDPNIOTransport0.isStandalone());
      assertTrue(uDPNIOTransport0.isReuseAddress());
      assertTrue(uDPNIOTransport0.isStopped());
      assertEquals("GnEt#R\\:_N[j[mKv\\L", uDPNIOTransport0.getName());
      assertFalse(uDPNIOTransport0.isBlocking());
      assertEquals((-1), uDPNIOTransport0.getWriteBufferSize());
      assertFalse(uDPNIOTransport0.isOptimizedForMultiplexing());
      assertEquals(0, uDPNIOTransport0.getServerSocketSoTimeout());
      assertEquals((-1), uDPNIOTransport0.getReadBufferSize());
      assertEquals(0, uDPNIOTransport0.getClientSocketSoTimeout());
      
      SelectorRunner selectorRunner0 = SelectorRunner.create(uDPNIOTransport0);
      assertNotNull(selectorRunner0);
      assertTrue(NIOTransport.DEFAULT_REUSE_ADDRESS);
      assertEquals(0, NIOTransport.DEFAULT_SERVER_SOCKET_SO_TIMEOUT);
      assertEquals(30000, NIOTransport.DEFAULT_CONNECTION_TIMEOUT);
      assertFalse(NIOTransport.DEFAULT_OPTIMIZED_FOR_MULTIPLEXING);
      assertEquals((-1), NIOTransport.DEFAULT_SELECTOR_RUNNER_COUNT);
      assertEquals(0, NIOTransport.DEFAULT_CLIENT_SOCKET_SO_TIMEOUT);
      assertEquals(30000, uDPNIOTransport0.getConnectionTimeout());
      assertFalse(uDPNIOTransport0.isPaused());
      assertFalse(uDPNIOTransport0.isStandalone());
      assertTrue(uDPNIOTransport0.isReuseAddress());
      assertTrue(uDPNIOTransport0.isStopped());
      assertEquals("GnEt#R\\:_N[j[mKv\\L", uDPNIOTransport0.getName());
      assertFalse(uDPNIOTransport0.isBlocking());
      assertEquals((-1), uDPNIOTransport0.getWriteBufferSize());
      assertFalse(uDPNIOTransport0.isOptimizedForMultiplexing());
      assertEquals(0, uDPNIOTransport0.getServerSocketSoTimeout());
      assertEquals((-1), uDPNIOTransport0.getReadBufferSize());
      assertEquals(0, uDPNIOTransport0.getClientSocketSoTimeout());
      assertEquals(Transport.State.STOPPED, selectorRunner0.getState());
      assertEquals(0, selectorRunner0.getLastSelectedKeysCount());
      
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy1 = (ThreadPoolExecutor.DiscardOldestPolicy)scheduledThreadPoolExecutor0.getRejectedExecutionHandler();
      assertNotNull(threadPoolExecutor_DiscardOldestPolicy1);
      assertSame(threadPoolExecutor_DiscardOldestPolicy1, threadPoolExecutor_DiscardOldestPolicy0);
      assertSame(threadPoolExecutor_DiscardOldestPolicy0, threadPoolExecutor_DiscardOldestPolicy1);
      
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.schedule((Runnable) selectorRunner0, (long) uDPNIOTransport0.DEFAULT_SERVER_SOCKET_SO_TIMEOUT, timeUnit0);
      assertNotNull(scheduledFuture0);
      assertTrue(NIOTransport.DEFAULT_REUSE_ADDRESS);
      assertEquals(0, NIOTransport.DEFAULT_SERVER_SOCKET_SO_TIMEOUT);
      assertEquals(30000, NIOTransport.DEFAULT_CONNECTION_TIMEOUT);
      assertFalse(NIOTransport.DEFAULT_OPTIMIZED_FOR_MULTIPLEXING);
      assertEquals((-1), NIOTransport.DEFAULT_SELECTOR_RUNNER_COUNT);
      assertEquals(0, NIOTransport.DEFAULT_CLIENT_SOCKET_SO_TIMEOUT);
      assertSame(threadPoolExecutor_DiscardOldestPolicy0, threadPoolExecutor_DiscardOldestPolicy1);
      assertEquals(30000, uDPNIOTransport0.getConnectionTimeout());
      assertFalse(uDPNIOTransport0.isPaused());
      assertFalse(uDPNIOTransport0.isStandalone());
      assertTrue(uDPNIOTransport0.isReuseAddress());
      assertTrue(uDPNIOTransport0.isStopped());
      assertEquals("GnEt#R\\:_N[j[mKv\\L", uDPNIOTransport0.getName());
      assertFalse(uDPNIOTransport0.isBlocking());
      assertEquals((-1), uDPNIOTransport0.getWriteBufferSize());
      assertFalse(uDPNIOTransport0.isOptimizedForMultiplexing());
      assertEquals(0, uDPNIOTransport0.getServerSocketSoTimeout());
      assertEquals((-1), uDPNIOTransport0.getReadBufferSize());
      assertEquals(0, uDPNIOTransport0.getClientSocketSoTimeout());
      assertEquals(Transport.State.STOPPED, selectorRunner0.getState());
      assertEquals(0, selectorRunner0.getLastSelectedKeysCount());
      
      atmosphereConfig0.setproperties(multiMap4);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertTrue(multiMap4.isEmpty());
      assertEquals(0, multiMap4.size());
      
      List<AtmosphereConfig.ShutdownHook> list1 = atmosphereConfig0.getshutdownHooks();
      assertNotNull(list1);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      // Undeclared exception!
      try { 
        atmosphereConfig0.destroy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      boolean boolean0 = true;
      atmosphereConfig0.throwExceptionOnCloned = boolean0;
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = true;
      atmosphereConfig0.initComplete();
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      Stack<AtmosphereConfig.ShutdownHook> stack0 = new Stack<AtmosphereConfig.ShutdownHook>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      atmosphereConfig0.shutdownHooks = (List<AtmosphereConfig.ShutdownHook>) stack0;
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(atmosphereConfig0.shutdownHooks.isEmpty());
      assertEquals(0, atmosphereConfig0.shutdownHooks.size());
      
      boolean boolean3 = stack0.retainAll(atmosphereConfig0.shutdownHooks);
      assertFalse(boolean3);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(atmosphereConfig0.shutdownHooks.isEmpty());
      assertEquals(0, atmosphereConfig0.shutdownHooks.size());
      
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("org.atmosphere.cpr.AtmosphereConfig", 12345);
      boolean boolean4 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      
      atmosphereConfig0.setshutdownHooks(stack0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      atmosphereConfig0.sessionTimeoutRemovalAllowed = boolean2;
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      
      atmosphereConfig0.setSessionTimeoutRemovalAllowed(boolean0);
      assertFalse(atmosphereConfig0.supportSession);
      assertTrue(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertTrue(boolean0 == boolean4);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean3);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      boolean boolean5 = false;
      atmosphereConfig0.supportSession = boolean5;
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      
      boolean boolean6 = stack0.add(atmosphereConfig_ShutdownHook0);
      assertTrue(boolean6);
      assertTrue(stack0.contains(atmosphereConfig_ShutdownHook0));
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean3);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      String string0 = "org.atmosphere.cpr.AtmosphereConfig";
      String string1 = atmosphereConfig0.getInitParameter(string0);
      assertNull(string1);
      assertFalse(atmosphereConfig0.supportSession);
      assertTrue(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      
      AtmosphereFramework atmosphereFramework0 = atmosphereConfig0.getframework();
      assertNull(atmosphereFramework0);
      assertFalse(atmosphereConfig0.supportSession);
      assertTrue(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      
      // Undeclared exception!
      try { 
        atmosphereConfig0.uuidProvider();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      List<AtmosphereHandlerConfig> list0 = atmosphereConfig0.getAtmosphereHandlerConfig();
      assertNotNull(list0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string0 = "g!aBKI9!sQ%";
      String string1 = "";
      String string2 = atmosphereConfig0.getInitParameter(string0, string1);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      String string3 = "~B";
      boolean boolean0 = true;
      boolean boolean1 = atmosphereConfig0.getInitParameter(string3, boolean0);
      assertTrue(boolean1);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(boolean1 == boolean0);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      atmosphereConfig0.throwExceptionOnCloned = boolean1;
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.startupHook(atmosphereConfig_StartupHook0);
      assertNotNull(atmosphereConfig1);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertTrue(atmosphereConfig1.isThrowExceptionOnCloned());
      
      atmosphereConfig1.setSessionTimeoutRemovalAllowed(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertTrue(atmosphereConfig1.isThrowExceptionOnCloned());
      
      atmosphereConfig1.sessionTimeoutRemovalAllowed = atmosphereConfig0.supportSession;
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertTrue(atmosphereConfig1.isThrowExceptionOnCloned());
      
      boolean boolean2 = false;
      // Undeclared exception!
      try { 
        atmosphereConfig0.sessionFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      String string0 = "W1`4S2}>fpOBVAXWSAv";
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = null;
      boolean boolean0 = NetworkHandling.sendMessageOnTcp(evoSuiteLocalAddress0, string0);
      assertFalse(boolean0);
      
      boolean boolean1 = false;
      atmosphereConfig0.setuseServletContextParameters(boolean1);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(boolean1 == boolean0);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      boolean boolean2 = atmosphereConfig0.getInitParameter(string0, atmosphereConfig0.useServletContextParameters);
      assertFalse(boolean2);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      atmosphereConfig0.initComplete();
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      BroadcasterLifecyclePolicyTest.B broadcasterLifecyclePolicyTest_B0 = new BroadcasterLifecyclePolicyTest.B();
      assertNotNull(broadcasterLifecyclePolicyTest_B0);
      assertEquals(100, DefaultBroadcaster.POLLING_DEFAULT);
      assertEquals("DefaultBroadcaster", broadcasterLifecyclePolicyTest_B0.getID());
      assertFalse(broadcasterLifecyclePolicyTest_B0.outOfOrderBroadcastSupported());
      assertFalse(broadcasterLifecyclePolicyTest_B0.isDestroyed());
      assertEquals(Broadcaster.POLICY.FIFO, broadcasterLifecyclePolicyTest_B0.policy());
      assertEquals(Broadcaster.SCOPE.APPLICATION, broadcasterLifecyclePolicyTest_B0.getScope());
      
      String string1 = "Closing db connection for JDBCUserRealm";
      String string2 = atmosphereConfig0.getInitParameter(broadcasterLifecyclePolicyTest_B0.CACHED, string1);
      assertEquals("Closing db connection for JDBCUserRealm", string2);
      assertNotNull(string2);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertEquals(100, DefaultBroadcaster.POLLING_DEFAULT);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertEquals("DefaultBroadcaster", broadcasterLifecyclePolicyTest_B0.getID());
      assertFalse(broadcasterLifecyclePolicyTest_B0.outOfOrderBroadcastSupported());
      assertFalse(broadcasterLifecyclePolicyTest_B0.isDestroyed());
      assertEquals(Broadcaster.POLICY.FIFO, broadcasterLifecyclePolicyTest_B0.policy());
      assertEquals(Broadcaster.SCOPE.APPLICATION, broadcasterLifecyclePolicyTest_B0.getScope());
      
      AtmosphereConfig atmosphereConfig1 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig1);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.equals((Object)atmosphereConfig0));
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      
      AtmosphereConfig atmosphereConfig2 = atmosphereConfig0.populate(atmosphereConfig1);
      assertNotNull(atmosphereConfig2);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig2.useServletContextParameters);
      assertFalse(atmosphereConfig2.supportSession);
      assertFalse(atmosphereConfig2.throwExceptionOnCloned);
      assertFalse(atmosphereConfig2.sessionTimeoutRemovalAllowed);
      assertNotSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig0, atmosphereConfig2);
      assertNotSame(atmosphereConfig1, atmosphereConfig0);
      assertNotSame(atmosphereConfig1, atmosphereConfig2);
      assertNotSame(atmosphereConfig2, atmosphereConfig1);
      assertSame(atmosphereConfig2, atmosphereConfig0);
      assertFalse(atmosphereConfig0.equals((Object)atmosphereConfig1));
      assertFalse(atmosphereConfig1.equals((Object)atmosphereConfig0));
      assertFalse(atmosphereConfig2.equals((Object)atmosphereConfig1));
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig2.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig2.isSupportSession());
      assertFalse(atmosphereConfig2.getuseServletContextParameters());
      assertFalse(atmosphereConfig2.isSessionTimeoutRemovalAllowed());
      
      // Undeclared exception!
      try { 
        atmosphereConfig2.uuidProvider();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      org.eclipse.jetty.util.MultiMap<AtmosphereHandlerConfig> multiMap0 = new org.eclipse.jetty.util.MultiMap<AtmosphereHandlerConfig>();
      assertNotNull(multiMap0);
      assertTrue(multiMap0.isEmpty());
      assertEquals(0, multiMap0.size());
      
      org.eclipse.jetty.util.MultiMap<AtmosphereHandlerConfig> multiMap1 = new org.eclipse.jetty.util.MultiMap<AtmosphereHandlerConfig>(multiMap0);
      assertNotNull(multiMap1);
      assertTrue(multiMap1.equals((Object)multiMap0));
      assertTrue(multiMap0.isEmpty());
      assertEquals(0, multiMap0.size());
      assertEquals(0, multiMap1.size());
      assertTrue(multiMap1.isEmpty());
      
      org.eclipse.jetty.util.MultiMap<AtmosphereHandlerConfig> multiMap2 = new org.eclipse.jetty.util.MultiMap<AtmosphereHandlerConfig>(multiMap1);
      assertNotNull(multiMap2);
      assertTrue(multiMap0.equals((Object)multiMap1));
      assertTrue(multiMap1.equals((Object)multiMap0));
      assertTrue(multiMap2.equals((Object)multiMap0));
      assertTrue(multiMap2.equals((Object)multiMap1));
      assertTrue(multiMap0.isEmpty());
      assertEquals(0, multiMap0.size());
      assertEquals(0, multiMap1.size());
      assertTrue(multiMap1.isEmpty());
      assertTrue(multiMap2.isEmpty());
      assertEquals(0, multiMap2.size());
      
      String string0 = "GnEt#R\\:_N[j[mKv\\L";
      AtmosphereHandlerConfig[] atmosphereHandlerConfigArray0 = new AtmosphereHandlerConfig[7];
      AtmosphereHandlerConfig atmosphereHandlerConfig0 = new AtmosphereHandlerConfig();
      assertNotNull(atmosphereHandlerConfig0);
      assertNull(atmosphereHandlerConfig0.getBroadcaster());
      assertEquals("false", atmosphereHandlerConfig0.getSupportSession());
      assertNull(atmosphereHandlerConfig0.getClassName());
      assertNull(atmosphereHandlerConfig0.getContextRoot());
      assertNull(atmosphereHandlerConfig0.getBroadcasterCache());
      assertNull(atmosphereHandlerConfig0.getCometSupport());
      
      atmosphereHandlerConfigArray0[0] = atmosphereHandlerConfig0;
      AtmosphereHandlerConfig atmosphereHandlerConfig1 = new AtmosphereHandlerConfig();
      assertNotNull(atmosphereHandlerConfig1);
      assertFalse(atmosphereHandlerConfig1.equals((Object)atmosphereHandlerConfig0));
      assertNull(atmosphereHandlerConfig1.getContextRoot());
      assertNull(atmosphereHandlerConfig1.getClassName());
      assertNull(atmosphereHandlerConfig1.getBroadcaster());
      assertNull(atmosphereHandlerConfig1.getCometSupport());
      assertEquals("false", atmosphereHandlerConfig1.getSupportSession());
      assertNull(atmosphereHandlerConfig1.getBroadcasterCache());
      
      atmosphereHandlerConfigArray0[1] = atmosphereHandlerConfig1;
      AtmosphereHandlerConfig atmosphereHandlerConfig2 = new AtmosphereHandlerConfig();
      assertNotNull(atmosphereHandlerConfig2);
      assertFalse(atmosphereHandlerConfig2.equals((Object)atmosphereHandlerConfig0));
      assertFalse(atmosphereHandlerConfig2.equals((Object)atmosphereHandlerConfig1));
      assertNull(atmosphereHandlerConfig2.getContextRoot());
      assertNull(atmosphereHandlerConfig2.getClassName());
      assertNull(atmosphereHandlerConfig2.getBroadcasterCache());
      assertEquals("false", atmosphereHandlerConfig2.getSupportSession());
      assertNull(atmosphereHandlerConfig2.getBroadcaster());
      assertNull(atmosphereHandlerConfig2.getCometSupport());
      
      org.eclipse.jetty.util.MultiMap multiMap3 = (org.eclipse.jetty.util.MultiMap)multiMap1.clone();
      assertNotNull(multiMap3);
      assertNotSame(multiMap0, multiMap2);
      assertNotSame(multiMap0, multiMap1);
      assertNotSame(multiMap1, multiMap2);
      assertNotSame(multiMap1, multiMap0);
      assertTrue(multiMap0.equals((Object)multiMap1));
      assertTrue(multiMap0.equals((Object)multiMap2));
      assertTrue(multiMap1.equals((Object)multiMap0));
      assertTrue(multiMap1.equals((Object)multiMap2));
      assertTrue(multiMap0.isEmpty());
      assertEquals(0, multiMap0.size());
      assertEquals(0, multiMap1.size());
      assertTrue(multiMap1.isEmpty());
      assertTrue(multiMap3.isEmpty());
      assertEquals(0, multiMap3.size());
      
      atmosphereHandlerConfigArray0[2] = atmosphereHandlerConfig2;
      AtmosphereHandlerConfig atmosphereHandlerConfig3 = new AtmosphereHandlerConfig();
      assertNotNull(atmosphereHandlerConfig3);
      assertFalse(atmosphereHandlerConfig3.equals((Object)atmosphereHandlerConfig0));
      assertFalse(atmosphereHandlerConfig3.equals((Object)atmosphereHandlerConfig2));
      assertFalse(atmosphereHandlerConfig3.equals((Object)atmosphereHandlerConfig1));
      assertEquals("false", atmosphereHandlerConfig3.getSupportSession());
      assertNull(atmosphereHandlerConfig3.getBroadcaster());
      assertNull(atmosphereHandlerConfig3.getClassName());
      assertNull(atmosphereHandlerConfig3.getContextRoot());
      assertNull(atmosphereHandlerConfig3.getBroadcasterCache());
      assertNull(atmosphereHandlerConfig3.getCometSupport());
      
      atmosphereHandlerConfigArray0[3] = atmosphereHandlerConfig3;
      AtmosphereHandlerConfig atmosphereHandlerConfig4 = new AtmosphereHandlerConfig();
      assertNotNull(atmosphereHandlerConfig4);
      assertFalse(atmosphereHandlerConfig4.equals((Object)atmosphereHandlerConfig3));
      assertFalse(atmosphereHandlerConfig4.equals((Object)atmosphereHandlerConfig0));
      assertFalse(atmosphereHandlerConfig4.equals((Object)atmosphereHandlerConfig1));
      assertFalse(atmosphereHandlerConfig4.equals((Object)atmosphereHandlerConfig2));
      assertNull(atmosphereHandlerConfig4.getContextRoot());
      assertNull(atmosphereHandlerConfig4.getBroadcaster());
      assertNull(atmosphereHandlerConfig4.getClassName());
      assertNull(atmosphereHandlerConfig4.getBroadcasterCache());
      assertEquals("false", atmosphereHandlerConfig4.getSupportSession());
      assertNull(atmosphereHandlerConfig4.getCometSupport());
      
      atmosphereHandlerConfigArray0[4] = atmosphereHandlerConfig4;
      AtmosphereHandlerConfig atmosphereHandlerConfig5 = new AtmosphereHandlerConfig();
      assertNotNull(atmosphereHandlerConfig5);
      assertFalse(atmosphereHandlerConfig5.equals((Object)atmosphereHandlerConfig2));
      assertFalse(atmosphereHandlerConfig5.equals((Object)atmosphereHandlerConfig0));
      assertFalse(atmosphereHandlerConfig5.equals((Object)atmosphereHandlerConfig4));
      assertFalse(atmosphereHandlerConfig5.equals((Object)atmosphereHandlerConfig1));
      assertFalse(atmosphereHandlerConfig5.equals((Object)atmosphereHandlerConfig3));
      assertNull(atmosphereHandlerConfig5.getClassName());
      assertNull(atmosphereHandlerConfig5.getCometSupport());
      assertEquals("false", atmosphereHandlerConfig5.getSupportSession());
      assertNull(atmosphereHandlerConfig5.getBroadcaster());
      assertNull(atmosphereHandlerConfig5.getBroadcasterCache());
      assertNull(atmosphereHandlerConfig5.getContextRoot());
      
      atmosphereHandlerConfigArray0[5] = atmosphereHandlerConfig5;
      AtmosphereHandlerConfig atmosphereHandlerConfig6 = new AtmosphereHandlerConfig();
      assertNotNull(atmosphereHandlerConfig6);
      assertFalse(atmosphereHandlerConfig6.equals((Object)atmosphereHandlerConfig5));
      assertFalse(atmosphereHandlerConfig6.equals((Object)atmosphereHandlerConfig3));
      assertFalse(atmosphereHandlerConfig6.equals((Object)atmosphereHandlerConfig4));
      assertFalse(atmosphereHandlerConfig6.equals((Object)atmosphereHandlerConfig0));
      assertFalse(atmosphereHandlerConfig6.equals((Object)atmosphereHandlerConfig1));
      assertFalse(atmosphereHandlerConfig6.equals((Object)atmosphereHandlerConfig2));
      assertNull(atmosphereHandlerConfig6.getClassName());
      assertEquals("false", atmosphereHandlerConfig6.getSupportSession());
      assertNull(atmosphereHandlerConfig6.getBroadcasterCache());
      assertNull(atmosphereHandlerConfig6.getBroadcaster());
      assertNull(atmosphereHandlerConfig6.getCometSupport());
      assertNull(atmosphereHandlerConfig6.getContextRoot());
      
      atmosphereHandlerConfigArray0[6] = atmosphereHandlerConfig6;
      List<AtmosphereHandlerConfig> list0 = multiMap2.putValues(string0, atmosphereHandlerConfigArray0);
      assertNull(list0);
      assertNotSame(multiMap0, multiMap2);
      assertNotSame(multiMap0, multiMap1);
      assertNotSame(multiMap1, multiMap2);
      assertNotSame(multiMap1, multiMap0);
      assertNotSame(multiMap2, multiMap1);
      assertNotSame(multiMap2, multiMap0);
      assertTrue(multiMap0.equals((Object)multiMap1));
      assertFalse(multiMap0.equals((Object)multiMap2));
      assertTrue(multiMap1.equals((Object)multiMap0));
      assertFalse(multiMap1.equals((Object)multiMap2));
      assertFalse(multiMap2.equals((Object)multiMap1));
      assertFalse(multiMap2.equals((Object)multiMap0));
      assertTrue(multiMap0.isEmpty());
      assertEquals(0, multiMap0.size());
      assertEquals(0, multiMap1.size());
      assertTrue(multiMap1.isEmpty());
      assertFalse(multiMap2.isEmpty());
      assertEquals(1, multiMap2.size());
      assertEquals(7, atmosphereHandlerConfigArray0.length);
      
      atmosphereConfig0.atmosphereHandlerConfig = list0;
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(multiMap0.isEmpty());
      assertEquals(0, multiMap0.size());
      assertEquals(0, multiMap1.size());
      assertTrue(multiMap1.isEmpty());
      assertFalse(multiMap2.isEmpty());
      assertEquals(1, multiMap2.size());
      
      MultiMap multiMap4 = new MultiMap(atmosphereConfig0.properties);
      assertNotNull(multiMap4);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertEquals(0, multiMap4.size());
      assertTrue(multiMap4.isEmpty());
      
      Vector<AtmosphereHandlerProperty> vector0 = new Vector<AtmosphereHandlerProperty>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      atmosphereHandlerConfig5.setProperties(vector0);
      assertNotSame(atmosphereHandlerConfig5, atmosphereHandlerConfig2);
      assertNotSame(atmosphereHandlerConfig5, atmosphereHandlerConfig6);
      assertNotSame(atmosphereHandlerConfig5, atmosphereHandlerConfig0);
      assertNotSame(atmosphereHandlerConfig5, atmosphereHandlerConfig4);
      assertNotSame(atmosphereHandlerConfig5, atmosphereHandlerConfig1);
      assertNotSame(atmosphereHandlerConfig5, atmosphereHandlerConfig3);
      assertFalse(atmosphereHandlerConfig5.equals((Object)atmosphereHandlerConfig2));
      assertFalse(atmosphereHandlerConfig5.equals((Object)atmosphereHandlerConfig6));
      assertFalse(atmosphereHandlerConfig5.equals((Object)atmosphereHandlerConfig0));
      assertFalse(atmosphereHandlerConfig5.equals((Object)atmosphereHandlerConfig4));
      assertFalse(atmosphereHandlerConfig5.equals((Object)atmosphereHandlerConfig1));
      assertFalse(atmosphereHandlerConfig5.equals((Object)atmosphereHandlerConfig3));
      assertNull(atmosphereHandlerConfig5.getClassName());
      assertNull(atmosphereHandlerConfig5.getCometSupport());
      assertEquals("false", atmosphereHandlerConfig5.getSupportSession());
      assertNull(atmosphereHandlerConfig5.getBroadcaster());
      assertNull(atmosphereHandlerConfig5.getBroadcasterCache());
      assertNull(atmosphereHandlerConfig5.getContextRoot());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      AtmosphereHandlerConfig atmosphereHandlerConfig7 = new AtmosphereHandlerConfig();
      assertNotNull(atmosphereHandlerConfig7);
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig6));
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig3));
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig4));
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig1));
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig0));
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig2));
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig5));
      assertEquals("false", atmosphereHandlerConfig7.getSupportSession());
      assertNull(atmosphereHandlerConfig7.getBroadcasterCache());
      assertNull(atmosphereHandlerConfig7.getClassName());
      assertNull(atmosphereHandlerConfig7.getCometSupport());
      assertNull(atmosphereHandlerConfig7.getContextRoot());
      assertNull(atmosphereHandlerConfig7.getBroadcaster());
      
      int int0 = 289;
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      assertNotNull(threadPoolExecutor_DiscardOldestPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_DiscardOldestPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      UDPNIOTransport uDPNIOTransport0 = new UDPNIOTransport(string0);
      assertNotNull(uDPNIOTransport0);
      assertTrue(NIOTransport.DEFAULT_REUSE_ADDRESS);
      assertEquals(30000, NIOTransport.DEFAULT_CONNECTION_TIMEOUT);
      assertEquals((-1), NIOTransport.DEFAULT_SELECTOR_RUNNER_COUNT);
      assertEquals(0, NIOTransport.DEFAULT_SERVER_SOCKET_SO_TIMEOUT);
      assertEquals(0, NIOTransport.DEFAULT_CLIENT_SOCKET_SO_TIMEOUT);
      assertFalse(NIOTransport.DEFAULT_OPTIMIZED_FOR_MULTIPLEXING);
      assertEquals(0, uDPNIOTransport0.getClientSocketSoTimeout());
      assertEquals(30000, uDPNIOTransport0.getConnectionTimeout());
      assertFalse(uDPNIOTransport0.isPaused());
      assertEquals((-1), uDPNIOTransport0.getReadBufferSize());
      assertEquals(0, uDPNIOTransport0.getServerSocketSoTimeout());
      assertFalse(uDPNIOTransport0.isBlocking());
      assertEquals("GnEt#R\\:_N[j[mKv\\L", uDPNIOTransport0.getName());
      assertEquals((-1), uDPNIOTransport0.getWriteBufferSize());
      assertTrue(uDPNIOTransport0.isStopped());
      assertTrue(uDPNIOTransport0.isReuseAddress());
      assertFalse(uDPNIOTransport0.isOptimizedForMultiplexing());
      assertFalse(uDPNIOTransport0.isStandalone());
      
      SelectorRunner selectorRunner0 = SelectorRunner.create(uDPNIOTransport0);
      assertNotNull(selectorRunner0);
      assertTrue(NIOTransport.DEFAULT_REUSE_ADDRESS);
      assertEquals(30000, NIOTransport.DEFAULT_CONNECTION_TIMEOUT);
      assertEquals((-1), NIOTransport.DEFAULT_SELECTOR_RUNNER_COUNT);
      assertEquals(0, NIOTransport.DEFAULT_SERVER_SOCKET_SO_TIMEOUT);
      assertEquals(0, NIOTransport.DEFAULT_CLIENT_SOCKET_SO_TIMEOUT);
      assertFalse(NIOTransport.DEFAULT_OPTIMIZED_FOR_MULTIPLEXING);
      assertEquals(0, uDPNIOTransport0.getClientSocketSoTimeout());
      assertEquals(30000, uDPNIOTransport0.getConnectionTimeout());
      assertFalse(uDPNIOTransport0.isPaused());
      assertEquals((-1), uDPNIOTransport0.getReadBufferSize());
      assertEquals(0, uDPNIOTransport0.getServerSocketSoTimeout());
      assertFalse(uDPNIOTransport0.isBlocking());
      assertEquals("GnEt#R\\:_N[j[mKv\\L", uDPNIOTransport0.getName());
      assertEquals((-1), uDPNIOTransport0.getWriteBufferSize());
      assertTrue(uDPNIOTransport0.isStopped());
      assertTrue(uDPNIOTransport0.isReuseAddress());
      assertFalse(uDPNIOTransport0.isOptimizedForMultiplexing());
      assertFalse(uDPNIOTransport0.isStandalone());
      assertEquals(Transport.State.STOPPED, selectorRunner0.getState());
      assertEquals(0, selectorRunner0.getLastSelectedKeysCount());
      
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      atmosphereHandlerConfig7.setSupportSession(string0);
      assertNotSame(atmosphereHandlerConfig7, atmosphereHandlerConfig6);
      assertNotSame(atmosphereHandlerConfig7, atmosphereHandlerConfig3);
      assertNotSame(atmosphereHandlerConfig7, atmosphereHandlerConfig4);
      assertNotSame(atmosphereHandlerConfig7, atmosphereHandlerConfig1);
      assertNotSame(atmosphereHandlerConfig7, atmosphereHandlerConfig0);
      assertNotSame(atmosphereHandlerConfig7, atmosphereHandlerConfig2);
      assertNotSame(atmosphereHandlerConfig7, atmosphereHandlerConfig5);
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig6));
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig3));
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig4));
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig1));
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig0));
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig2));
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig5));
      assertNull(atmosphereHandlerConfig7.getBroadcasterCache());
      assertNull(atmosphereHandlerConfig7.getClassName());
      assertEquals("GnEt#R\\:_N[j[mKv\\L", atmosphereHandlerConfig7.getSupportSession());
      assertNull(atmosphereHandlerConfig7.getCometSupport());
      assertNull(atmosphereHandlerConfig7.getContextRoot());
      assertNull(atmosphereHandlerConfig7.getBroadcaster());
      
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy1 = new ThreadPoolExecutor.DiscardOldestPolicy();
      assertNotNull(threadPoolExecutor_DiscardOldestPolicy1);
      assertFalse(threadPoolExecutor_DiscardOldestPolicy1.equals((Object)threadPoolExecutor_DiscardOldestPolicy0));
      
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.schedule((Runnable) selectorRunner0, (long) uDPNIOTransport0.DEFAULT_SERVER_SOCKET_SO_TIMEOUT, timeUnit0);
      assertNotNull(scheduledFuture0);
      assertTrue(NIOTransport.DEFAULT_REUSE_ADDRESS);
      assertEquals(30000, NIOTransport.DEFAULT_CONNECTION_TIMEOUT);
      assertEquals((-1), NIOTransport.DEFAULT_SELECTOR_RUNNER_COUNT);
      assertEquals(0, NIOTransport.DEFAULT_SERVER_SOCKET_SO_TIMEOUT);
      assertEquals(0, NIOTransport.DEFAULT_CLIENT_SOCKET_SO_TIMEOUT);
      assertFalse(NIOTransport.DEFAULT_OPTIMIZED_FOR_MULTIPLEXING);
      assertNotSame(threadPoolExecutor_DiscardOldestPolicy0, threadPoolExecutor_DiscardOldestPolicy1);
      assertFalse(threadPoolExecutor_DiscardOldestPolicy0.equals((Object)threadPoolExecutor_DiscardOldestPolicy1));
      assertEquals(0, uDPNIOTransport0.getClientSocketSoTimeout());
      assertEquals(30000, uDPNIOTransport0.getConnectionTimeout());
      assertFalse(uDPNIOTransport0.isPaused());
      assertEquals((-1), uDPNIOTransport0.getReadBufferSize());
      assertEquals(0, uDPNIOTransport0.getServerSocketSoTimeout());
      assertFalse(uDPNIOTransport0.isBlocking());
      assertEquals("GnEt#R\\:_N[j[mKv\\L", uDPNIOTransport0.getName());
      assertEquals((-1), uDPNIOTransport0.getWriteBufferSize());
      assertTrue(uDPNIOTransport0.isStopped());
      assertTrue(uDPNIOTransport0.isReuseAddress());
      assertFalse(uDPNIOTransport0.isOptimizedForMultiplexing());
      assertFalse(uDPNIOTransport0.isStandalone());
      assertEquals(Transport.State.STOPPED, selectorRunner0.getState());
      assertEquals(0, selectorRunner0.getLastSelectedKeysCount());
      
      Object object0 = multiMap4.put(atmosphereHandlerConfig7, scheduledFuture0);
      assertNull(object0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertTrue(NIOTransport.DEFAULT_REUSE_ADDRESS);
      assertEquals(30000, NIOTransport.DEFAULT_CONNECTION_TIMEOUT);
      assertEquals((-1), NIOTransport.DEFAULT_SELECTOR_RUNNER_COUNT);
      assertEquals(0, NIOTransport.DEFAULT_SERVER_SOCKET_SO_TIMEOUT);
      assertEquals(0, NIOTransport.DEFAULT_CLIENT_SOCKET_SO_TIMEOUT);
      assertFalse(NIOTransport.DEFAULT_OPTIMIZED_FOR_MULTIPLEXING);
      assertNotSame(atmosphereHandlerConfig7, atmosphereHandlerConfig6);
      assertNotSame(atmosphereHandlerConfig7, atmosphereHandlerConfig3);
      assertNotSame(atmosphereHandlerConfig7, atmosphereHandlerConfig4);
      assertNotSame(atmosphereHandlerConfig7, atmosphereHandlerConfig1);
      assertNotSame(atmosphereHandlerConfig7, atmosphereHandlerConfig0);
      assertNotSame(atmosphereHandlerConfig7, atmosphereHandlerConfig2);
      assertNotSame(atmosphereHandlerConfig7, atmosphereHandlerConfig5);
      assertNotSame(threadPoolExecutor_DiscardOldestPolicy0, threadPoolExecutor_DiscardOldestPolicy1);
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig6));
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig3));
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig4));
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig1));
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig0));
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig2));
      assertFalse(atmosphereHandlerConfig7.equals((Object)atmosphereHandlerConfig5));
      assertFalse(threadPoolExecutor_DiscardOldestPolicy0.equals((Object)threadPoolExecutor_DiscardOldestPolicy1));
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertEquals(1, multiMap4.size());
      assertFalse(multiMap4.isEmpty());
      assertNull(atmosphereHandlerConfig7.getBroadcasterCache());
      assertNull(atmosphereHandlerConfig7.getClassName());
      assertEquals("GnEt#R\\:_N[j[mKv\\L", atmosphereHandlerConfig7.getSupportSession());
      assertNull(atmosphereHandlerConfig7.getCometSupport());
      assertNull(atmosphereHandlerConfig7.getContextRoot());
      assertNull(atmosphereHandlerConfig7.getBroadcaster());
      assertEquals(0, uDPNIOTransport0.getClientSocketSoTimeout());
      assertEquals(30000, uDPNIOTransport0.getConnectionTimeout());
      assertFalse(uDPNIOTransport0.isPaused());
      assertEquals((-1), uDPNIOTransport0.getReadBufferSize());
      assertEquals(0, uDPNIOTransport0.getServerSocketSoTimeout());
      assertFalse(uDPNIOTransport0.isBlocking());
      assertEquals("GnEt#R\\:_N[j[mKv\\L", uDPNIOTransport0.getName());
      assertEquals((-1), uDPNIOTransport0.getWriteBufferSize());
      assertTrue(uDPNIOTransport0.isStopped());
      assertTrue(uDPNIOTransport0.isReuseAddress());
      assertFalse(uDPNIOTransport0.isOptimizedForMultiplexing());
      assertFalse(uDPNIOTransport0.isStandalone());
      assertEquals(Transport.State.STOPPED, selectorRunner0.getState());
      assertEquals(0, selectorRunner0.getLastSelectedKeysCount());
      
      atmosphereConfig0.setproperties(multiMap4);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertEquals(1, multiMap4.size());
      assertFalse(multiMap4.isEmpty());
      
      List<AtmosphereConfig.ShutdownHook> list1 = atmosphereConfig0.getshutdownHooks();
      assertNotNull(list1);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      List<AtmosphereHandlerConfig> list2 = atmosphereConfig0.getAtmosphereHandlerConfig();
      assertNull(list2);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      String string0 = "W1`4S2}>fpOBVAXWSAv";
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = null;
      boolean boolean0 = NetworkHandling.sendMessageOnTcp(evoSuiteLocalAddress0, string0);
      assertFalse(boolean0);
      
      boolean boolean1 = true;
      atmosphereConfig0.setuseServletContextParameters(boolean1);
      assertTrue(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(boolean1 == boolean0);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      boolean boolean2 = atmosphereConfig0.getInitParameter(string0, atmosphereConfig0.useServletContextParameters);
      assertTrue(boolean2);
      assertTrue(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      atmosphereConfig0.initComplete();
      assertTrue(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      BroadcasterLifecyclePolicyTest.B broadcasterLifecyclePolicyTest_B0 = new BroadcasterLifecyclePolicyTest.B();
      assertNotNull(broadcasterLifecyclePolicyTest_B0);
      assertEquals(100, DefaultBroadcaster.POLLING_DEFAULT);
      assertEquals(Broadcaster.POLICY.FIFO, broadcasterLifecyclePolicyTest_B0.policy());
      assertFalse(broadcasterLifecyclePolicyTest_B0.outOfOrderBroadcastSupported());
      assertEquals(Broadcaster.SCOPE.APPLICATION, broadcasterLifecyclePolicyTest_B0.getScope());
      assertEquals("DefaultBroadcaster", broadcasterLifecyclePolicyTest_B0.getID());
      assertFalse(broadcasterLifecyclePolicyTest_B0.isDestroyed());
      
      String string1 = "Closing db connection for JDBCUserRealm";
      String string2 = atmosphereConfig0.getInitParameter(broadcasterLifecyclePolicyTest_B0.CACHED, string1);
      assertEquals("Closing db connection for JDBCUserRealm", string2);
      assertNotNull(string2);
      assertTrue(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertEquals(100, DefaultBroadcaster.POLLING_DEFAULT);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertEquals(Broadcaster.POLICY.FIFO, broadcasterLifecyclePolicyTest_B0.policy());
      assertFalse(broadcasterLifecyclePolicyTest_B0.outOfOrderBroadcastSupported());
      assertEquals(Broadcaster.SCOPE.APPLICATION, broadcasterLifecyclePolicyTest_B0.getScope());
      assertEquals("DefaultBroadcaster", broadcasterLifecyclePolicyTest_B0.getID());
      assertFalse(broadcasterLifecyclePolicyTest_B0.isDestroyed());
      
      AtmosphereConfig atmosphereConfig1 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig1);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.equals((Object)atmosphereConfig0));
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isSupportSession());
      
      AtmosphereConfig atmosphereConfig2 = atmosphereConfig0.populate(atmosphereConfig1);
      assertNotNull(atmosphereConfig2);
      assertTrue(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig2.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig2.useServletContextParameters);
      assertFalse(atmosphereConfig2.supportSession);
      assertFalse(atmosphereConfig2.throwExceptionOnCloned);
      assertNotSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig0, atmosphereConfig2);
      assertNotSame(atmosphereConfig1, atmosphereConfig2);
      assertNotSame(atmosphereConfig1, atmosphereConfig0);
      assertNotSame(atmosphereConfig2, atmosphereConfig1);
      assertSame(atmosphereConfig2, atmosphereConfig0);
      assertFalse(atmosphereConfig0.equals((Object)atmosphereConfig1));
      assertFalse(atmosphereConfig1.equals((Object)atmosphereConfig0));
      assertFalse(atmosphereConfig2.equals((Object)atmosphereConfig1));
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertTrue(atmosphereConfig2.getuseServletContextParameters());
      assertFalse(atmosphereConfig2.isSupportSession());
      assertFalse(atmosphereConfig2.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig2.isThrowExceptionOnCloned());
      
      // Undeclared exception!
      try { 
        atmosphereConfig2.uuidProvider();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      String string0 = "kS,Dvc[r";
      String string1 = atmosphereConfig0.getInitParameter(string0, string0);
      assertEquals("kS,Dvc[r", string1);
      assertNotNull(string1);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      AtmosphereFramework atmosphereFramework0 = atmosphereConfig0.framework();
      assertNull(atmosphereFramework0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      boolean boolean0 = true;
      atmosphereConfig0.setThrowExceptionOnCloned(boolean0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      boolean boolean1 = atmosphereConfig0.isSupportSession();
      assertFalse(boolean1);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(boolean1 == boolean0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      boolean boolean2 = atmosphereConfig0.supportSession;
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = atmosphereConfig0.isThrowExceptionOnCloned();
      assertTrue(boolean3);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      List<AtmosphereHandlerConfig> list0 = atmosphereConfig0.getAtmosphereHandlerConfig();
      assertNotNull(list0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string0 = "g!aBKI9!sQ%";
      String string1 = atmosphereConfig0.getInitParameter(string0, string0);
      assertEquals("g!aBKI9!sQ%", string1);
      assertNotNull(string1);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      String string2 = "~B";
      boolean boolean0 = true;
      boolean boolean1 = atmosphereConfig0.getInitParameter(string2, boolean0);
      assertTrue(boolean1);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean1 == boolean0);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.startupHook(atmosphereConfig_StartupHook0);
      assertNotNull(atmosphereConfig1);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.supportSession);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      
      atmosphereConfig1.setSessionTimeoutRemovalAllowed(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.supportSession);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      
      atmosphereConfig1.sessionTimeoutRemovalAllowed = atmosphereConfig0.supportSession;
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      
      atmosphereConfig0.setSupportSession(boolean1);
      assertTrue(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertTrue(atmosphereConfig0.isSupportSession());
      
      atmosphereConfig0.setuseServletContextParameters(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertTrue(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertTrue(atmosphereConfig1.isSupportSession());
      
      atmosphereConfig0.setstartUpHook(atmosphereConfig1.startUpHook);
      assertTrue(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertTrue(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertTrue(atmosphereConfig1.isSupportSession());
      
      AtmosphereConfig atmosphereConfig2 = atmosphereConfig0.populate(atmosphereConfig1);
      assertNotNull(atmosphereConfig2);
      assertTrue(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertTrue(atmosphereConfig2.supportSession);
      assertFalse(atmosphereConfig2.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig2.throwExceptionOnCloned);
      assertFalse(atmosphereConfig2.useServletContextParameters);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig0, atmosphereConfig2);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertSame(atmosphereConfig1, atmosphereConfig2);
      assertSame(atmosphereConfig2, atmosphereConfig0);
      assertSame(atmosphereConfig2, atmosphereConfig1);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertTrue(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertTrue(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig2.getuseServletContextParameters());
      assertFalse(atmosphereConfig2.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig2.isThrowExceptionOnCloned());
      assertTrue(atmosphereConfig2.isSupportSession());
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      List<AtmosphereHandlerConfig> list0 = atmosphereConfig0.getAtmosphereHandlerConfig();
      assertNotNull(list0);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string0 = "g!aBKI9!sQ%";
      String string1 = "";
      String string2 = atmosphereConfig0.getInitParameter(string0, string1);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      String string3 = "~B";
      boolean boolean0 = true;
      boolean boolean1 = atmosphereConfig0.getInitParameter(string3, boolean0);
      assertTrue(boolean1);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(boolean1 == boolean0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.startupHook(atmosphereConfig_StartupHook0);
      assertNotNull(atmosphereConfig1);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      
      atmosphereConfig1.setSessionTimeoutRemovalAllowed(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      
      atmosphereConfig1.sessionTimeoutRemovalAllowed = atmosphereConfig0.supportSession;
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      
      boolean boolean2 = false;
      atmosphereConfig0.setSupportSession(boolean2);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      atmosphereConfig0.setuseServletContextParameters(boolean2);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      atmosphereConfig0.setstartUpHook(atmosphereConfig1.startUpHook);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      
      atmosphereConfig0.initComplete();
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      boolean boolean0 = true;
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean1 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      atmosphereConfig0.setuseServletContextParameters(boolean0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig0.useServletContextParameters);
      assertFalse(boolean0 == boolean1);
      assertTrue(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      atmosphereConfig0.destroy();
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig0.useServletContextParameters);
      assertTrue(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      boolean boolean2 = true;
      atmosphereConfig0.setSessionTimeoutRemovalAllowed(boolean2);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertTrue(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig0.useServletContextParameters);
      assertFalse(boolean2 == boolean1);
      assertTrue(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      String string1 = null;
      boolean boolean3 = atmosphereConfig0.isThrowExceptionOnCloned();
      assertFalse(boolean3);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertTrue(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig0.useServletContextParameters);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      int int0 = (-89);
      CountDownLatch countDownLatch0 = null;
      try {
        countDownLatch0 = new CountDownLatch(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count < 0
         //
         verifyException("java.util.concurrent.CountDownLatch", e);
      }
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(atmosphereConfig_ShutdownHook0).toString();
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.shutdownHook(atmosphereConfig_ShutdownHook0);
      assertNotNull(atmosphereConfig1);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      
      List<AtmosphereConfig.ShutdownHook> list0 = atmosphereConfig1.getshutdownHooks();
      assertNotNull(list0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertTrue(list0.contains(atmosphereConfig_ShutdownHook0));
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      Map<String, Object> map0 = atmosphereConfig0.properties();
      assertNotNull(map0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      List<AtmosphereHandlerConfig> list0 = atmosphereConfig0.getAtmosphereHandlerConfig();
      assertNotNull(list0);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string0 = "g!aBKI9!sQ%";
      String string1 = "";
      String string2 = atmosphereConfig0.getInitParameter(string0, string1);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      String string3 = "~B";
      boolean boolean0 = true;
      boolean boolean1 = atmosphereConfig0.getInitParameter(string3, boolean0);
      assertTrue(boolean1);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(boolean1 == boolean0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = null;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-7);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)1;
      byteArray0[2] = byte2;
      boolean boolean2 = NetworkHandling.sendDataOnTcp(evoSuiteLocalAddress0, byteArray0);
      assertFalse(boolean2);
      assertArrayEquals(new byte[] {(byte) (-7), (byte)0, (byte)1}, byteArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(3, byteArray0.length);
      
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(atmosphereConfig_StartupHook0).toString();
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.startupHook(atmosphereConfig_StartupHook0);
      assertNotNull(atmosphereConfig1);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isSupportSession());
      
      atmosphereConfig1.setSessionTimeoutRemovalAllowed(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isSupportSession());
      
      atmosphereConfig1.sessionTimeoutRemovalAllowed = atmosphereConfig0.supportSession;
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isSupportSession());
      
      boolean boolean3 = false;
      atmosphereConfig0.setSupportSession(boolean3);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      atmosphereConfig0.setuseServletContextParameters(boolean3);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      atmosphereConfig0.setstartUpHook(atmosphereConfig1.startUpHook);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isSupportSession());
      
      List<AtmosphereConfig.StartupHook> list1 = atmosphereConfig0.getstartUpHook();
      assertNotNull(list1);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertTrue(list1.contains(atmosphereConfig_StartupHook0));
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig2 = atmosphereConfig0.shutdownHook(atmosphereConfig_ShutdownHook0);
      assertNotNull(atmosphereConfig2);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig2.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig2.useServletContextParameters);
      assertFalse(atmosphereConfig2.supportSession);
      assertFalse(atmosphereConfig2.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig0, atmosphereConfig2);
      assertSame(atmosphereConfig2, atmosphereConfig0);
      assertSame(atmosphereConfig2, atmosphereConfig1);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig2.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig2.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig2.getuseServletContextParameters());
      assertFalse(atmosphereConfig2.isSupportSession());
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      String string0 = "kS,Dvc[r";
      String string1 = atmosphereConfig0.getInitParameter(string0, string0);
      assertEquals("kS,Dvc[r", string1);
      assertNotNull(string1);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      AtmosphereFramework atmosphereFramework0 = atmosphereConfig0.framework();
      assertNull(atmosphereFramework0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      boolean boolean0 = true;
      int int0 = 2958;
      int int1 = atmosphereConfig0.getInitParameter(atmosphereFramework0.DEFAULT_ATMOSPHERE_CONFIG_PATH, int0);
      assertEquals(2958, int1);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertTrue(int1 == int0);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      atmosphereConfig0.setThrowExceptionOnCloned(boolean0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      boolean boolean1 = atmosphereConfig0.isSupportSession();
      assertFalse(boolean1);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(boolean1 == boolean0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      atmosphereConfig0.destroy();
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      List<AtmosphereHandlerConfig> list0 = atmosphereConfig0.getAtmosphereHandlerConfig();
      assertNotNull(list0);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string0 = "g!aBKI9!sQ%";
      String string1 = "";
      String string2 = atmosphereConfig0.getInitParameter(string0, string1);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      String string3 = "~B";
      boolean boolean0 = true;
      boolean boolean1 = atmosphereConfig0.getInitParameter(string3, boolean0);
      assertTrue(boolean1);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(boolean1 == boolean0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.startupHook(atmosphereConfig_StartupHook0);
      assertNotNull(atmosphereConfig1);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      
      atmosphereConfig1.setSessionTimeoutRemovalAllowed(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      
      atmosphereConfig1.sessionTimeoutRemovalAllowed = atmosphereConfig0.supportSession;
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      
      boolean boolean2 = false;
      atmosphereConfig0.setSupportSession(boolean2);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      int int0 = 0;
      int int1 = atmosphereConfig1.getInitParameter(string0, int0);
      assertEquals(0, int1);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertTrue(int1 == int0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      
      atmosphereConfig0.setuseServletContextParameters(boolean2);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      atmosphereConfig0.setstartUpHook(atmosphereConfig1.startUpHook);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      
      boolean boolean3 = atmosphereConfig0.isThrowExceptionOnCloned();
      assertFalse(boolean3);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      atmosphereConfig0.destroy();
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = true;
      boolean boolean1 = true;
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      Map<String, Object> map0 = null;
      boolean boolean2 = true;
      atmosphereConfig0.setuseServletContextParameters(boolean2);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertTrue(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      atmosphereConfig0.setproperties(map0);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertTrue(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      boolean boolean3 = atmosphereConfig0.getuseServletContextParameters();
      assertTrue(boolean3);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertTrue(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      Logger logger0 = atmosphereConfig0.getlogger();
      assertNotNull(logger0);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertTrue(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      String string0 = "";
      String string1 = "~B";
      boolean boolean0 = true;
      boolean boolean1 = atmosphereConfig0.getInitParameter(string1, boolean0);
      assertTrue(boolean1);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.startupHook(atmosphereConfig_StartupHook0);
      assertNotNull(atmosphereConfig1);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      
      atmosphereConfig1.setSessionTimeoutRemovalAllowed(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      
      boolean boolean2 = true;
      atmosphereConfig0.setSupportSession(boolean2);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertTrue(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertTrue(boolean2 == boolean1);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertTrue(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      int int0 = (-17);
      atmosphereConfig0.setuseServletContextParameters(boolean2);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertTrue(atmosphereConfig0.supportSession);
      assertTrue(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertTrue(boolean2 == boolean1);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertTrue(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      atmosphereConfig0.setstartUpHook(atmosphereConfig1.startUpHook);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertTrue(atmosphereConfig0.supportSession);
      assertTrue(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertTrue(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig1.useServletContextParameters);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertTrue(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertTrue(atmosphereConfig1.isSupportSession());
      assertTrue(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      
      boolean boolean3 = atmosphereConfig0.isThrowExceptionOnCloned();
      assertFalse(boolean3);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertTrue(atmosphereConfig0.supportSession);
      assertTrue(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertTrue(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      atmosphereConfig0.destroy();
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertTrue(atmosphereConfig0.supportSession);
      assertTrue(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertTrue(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      String string0 = "kS,Dvc[r";
      String string1 = null;
      String string2 = atmosphereConfig0.getInitParameter(string1, string1);
      assertNull(string2);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      AtmosphereFramework atmosphereFramework0 = atmosphereConfig0.framework();
      assertNull(atmosphereFramework0);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      boolean boolean0 = true;
      atmosphereConfig0.supportSession = boolean0;
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertTrue(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      boolean boolean1 = true;
      atmosphereConfig0.setThrowExceptionOnCloned(boolean1);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertTrue(atmosphereConfig0.supportSession);
      assertTrue(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      
      boolean boolean2 = atmosphereConfig0.isSupportSession();
      assertTrue(boolean2);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertTrue(atmosphereConfig0.supportSession);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      
      boolean boolean3 = atmosphereConfig0.supportSession;
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      List<AtmosphereConfig.ShutdownHook> list0 = atmosphereConfig0.getshutdownHooks();
      assertNotNull(list0);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertTrue(atmosphereConfig0.supportSession);
      assertTrue(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      List<AtmosphereHandlerConfig> list0 = atmosphereConfig0.getAtmosphereHandlerConfig();
      assertNotNull(list0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string0 = "g!aBKI9!sQ%";
      List<AtmosphereConfig.StartupHook> list1 = null;
      atmosphereConfig0.startUpHook = list1;
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      String string1 = "";
      String string2 = atmosphereConfig0.getInitParameter(string0, string1);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      String string3 = "~B";
      boolean boolean0 = true;
      boolean boolean1 = atmosphereConfig0.getInitParameter(string3, boolean0);
      assertTrue(boolean1);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(boolean1 == boolean0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        atmosphereConfig0.startupHook(atmosphereConfig_StartupHook0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      boolean boolean0 = true;
      atmosphereConfig0.useServletContextParameters = boolean0;
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.getuseServletContextParameters());
      
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.shutdownHook(atmosphereConfig_ShutdownHook0);
      assertNotNull(atmosphereConfig1);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertTrue(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.supportSession);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertTrue(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      
      atmosphereConfig1.destroy();
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertTrue(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.supportSession);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertTrue(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      
      atmosphereConfig1.setframework(atmosphereConfig0.framework);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertTrue(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.supportSession);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertTrue(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      
      String string0 = "r(mU2^(aP";
      boolean boolean1 = atmosphereConfig1.getInitParameter(string0, atmosphereConfig0.supportSession);
      assertFalse(boolean1);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertTrue(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.supportSession);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(boolean1 == boolean0);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertTrue(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSupportSession());
      
      // Undeclared exception!
      try { 
        atmosphereConfig0.getWebServerName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      
      boolean boolean0 = true;
      atmosphereConfig0.throwExceptionOnCloned = boolean0;
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = true;
      atmosphereConfig0.initComplete();
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      Stack<AtmosphereConfig.ShutdownHook> stack0 = new Stack<AtmosphereConfig.ShutdownHook>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      atmosphereConfig0.shutdownHooks = (List<AtmosphereConfig.ShutdownHook>) stack0;
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertTrue(atmosphereConfig0.shutdownHooks.isEmpty());
      assertEquals(0, atmosphereConfig0.shutdownHooks.size());
      
      boolean boolean3 = stack0.retainAll(atmosphereConfig0.shutdownHooks);
      assertFalse(boolean3);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("org.atmosphere.cpr.AtmosphereConfig", 12345);
      boolean boolean4 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      
      atmosphereConfig0.setshutdownHooks(stack0);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      atmosphereConfig0.sessionTimeoutRemovalAllowed = boolean2;
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      atmosphereConfig0.setSessionTimeoutRemovalAllowed(boolean0);
      assertTrue(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean0 == boolean4);
      assertFalse(boolean0 == boolean3);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      boolean boolean5 = false;
      atmosphereConfig0.supportSession = boolean5;
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      boolean boolean6 = stack0.add(atmosphereConfig_ShutdownHook0);
      assertTrue(boolean6);
      assertTrue(stack0.contains(atmosphereConfig_ShutdownHook0));
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean4);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      
      boolean boolean7 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean7);
      assertFalse(boolean7 == boolean3);
      assertTrue(boolean7 == boolean4);
      assertFalse(boolean7 == boolean5);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean2);
      
      String string0 = "org.atmosphere.cpr.AtmosphereConfig";
      String string1 = atmosphereConfig0.getInitParameter(string0);
      assertNull(string1);
      assertTrue(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      AtmosphereFramework atmosphereFramework0 = atmosphereConfig0.getframework();
      assertNull(atmosphereFramework0);
      assertTrue(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook1 = null;
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.shutdownHook(atmosphereConfig_ShutdownHook1);
      assertNotNull(atmosphereConfig1);
      assertTrue(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertTrue(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertTrue(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertTrue(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertTrue(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      
      // Undeclared exception!
      try { 
        atmosphereConfig0.uuidProvider();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      boolean boolean0 = true;
      atmosphereConfig0.throwExceptionOnCloned = boolean0;
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = true;
      atmosphereConfig0.initComplete();
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      Stack<AtmosphereConfig.ShutdownHook> stack0 = new Stack<AtmosphereConfig.ShutdownHook>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      atmosphereConfig0.shutdownHooks = (List<AtmosphereConfig.ShutdownHook>) stack0;
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, atmosphereConfig0.shutdownHooks.size());
      assertTrue(atmosphereConfig0.shutdownHooks.isEmpty());
      
      boolean boolean3 = stack0.retainAll(atmosphereConfig0.shutdownHooks);
      assertFalse(boolean3);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("org.atmosphere.cpr.AtmosphereConfig", 12345);
      boolean boolean4 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      
      atmosphereConfig0.setshutdownHooks(stack0);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      atmosphereConfig0.sessionTimeoutRemovalAllowed = boolean2;
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      atmosphereConfig0.setSessionTimeoutRemovalAllowed(boolean0);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertTrue(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(boolean0 == boolean4);
      assertFalse(boolean0 == boolean3);
      assertTrue(boolean0 == boolean1);
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      boolean boolean5 = false;
      atmosphereConfig0.supportSession = boolean5;
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      AtmosphereConfig atmosphereConfig1 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig1);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.equals((Object)atmosphereConfig0));
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isSupportSession());
      
      AtmosphereConfig atmosphereConfig2 = atmosphereConfig0.populate(atmosphereConfig1);
      assertNotNull(atmosphereConfig2);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig2.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig2.supportSession);
      assertFalse(atmosphereConfig2.throwExceptionOnCloned);
      assertFalse(atmosphereConfig2.useServletContextParameters);
      assertNotSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig0, atmosphereConfig2);
      assertNotSame(atmosphereConfig1, atmosphereConfig2);
      assertNotSame(atmosphereConfig1, atmosphereConfig0);
      assertNotSame(atmosphereConfig2, atmosphereConfig1);
      assertSame(atmosphereConfig2, atmosphereConfig0);
      assertFalse(atmosphereConfig0.equals((Object)atmosphereConfig1));
      assertFalse(atmosphereConfig1.equals((Object)atmosphereConfig0));
      assertFalse(atmosphereConfig2.equals((Object)atmosphereConfig1));
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig2.isSupportSession());
      assertFalse(atmosphereConfig2.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig2.getuseServletContextParameters());
      assertFalse(atmosphereConfig2.isThrowExceptionOnCloned());
      
      boolean boolean6 = stack0.add(atmosphereConfig_ShutdownHook0);
      assertTrue(boolean6);
      assertTrue(stack0.contains(atmosphereConfig_ShutdownHook0));
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean5);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      
      String string0 = "org.atmosphere.cpr.AtmosphereConfig";
      String string1 = atmosphereConfig0.getInitParameter(string0);
      assertNull(string1);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertNotSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig0, atmosphereConfig2);
      assertFalse(atmosphereConfig0.equals((Object)atmosphereConfig1));
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      // Undeclared exception!
      try { 
        atmosphereConfig0.uuidProvider();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      boolean boolean0 = true;
      atmosphereConfig0.throwExceptionOnCloned = boolean0;
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = true;
      atmosphereConfig0.initComplete();
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      Stack<AtmosphereConfig.ShutdownHook> stack0 = new Stack<AtmosphereConfig.ShutdownHook>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      atmosphereConfig0.shutdownHooks = (List<AtmosphereConfig.ShutdownHook>) stack0;
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(atmosphereConfig0.shutdownHooks.isEmpty());
      assertEquals(0, atmosphereConfig0.shutdownHooks.size());
      
      boolean boolean3 = atmosphereConfig0.isSessionTimeoutRemovalAllowed();
      assertFalse(boolean3);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("org.atmosphere.cpr.AtmosphereConfig", 12345);
      boolean boolean4 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      
      atmosphereConfig0.setshutdownHooks(stack0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      atmosphereConfig0.sessionTimeoutRemovalAllowed = boolean2;
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      atmosphereConfig0.setSessionTimeoutRemovalAllowed(boolean0);
      assertFalse(atmosphereConfig0.supportSession);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertTrue(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(boolean0 == boolean3);
      assertTrue(boolean0 == boolean4);
      assertTrue(boolean0 == boolean1);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      boolean boolean5 = false;
      atmosphereConfig0.supportSession = boolean5;
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      boolean boolean6 = stack0.add(atmosphereConfig_ShutdownHook0);
      assertTrue(boolean6);
      assertTrue(stack0.contains(atmosphereConfig_ShutdownHook0));
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean5);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      
      String string0 = "org.atmosphere.cpr.AtmosphereConfig";
      String string1 = atmosphereConfig0.getInitParameter(string0);
      assertNull(string1);
      assertFalse(atmosphereConfig0.supportSession);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertTrue(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      AtmosphereFramework atmosphereFramework0 = atmosphereConfig0.getframework();
      assertNull(atmosphereFramework0);
      assertFalse(atmosphereConfig0.supportSession);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertTrue(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      // Undeclared exception!
      try { 
        atmosphereConfig0.uuidProvider();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test74()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      List<AtmosphereHandlerConfig> list0 = atmosphereConfig0.getAtmosphereHandlerConfig();
      assertNotNull(list0);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string0 = "g!aBKI9!sQ%";
      String string1 = "";
      String string2 = atmosphereConfig0.getInitParameter(string0, string1);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      String string3 = "~B";
      boolean boolean0 = true;
      boolean boolean1 = atmosphereConfig0.getInitParameter(string3, boolean0);
      assertTrue(boolean1);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(boolean1 == boolean0);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      atmosphereConfig0.supportSession = boolean0;
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertTrue(atmosphereConfig0.isSupportSession());
      
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.startupHook(atmosphereConfig_StartupHook0);
      assertNotNull(atmosphereConfig1);
      assertTrue(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertTrue(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertTrue(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertTrue(atmosphereConfig1.isSupportSession());
      
      atmosphereConfig1.setSessionTimeoutRemovalAllowed(atmosphereConfig0.supportSession);
      assertTrue(atmosphereConfig0.supportSession);
      assertTrue(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertTrue(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertTrue(atmosphereConfig1.supportSession);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertTrue(atmosphereConfig1.isSupportSession());
      assertTrue(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      
      atmosphereConfig1.sessionTimeoutRemovalAllowed = atmosphereConfig0.supportSession;
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertTrue(atmosphereConfig1.isSupportSession());
      assertTrue(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      
      boolean boolean2 = false;
      atmosphereConfig0.setSupportSession(boolean2);
      assertTrue(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      int int0 = 0;
      int int1 = atmosphereConfig1.getInitParameter(string0, int0);
      assertEquals(0, int1);
      assertTrue(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig1.supportSession);
      assertTrue(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertTrue(int1 == int0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertTrue(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isSupportSession());
      
      atmosphereConfig0.setuseServletContextParameters(boolean2);
      assertTrue(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      atmosphereConfig0.setstartUpHook(atmosphereConfig1.startUpHook);
      assertTrue(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig1.supportSession);
      assertTrue(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertTrue(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isSupportSession());
      
      boolean boolean3 = atmosphereConfig0.isThrowExceptionOnCloned();
      assertFalse(boolean3);
      assertTrue(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      atmosphereConfig0.destroy();
      assertTrue(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      // Undeclared exception!
      try { 
        atmosphereConfig0.getServletConfig();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test75()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      boolean boolean0 = atmosphereConfig0.isSessionTimeoutRemovalAllowed();
      assertFalse(boolean0);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      MultiMap multiMap0 = new MultiMap();
      assertNotNull(multiMap0);
      assertTrue(multiMap0.isEmpty());
      assertEquals(0, multiMap0.size());
      
      atmosphereConfig0.properties = (Map<String, Object>) multiMap0;
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(multiMap0.isEmpty());
      assertEquals(0, multiMap0.size());
      assertEquals(0, atmosphereConfig0.properties.size());
      assertTrue(atmosphereConfig0.properties.isEmpty());
      
      DefaultAtmosphereResourceFactory defaultAtmosphereResourceFactory0 = new DefaultAtmosphereResourceFactory();
      assertNotNull(defaultAtmosphereResourceFactory0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      Object object1 = multiMap0.put(object0, integer0);
      assertNull(object1);
      assertEquals(1, multiMap0.size());
      assertFalse(multiMap0.isEmpty());
      
      String string0 = null;
      boolean boolean1 = false;
      boolean boolean2 = atmosphereConfig0.getInitParameter(string0, boolean1);
      assertFalse(boolean2);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      atmosphereConfig0.throwExceptionOnCloned = boolean0;
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      boolean boolean3 = false;
      atmosphereConfig0.setThrowExceptionOnCloned(boolean3);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      Map<String, Object> map0 = atmosphereConfig0.getproperties();
      assertNotNull(map0);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      
      atmosphereConfig0.setproperties(map0);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 11000)
  public void test76()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      List<AtmosphereHandlerConfig> list0 = atmosphereConfig0.getAtmosphereHandlerConfig();
      assertNotNull(list0);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      String string0 = "g!aBKI9!sQ%";
      String string1 = "";
      String string2 = atmosphereConfig0.getInitParameter(string0, string1);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      boolean boolean0 = true;
      atmosphereConfig0.setSessionTimeoutRemovalAllowed(boolean0);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertTrue(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      String string3 = "~B";
      boolean boolean1 = true;
      boolean boolean2 = atmosphereConfig0.getInitParameter(string3, boolean1);
      assertTrue(boolean2);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertTrue(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(atmosphereConfig_StartupHook0).toString();
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.startupHook(atmosphereConfig_StartupHook0);
      assertNotNull(atmosphereConfig1);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertTrue(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertTrue(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertTrue(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean3 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      atmosphereConfig1.setSessionTimeoutRemovalAllowed(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      
      atmosphereConfig1.sessionTimeoutRemovalAllowed = atmosphereConfig0.supportSession;
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      
      boolean boolean4 = false;
      atmosphereConfig0.setSupportSession(boolean4);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      int int0 = 0;
      int int1 = atmosphereConfig1.getInitParameter(string0, int0);
      assertEquals(0, int1);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertTrue(int1 == int0);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      
      atmosphereConfig0.setuseServletContextParameters(boolean4);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      List<AtmosphereConfig.StartupHook> list1 = atmosphereConfig0.getstartUpHook();
      assertNotNull(list1);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertTrue(list1.contains(atmosphereConfig_StartupHook0));
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      
      atmosphereConfig0.setstartUpHook(atmosphereConfig1.startUpHook);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      
      boolean boolean5 = atmosphereConfig0.isThrowExceptionOnCloned();
      assertFalse(boolean5);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      atmosphereConfig0.destroy();
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      // Undeclared exception!
      try { 
        atmosphereConfig0.getServletConfig();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test77()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook1 = null;
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.shutdownHook(atmosphereConfig_ShutdownHook1);
      assertNotNull(atmosphereConfig1);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSupportSession());
      
      atmosphereConfig1.setproperties(atmosphereConfig0.properties);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSupportSession());
      
      atmosphereConfig1.destroy();
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSupportSession());
      
      atmosphereConfig1.setframework(atmosphereConfig0.framework);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertSame(atmosphereConfig0, atmosphereConfig1);
      assertSame(atmosphereConfig1, atmosphereConfig0);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSupportSession());
      
      // Undeclared exception!
      try { 
        atmosphereConfig0.getWebServerName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test78()  throws Throwable  {
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      AtmosphereConfig atmosphereConfig1 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig1);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig1.equals((Object)atmosphereConfig0));
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      
      AtmosphereConfig atmosphereConfig2 = atmosphereConfig0.populate(atmosphereConfig1);
      assertNotNull(atmosphereConfig2);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig2.useServletContextParameters);
      assertFalse(atmosphereConfig2.supportSession);
      assertFalse(atmosphereConfig2.throwExceptionOnCloned);
      assertFalse(atmosphereConfig2.sessionTimeoutRemovalAllowed);
      assertSame(atmosphereConfig0, atmosphereConfig2);
      assertNotSame(atmosphereConfig0, atmosphereConfig1);
      assertNotSame(atmosphereConfig1, atmosphereConfig0);
      assertNotSame(atmosphereConfig1, atmosphereConfig2);
      assertNotSame(atmosphereConfig2, atmosphereConfig1);
      assertSame(atmosphereConfig2, atmosphereConfig0);
      assertFalse(atmosphereConfig0.equals((Object)atmosphereConfig1));
      assertFalse(atmosphereConfig1.equals((Object)atmosphereConfig0));
      assertFalse(atmosphereConfig2.equals((Object)atmosphereConfig1));
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig2.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig2.isSupportSession());
      assertFalse(atmosphereConfig2.getuseServletContextParameters());
      assertFalse(atmosphereConfig2.isThrowExceptionOnCloned());
      
      boolean boolean0 = true;
      atmosphereConfig2.setThrowExceptionOnCloned(boolean0);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig2.throwExceptionOnCloned);
      assertFalse(atmosphereConfig2.useServletContextParameters);
      assertFalse(atmosphereConfig2.supportSession);
      assertFalse(atmosphereConfig2.sessionTimeoutRemovalAllowed);
      assertSame(atmosphereConfig0, atmosphereConfig2);
      assertNotSame(atmosphereConfig0, atmosphereConfig1);
      assertNotSame(atmosphereConfig1, atmosphereConfig0);
      assertNotSame(atmosphereConfig1, atmosphereConfig2);
      assertNotSame(atmosphereConfig2, atmosphereConfig1);
      assertSame(atmosphereConfig2, atmosphereConfig0);
      assertFalse(atmosphereConfig0.equals((Object)atmosphereConfig1));
      assertFalse(atmosphereConfig1.equals((Object)atmosphereConfig0));
      assertFalse(atmosphereConfig1.equals((Object)atmosphereConfig2));
      assertFalse(atmosphereConfig2.equals((Object)atmosphereConfig1));
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig2.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig2.isSupportSession());
      assertFalse(atmosphereConfig2.getuseServletContextParameters());
      assertTrue(atmosphereConfig2.isThrowExceptionOnCloned());
      
      String string0 = "Q";
      atmosphereConfig2.framework = atmosphereConfig0.framework;
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig2.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig2.isSupportSession());
      assertFalse(atmosphereConfig2.getuseServletContextParameters());
      assertTrue(atmosphereConfig2.isThrowExceptionOnCloned());
      
      String string1 = atmosphereConfig2.getInitParameter(string0);
      assertNull(string1);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig2.throwExceptionOnCloned);
      assertFalse(atmosphereConfig2.useServletContextParameters);
      assertFalse(atmosphereConfig2.supportSession);
      assertFalse(atmosphereConfig2.sessionTimeoutRemovalAllowed);
      assertSame(atmosphereConfig0, atmosphereConfig2);
      assertNotSame(atmosphereConfig0, atmosphereConfig1);
      assertNotSame(atmosphereConfig1, atmosphereConfig0);
      assertNotSame(atmosphereConfig1, atmosphereConfig2);
      assertNotSame(atmosphereConfig2, atmosphereConfig1);
      assertSame(atmosphereConfig2, atmosphereConfig0);
      assertFalse(atmosphereConfig0.equals((Object)atmosphereConfig1));
      assertFalse(atmosphereConfig1.equals((Object)atmosphereConfig0));
      assertFalse(atmosphereConfig1.equals((Object)atmosphereConfig2));
      assertFalse(atmosphereConfig2.equals((Object)atmosphereConfig1));
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig2.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig2.isSupportSession());
      assertFalse(atmosphereConfig2.getuseServletContextParameters());
      assertTrue(atmosphereConfig2.isThrowExceptionOnCloned());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string1);
      assertFalse(boolean1);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.throwExceptionOnCloned);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig2.throwExceptionOnCloned);
      assertFalse(atmosphereConfig2.useServletContextParameters);
      assertFalse(atmosphereConfig2.supportSession);
      assertFalse(atmosphereConfig2.sessionTimeoutRemovalAllowed);
      assertSame(atmosphereConfig0, atmosphereConfig2);
      assertNotSame(atmosphereConfig0, atmosphereConfig1);
      assertNotSame(atmosphereConfig1, atmosphereConfig0);
      assertNotSame(atmosphereConfig1, atmosphereConfig2);
      assertNotSame(atmosphereConfig2, atmosphereConfig1);
      assertSame(atmosphereConfig2, atmosphereConfig0);
      assertFalse(atmosphereConfig0.equals((Object)atmosphereConfig1));
      assertFalse(atmosphereConfig1.equals((Object)atmosphereConfig0));
      assertFalse(atmosphereConfig1.equals((Object)atmosphereConfig2));
      assertFalse(atmosphereConfig2.equals((Object)atmosphereConfig1));
      assertFalse(boolean1 == boolean0);
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig2.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig2.isSupportSession());
      assertFalse(atmosphereConfig2.getuseServletContextParameters());
      assertTrue(atmosphereConfig2.isThrowExceptionOnCloned());
      
      atmosphereConfig0.destroy();
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertSame(atmosphereConfig0, atmosphereConfig2);
      assertNotSame(atmosphereConfig0, atmosphereConfig1);
      assertFalse(atmosphereConfig0.equals((Object)atmosphereConfig1));
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      
      atmosphereConfig1.sessionTimeoutRemovalAllowed = atmosphereConfig0.throwExceptionOnCloned;
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertTrue(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      
      AtmosphereConfig atmosphereConfig3 = atmosphereConfig1.populate(atmosphereConfig2);
      assertNotNull(atmosphereConfig3);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig1.supportSession);
      assertFalse(atmosphereConfig1.useServletContextParameters);
      assertFalse(atmosphereConfig1.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig1.throwExceptionOnCloned);
      assertTrue(atmosphereConfig2.throwExceptionOnCloned);
      assertFalse(atmosphereConfig2.useServletContextParameters);
      assertFalse(atmosphereConfig2.supportSession);
      assertFalse(atmosphereConfig2.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig3.supportSession);
      assertFalse(atmosphereConfig3.sessionTimeoutRemovalAllowed);
      assertTrue(atmosphereConfig3.throwExceptionOnCloned);
      assertFalse(atmosphereConfig3.useServletContextParameters);
      assertSame(atmosphereConfig0, atmosphereConfig2);
      assertNotSame(atmosphereConfig0, atmosphereConfig3);
      assertNotSame(atmosphereConfig0, atmosphereConfig1);
      assertNotSame(atmosphereConfig1, atmosphereConfig0);
      assertSame(atmosphereConfig1, atmosphereConfig3);
      assertNotSame(atmosphereConfig1, atmosphereConfig2);
      assertNotSame(atmosphereConfig2, atmosphereConfig1);
      assertNotSame(atmosphereConfig2, atmosphereConfig3);
      assertSame(atmosphereConfig2, atmosphereConfig0);
      assertSame(atmosphereConfig3, atmosphereConfig1);
      assertNotSame(atmosphereConfig3, atmosphereConfig2);
      assertNotSame(atmosphereConfig3, atmosphereConfig0);
      assertFalse(atmosphereConfig0.equals((Object)atmosphereConfig1));
      assertFalse(atmosphereConfig1.equals((Object)atmosphereConfig0));
      assertFalse(atmosphereConfig1.equals((Object)atmosphereConfig2));
      assertFalse(atmosphereConfig2.equals((Object)atmosphereConfig1));
      assertFalse(atmosphereConfig3.equals((Object)atmosphereConfig2));
      assertFalse(atmosphereConfig3.equals((Object)atmosphereConfig0));
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      assertTrue(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.isSupportSession());
      assertTrue(atmosphereConfig1.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig1.isSupportSession());
      assertFalse(atmosphereConfig1.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig1.getuseServletContextParameters());
      assertFalse(atmosphereConfig2.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig2.isSupportSession());
      assertFalse(atmosphereConfig2.getuseServletContextParameters());
      assertTrue(atmosphereConfig2.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig3.getuseServletContextParameters());
      assertTrue(atmosphereConfig3.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig3.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig3.isSupportSession());
      
      // Undeclared exception!
      try { 
        atmosphereConfig3.getServletContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test79()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = true;
      boolean boolean1 = false;
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig();
      assertNotNull(atmosphereConfig0);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      Map<String, Object> map0 = null;
      atmosphereConfig0.setproperties(map0);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      boolean boolean2 = atmosphereConfig0.getuseServletContextParameters();
      assertFalse(boolean2);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      boolean boolean3 = false;
      atmosphereConfig0.setSessionTimeoutRemovalAllowed(boolean3);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      Logger logger0 = atmosphereConfig0.getlogger();
      assertNotNull(logger0);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
      
      DefaultBroadcasterFactory defaultBroadcasterFactory0 = new DefaultBroadcasterFactory();
      assertNotNull(defaultBroadcasterFactory0);
      
      Map<String, Object> map1 = atmosphereConfig0.properties();
      assertNull(map1);
      assertFalse(atmosphereConfig0.useServletContextParameters);
      assertFalse(atmosphereConfig0.throwExceptionOnCloned);
      assertFalse(atmosphereConfig0.supportSession);
      assertFalse(atmosphereConfig0.sessionTimeoutRemovalAllowed);
      assertFalse(atmosphereConfig0.isSupportSession());
      assertFalse(atmosphereConfig0.isThrowExceptionOnCloned());
      assertFalse(atmosphereConfig0.isSessionTimeoutRemovalAllowed());
      assertFalse(atmosphereConfig0.getuseServletContextParameters());
  }
}
