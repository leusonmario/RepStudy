/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 10 03:18:27 GMT 2021
 */

package com.zaxxer.hikari;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import com.zaxxer.hikari.HikariPool;
import com.zaxxer.hikari.SerializedObjectSupporter;
import com.zaxxer.hikari.proxy.IHikariConnectionProxy;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HikariPool_ESTest extends HikariPool_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      HikariDataSource hikariDataSource0 = serializedObjectSupporter0.deserializeObjectHikariConfig6();
      assertNotNull(hikariDataSource0);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("HikariPool-11", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      
      SerializedObjectSupporter serializedObjectSupporter1 = new SerializedObjectSupporter();
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertNotNull(serializedObjectSupporter1);
      
      HikariDataSource hikariDataSource1 = serializedObjectSupporter1.deserializeObjectHikariConfig10();
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotNull(hikariDataSource1);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(0, hikariDataSource1.loginTimeout);
      assertFalse(hikariDataSource1.isShutdown);
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource1.getDataSourceClassName());
      assertEquals("HikariPool-18", hikariDataSource1.getPoolName());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals("VALUES 1", hikariDataSource1.getConnectionTestQuery());
      assertEquals("test", hikariDataSource1.getCatalog());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertFalse(hikariDataSource1.getisShutdown());
      assertEquals(1, hikariDataSource1.getMaximumPoolSize());
      assertEquals(1, hikariDataSource1.getMinimumPoolSize());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      
      hikariDataSource0.setDataSource(hikariDataSource1);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource1.loginTimeout);
      assertFalse(hikariDataSource1.isShutdown);
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("HikariPool-11", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource1.getDataSourceClassName());
      assertEquals("HikariPool-18", hikariDataSource1.getPoolName());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals("VALUES 1", hikariDataSource1.getConnectionTestQuery());
      assertEquals("test", hikariDataSource1.getCatalog());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertFalse(hikariDataSource1.getisShutdown());
      assertEquals(1, hikariDataSource1.getMaximumPoolSize());
      assertEquals(1, hikariDataSource1.getMinimumPoolSize());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      
      HikariPool hikariPool0 = new HikariPool(hikariDataSource0);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotNull(hikariPool0);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isReadOnly);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertEquals((-1), hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.shutdown);
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("HikariPool-11", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariPool0.getcatalog());
      assertFalse(hikariPool0.getdebug());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertFalse(hikariPool0.getshutdown());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertFalse(hikariPool0.getisReadOnly());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertEquals((-1), hikariPool0.gettransactionIsolation());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertEquals("HikariPool-11", hikariPool0.toString());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertTrue(hikariPool0.getisAutoCommit());
      
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(hikariDataSource0.isShutdown).when(iHikariConnectionProxy0).isValid(anyInt());
      int int0 = 3744;
      hikariPool0.settransactionIsolation(int0);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isReadOnly);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertEquals(3744, hikariPool0.transactionIsolation);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.shutdown);
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("HikariPool-11", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariPool0.getcatalog());
      assertFalse(hikariPool0.getdebug());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertFalse(hikariPool0.getshutdown());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertFalse(hikariPool0.getisReadOnly());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertEquals(3744, hikariPool0.gettransactionIsolation());
      assertEquals("HikariPool-11", hikariPool0.toString());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertTrue(hikariPool0.getisAutoCommit());
      
      boolean boolean0 = false;
      hikariPool0.setshutdown(boolean0);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isReadOnly);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertEquals(3744, hikariPool0.transactionIsolation);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.shutdown);
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("HikariPool-11", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariPool0.getcatalog());
      assertFalse(hikariPool0.getdebug());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertFalse(hikariPool0.getshutdown());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertFalse(hikariPool0.getisReadOnly());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertEquals(3744, hikariPool0.gettransactionIsolation());
      assertEquals("HikariPool-11", hikariPool0.toString());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertTrue(hikariPool0.getisAutoCommit());
      
      boolean boolean1 = hikariPool0.isConnectionAlive(iHikariConnectionProxy0, hikariDataSource1.loginTimeout);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource1.loginTimeout);
      assertFalse(hikariDataSource1.isShutdown);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isReadOnly);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertEquals(3744, hikariPool0.transactionIsolation);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.shutdown);
      assertTrue(boolean1);
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("HikariPool-11", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource1.getDataSourceClassName());
      assertEquals("HikariPool-18", hikariDataSource1.getPoolName());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals("VALUES 1", hikariDataSource1.getConnectionTestQuery());
      assertEquals("test", hikariDataSource1.getCatalog());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertFalse(hikariDataSource1.getisShutdown());
      assertEquals(1, hikariDataSource1.getMaximumPoolSize());
      assertEquals(1, hikariDataSource1.getMinimumPoolSize());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertNull(hikariPool0.getcatalog());
      assertFalse(hikariPool0.getdebug());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertFalse(hikariPool0.getshutdown());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertFalse(hikariPool0.getisReadOnly());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertEquals(3744, hikariPool0.gettransactionIsolation());
      assertEquals("HikariPool-11", hikariPool0.toString());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertTrue(hikariPool0.getisAutoCommit());
      
      hikariPool0.setshutdown(hikariPool0.isReadOnly);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isReadOnly);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertEquals(3744, hikariPool0.transactionIsolation);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.shutdown);
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("HikariPool-11", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariPool0.getcatalog());
      assertFalse(hikariPool0.getdebug());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertFalse(hikariPool0.getshutdown());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertFalse(hikariPool0.getisReadOnly());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertEquals(3744, hikariPool0.gettransactionIsolation());
      assertEquals("HikariPool-11", hikariPool0.toString());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertTrue(hikariPool0.getisAutoCommit());
      
      System.setCurrentTimeMillis(hikariPool0.leakDetectionThreshold);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isReadOnly);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertEquals(3744, hikariPool0.transactionIsolation);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.shutdown);
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("HikariPool-11", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariPool0.getcatalog());
      assertFalse(hikariPool0.getdebug());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertFalse(hikariPool0.getshutdown());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertFalse(hikariPool0.getisReadOnly());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertEquals(3744, hikariPool0.gettransactionIsolation());
      assertEquals("HikariPool-11", hikariPool0.toString());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertTrue(hikariPool0.getisAutoCommit());
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      HikariDataSource hikariDataSource0 = serializedObjectSupporter0.deserializeObjectHikariConfig15();
      assertNotNull(hikariDataSource0);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-26", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      
      HikariPool hikariPool0 = null;
      try {
        hikariPool0 = new HikariPool(hikariDataSource0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create datasource instance: com.zaxxer.hikari.mocks.StubDataSource
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNotNull(hikariConfig0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      HikariPool hikariPool0 = null;
      try {
        hikariPool0 = new HikariPool(hikariConfig0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      HikariDataSource hikariDataSource0 = serializedObjectSupporter0.deserializeObjectHikariConfig6();
      assertNotNull(hikariDataSource0);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("HikariPool-11", hikariDataSource0.getPoolName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      
      HikariPool hikariPool0 = null;
      try {
        hikariPool0 = new HikariPool(hikariDataSource0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create datasource instance: com.zaxxer.hikari.mocks.StubDataSource
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      HikariConfig hikariConfig0 = null;
      HikariPool hikariPool0 = null;
      try {
        hikariPool0 = new HikariPool(hikariConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      HikariDataSource hikariDataSource0 = serializedObjectSupporter0.deserializeObjectHikariConfig4();
      assertNotNull(hikariDataSource0);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertEquals(1, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("HikariPool-7", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.getisShutdown());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      
      String string0 = "gvck`";
      hikariDataSource0.setTransactionIsolation(string0);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertEquals(1, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("HikariPool-7", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.getisShutdown());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      
      HikariPool hikariPool0 = null;
      try {
        hikariPool0 = new HikariPool(hikariDataSource0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid transaction isolation value: gvck`
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      HikariDataSource hikariDataSource0 = serializedObjectSupporter0.deserializeObjectHikariConfig6();
      assertNotNull(hikariDataSource0);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("HikariPool-11", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      
      String string0 = "com.thoughtworks.xstream.core.BaseException";
      hikariDataSource0.setDataSourceClassName(string0);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("com.thoughtworks.xstream.core.BaseException", hikariDataSource0.getDataSourceClassName());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("HikariPool-11", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      
      HikariPool hikariPool0 = null;
      try {
        hikariPool0 = new HikariPool(hikariDataSource0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create datasource instance: com.thoughtworks.xstream.core.BaseException
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      HikariDataSource hikariDataSource0 = serializedObjectSupporter0.deserializeObjectHikariConfig8();
      assertNotNull(hikariDataSource0);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      
      SerializedObjectSupporter serializedObjectSupporter1 = new SerializedObjectSupporter();
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertNotNull(serializedObjectSupporter1);
      
      HikariDataSource hikariDataSource1 = serializedObjectSupporter1.deserializeObjectHikariConfig10();
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotNull(hikariDataSource1);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(0, hikariDataSource1.loginTimeout);
      assertFalse(hikariDataSource1.isShutdown);
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource1.isReadOnly());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource1.getDataSourceClassName());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals("HikariPool-18", hikariDataSource1.getPoolName());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertFalse(hikariDataSource1.getisShutdown());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals("VALUES 1", hikariDataSource1.getConnectionTestQuery());
      assertEquals("test", hikariDataSource1.getCatalog());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(1, hikariDataSource1.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(1, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertTrue(hikariDataSource1.isAutoCommit());
      
      hikariDataSource0.setDataSource(hikariDataSource1);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource1.loginTimeout);
      assertFalse(hikariDataSource1.isShutdown);
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource1.isReadOnly());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource1.getDataSourceClassName());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals("HikariPool-18", hikariDataSource1.getPoolName());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertFalse(hikariDataSource1.getisShutdown());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals("VALUES 1", hikariDataSource1.getConnectionTestQuery());
      assertEquals("test", hikariDataSource1.getCatalog());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(1, hikariDataSource1.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(1, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertTrue(hikariDataSource1.isAutoCommit());
      
      HikariPool hikariPool0 = new HikariPool(hikariDataSource0);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotNull(hikariPool0);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals((-1), hikariPool0.transactionIsolation);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariPool0.getisAutoCommit());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertFalse(hikariPool0.getisReadOnly());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertEquals((-1), hikariPool0.gettransactionIsolation());
      assertEquals("HikariPool-15", hikariPool0.toString());
      assertFalse(hikariPool0.getshutdown());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertFalse(hikariPool0.getdebug());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertNull(hikariPool0.getcatalog());
      
      boolean boolean0 = false;
      hikariPool0.setshutdown(boolean0);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals((-1), hikariPool0.transactionIsolation);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariPool0.getisAutoCommit());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertFalse(hikariPool0.getisReadOnly());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertEquals((-1), hikariPool0.gettransactionIsolation());
      assertEquals("HikariPool-15", hikariPool0.toString());
      assertFalse(hikariPool0.getshutdown());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertFalse(hikariPool0.getdebug());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertNull(hikariPool0.getcatalog());
      
      hikariPool0.addConnection();
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals((-1), hikariPool0.transactionIsolation);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariPool0.getisAutoCommit());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertFalse(hikariPool0.getisReadOnly());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertEquals((-1), hikariPool0.gettransactionIsolation());
      assertEquals("HikariPool-15", hikariPool0.toString());
      assertFalse(hikariPool0.getshutdown());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertFalse(hikariPool0.getdebug());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertNull(hikariPool0.getcatalog());
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      HikariDataSource hikariDataSource0 = serializedObjectSupporter0.deserializeObjectHikariConfig8();
      assertNotNull(hikariDataSource0);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getJdbcUrl());
      
      SerializedObjectSupporter serializedObjectSupporter1 = new SerializedObjectSupporter();
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertNotNull(serializedObjectSupporter1);
      
      hikariDataSource0.setDataSource(hikariDataSource0);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getJdbcUrl());
      
      HikariPool hikariPool0 = null;
      try {
        hikariPool0 = new HikariPool(hikariDataSource0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      HikariDataSource hikariDataSource0 = serializedObjectSupporter0.deserializeObjectHikariConfig8();
      assertNotNull(hikariDataSource0);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.getisShutdown());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      
      SerializedObjectSupporter serializedObjectSupporter1 = new SerializedObjectSupporter();
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertNotNull(serializedObjectSupporter1);
      
      HikariDataSource hikariDataSource1 = serializedObjectSupporter1.deserializeObjectHikariConfig10();
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotNull(hikariDataSource1);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource1.isShutdown);
      assertEquals(0, hikariDataSource1.loginTimeout);
      assertEquals("HikariPool-18", hikariDataSource1.getPoolName());
      assertFalse(hikariDataSource1.isReadOnly());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals("VALUES 1", hikariDataSource1.getConnectionTestQuery());
      assertEquals("test", hikariDataSource1.getCatalog());
      assertFalse(hikariDataSource1.getisShutdown());
      assertEquals(1, hikariDataSource1.getMaximumPoolSize());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertEquals(1, hikariDataSource1.getMinimumPoolSize());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource1.getDataSourceClassName());
      
      hikariDataSource0.setDataSource(hikariDataSource1);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource1.isShutdown);
      assertEquals(0, hikariDataSource1.loginTimeout);
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.getisShutdown());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-18", hikariDataSource1.getPoolName());
      assertFalse(hikariDataSource1.isReadOnly());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals("VALUES 1", hikariDataSource1.getConnectionTestQuery());
      assertEquals("test", hikariDataSource1.getCatalog());
      assertFalse(hikariDataSource1.getisShutdown());
      assertEquals(1, hikariDataSource1.getMaximumPoolSize());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertEquals(1, hikariDataSource1.getMinimumPoolSize());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource1.getDataSourceClassName());
      
      HikariPool hikariPool0 = new HikariPool(hikariDataSource0);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotNull(hikariPool0);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.shutdown);
      assertEquals((-1), hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.getisShutdown());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariPool0.getshutdown());
      assertFalse(hikariPool0.getdebug());
      assertEquals("HikariPool-15", hikariPool0.toString());
      assertNull(hikariPool0.getcatalog());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertTrue(hikariPool0.getisAutoCommit());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertFalse(hikariPool0.getisReadOnly());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertEquals((-1), hikariPool0.gettransactionIsolation());
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      hikariDataSource0.setDataSourceProperties(properties0);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.getisShutdown());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      boolean boolean0 = hikariPool0.getshutdown();
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.shutdown);
      assertEquals((-1), hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertFalse(boolean0);
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.getisShutdown());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariPool0.getshutdown());
      assertFalse(hikariPool0.getdebug());
      assertEquals("HikariPool-15", hikariPool0.toString());
      assertNull(hikariPool0.getcatalog());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertTrue(hikariPool0.getisAutoCommit());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertFalse(hikariPool0.getisReadOnly());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertEquals((-1), hikariPool0.gettransactionIsolation());
      
      String string0 = hikariPool0.getcatalog();
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNull(string0);
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.shutdown);
      assertEquals((-1), hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.getisShutdown());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariPool0.getshutdown());
      assertFalse(hikariPool0.getdebug());
      assertEquals("HikariPool-15", hikariPool0.toString());
      assertNull(hikariPool0.getcatalog());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertTrue(hikariPool0.getisAutoCommit());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertFalse(hikariPool0.getisReadOnly());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertEquals((-1), hikariPool0.gettransactionIsolation());
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      HikariDataSource hikariDataSource0 = serializedObjectSupporter0.deserializeObjectHikariConfig8();
      assertNotNull(hikariDataSource0);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.getisShutdown());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      
      SerializedObjectSupporter serializedObjectSupporter1 = new SerializedObjectSupporter();
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertNotNull(serializedObjectSupporter1);
      
      HikariDataSource hikariDataSource1 = serializedObjectSupporter1.deserializeObjectHikariConfig10();
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotNull(hikariDataSource1);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(0, hikariDataSource1.loginTimeout);
      assertFalse(hikariDataSource1.isShutdown);
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertEquals(1, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals("HikariPool-18", hikariDataSource1.getPoolName());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource1.getDataSourceClassName());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals("VALUES 1", hikariDataSource1.getConnectionTestQuery());
      assertEquals("test", hikariDataSource1.getCatalog());
      assertFalse(hikariDataSource1.isReadOnly());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(1, hikariDataSource1.getMaximumPoolSize());
      assertFalse(hikariDataSource1.getisShutdown());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      
      hikariDataSource0.setDataSource(hikariDataSource1);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertEquals(0, hikariDataSource1.loginTimeout);
      assertFalse(hikariDataSource1.isShutdown);
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.getisShutdown());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertEquals(1, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals("HikariPool-18", hikariDataSource1.getPoolName());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource1.getDataSourceClassName());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals("VALUES 1", hikariDataSource1.getConnectionTestQuery());
      assertEquals("test", hikariDataSource1.getCatalog());
      assertFalse(hikariDataSource1.isReadOnly());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(1, hikariDataSource1.getMaximumPoolSize());
      assertFalse(hikariDataSource1.getisShutdown());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      
      HikariPool hikariPool0 = new HikariPool(hikariDataSource0);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotNull(hikariPool0);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariPool0.debug);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertEquals((-1), hikariPool0.transactionIsolation);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.getisShutdown());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariPool0.getisReadOnly());
      assertTrue(hikariPool0.getisAutoCommit());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertEquals((-1), hikariPool0.gettransactionIsolation());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertNull(hikariPool0.getcatalog());
      assertFalse(hikariPool0.getshutdown());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertFalse(hikariPool0.getdebug());
      assertEquals("HikariPool-15", hikariPool0.toString());
      
      long long0 = hikariPool0.getleakDetectionThreshold();
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariPool0.debug);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertEquals((-1), hikariPool0.transactionIsolation);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0L, long0);
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.getisShutdown());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariPool0.getisReadOnly());
      assertTrue(hikariPool0.getisAutoCommit());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertEquals((-1), hikariPool0.gettransactionIsolation());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertNull(hikariPool0.getcatalog());
      assertFalse(hikariPool0.getshutdown());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertFalse(hikariPool0.getdebug());
      assertEquals("HikariPool-15", hikariPool0.toString());
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      HikariDataSource hikariDataSource0 = serializedObjectSupporter0.deserializeObjectHikariConfig6();
      assertNotNull(hikariDataSource0);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("HikariPool-11", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      
      SerializedObjectSupporter serializedObjectSupporter1 = new SerializedObjectSupporter();
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertNotNull(serializedObjectSupporter1);
      
      HikariDataSource hikariDataSource1 = serializedObjectSupporter1.deserializeObjectHikariConfig10();
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotNull(hikariDataSource1);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(0, hikariDataSource1.loginTimeout);
      assertFalse(hikariDataSource1.isShutdown);
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource1.getDataSourceClassName());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals("test", hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals("VALUES 1", hikariDataSource1.getConnectionTestQuery());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals("HikariPool-18", hikariDataSource1.getPoolName());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(1, hikariDataSource1.getMaximumPoolSize());
      assertFalse(hikariDataSource1.getisShutdown());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertEquals(1, hikariDataSource1.getMinimumPoolSize());
      
      hikariDataSource0.setDataSource(hikariDataSource1);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource1.loginTimeout);
      assertFalse(hikariDataSource1.isShutdown);
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("HikariPool-11", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource1.getDataSourceClassName());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals("test", hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals("VALUES 1", hikariDataSource1.getConnectionTestQuery());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals("HikariPool-18", hikariDataSource1.getPoolName());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(1, hikariDataSource1.getMaximumPoolSize());
      assertFalse(hikariDataSource1.getisShutdown());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertEquals(1, hikariDataSource1.getMinimumPoolSize());
      
      HikariPool hikariPool0 = new HikariPool(hikariDataSource0);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotNull(hikariPool0);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertEquals((-1), hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isReadOnly);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.debug);
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("HikariPool-11", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertFalse(hikariPool0.getshutdown());
      assertEquals("HikariPool-11", hikariPool0.toString());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertFalse(hikariPool0.getdebug());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertNull(hikariPool0.getcatalog());
      assertTrue(hikariPool0.getisAutoCommit());
      assertFalse(hikariPool0.getisReadOnly());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertEquals((-1), hikariPool0.gettransactionIsolation());
      
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iHikariConnectionProxy0).isValid(anyInt());
      boolean boolean0 = hikariPool0.isConnectionAlive(iHikariConnectionProxy0, hikariDataSource1.loginTimeout);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource1.loginTimeout);
      assertFalse(hikariDataSource1.isShutdown);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertEquals((-1), hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isReadOnly);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.debug);
      assertTrue(boolean0);
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("HikariPool-11", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource1.getDataSourceClassName());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals("test", hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals("VALUES 1", hikariDataSource1.getConnectionTestQuery());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals("HikariPool-18", hikariDataSource1.getPoolName());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(1, hikariDataSource1.getMaximumPoolSize());
      assertFalse(hikariDataSource1.getisShutdown());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertEquals(1, hikariDataSource1.getMinimumPoolSize());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertFalse(hikariPool0.getshutdown());
      assertEquals("HikariPool-11", hikariPool0.toString());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertFalse(hikariPool0.getdebug());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertNull(hikariPool0.getcatalog());
      assertTrue(hikariPool0.getisAutoCommit());
      assertFalse(hikariPool0.getisReadOnly());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertEquals((-1), hikariPool0.gettransactionIsolation());
      
      hikariPool0.setshutdown(hikariPool0.isReadOnly);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertEquals((-1), hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isReadOnly);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.debug);
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("HikariPool-11", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertFalse(hikariPool0.getshutdown());
      assertEquals("HikariPool-11", hikariPool0.toString());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertFalse(hikariPool0.getdebug());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertNull(hikariPool0.getcatalog());
      assertTrue(hikariPool0.getisAutoCommit());
      assertFalse(hikariPool0.getisReadOnly());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertEquals((-1), hikariPool0.gettransactionIsolation());
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      HikariDataSource hikariDataSource0 = serializedObjectSupporter0.deserializeObjectHikariConfig8();
      assertNotNull(hikariDataSource0);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      
      SerializedObjectSupporter serializedObjectSupporter1 = new SerializedObjectSupporter();
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertNotNull(serializedObjectSupporter1);
      
      HikariDataSource hikariDataSource1 = serializedObjectSupporter0.deserializeObjectHikariConfig17();
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotNull(hikariDataSource1);
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(0, hikariDataSource1.loginTimeout);
      assertFalse(hikariDataSource1.isShutdown);
      assertTrue(hikariDataSource1.isAutoCommit());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource1.isReadOnly());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals("HikariPool-30", hikariDataSource1.getPoolName());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals(1, hikariDataSource1.getMinimumPoolSize());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource1.getDataSourceClassName());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals("VALUES 1", hikariDataSource1.getConnectionTestQuery());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertFalse(hikariDataSource1.getisShutdown());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource1.getMaximumPoolSize());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getConnectionInitSql());
      
      hikariDataSource0.setDataSource(hikariDataSource1);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertEquals(0, hikariDataSource1.loginTimeout);
      assertFalse(hikariDataSource1.isShutdown);
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource1.isReadOnly());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals("HikariPool-30", hikariDataSource1.getPoolName());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals(1, hikariDataSource1.getMinimumPoolSize());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource1.getDataSourceClassName());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals("VALUES 1", hikariDataSource1.getConnectionTestQuery());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertFalse(hikariDataSource1.getisShutdown());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource1.getMaximumPoolSize());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getConnectionInitSql());
      
      HikariPool hikariPool0 = new HikariPool(hikariDataSource0);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotNull(hikariPool0);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.shutdown);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.debug);
      assertEquals((-1), hikariPool0.transactionIsolation);
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariPool0.gettransactionIsolation());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertFalse(hikariPool0.getshutdown());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertNull(hikariPool0.getcatalog());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertFalse(hikariPool0.getdebug());
      assertEquals("HikariPool-15", hikariPool0.toString());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertFalse(hikariPool0.getisReadOnly());
      assertTrue(hikariPool0.getisAutoCommit());
      
      boolean boolean0 = true;
      hikariPool0.setshutdown(boolean0);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertTrue(hikariPool0.shutdown);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.debug);
      assertEquals((-1), hikariPool0.transactionIsolation);
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariPool0.gettransactionIsolation());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertNull(hikariPool0.getcatalog());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertFalse(hikariPool0.getdebug());
      assertEquals("HikariPool-15", hikariPool0.toString());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertTrue(hikariPool0.getshutdown());
      assertFalse(hikariPool0.getisReadOnly());
      assertTrue(hikariPool0.getisAutoCommit());
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      HikariDataSource hikariDataSource0 = serializedObjectSupporter0.deserializeObjectHikariConfig8();
      assertNotNull(hikariDataSource0);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      
      SerializedObjectSupporter serializedObjectSupporter1 = new SerializedObjectSupporter();
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertNotNull(serializedObjectSupporter1);
      
      HikariDataSource hikariDataSource1 = serializedObjectSupporter1.deserializeObjectHikariConfig10();
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotNull(hikariDataSource1);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(0, hikariDataSource1.loginTimeout);
      assertFalse(hikariDataSource1.isShutdown);
      assertEquals(1, hikariDataSource1.getMaximumPoolSize());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertFalse(hikariDataSource1.getisShutdown());
      assertEquals(1, hikariDataSource1.getMinimumPoolSize());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource1.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals("HikariPool-18", hikariDataSource1.getPoolName());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals("VALUES 1", hikariDataSource1.getConnectionTestQuery());
      assertEquals("test", hikariDataSource1.getCatalog());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      
      hikariDataSource0.setDataSource(hikariDataSource1);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource1.loginTimeout);
      assertFalse(hikariDataSource1.isShutdown);
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertEquals(1, hikariDataSource1.getMaximumPoolSize());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertFalse(hikariDataSource1.getisShutdown());
      assertEquals(1, hikariDataSource1.getMinimumPoolSize());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource1.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals("HikariPool-18", hikariDataSource1.getPoolName());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals("VALUES 1", hikariDataSource1.getConnectionTestQuery());
      assertEquals("test", hikariDataSource1.getCatalog());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      
      HikariPool hikariPool0 = new HikariPool(hikariDataSource0);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotNull(hikariPool0);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.shutdown);
      assertEquals((-1), hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.debug);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariPool0.getisAutoCommit());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertFalse(hikariPool0.getisReadOnly());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertEquals((-1), hikariPool0.gettransactionIsolation());
      assertEquals("HikariPool-15", hikariPool0.toString());
      assertNull(hikariPool0.getcatalog());
      assertFalse(hikariPool0.getshutdown());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertFalse(hikariPool0.getdebug());
      
      int int0 = hikariPool0.getIdleConnections();
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.shutdown);
      assertEquals((-1), hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.debug);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0, int0);
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariPool0.getisAutoCommit());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertFalse(hikariPool0.getisReadOnly());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertEquals((-1), hikariPool0.gettransactionIsolation());
      assertEquals("HikariPool-15", hikariPool0.toString());
      assertNull(hikariPool0.getcatalog());
      assertFalse(hikariPool0.getshutdown());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertFalse(hikariPool0.getdebug());
      
      boolean boolean0 = false;
      hikariPool0.setshutdown(boolean0);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.shutdown);
      assertEquals((-1), hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.debug);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariPool0.getisAutoCommit());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertFalse(hikariPool0.getisReadOnly());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertEquals((-1), hikariPool0.gettransactionIsolation());
      assertEquals("HikariPool-15", hikariPool0.toString());
      assertNull(hikariPool0.getcatalog());
      assertFalse(hikariPool0.getshutdown());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertFalse(hikariPool0.getdebug());
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      HikariDataSource hikariDataSource0 = serializedObjectSupporter0.deserializeObjectHikariConfig8();
      assertNotNull(hikariDataSource0);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      
      SerializedObjectSupporter serializedObjectSupporter1 = new SerializedObjectSupporter();
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertNotNull(serializedObjectSupporter1);
      
      HikariDataSource hikariDataSource1 = serializedObjectSupporter1.deserializeObjectHikariConfig10();
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotNull(hikariDataSource1);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(0, hikariDataSource1.loginTimeout);
      assertFalse(hikariDataSource1.isShutdown);
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(1, hikariDataSource1.getMaximumPoolSize());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(1, hikariDataSource1.getMinimumPoolSize());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertFalse(hikariDataSource1.getisShutdown());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource1.getDataSourceClassName());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals("VALUES 1", hikariDataSource1.getConnectionTestQuery());
      assertEquals("test", hikariDataSource1.getCatalog());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals("HikariPool-18", hikariDataSource1.getPoolName());
      
      hikariDataSource0.setDataSource(hikariDataSource1);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertEquals(0, hikariDataSource1.loginTimeout);
      assertFalse(hikariDataSource1.isShutdown);
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(1, hikariDataSource1.getMaximumPoolSize());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(1, hikariDataSource1.getMinimumPoolSize());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertFalse(hikariDataSource1.getisShutdown());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource1.getDataSourceClassName());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals("VALUES 1", hikariDataSource1.getConnectionTestQuery());
      assertEquals("test", hikariDataSource1.getCatalog());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals("HikariPool-18", hikariDataSource1.getPoolName());
      
      HikariPool hikariPool0 = new HikariPool(hikariDataSource0);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotNull(hikariPool0);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariPool0.shutdown);
      assertEquals((-1), hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.isReadOnly);
      assertFalse(hikariPool0.debug);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariPool0.gettransactionIsolation());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertFalse(hikariPool0.getisReadOnly());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertNull(hikariPool0.getcatalog());
      assertFalse(hikariPool0.getshutdown());
      assertTrue(hikariPool0.getisAutoCommit());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertEquals("HikariPool-15", hikariPool0.toString());
      assertFalse(hikariPool0.getdebug());
      
      boolean boolean0 = false;
      hikariPool0.setshutdown(boolean0);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariPool0.shutdown);
      assertEquals((-1), hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.isReadOnly);
      assertFalse(hikariPool0.debug);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariPool0.gettransactionIsolation());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertFalse(hikariPool0.getisReadOnly());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertNull(hikariPool0.getcatalog());
      assertFalse(hikariPool0.getshutdown());
      assertTrue(hikariPool0.getisAutoCommit());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertEquals("HikariPool-15", hikariPool0.toString());
      assertFalse(hikariPool0.getdebug());
      
      int int0 = hikariPool0.getTotalConnections();
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariPool0.shutdown);
      assertEquals((-1), hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.isReadOnly);
      assertFalse(hikariPool0.debug);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0, int0);
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariPool0.gettransactionIsolation());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertFalse(hikariPool0.getisReadOnly());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertNull(hikariPool0.getcatalog());
      assertFalse(hikariPool0.getshutdown());
      assertTrue(hikariPool0.getisAutoCommit());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertEquals("HikariPool-15", hikariPool0.toString());
      assertFalse(hikariPool0.getdebug());
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      HikariDataSource hikariDataSource0 = serializedObjectSupporter0.deserializeObjectHikariConfig8();
      assertNotNull(hikariDataSource0);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      
      HikariDataSource hikariDataSource1 = serializedObjectSupporter0.deserializeObjectHikariConfig10();
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotNull(hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(0, hikariDataSource1.loginTimeout);
      assertFalse(hikariDataSource1.isShutdown);
      assertEquals("VALUES 1", hikariDataSource1.getConnectionTestQuery());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals("test", hikariDataSource1.getCatalog());
      assertEquals("HikariPool-18", hikariDataSource1.getPoolName());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource1.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals(1, hikariDataSource1.getMaximumPoolSize());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertFalse(hikariDataSource1.getisShutdown());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(1, hikariDataSource1.getMinimumPoolSize());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      
      hikariDataSource0.setDataSource(hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource1.loginTimeout);
      assertFalse(hikariDataSource1.isShutdown);
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals("VALUES 1", hikariDataSource1.getConnectionTestQuery());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals("test", hikariDataSource1.getCatalog());
      assertEquals("HikariPool-18", hikariDataSource1.getPoolName());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource1.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals(1, hikariDataSource1.getMaximumPoolSize());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertFalse(hikariDataSource1.getisShutdown());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(1, hikariDataSource1.getMinimumPoolSize());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      
      HikariPool hikariPool0 = new HikariPool(hikariDataSource0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotNull(hikariPool0);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.shutdown);
      assertEquals((-1), hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals("HikariPool-15", hikariPool0.toString());
      assertFalse(hikariPool0.getdebug());
      assertEquals((-1), hikariPool0.gettransactionIsolation());
      assertFalse(hikariPool0.getisReadOnly());
      assertTrue(hikariPool0.getisAutoCommit());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertNull(hikariPool0.getcatalog());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertFalse(hikariPool0.getshutdown());
      
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iHikariConnectionProxy0).isBrokenConnection();
      doReturn(false).when(iHikariConnectionProxy0).compareAndSetState(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        hikariPool0.releaseConnection(iHikariConnectionProxy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Value was returned to the bag that was not borrowed
         //
         verifyException("com.zaxxer.hikari.util.ConcurrentBag", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      HikariDataSource hikariDataSource0 = serializedObjectSupporter0.deserializeObjectHikariConfig8();
      assertNotNull(hikariDataSource0);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.getisShutdown());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      
      SerializedObjectSupporter serializedObjectSupporter1 = new SerializedObjectSupporter();
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertNotNull(serializedObjectSupporter1);
      
      HikariDataSource hikariDataSource1 = serializedObjectSupporter1.deserializeObjectHikariConfig10();
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotNull(hikariDataSource1);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(0, hikariDataSource1.loginTimeout);
      assertFalse(hikariDataSource1.isShutdown);
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals("HikariPool-18", hikariDataSource1.getPoolName());
      assertEquals(1, hikariDataSource1.getMaximumPoolSize());
      assertFalse(hikariDataSource1.getisShutdown());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals("VALUES 1", hikariDataSource1.getConnectionTestQuery());
      assertEquals("test", hikariDataSource1.getCatalog());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource1.getDataSourceClassName());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertEquals(1, hikariDataSource1.getMinimumPoolSize());
      
      hikariDataSource0.setDataSource(hikariDataSource1);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource1.loginTimeout);
      assertFalse(hikariDataSource1.isShutdown);
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.getisShutdown());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals("HikariPool-18", hikariDataSource1.getPoolName());
      assertEquals(1, hikariDataSource1.getMaximumPoolSize());
      assertFalse(hikariDataSource1.getisShutdown());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals("VALUES 1", hikariDataSource1.getConnectionTestQuery());
      assertEquals("test", hikariDataSource1.getCatalog());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource1.getDataSourceClassName());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertEquals(1, hikariDataSource1.getMinimumPoolSize());
      
      HikariPool hikariPool0 = new HikariPool(hikariDataSource0);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotNull(hikariPool0);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.debug);
      assertEquals((-1), hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.shutdown);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.getisShutdown());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariPool0.getisReadOnly());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertEquals((-1), hikariPool0.gettransactionIsolation());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertTrue(hikariPool0.getisAutoCommit());
      assertEquals("HikariPool-15", hikariPool0.toString());
      assertFalse(hikariPool0.getdebug());
      assertFalse(hikariPool0.getshutdown());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertNull(hikariPool0.getcatalog());
      
      boolean boolean0 = false;
      hikariPool0.setshutdown(boolean0);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.debug);
      assertEquals((-1), hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.shutdown);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.getisShutdown());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariPool0.getisReadOnly());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertEquals((-1), hikariPool0.gettransactionIsolation());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertTrue(hikariPool0.getisAutoCommit());
      assertEquals("HikariPool-15", hikariPool0.toString());
      assertFalse(hikariPool0.getdebug());
      assertFalse(hikariPool0.getshutdown());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertNull(hikariPool0.getcatalog());
      
      int int0 = hikariPool0.getActiveConnections();
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.debug);
      assertEquals((-1), hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.shutdown);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertEquals(0, int0);
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.getisShutdown());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariPool0.getisReadOnly());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertEquals((-1), hikariPool0.gettransactionIsolation());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertTrue(hikariPool0.getisAutoCommit());
      assertEquals("HikariPool-15", hikariPool0.toString());
      assertFalse(hikariPool0.getdebug());
      assertFalse(hikariPool0.getshutdown());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertNull(hikariPool0.getcatalog());
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      HikariDataSource hikariDataSource0 = serializedObjectSupporter0.deserializeObjectHikariConfig6();
      assertNotNull(hikariDataSource0);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.getisShutdown());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("HikariPool-11", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      
      SerializedObjectSupporter serializedObjectSupporter1 = new SerializedObjectSupporter();
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertNotNull(serializedObjectSupporter1);
      
      HikariDataSource hikariDataSource1 = serializedObjectSupporter1.deserializeObjectHikariConfig10();
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotNull(hikariDataSource1);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(0, hikariDataSource1.loginTimeout);
      assertFalse(hikariDataSource1.isShutdown);
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals("HikariPool-18", hikariDataSource1.getPoolName());
      assertEquals("VALUES 1", hikariDataSource1.getConnectionTestQuery());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals("test", hikariDataSource1.getCatalog());
      assertFalse(hikariDataSource1.getisShutdown());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals(1, hikariDataSource1.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource1.getDataSourceClassName());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals(1, hikariDataSource1.getMinimumPoolSize());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      
      hikariDataSource0.setDataSource(hikariDataSource1);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertEquals(0, hikariDataSource1.loginTimeout);
      assertFalse(hikariDataSource1.isShutdown);
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.getisShutdown());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("HikariPool-11", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals("HikariPool-18", hikariDataSource1.getPoolName());
      assertEquals("VALUES 1", hikariDataSource1.getConnectionTestQuery());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals("test", hikariDataSource1.getCatalog());
      assertFalse(hikariDataSource1.getisShutdown());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals(1, hikariDataSource1.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource1.getDataSourceClassName());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals(1, hikariDataSource1.getMinimumPoolSize());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      
      HikariPool hikariPool0 = new HikariPool(hikariDataSource0);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotNull(hikariPool0);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.shutdown);
      assertEquals((-1), hikariPool0.transactionIsolation);
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.getisShutdown());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("HikariPool-11", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariPool0.getdebug());
      assertNull(hikariPool0.getcatalog());
      assertEquals("HikariPool-11", hikariPool0.toString());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertFalse(hikariPool0.getshutdown());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertFalse(hikariPool0.getisReadOnly());
      assertEquals((-1), hikariPool0.gettransactionIsolation());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertTrue(hikariPool0.getisAutoCommit());
      
      boolean boolean0 = false;
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(iHikariConnectionProxy0).isValid(anyInt());
      boolean boolean1 = hikariPool0.isConnectionAlive(iHikariConnectionProxy0, hikariDataSource1.loginTimeout);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertEquals(0, hikariDataSource1.loginTimeout);
      assertFalse(hikariDataSource1.isShutdown);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.shutdown);
      assertEquals((-1), hikariPool0.transactionIsolation);
      assertTrue(boolean1);
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.getisShutdown());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("HikariPool-11", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals("HikariPool-18", hikariDataSource1.getPoolName());
      assertEquals("VALUES 1", hikariDataSource1.getConnectionTestQuery());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals("test", hikariDataSource1.getCatalog());
      assertFalse(hikariDataSource1.getisShutdown());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals(1, hikariDataSource1.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource1.getDataSourceClassName());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals(1, hikariDataSource1.getMinimumPoolSize());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertFalse(hikariPool0.getdebug());
      assertNull(hikariPool0.getcatalog());
      assertEquals("HikariPool-11", hikariPool0.toString());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertFalse(hikariPool0.getshutdown());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertFalse(hikariPool0.getisReadOnly());
      assertEquals((-1), hikariPool0.gettransactionIsolation());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertTrue(hikariPool0.getisAutoCommit());
      
      hikariPool0.setshutdown(hikariPool0.isReadOnly);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.shutdown);
      assertEquals((-1), hikariPool0.transactionIsolation);
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.getisShutdown());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("HikariPool-11", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariPool0.getdebug());
      assertNull(hikariPool0.getcatalog());
      assertEquals("HikariPool-11", hikariPool0.toString());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertFalse(hikariPool0.getshutdown());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertFalse(hikariPool0.getisReadOnly());
      assertEquals((-1), hikariPool0.gettransactionIsolation());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertTrue(hikariPool0.getisAutoCommit());
      
      HikariDataSource hikariDataSource2 = (HikariDataSource)hikariPool0.getdataSource();
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertNotNull(hikariDataSource2);
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertSame(hikariDataSource2, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.shutdown);
      assertEquals((-1), hikariPool0.transactionIsolation);
      assertFalse(hikariDataSource2.isShutdown);
      assertEquals(0, hikariDataSource2.loginTimeout);
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.getisShutdown());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("HikariPool-11", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariPool0.getdebug());
      assertNull(hikariPool0.getcatalog());
      assertEquals("HikariPool-11", hikariPool0.toString());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertFalse(hikariPool0.getshutdown());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertFalse(hikariPool0.getisReadOnly());
      assertEquals((-1), hikariPool0.gettransactionIsolation());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertTrue(hikariPool0.getisAutoCommit());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertNull(hikariDataSource2.getJdbcUrl());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource2.getDataSourceClassName());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertEquals(1, hikariDataSource2.getMinimumPoolSize());
      assertEquals("VALUES 1", hikariDataSource2.getConnectionTestQuery());
      assertEquals(750L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals("test", hikariDataSource2.getCatalog());
      assertEquals(1, hikariDataSource2.getMaximumPoolSize());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource2.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertFalse(hikariDataSource2.getisShutdown());
      assertFalse(hikariDataSource2.isReadOnly());
      assertEquals("HikariPool-18", hikariDataSource2.getPoolName());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertFalse(hikariDataSource2.isIsolateInternalQueries());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      HikariDataSource hikariDataSource0 = serializedObjectSupporter0.deserializeObjectHikariConfig1();
      assertNotNull(hikariDataSource0);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(1, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      
      SerializedObjectSupporter serializedObjectSupporter1 = new SerializedObjectSupporter();
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertNotNull(serializedObjectSupporter1);
      
      HikariDataSource hikariDataSource1 = serializedObjectSupporter1.deserializeObjectHikariConfig10();
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotNull(hikariDataSource1);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(0, hikariDataSource1.loginTimeout);
      assertFalse(hikariDataSource1.isShutdown);
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertFalse(hikariDataSource1.getisShutdown());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(1, hikariDataSource1.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals("HikariPool-18", hikariDataSource1.getPoolName());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals("VALUES 1", hikariDataSource1.getConnectionTestQuery());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals("test", hikariDataSource1.getCatalog());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(1, hikariDataSource1.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource1.getDataSourceClassName());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertNull(hikariDataSource1.getJdbcUrl());
      
      hikariDataSource0.setDataSource(hikariDataSource1);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource1.loginTimeout);
      assertFalse(hikariDataSource1.isShutdown);
      assertEquals(1, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertFalse(hikariDataSource1.getisShutdown());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(1, hikariDataSource1.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals("HikariPool-18", hikariDataSource1.getPoolName());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals("VALUES 1", hikariDataSource1.getConnectionTestQuery());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals("test", hikariDataSource1.getCatalog());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(1, hikariDataSource1.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource1.getDataSourceClassName());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertNull(hikariDataSource1.getJdbcUrl());
      
      HikariPool hikariPool0 = new HikariPool(hikariDataSource0);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotNull(hikariPool0);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.shutdown);
      assertEquals((-1), hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.isReadOnly);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertEquals(1, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertFalse(hikariPool0.getisReadOnly());
      assertTrue(hikariPool0.getisAutoCommit());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertFalse(hikariPool0.getdebug());
      assertFalse(hikariPool0.getshutdown());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertNull(hikariPool0.getcatalog());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertEquals((-1), hikariPool0.gettransactionIsolation());
      
      boolean boolean0 = false;
      hikariPool0.setshutdown(boolean0);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.shutdown);
      assertEquals((-1), hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.isReadOnly);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertEquals(1, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertFalse(hikariPool0.getisReadOnly());
      assertTrue(hikariPool0.getisAutoCommit());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertFalse(hikariPool0.getdebug());
      assertFalse(hikariPool0.getshutdown());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertNull(hikariPool0.getcatalog());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertEquals((-1), hikariPool0.gettransactionIsolation());
      
      int int0 = hikariPool0.getActiveConnections();
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.shutdown);
      assertEquals((-1), hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.isReadOnly);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertEquals(0, int0);
      assertEquals(1, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertFalse(hikariPool0.getisReadOnly());
      assertTrue(hikariPool0.getisAutoCommit());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertFalse(hikariPool0.getdebug());
      assertFalse(hikariPool0.getshutdown());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertNull(hikariPool0.getcatalog());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertEquals((-1), hikariPool0.gettransactionIsolation());
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      HikariDataSource hikariDataSource0 = serializedObjectSupporter0.deserializeObjectHikariConfig8();
      assertNotNull(hikariDataSource0);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      
      long long0 = (-1056L);
      hikariDataSource0.setLeakDetectionThreshold(long0);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1056L), hikariDataSource0.getLeakDetectionThreshold());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      
      SerializedObjectSupporter serializedObjectSupporter1 = new SerializedObjectSupporter();
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertNotNull(serializedObjectSupporter1);
      
      HikariDataSource hikariDataSource1 = serializedObjectSupporter1.deserializeObjectHikariConfig10();
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotNull(hikariDataSource1);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource1.isShutdown);
      assertEquals(0, hikariDataSource1.loginTimeout);
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource1.getDataSourceClassName());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(1, hikariDataSource1.getMaximumPoolSize());
      assertEquals(1, hikariDataSource1.getMinimumPoolSize());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertFalse(hikariDataSource1.getisShutdown());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals("VALUES 1", hikariDataSource1.getConnectionTestQuery());
      assertEquals("test", hikariDataSource1.getCatalog());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals("HikariPool-18", hikariDataSource1.getPoolName());
      
      hikariDataSource0.setDataSource(hikariDataSource1);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource1.isShutdown);
      assertEquals(0, hikariDataSource1.loginTimeout);
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1056L), hikariDataSource0.getLeakDetectionThreshold());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource1.getDataSourceClassName());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(1, hikariDataSource1.getMaximumPoolSize());
      assertEquals(1, hikariDataSource1.getMinimumPoolSize());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertFalse(hikariDataSource1.getisShutdown());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals("VALUES 1", hikariDataSource1.getConnectionTestQuery());
      assertEquals("test", hikariDataSource1.getCatalog());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals("HikariPool-18", hikariDataSource1.getPoolName());
      
      HikariPool hikariPool0 = new HikariPool(hikariDataSource0);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotNull(hikariPool0);
      assertFalse(hikariDataSource0.isShutdown);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isReadOnly);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals((-1), hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals("HikariPool-15", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals((-1), hikariPool0.gettransactionIsolation());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertFalse(hikariPool0.getisReadOnly());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertEquals("HikariPool-15", hikariPool0.toString());
      assertNull(hikariPool0.getcatalog());
      assertFalse(hikariPool0.getdebug());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertFalse(hikariPool0.getshutdown());
      assertTrue(hikariPool0.getisAutoCommit());
      
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(iHikariConnectionProxy0).compareAndSetState(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        hikariPool0.closeConnection(iHikariConnectionProxy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to remove an object from the bag that was not borrowed or reserved
         //
         verifyException("com.zaxxer.hikari.util.ConcurrentBag", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      HikariDataSource hikariDataSource0 = serializedObjectSupporter0.deserializeObjectHikariConfig6();
      assertNotNull(hikariDataSource0);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("HikariPool-11", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      
      SerializedObjectSupporter serializedObjectSupporter1 = new SerializedObjectSupporter();
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertNotNull(serializedObjectSupporter1);
      
      HikariDataSource hikariDataSource1 = serializedObjectSupporter1.deserializeObjectHikariConfig10();
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotNull(hikariDataSource1);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource1.isShutdown);
      assertEquals(0, hikariDataSource1.loginTimeout);
      assertEquals(1, hikariDataSource1.getMinimumPoolSize());
      assertEquals(1, hikariDataSource1.getMaximumPoolSize());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource1.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals("HikariPool-18", hikariDataSource1.getPoolName());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals("VALUES 1", hikariDataSource1.getConnectionTestQuery());
      assertFalse(hikariDataSource1.getisShutdown());
      assertEquals("test", hikariDataSource1.getCatalog());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      
      hikariDataSource0.setDataSource(hikariDataSource1);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertFalse(hikariDataSource1.isShutdown);
      assertEquals(0, hikariDataSource1.loginTimeout);
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("HikariPool-11", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertEquals(1, hikariDataSource1.getMinimumPoolSize());
      assertEquals(1, hikariDataSource1.getMaximumPoolSize());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource1.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals("HikariPool-18", hikariDataSource1.getPoolName());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals("VALUES 1", hikariDataSource1.getConnectionTestQuery());
      assertFalse(hikariDataSource1.getisShutdown());
      assertEquals("test", hikariDataSource1.getCatalog());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      
      HikariPool hikariPool0 = new HikariPool(hikariDataSource0);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotNull(hikariPool0);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.debug);
      assertEquals((-1), hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.shutdown);
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("HikariPool-11", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariPool0.getcatalog());
      assertFalse(hikariPool0.getdebug());
      assertEquals("HikariPool-11", hikariPool0.toString());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertFalse(hikariPool0.getshutdown());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertFalse(hikariPool0.getisReadOnly());
      assertEquals((-1), hikariPool0.gettransactionIsolation());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertTrue(hikariPool0.getisAutoCommit());
      
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(hikariDataSource0.isShutdown).when(iHikariConnectionProxy0).isValid(anyInt());
      int int0 = 3744;
      hikariPool0.settransactionIsolation(int0);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.shutdown);
      assertEquals(3744, hikariPool0.transactionIsolation);
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("HikariPool-11", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariPool0.getcatalog());
      assertFalse(hikariPool0.getdebug());
      assertEquals("HikariPool-11", hikariPool0.toString());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertFalse(hikariPool0.getshutdown());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertEquals(3744, hikariPool0.gettransactionIsolation());
      assertFalse(hikariPool0.getisReadOnly());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertTrue(hikariPool0.getisAutoCommit());
      
      boolean boolean0 = false;
      hikariPool0.setshutdown(boolean0);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.shutdown);
      assertEquals(3744, hikariPool0.transactionIsolation);
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("HikariPool-11", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariPool0.getcatalog());
      assertFalse(hikariPool0.getdebug());
      assertEquals("HikariPool-11", hikariPool0.toString());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertFalse(hikariPool0.getshutdown());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertEquals(3744, hikariPool0.gettransactionIsolation());
      assertFalse(hikariPool0.getisReadOnly());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertTrue(hikariPool0.getisAutoCommit());
      
      boolean boolean1 = hikariPool0.isConnectionAlive(iHikariConnectionProxy0, hikariDataSource1.loginTimeout);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertFalse(hikariDataSource1.isShutdown);
      assertEquals(0, hikariDataSource1.loginTimeout);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.shutdown);
      assertEquals(3744, hikariPool0.transactionIsolation);
      assertTrue(boolean1);
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("HikariPool-11", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertEquals(1, hikariDataSource1.getMinimumPoolSize());
      assertEquals(1, hikariDataSource1.getMaximumPoolSize());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource1.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals("HikariPool-18", hikariDataSource1.getPoolName());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals("VALUES 1", hikariDataSource1.getConnectionTestQuery());
      assertFalse(hikariDataSource1.getisShutdown());
      assertEquals("test", hikariDataSource1.getCatalog());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertNull(hikariPool0.getcatalog());
      assertFalse(hikariPool0.getdebug());
      assertEquals("HikariPool-11", hikariPool0.toString());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertFalse(hikariPool0.getshutdown());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertEquals(3744, hikariPool0.gettransactionIsolation());
      assertFalse(hikariPool0.getisReadOnly());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertTrue(hikariPool0.getisAutoCommit());
      
      hikariPool0.setshutdown(hikariPool0.isReadOnly);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertEquals(0, hikariDataSource0.loginTimeout);
      assertFalse(hikariDataSource0.isShutdown);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertTrue(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.shutdown);
      assertEquals(3744, hikariPool0.transactionIsolation);
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("HikariPool-11", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(2, hikariDataSource0.getMaximumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("com.zaxxer.hikari.mocks.StubDataSource", hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.getisShutdown());
      assertEquals("VALUES 1", hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariPool0.getcatalog());
      assertFalse(hikariPool0.getdebug());
      assertEquals("HikariPool-11", hikariPool0.toString());
      assertFalse(hikariPool0.getisRegisteredMbeans());
      assertEquals(0L, hikariPool0.getleakDetectionThreshold());
      assertFalse(hikariPool0.getshutdown());
      assertFalse(hikariPool0.getisIsolateInternalQueries());
      assertTrue(hikariPool0.getjdbc4ConnectionTest());
      assertEquals(3744, hikariPool0.gettransactionIsolation());
      assertFalse(hikariPool0.getisReadOnly());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertTrue(hikariPool0.getisAutoCommit());
      
      long long0 = 1000L;
      System.setCurrentTimeMillis(long0);
  }
}
