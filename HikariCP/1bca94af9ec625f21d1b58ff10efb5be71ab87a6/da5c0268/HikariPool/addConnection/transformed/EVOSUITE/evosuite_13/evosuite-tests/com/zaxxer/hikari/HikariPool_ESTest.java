/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 07 04:27:12 GMT 2021
 */

package com.zaxxer.hikari;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import com.zaxxer.hikari.HikariPool;
import com.zaxxer.hikari.IConnectionCustomizer;
import com.zaxxer.hikari.proxy.IHikariConnectionProxy;
import com.zaxxer.hikari.util.ConcurrentBag;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Date;
import java.util.Properties;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.IntBinaryOperator;
import java.util.function.IntUnaryOperator;
import javax.sql.DataSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockTimer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HikariPool_ESTest extends HikariPool_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      
      boolean boolean0 = true;
      hikariPool0.isReadOnly = boolean0;
      // Undeclared exception!
      try { 
        hikariPool0.shutdown();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.debug);
      assertEquals(0, hikariPool0.transactionIsolation);
      
      long long0 = 235L;
      hikariPool0.configuration = hikariPool0.configuration;
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNotNull(hikariDataSource0);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      
      hikariPool0.configuration = (HikariConfig) hikariDataSource0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(750L, hikariPool0.configuration.getAcquireRetryDelay());
      assertEquals((-1), hikariPool0.configuration.getTransactionIsolation());
      assertEquals(0L, hikariPool0.configuration.getLeakDetectionThreshold());
      assertNull(hikariPool0.configuration.getJdbcUrl());
      assertFalse(hikariPool0.configuration.isInitializationFailFast());
      assertFalse(hikariPool0.configuration.isRegisterMbeans());
      assertTrue(hikariPool0.configuration.isAutoCommit());
      assertTrue(hikariPool0.configuration.isJdbc4ConnectionTest());
      assertNull(hikariPool0.configuration.getCatalog());
      assertNull(hikariPool0.configuration.getConnectionInitSql());
      assertEquals(1, hikariPool0.configuration.getAcquireIncrement());
      assertEquals(60, hikariPool0.configuration.getMaximumPoolSize());
      assertNull(hikariPool0.configuration.getDataSourceClassName());
      assertFalse(hikariPool0.configuration.isReadOnly());
      assertEquals(10, hikariPool0.configuration.getMinimumPoolSize());
      assertEquals(5000L, hikariPool0.configuration.getConnectionTimeout());
      assertNull(hikariPool0.configuration.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariPool0.configuration.getPoolName());
      assertFalse(hikariPool0.configuration.isIsolateInternalQueries());
      assertNull(hikariPool0.configuration.getConnectionTestQuery());
      assertEquals(1800000L, hikariPool0.configuration.getMaxLifetime());
      assertEquals(3, hikariPool0.configuration.getAcquireRetries());
      assertEquals(600000L, hikariPool0.configuration.getIdleTimeout());
      
      String string0 = "kE";
      hikariPool0.configuration.poolName = string0;
      assertEquals("kE", hikariPool0.toString());
      
      // Undeclared exception!
      try { 
        hikariPool0.bagIsEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isReadOnly);
      assertFalse(hikariPool0.debug);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = hikariPool0.shutdown;
      assertFalse(boolean0);
      
      HikariPool.HouseKeeper hikariPool_HouseKeeper0 = hikariPool0.new HouseKeeper();
      assertEquals(0L, hikariPool_HouseKeeper0.scheduledExecutionTime());
      assertNotNull(hikariPool_HouseKeeper0);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isReadOnly);
      assertFalse(hikariPool0.debug);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      
      boolean boolean1 = hikariPool_HouseKeeper0.cancel();
      assertEquals(0L, hikariPool_HouseKeeper0.scheduledExecutionTime());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isReadOnly);
      assertFalse(hikariPool0.debug);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      
      // Undeclared exception!
      try { 
        hikariPool_HouseKeeper0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool$HouseKeeper", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.debug);
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(statement0).executeQuery(anyString());
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(iHikariConnectionProxy0).createStatement();
      long long0 = 243L;
      hikariPool0.configuration = hikariPool0.configuration;
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNotNull(hikariDataSource0);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      
      hikariPool0.configuration = (HikariConfig) hikariDataSource0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(10, hikariPool0.configuration.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariPool0.configuration.getPoolName());
      assertFalse(hikariPool0.configuration.isReadOnly());
      assertEquals(5000L, hikariPool0.configuration.getConnectionTimeout());
      assertFalse(hikariPool0.configuration.isInitializationFailFast());
      assertNull(hikariPool0.configuration.getConnectionTestQuery());
      assertEquals(600000L, hikariPool0.configuration.getIdleTimeout());
      assertFalse(hikariPool0.configuration.isIsolateInternalQueries());
      assertNull(hikariPool0.configuration.getDataSourceClassName());
      assertEquals(0L, hikariPool0.configuration.getLeakDetectionThreshold());
      assertEquals(3, hikariPool0.configuration.getAcquireRetries());
      assertEquals(1, hikariPool0.configuration.getAcquireIncrement());
      assertEquals(1800000L, hikariPool0.configuration.getMaxLifetime());
      assertTrue(hikariPool0.configuration.isJdbc4ConnectionTest());
      assertNull(hikariPool0.configuration.getJdbcUrl());
      assertEquals((-1), hikariPool0.configuration.getTransactionIsolation());
      assertNull(hikariPool0.configuration.getConnectionCustomizerClassName());
      assertFalse(hikariPool0.configuration.isRegisterMbeans());
      assertTrue(hikariPool0.configuration.isAutoCommit());
      assertEquals(60, hikariPool0.configuration.getMaximumPoolSize());
      assertNull(hikariPool0.configuration.getConnectionInitSql());
      assertNull(hikariPool0.configuration.getCatalog());
      assertEquals(750L, hikariPool0.configuration.getAcquireRetryDelay());
      
      hikariPool0.isIsolateInternalQueries = hikariDataSource0.isJdbc4connectionTest;
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isAutoCommit());
      
      HikariConfig.poolNumber = hikariDataSource0.transactionIsolation;
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isAutoCommit());
      
      String string0 = "kE";
      hikariPool0.configuration.connectionTestQuery = string0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      boolean boolean0 = hikariPool0.isConnectionAlive(iHikariConnectionProxy0, long0);
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertTrue(boolean0);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.debug);
      assertTrue(hikariPool0.isIsolateInternalQueries);
      
      // Undeclared exception!
      try { 
        hikariPool0.addConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      
      // Undeclared exception!
      try { 
        hikariPool0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0, hikariPool0.transactionIsolation);
      
      // Undeclared exception!
      try { 
        hikariPool0.getConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.debug);
      
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(iHikariConnectionProxy0).createStatement();
      long long0 = 1000L;
      // Undeclared exception!
      try { 
        hikariPool0.isConnectionAlive(iHikariConnectionProxy0, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNotNull(hikariConfig0);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = null;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = true;
      hikariPool0.shutdown = boolean1;
      ConcurrentBag<IHikariConnectionProxy> concurrentBag0 = new ConcurrentBag<IHikariConnectionProxy>();
      assertNotNull(concurrentBag0);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      
      hikariPool0.idleConnectionBag = concurrentBag0;
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      concurrentBag0.add(iHikariConnectionProxy0);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean2 = FileSystemHandling.createFolder(evoSuiteFile1);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      concurrentBag0.addBagStateListener(hikariPool0);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertTrue(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      
      IHikariConnectionProxy iHikariConnectionProxy1 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iHikariConnectionProxy1).isBrokenConnection();
      doReturn(false, false).when(iHikariConnectionProxy1).compareAndSetState(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        hikariPool0.releaseConnection(iHikariConnectionProxy1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to remove an object from the bag that was not borrowed or reserved
         //
         verifyException("com.zaxxer.hikari.util.ConcurrentBag", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = null;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = true;
      hikariPool0.shutdown = boolean1;
      ConcurrentBag<IHikariConnectionProxy> concurrentBag0 = new ConcurrentBag<IHikariConnectionProxy>();
      assertNotNull(concurrentBag0);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      
      hikariPool0.idleConnectionBag = concurrentBag0;
      int int0 = 2146601724;
      int int1 = 3514;
      boolean boolean2 = true;
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(boolean2, hikariPool0.isAutoCommit, false).when(iHikariConnectionProxy0).compareAndSetState(anyInt() , anyInt());
      doReturn(int0, int1, hikariPool0.idleConnectionBag.STATE_NOT_IN_USE).when(iHikariConnectionProxy0).getState();
      concurrentBag0.add(iHikariConnectionProxy0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(boolean2 == boolean0);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertTrue(hikariPool0.shutdown);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean3 = FileSystemHandling.createFolder(evoSuiteFile1);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      concurrentBag0.addBagStateListener(hikariPool0);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertTrue(hikariPool0.shutdown);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      
      boolean boolean4 = true;
      hikariPool0.leakDetectionThreshold = (long) concurrentBag0.STATE_IN_USE;
      boolean boolean5 = false;
      hikariPool0.closeIdleConnections();
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertTrue(hikariPool0.shutdown);
      assertEquals(1L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isReadOnly);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = hikariPool0.catalog;
      stringArray0[1] = hikariPool0.catalog;
      stringArray0[2] = hikariPool0.catalog;
      stringArray0[3] = hikariPool0.catalog;
      stringArray0[4] = hikariPool0.catalog;
      int int2 = hikariPool0.getIdleConnections();
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertTrue(hikariPool0.shutdown);
      assertEquals(1L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isReadOnly);
      
      // Undeclared exception!
      try { 
        hikariPool0.closeIdleConnections();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to remove an object from the bag that was not borrowed or reserved
         //
         verifyException("com.zaxxer.hikari.util.ConcurrentBag", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = null;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = true;
      hikariPool0.shutdown = boolean1;
      ConcurrentBag<IHikariConnectionProxy> concurrentBag0 = new ConcurrentBag<IHikariConnectionProxy>();
      assertNotNull(concurrentBag0);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      
      hikariPool0.idleConnectionBag = concurrentBag0;
      int int0 = 2146601724;
      int int1 = 3514;
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iHikariConnectionProxy0).compareAndSetState(anyInt() , anyInt());
      doReturn(int0, int1, hikariPool0.idleConnectionBag.STATE_NOT_IN_USE).when(iHikariConnectionProxy0).getState();
      concurrentBag0.add(iHikariConnectionProxy0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(hikariPool0.debug);
      assertTrue(hikariPool0.shutdown);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean2 = FileSystemHandling.createFolder(evoSuiteFile1);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      concurrentBag0.addBagStateListener(hikariPool0);
      assertFalse(hikariPool0.debug);
      assertTrue(hikariPool0.shutdown);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      
      boolean boolean3 = true;
      hikariPool0.leakDetectionThreshold = (long) concurrentBag0.STATE_IN_USE;
      boolean boolean4 = false;
      hikariPool0.closeIdleConnections();
      assertFalse(hikariPool0.debug);
      assertTrue(hikariPool0.shutdown);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertEquals(1L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = hikariPool0.catalog;
      stringArray0[1] = hikariPool0.catalog;
      stringArray0[2] = hikariPool0.catalog;
      stringArray0[3] = hikariPool0.catalog;
      stringArray0[4] = hikariPool0.catalog;
      int int2 = hikariPool0.getIdleConnections();
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(hikariPool0.debug);
      assertTrue(hikariPool0.shutdown);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertEquals(1L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      
      hikariPool0.closeIdleConnections();
      assertFalse(hikariPool0.debug);
      assertTrue(hikariPool0.shutdown);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertEquals(1L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      
      // Undeclared exception!
      try { 
        hikariPool0.logPoolState(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.debug);
      assertEquals(0, hikariPool0.transactionIsolation);
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iHikariConnectionProxy0).isValid(anyInt());
      long long0 = 243L;
      hikariPool0.configuration = hikariPool0.configuration;
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNotNull(hikariDataSource0);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      hikariPool0.configuration = (HikariConfig) hikariDataSource0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertFalse(hikariPool0.configuration.isReadOnly());
      assertNull(hikariPool0.configuration.getDataSourceClassName());
      assertTrue(hikariPool0.configuration.isAutoCommit());
      assertNull(hikariPool0.configuration.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariPool0.configuration.getConnectionTimeout());
      assertNull(hikariPool0.configuration.getCatalog());
      assertTrue(hikariPool0.configuration.isJdbc4ConnectionTest());
      assertNull(hikariPool0.configuration.getConnectionInitSql());
      assertNull(hikariPool0.configuration.getJdbcUrl());
      assertEquals(60, hikariPool0.configuration.getMaximumPoolSize());
      assertEquals(1, hikariPool0.configuration.getAcquireIncrement());
      assertEquals(0L, hikariPool0.configuration.getLeakDetectionThreshold());
      assertEquals(1800000L, hikariPool0.configuration.getMaxLifetime());
      assertEquals(600000L, hikariPool0.configuration.getIdleTimeout());
      assertEquals(750L, hikariPool0.configuration.getAcquireRetryDelay());
      assertFalse(hikariPool0.configuration.isIsolateInternalQueries());
      assertFalse(hikariPool0.configuration.isInitializationFailFast());
      assertFalse(hikariPool0.configuration.isRegisterMbeans());
      assertEquals(10, hikariPool0.configuration.getMinimumPoolSize());
      assertNull(hikariPool0.configuration.getConnectionTestQuery());
      assertEquals(3, hikariPool0.configuration.getAcquireRetries());
      assertEquals("HikariPool-0", hikariPool0.configuration.getPoolName());
      assertEquals((-1), hikariPool0.configuration.getTransactionIsolation());
      
      HikariConfig.poolNumber = hikariDataSource0.transactionIsolation;
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      
      String string0 = "kE";
      hikariPool0.configuration.connectionTestQuery = string0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      boolean boolean1 = true;
      hikariPool0.jdbc4ConnectionTest = boolean1;
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      boolean boolean2 = hikariPool0.isConnectionAlive(iHikariConnectionProxy0, long0);
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.isAutoCommit);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.debug);
      assertEquals(0, hikariPool0.transactionIsolation);
      
      IHikariConnectionProxy iHikariConnectionProxy1 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iHikariConnectionProxy1).isBrokenConnection();
      // Undeclared exception!
      try { 
        hikariPool0.releaseConnection(iHikariConnectionProxy1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isReadOnly);
      assertFalse(hikariPool0.debug);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      
      // Undeclared exception!
      try { 
        hikariPool0.getActiveConnections();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = false;
      AtomicInteger atomicInteger0 = new AtomicInteger(hikariPool0.transactionIsolation);
      assertEquals(0.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(0.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(0, atomicInteger0.get());
      assertEquals("0", atomicInteger0.toString());
      assertEquals((short)0, atomicInteger0.shortValue());
      assertEquals(0, atomicInteger0.intValue());
      assertEquals((byte)0, atomicInteger0.byteValue());
      assertEquals(0L, atomicInteger0.longValue());
      assertNotNull(atomicInteger0);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      
      hikariPool0.totalConnections = atomicInteger0;
      assertEquals(0, hikariPool0.getTotalConnections());
      assertEquals(0.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(0.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(0, atomicInteger0.get());
      assertEquals("0", atomicInteger0.toString());
      assertEquals((short)0, atomicInteger0.shortValue());
      assertEquals(0, atomicInteger0.intValue());
      assertEquals((byte)0, atomicInteger0.byteValue());
      assertEquals(0L, atomicInteger0.longValue());
      assertEquals(0L, hikariPool0.totalConnections.longValue());
      assertEquals(0, hikariPool0.totalConnections.get());
      assertEquals((short)0, hikariPool0.totalConnections.shortValue());
      assertEquals(0, hikariPool0.totalConnections.intValue());
      assertEquals((byte)0, hikariPool0.totalConnections.byteValue());
      assertEquals(0.0, hikariPool0.totalConnections.doubleValue(), 0.01);
      assertEquals(0.0F, hikariPool0.totalConnections.floatValue(), 0.01F);
      assertEquals("0", hikariPool0.totalConnections.toString());
      
      hikariPool0.isReadOnly = boolean0;
      assertEquals(0, hikariPool0.getTotalConnections());
      
      long long0 = (-1L);
      hikariPool0.leakDetectionThreshold = long0;
      assertEquals(0, hikariPool0.getTotalConnections());
      
      int int0 = hikariPool0.getTotalConnections();
      assertEquals(0, hikariPool0.getTotalConnections());
      assertEquals(0, int0);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals((-1L), hikariPool0.leakDetectionThreshold);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      
      int int1 = 3;
      atomicInteger0.lazySet(int1);
      assertEquals(3, hikariPool0.getTotalConnections());
      assertEquals(3.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(3, atomicInteger0.get());
      assertEquals((short)3, atomicInteger0.shortValue());
      assertEquals(3.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals((byte)3, atomicInteger0.byteValue());
      assertEquals(3L, atomicInteger0.longValue());
      assertEquals(3, atomicInteger0.intValue());
      assertEquals("3", atomicInteger0.toString());
      assertFalse(int1 == int0);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals((-1L), hikariPool0.leakDetectionThreshold);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      
      // Undeclared exception!
      try { 
        hikariPool0.getThreadsAwaitingConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.shutdown);
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      long long0 = 243L;
      hikariPool0.configuration = hikariPool0.configuration;
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNotNull(hikariDataSource0);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      
      hikariPool0.configuration = (HikariConfig) hikariDataSource0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertNull(hikariPool0.configuration.getCatalog());
      assertEquals(10, hikariPool0.configuration.getMinimumPoolSize());
      assertFalse(hikariPool0.configuration.isIsolateInternalQueries());
      assertEquals(5000L, hikariPool0.configuration.getConnectionTimeout());
      assertFalse(hikariPool0.configuration.isRegisterMbeans());
      assertNull(hikariPool0.configuration.getDataSourceClassName());
      assertEquals(600000L, hikariPool0.configuration.getIdleTimeout());
      assertEquals((-1), hikariPool0.configuration.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariPool0.configuration.getPoolName());
      assertEquals(1800000L, hikariPool0.configuration.getMaxLifetime());
      assertNull(hikariPool0.configuration.getConnectionTestQuery());
      assertTrue(hikariPool0.configuration.isJdbc4ConnectionTest());
      assertNull(hikariPool0.configuration.getJdbcUrl());
      assertEquals(3, hikariPool0.configuration.getAcquireRetries());
      assertNull(hikariPool0.configuration.getConnectionInitSql());
      assertTrue(hikariPool0.configuration.isAutoCommit());
      assertEquals(750L, hikariPool0.configuration.getAcquireRetryDelay());
      assertFalse(hikariPool0.configuration.isInitializationFailFast());
      assertNull(hikariPool0.configuration.getConnectionCustomizerClassName());
      assertFalse(hikariPool0.configuration.isReadOnly());
      assertEquals(60, hikariPool0.configuration.getMaximumPoolSize());
      assertEquals(0L, hikariPool0.configuration.getLeakDetectionThreshold());
      assertEquals(1, hikariPool0.configuration.getAcquireIncrement());
      
      hikariPool0.isIsolateInternalQueries = hikariDataSource0.isJdbc4connectionTest;
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isReadOnly());
      
      int int0 = 41;
      hikariPool0.configuration.acquireRetries = int0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      HikariConfig.poolNumber = hikariDataSource0.transactionIsolation;
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(41, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isReadOnly());
      
      String string0 = "s_";
      hikariPool0.configuration.connectionTestQuery = string0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      // Undeclared exception!
      try { 
        hikariPool0.fillPool();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.debug);
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      long long0 = 243L;
      hikariPool0.configuration = hikariPool0.configuration;
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNotNull(hikariDataSource0);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      
      hikariPool0.configuration = (HikariConfig) hikariDataSource0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertFalse(hikariPool0.configuration.isInitializationFailFast());
      assertFalse(hikariPool0.configuration.isRegisterMbeans());
      assertEquals(1800000L, hikariPool0.configuration.getMaxLifetime());
      assertEquals(600000L, hikariPool0.configuration.getIdleTimeout());
      assertEquals(750L, hikariPool0.configuration.getAcquireRetryDelay());
      assertEquals(3, hikariPool0.configuration.getAcquireRetries());
      assertFalse(hikariPool0.configuration.isIsolateInternalQueries());
      assertNull(hikariPool0.configuration.getConnectionTestQuery());
      assertTrue(hikariPool0.configuration.isAutoCommit());
      assertEquals("HikariPool-0", hikariPool0.configuration.getPoolName());
      assertEquals(10, hikariPool0.configuration.getMinimumPoolSize());
      assertEquals((-1), hikariPool0.configuration.getTransactionIsolation());
      assertNull(hikariPool0.configuration.getConnectionCustomizerClassName());
      assertFalse(hikariPool0.configuration.isReadOnly());
      assertNull(hikariPool0.configuration.getDataSourceClassName());
      assertNull(hikariPool0.configuration.getCatalog());
      assertEquals(5000L, hikariPool0.configuration.getConnectionTimeout());
      assertNull(hikariPool0.configuration.getConnectionInitSql());
      assertEquals(1, hikariPool0.configuration.getAcquireIncrement());
      assertEquals(60, hikariPool0.configuration.getMaximumPoolSize());
      assertTrue(hikariPool0.configuration.isJdbc4ConnectionTest());
      assertEquals(0L, hikariPool0.configuration.getLeakDetectionThreshold());
      assertNull(hikariPool0.configuration.getJdbcUrl());
      
      hikariPool0.isIsolateInternalQueries = hikariDataSource0.isJdbc4connectionTest;
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      
      int int0 = 1315;
      hikariPool0.configuration.acquireRetries = hikariPool0.configuration.transactionIsolation;
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      HikariConfig.poolNumber = hikariDataSource0.transactionIsolation;
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      
      String string0 = "s_";
      hikariPool0.configuration.connectionTestQuery = string0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      // Undeclared exception!
      try { 
        hikariPool0.fillPool();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isReadOnly);
      assertFalse(hikariPool0.debug);
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(statement0).executeQuery(anyString());
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(iHikariConnectionProxy0).createStatement();
      long long0 = 243L;
      hikariPool0.configuration = hikariPool0.configuration;
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNotNull(hikariDataSource0);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isReadOnly);
      
      hikariPool0.configuration = (HikariConfig) hikariDataSource0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertNull(hikariPool0.configuration.getDataSourceClassName());
      assertEquals(10, hikariPool0.configuration.getMinimumPoolSize());
      assertFalse(hikariPool0.configuration.isIsolateInternalQueries());
      assertEquals(5000L, hikariPool0.configuration.getConnectionTimeout());
      assertFalse(hikariPool0.configuration.isReadOnly());
      assertTrue(hikariPool0.configuration.isJdbc4ConnectionTest());
      assertFalse(hikariPool0.configuration.isInitializationFailFast());
      assertEquals(750L, hikariPool0.configuration.getAcquireRetryDelay());
      assertEquals((-1), hikariPool0.configuration.getTransactionIsolation());
      assertNull(hikariPool0.configuration.getJdbcUrl());
      assertEquals(1800000L, hikariPool0.configuration.getMaxLifetime());
      assertEquals(600000L, hikariPool0.configuration.getIdleTimeout());
      assertNull(hikariPool0.configuration.getConnectionTestQuery());
      assertNull(hikariPool0.configuration.getConnectionInitSql());
      assertEquals(3, hikariPool0.configuration.getAcquireRetries());
      assertEquals(1, hikariPool0.configuration.getAcquireIncrement());
      assertEquals(0L, hikariPool0.configuration.getLeakDetectionThreshold());
      assertTrue(hikariPool0.configuration.isAutoCommit());
      assertEquals("HikariPool-0", hikariPool0.configuration.getPoolName());
      assertEquals(60, hikariPool0.configuration.getMaximumPoolSize());
      assertNull(hikariPool0.configuration.getCatalog());
      assertNull(hikariPool0.configuration.getConnectionCustomizerClassName());
      assertFalse(hikariPool0.configuration.isRegisterMbeans());
      
      hikariPool0.isIsolateInternalQueries = hikariDataSource0.isJdbc4connectionTest;
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      
      HikariConfig.poolNumber = hikariDataSource0.transactionIsolation;
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      
      hikariPool0.configuration.setMaxLifetime(hikariDataSource0.minPoolSize);
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariPool0.isAutoCommit);
      assertTrue(hikariPool0.isIsolateInternalQueries);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isReadOnly);
      assertFalse(hikariPool0.debug);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(10L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals((-1), HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isReadOnly);
      
      String string0 = "kE";
      hikariPool0.configuration.connectionTestQuery = string0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      boolean boolean0 = hikariPool0.isConnectionAlive(iHikariConnectionProxy0, long0);
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertTrue(boolean0);
      assertFalse(hikariPool0.isAutoCommit);
      assertTrue(hikariPool0.isIsolateInternalQueries);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isReadOnly);
      assertFalse(hikariPool0.debug);
      
      // Undeclared exception!
      try { 
        hikariPool0.bagIsEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HikariPool hikariPool0 = new HikariPool();
          assertNotNull(hikariPool0);
          assertFalse(hikariPool0.isAutoCommit);
          assertFalse(hikariPool0.isRegisteredMbeans);
          assertFalse(hikariPool0.isReadOnly);
          assertEquals(0L, hikariPool0.leakDetectionThreshold);
          assertFalse(hikariPool0.isIsolateInternalQueries);
          assertFalse(hikariPool0.debug);
          assertFalse(hikariPool0.jdbc4ConnectionTest);
          assertEquals(0, hikariPool0.transactionIsolation);
          assertFalse(hikariPool0.shutdown);
          
          ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
          Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
          doReturn(resultSet0).when(statement0).executeQuery(anyString());
          IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
          doReturn(statement0).when(iHikariConnectionProxy0).createStatement();
          hikariPool0.configuration = hikariPool0.configuration;
          HikariDataSource hikariDataSource0 = new HikariDataSource();
          assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
          assertEquals(0, hikariDataSource0.getLoginTimeout());
          assertNull(hikariDataSource0.getDataSourceClassName());
          assertNull(hikariDataSource0.getCatalog());
          assertFalse(hikariDataSource0.isIsolateInternalQueries());
          assertFalse(hikariDataSource0.isInitializationFailFast());
          assertFalse(hikariDataSource0.isReadOnly());
          assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
          assertNull(hikariDataSource0.getJdbcUrl());
          assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
          assertNull(hikariDataSource0.getConnectionTestQuery());
          assertEquals(1, hikariDataSource0.getAcquireIncrement());
          assertEquals(60, hikariDataSource0.getMaximumPoolSize());
          assertTrue(hikariDataSource0.isAutoCommit());
          assertEquals(3, hikariDataSource0.getAcquireRetries());
          assertNull(hikariDataSource0.getConnectionInitSql());
          assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
          assertEquals(600000L, hikariDataSource0.getIdleTimeout());
          assertNull(hikariDataSource0.getConnectionCustomizerClassName());
          assertFalse(hikariDataSource0.isRegisterMbeans());
          assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
          assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
          assertEquals(10, hikariDataSource0.getMinimumPoolSize());
          assertEquals((-1), hikariDataSource0.getTransactionIsolation());
          assertNotNull(hikariDataSource0);
          assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
          assertEquals(3, hikariDataSource0.acquireRetries);
          assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
          assertFalse(hikariDataSource0.isRegisterMbeans);
          assertEquals(60, hikariDataSource0.maxPoolSize);
          assertFalse(hikariDataSource0.isInitializationFailFast);
          assertEquals(1, hikariDataSource0.acquireIncrement);
          assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
          assertEquals(750L, hikariDataSource0.acquireRetryDelay);
          assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
          assertTrue(hikariDataSource0.isJdbc4connectionTest);
          assertFalse(hikariDataSource0.isReadOnly);
          assertEquals(1800000L, hikariDataSource0.maxLifetime);
          assertEquals(1, HikariConfig.poolNumber);
          assertEquals(600000L, hikariDataSource0.idleTimeout);
          assertTrue(hikariDataSource0.isAutoCommit);
          assertEquals(5000L, hikariDataSource0.connectionTimeout);
          assertEquals((-1), hikariDataSource0.transactionIsolation);
          assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
          assertEquals(10, hikariDataSource0.minPoolSize);
          assertFalse(hikariDataSource0.isIsolateInternalQueries);
          
          hikariPool0.configuration = (HikariConfig) hikariDataSource0;
          assertEquals("HikariPool-0", hikariPool0.toString());
          assertFalse(hikariPool0.configuration.isReadOnly());
          assertNull(hikariPool0.configuration.getConnectionCustomizerClassName());
          assertTrue(hikariPool0.configuration.isAutoCommit());
          assertNull(hikariPool0.configuration.getDataSourceClassName());
          assertEquals(10, hikariPool0.configuration.getMinimumPoolSize());
          assertNull(hikariPool0.configuration.getConnectionTestQuery());
          assertEquals(3, hikariPool0.configuration.getAcquireRetries());
          assertEquals((-1), hikariPool0.configuration.getTransactionIsolation());
          assertEquals("HikariPool-0", hikariPool0.configuration.getPoolName());
          assertFalse(hikariPool0.configuration.isRegisterMbeans());
          assertEquals(1800000L, hikariPool0.configuration.getMaxLifetime());
          assertEquals(600000L, hikariPool0.configuration.getIdleTimeout());
          assertFalse(hikariPool0.configuration.isIsolateInternalQueries());
          assertEquals(750L, hikariPool0.configuration.getAcquireRetryDelay());
          assertFalse(hikariPool0.configuration.isInitializationFailFast());
          assertNull(hikariPool0.configuration.getConnectionInitSql());
          assertNull(hikariPool0.configuration.getCatalog());
          assertEquals(1, hikariPool0.configuration.getAcquireIncrement());
          assertNull(hikariPool0.configuration.getJdbcUrl());
          assertEquals(5000L, hikariPool0.configuration.getConnectionTimeout());
          assertTrue(hikariPool0.configuration.isJdbc4ConnectionTest());
          assertEquals(60, hikariPool0.configuration.getMaximumPoolSize());
          assertEquals(0L, hikariPool0.configuration.getLeakDetectionThreshold());
          
          hikariPool0.isIsolateInternalQueries = hikariDataSource0.isJdbc4connectionTest;
          assertEquals("HikariPool-0", hikariPool0.toString());
          assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
          assertEquals(0, hikariDataSource0.getLoginTimeout());
          assertNull(hikariDataSource0.getDataSourceClassName());
          assertNull(hikariDataSource0.getCatalog());
          assertFalse(hikariDataSource0.isIsolateInternalQueries());
          assertFalse(hikariDataSource0.isInitializationFailFast());
          assertFalse(hikariDataSource0.isReadOnly());
          assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
          assertNull(hikariDataSource0.getJdbcUrl());
          assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
          assertNull(hikariDataSource0.getConnectionTestQuery());
          assertEquals(1, hikariDataSource0.getAcquireIncrement());
          assertEquals(60, hikariDataSource0.getMaximumPoolSize());
          assertTrue(hikariDataSource0.isAutoCommit());
          assertEquals(3, hikariDataSource0.getAcquireRetries());
          assertNull(hikariDataSource0.getConnectionInitSql());
          assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
          assertEquals(600000L, hikariDataSource0.getIdleTimeout());
          assertNull(hikariDataSource0.getConnectionCustomizerClassName());
          assertFalse(hikariDataSource0.isRegisterMbeans());
          assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
          assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
          assertEquals(10, hikariDataSource0.getMinimumPoolSize());
          assertEquals((-1), hikariDataSource0.getTransactionIsolation());
          
          HikariConfig.poolNumber = hikariDataSource0.transactionIsolation;
          assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
          assertEquals(0, hikariDataSource0.getLoginTimeout());
          assertNull(hikariDataSource0.getDataSourceClassName());
          assertNull(hikariDataSource0.getCatalog());
          assertFalse(hikariDataSource0.isIsolateInternalQueries());
          assertFalse(hikariDataSource0.isInitializationFailFast());
          assertFalse(hikariDataSource0.isReadOnly());
          assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
          assertNull(hikariDataSource0.getJdbcUrl());
          assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
          assertNull(hikariDataSource0.getConnectionTestQuery());
          assertEquals(1, hikariDataSource0.getAcquireIncrement());
          assertEquals(60, hikariDataSource0.getMaximumPoolSize());
          assertTrue(hikariDataSource0.isAutoCommit());
          assertEquals(3, hikariDataSource0.getAcquireRetries());
          assertNull(hikariDataSource0.getConnectionInitSql());
          assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
          assertEquals(600000L, hikariDataSource0.getIdleTimeout());
          assertNull(hikariDataSource0.getConnectionCustomizerClassName());
          assertFalse(hikariDataSource0.isRegisterMbeans());
          assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
          assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
          assertEquals(10, hikariDataSource0.getMinimumPoolSize());
          assertEquals((-1), hikariDataSource0.getTransactionIsolation());
          
          String string0 = "kE";
          int int0 = (-2108);
          AtomicInteger atomicInteger0 = new AtomicInteger(int0);
          assertEquals((byte) (-60), atomicInteger0.byteValue());
          assertEquals((-2108L), atomicInteger0.longValue());
          assertEquals((-2108), atomicInteger0.get());
          assertEquals((short) (-2108), atomicInteger0.shortValue());
          assertEquals("-2108", atomicInteger0.toString());
          assertEquals((-2108.0), atomicInteger0.doubleValue(), 0.01);
          assertEquals((-2108.0F), atomicInteger0.floatValue(), 0.01F);
          assertEquals((-2108), atomicInteger0.intValue());
          assertNotNull(atomicInteger0);
          
          hikariPool0.totalConnections = atomicInteger0;
          assertEquals("HikariPool-0", hikariPool0.toString());
          assertEquals((-2108), hikariPool0.getTotalConnections());
          assertEquals((byte) (-60), atomicInteger0.byteValue());
          assertEquals((-2108L), atomicInteger0.longValue());
          assertEquals((-2108), atomicInteger0.get());
          assertEquals((short) (-2108), atomicInteger0.shortValue());
          assertEquals("-2108", atomicInteger0.toString());
          assertEquals((-2108.0), atomicInteger0.doubleValue(), 0.01);
          assertEquals((-2108.0F), atomicInteger0.floatValue(), 0.01F);
          assertEquals((-2108), atomicInteger0.intValue());
          assertEquals((-2108.0), hikariPool0.totalConnections.doubleValue(), 0.01);
          assertEquals("-2108", hikariPool0.totalConnections.toString());
          assertEquals((-2108), hikariPool0.totalConnections.get());
          assertEquals((-2108), hikariPool0.totalConnections.intValue());
          assertEquals((byte) (-60), hikariPool0.totalConnections.byteValue());
          assertEquals((-2108L), hikariPool0.totalConnections.longValue());
          assertEquals((short) (-2108), hikariPool0.totalConnections.shortValue());
          assertEquals((-2108.0F), hikariPool0.totalConnections.floatValue(), 0.01F);
          
          hikariPool0.configuration.connectionTestQuery = string0;
          assertEquals("HikariPool-0", hikariPool0.toString());
          assertEquals((-2108), hikariPool0.getTotalConnections());
          
          boolean boolean0 = hikariPool0.isConnectionAlive(iHikariConnectionProxy0, hikariPool0.transactionIsolation);
          assertEquals("HikariPool-0", hikariPool0.toString());
          assertEquals((-2108), hikariPool0.getTotalConnections());
          assertTrue(boolean0);
          assertFalse(hikariPool0.isAutoCommit);
          assertTrue(hikariPool0.isIsolateInternalQueries);
          assertFalse(hikariPool0.isRegisteredMbeans);
          assertFalse(hikariPool0.isReadOnly);
          assertEquals(0L, hikariPool0.leakDetectionThreshold);
          assertFalse(hikariPool0.debug);
          assertFalse(hikariPool0.jdbc4ConnectionTest);
          assertEquals(0, hikariPool0.transactionIsolation);
          assertFalse(hikariPool0.shutdown);
          
          hikariPool0.bagIsEmpty();
          assertEquals("HikariPool-0", hikariPool0.toString());
          assertEquals((-2108), hikariPool0.getTotalConnections());
          assertFalse(hikariPool0.isAutoCommit);
          assertTrue(hikariPool0.isIsolateInternalQueries);
          assertFalse(hikariPool0.isRegisteredMbeans);
          assertFalse(hikariPool0.isReadOnly);
          assertEquals(0L, hikariPool0.leakDetectionThreshold);
          assertFalse(hikariPool0.debug);
          assertFalse(hikariPool0.jdbc4ConnectionTest);
          assertEquals(0, hikariPool0.transactionIsolation);
          assertFalse(hikariPool0.shutdown);
          
          // Undeclared exception!
          try { 
            hikariPool0.fillPool();
            fail("Expecting exception: NullPointerException");
          
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("com.zaxxer.hikari.HikariPool", e);
          }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = null;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = true;
      hikariPool0.shutdown = boolean1;
      ConcurrentBag<IHikariConnectionProxy> concurrentBag0 = new ConcurrentBag<IHikariConnectionProxy>();
      assertNotNull(concurrentBag0);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      
      hikariPool0.idleConnectionBag = concurrentBag0;
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      concurrentBag0.add(iHikariConnectionProxy0);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean2 = FileSystemHandling.createFolder(evoSuiteFile1);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      concurrentBag0.addBagStateListener(hikariPool0);
      assertTrue(hikariPool0.shutdown);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      
      boolean boolean3 = true;
      IHikariConnectionProxy iHikariConnectionProxy1 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(boolean3).when(iHikariConnectionProxy1).isBrokenConnection();
      doReturn(hikariPool0.shutdown).when(iHikariConnectionProxy1).compareAndSetState(anyInt() , anyInt());
      hikariPool0.addConnection();
      assertTrue(hikariPool0.shutdown);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      
      // Undeclared exception!
      try { 
        hikariPool0.releaseConnection(iHikariConnectionProxy1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNotNull(hikariDataSource0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(10, hikariDataSource0.minPoolSize);
      
      HikariPool hikariPool0 = null;
      try {
        hikariPool0 = new HikariPool(hikariDataSource0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      
      // Undeclared exception!
      try { 
        hikariPool0.fillPool();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.shutdown);
      
      boolean boolean0 = true;
      hikariPool0.isRegisteredMbeans = boolean0;
      // Undeclared exception!
      try { 
        hikariPool0.addConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.debug);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isReadOnly);
      
      // Undeclared exception!
      try { 
        hikariPool0.addConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNotNull(hikariConfig0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      String string0 = "Value was returned to the bag that was not borrowed";
      String string1 = "Di.?/&";
      hikariConfig0.setConnectionInitSql(string1);
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("Di.?/&", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      hikariConfig0.catalog = string0;
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("Di.?/&", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("Value was returned to the bag that was not borrowed", hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      
      HikariPool hikariPool0 = null;
      try {
        hikariPool0 = new HikariPool(hikariConfig0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.debug);
      assertEquals(0, hikariPool0.transactionIsolation);
      
      // Undeclared exception!
      try { 
        hikariPool0.getIdleConnections();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        hikariPool0.getConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.debug);
      
      // Undeclared exception!
      try { 
        hikariPool0.getIdleConnections();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.debug);
      
      boolean boolean0 = false;
      hikariPool0.debug = boolean0;
      boolean boolean1 = true;
      hikariPool0.isIsolateInternalQueries = boolean1;
      // Undeclared exception!
      try { 
        hikariPool0.getConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isReadOnly);
      assertFalse(hikariPool0.debug);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      
      // Undeclared exception!
      try { 
        hikariPool0.bagIsEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isReadOnly);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      
      // Undeclared exception!
      try { 
        hikariPool0.closeIdleConnections();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      
      // Undeclared exception!
      try { 
        hikariPool0.bagIsEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      
      int int0 = 2842;
      // Undeclared exception!
      try { 
        hikariPool0.closeIdleConnections();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        hikariPool0.closeConnection(iHikariConnectionProxy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.debug);
      
      // Undeclared exception!
      try { 
        hikariPool0.getActiveConnections();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      
      boolean boolean0 = true;
      MockTimer mockTimer0 = new MockTimer(boolean0);
      assertNotNull(mockTimer0);
      
      MockTimer.stopAllTimers();
      hikariPool0.houseKeepingTimer = (Timer) mockTimer0;
      // Undeclared exception!
      try { 
        hikariPool0.getThreadsAwaitingConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.shutdown);
      
      boolean boolean0 = true;
      hikariPool0.isAutoCommit = boolean0;
      // Undeclared exception!
      try { 
        hikariPool0.getActiveConnections();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      
      // Undeclared exception!
      try { 
        hikariPool0.getThreadsAwaitingConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.debug);
      assertEquals(0, hikariPool0.transactionIsolation);
      
      // Undeclared exception!
      try { 
        hikariPool0.getTotalConnections();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isReadOnly);
      assertFalse(hikariPool0.debug);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isRegisteredMbeans);
      
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNotNull(hikariDataSource0);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(10, hikariDataSource0.minPoolSize);
      
      long long0 = 69L;
      hikariDataSource0.maxLifetime = long0;
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(69L, hikariDataSource0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      
      hikariPool0.dataSource = (DataSource) hikariDataSource0;
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(69L, hikariDataSource0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      
      // Undeclared exception!
      try { 
        hikariPool0.getTotalConnections();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isReadOnly);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = hikariPool0.catalog;
      stringArray0[1] = hikariPool0.catalog;
      stringArray0[2] = hikariPool0.catalog;
      stringArray0[3] = hikariPool0.catalog;
      stringArray0[4] = hikariPool0.catalog;
      // Undeclared exception!
      try { 
        hikariPool0.logPoolState(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      
      // Undeclared exception!
      try { 
        hikariPool0.shutdown();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      HikariConfig hikariConfig0 = null;
      HikariPool hikariPool0 = null;
      try {
        hikariPool0 = new HikariPool(hikariConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isReadOnly);
      assertFalse(hikariPool0.debug);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      
      long long0 = 0L;
      hikariPool0.leakDetectionThreshold = long0;
      String string0 = "Connection returned to pool is broken, or the pool is shutting down.  Closing connection.";
      boolean boolean0 = false;
      MockTimer mockTimer0 = new MockTimer();
      assertNotNull(mockTimer0);
      
      hikariPool0.houseKeepingTimer = (Timer) mockTimer0;
      HikariPool.HouseKeeper hikariPool_HouseKeeper0 = hikariPool0.new HouseKeeper();
      assertEquals(0L, hikariPool_HouseKeeper0.scheduledExecutionTime());
      assertNotNull(hikariPool_HouseKeeper0);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isReadOnly);
      assertFalse(hikariPool0.debug);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        hikariPool0.shutdown();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.debug);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      
      // Undeclared exception!
      try { 
        hikariPool0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.debug);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      
      boolean boolean0 = false;
      int int0 = 2765;
      AtomicInteger atomicInteger0 = new AtomicInteger(int0);
      assertEquals(2765, atomicInteger0.get());
      assertEquals(2765, atomicInteger0.intValue());
      assertEquals(2765.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals((byte) (-51), atomicInteger0.byteValue());
      assertEquals((short)2765, atomicInteger0.shortValue());
      assertEquals(2765.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals("2765", atomicInteger0.toString());
      assertEquals(2765L, atomicInteger0.longValue());
      assertNotNull(atomicInteger0);
      
      hikariPool0.totalConnections = atomicInteger0;
      assertEquals(2765, hikariPool0.getTotalConnections());
      assertEquals(2765, atomicInteger0.get());
      assertEquals(2765, atomicInteger0.intValue());
      assertEquals(2765.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals((byte) (-51), atomicInteger0.byteValue());
      assertEquals((short)2765, atomicInteger0.shortValue());
      assertEquals(2765.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals("2765", atomicInteger0.toString());
      assertEquals(2765L, atomicInteger0.longValue());
      assertEquals("2765", hikariPool0.totalConnections.toString());
      assertEquals(2765L, hikariPool0.totalConnections.longValue());
      assertEquals(2765.0F, hikariPool0.totalConnections.floatValue(), 0.01F);
      assertEquals((short)2765, hikariPool0.totalConnections.shortValue());
      assertEquals(2765.0, hikariPool0.totalConnections.doubleValue(), 0.01);
      assertEquals((byte) (-51), hikariPool0.totalConnections.byteValue());
      assertEquals(2765, hikariPool0.totalConnections.get());
      assertEquals(2765, hikariPool0.totalConnections.intValue());
      
      hikariPool0.isReadOnly = boolean0;
      assertEquals(2765, hikariPool0.getTotalConnections());
      
      long long0 = (-1L);
      hikariPool0.leakDetectionThreshold = long0;
      assertEquals(2765, hikariPool0.getTotalConnections());
      
      int int1 = hikariPool0.getTotalConnections();
      assertEquals(2765, hikariPool0.getTotalConnections());
      assertEquals(2765, int1);
      assertTrue(int1 == int0);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals((-1L), hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.debug);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      
      int int2 = 3;
      atomicInteger0.lazySet(int2);
      assertEquals("3", atomicInteger0.toString());
      assertEquals(3, atomicInteger0.intValue());
      assertEquals((byte)3, atomicInteger0.byteValue());
      assertEquals((short)3, atomicInteger0.shortValue());
      assertEquals(3.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(3L, atomicInteger0.longValue());
      assertEquals(3, atomicInteger0.get());
      assertEquals(3.0F, atomicInteger0.floatValue(), 0.01F);
      assertTrue(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      // Undeclared exception!
      try { 
        hikariPool0.getThreadsAwaitingConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      
      int int0 = 1593;
      AtomicInteger atomicInteger0 = new AtomicInteger(int0);
      assertEquals(1593.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(1593, atomicInteger0.get());
      assertEquals(1593L, atomicInteger0.longValue());
      assertEquals("1593", atomicInteger0.toString());
      assertEquals((short)1593, atomicInteger0.shortValue());
      assertEquals(1593.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(1593, atomicInteger0.intValue());
      assertEquals((byte)57, atomicInteger0.byteValue());
      assertNotNull(atomicInteger0);
      
      hikariPool0.totalConnections = atomicInteger0;
      assertEquals(1593, hikariPool0.getTotalConnections());
      assertEquals(1593.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(1593, atomicInteger0.get());
      assertEquals(1593L, atomicInteger0.longValue());
      assertEquals("1593", atomicInteger0.toString());
      assertEquals((short)1593, atomicInteger0.shortValue());
      assertEquals(1593.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(1593, atomicInteger0.intValue());
      assertEquals((byte)57, atomicInteger0.byteValue());
      assertEquals((byte)57, hikariPool0.totalConnections.byteValue());
      assertEquals(1593, hikariPool0.totalConnections.intValue());
      assertEquals(1593, hikariPool0.totalConnections.get());
      assertEquals("1593", hikariPool0.totalConnections.toString());
      assertEquals(1593.0, hikariPool0.totalConnections.doubleValue(), 0.01);
      assertEquals(1593.0F, hikariPool0.totalConnections.floatValue(), 0.01F);
      assertEquals(1593L, hikariPool0.totalConnections.longValue());
      assertEquals((short)1593, hikariPool0.totalConnections.shortValue());
      
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        hikariPool0.closeConnection(iHikariConnectionProxy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      
      int int0 = (-1);
      boolean boolean0 = true;
      hikariPool0.isReadOnly = boolean0;
      // Undeclared exception!
      try { 
        hikariPool0.getConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isReadOnly);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isAutoCommit);
      
      boolean boolean0 = false;
      hikariPool0.shutdown = boolean0;
      String string0 = "inWF)p*~KhxGJ|ot*@";
      MockTimer mockTimer0 = new MockTimer(string0, hikariPool0.jdbc4ConnectionTest);
      assertNotNull(mockTimer0);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isReadOnly);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isAutoCommit);
      
      hikariPool0.houseKeepingTimer = (Timer) mockTimer0;
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(iHikariConnectionProxy0).createStatement();
      long long0 = 3434L;
      // Undeclared exception!
      try { 
        hikariPool0.isConnectionAlive(iHikariConnectionProxy0, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.debug);
      assertEquals(0, hikariPool0.transactionIsolation);
      
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iHikariConnectionProxy0).isBrokenConnection();
      // Undeclared exception!
      try { 
        hikariPool0.releaseConnection(iHikariConnectionProxy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0, hikariPool0.transactionIsolation);
      
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(iHikariConnectionProxy0).createStatement();
      long long0 = 243L;
      hikariPool0.configuration = hikariPool0.configuration;
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNotNull(hikariDataSource0);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      
      hikariPool0.configuration = (HikariConfig) hikariDataSource0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertNull(hikariPool0.configuration.getDataSourceClassName());
      assertNull(hikariPool0.configuration.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariPool0.configuration.getConnectionTimeout());
      assertTrue(hikariPool0.configuration.isAutoCommit());
      assertFalse(hikariPool0.configuration.isReadOnly());
      assertEquals("HikariPool-0", hikariPool0.configuration.getPoolName());
      assertFalse(hikariPool0.configuration.isIsolateInternalQueries());
      assertEquals(10, hikariPool0.configuration.getMinimumPoolSize());
      assertNull(hikariPool0.configuration.getConnectionTestQuery());
      assertEquals(3, hikariPool0.configuration.getAcquireRetries());
      assertEquals(1800000L, hikariPool0.configuration.getMaxLifetime());
      assertEquals(600000L, hikariPool0.configuration.getIdleTimeout());
      assertFalse(hikariPool0.configuration.isInitializationFailFast());
      assertEquals(750L, hikariPool0.configuration.getAcquireRetryDelay());
      assertEquals((-1), hikariPool0.configuration.getTransactionIsolation());
      assertNull(hikariPool0.configuration.getJdbcUrl());
      assertFalse(hikariPool0.configuration.isRegisterMbeans());
      assertTrue(hikariPool0.configuration.isJdbc4ConnectionTest());
      assertNull(hikariPool0.configuration.getCatalog());
      assertEquals(1, hikariPool0.configuration.getAcquireIncrement());
      assertEquals(0L, hikariPool0.configuration.getLeakDetectionThreshold());
      assertNull(hikariPool0.configuration.getConnectionInitSql());
      assertEquals(60, hikariPool0.configuration.getMaximumPoolSize());
      
      HikariConfig.poolNumber = hikariDataSource0.transactionIsolation;
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      
      String string0 = "kE";
      hikariPool0.configuration.connectionTestQuery = string0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      // Undeclared exception!
      try { 
        hikariPool0.isConnectionAlive(iHikariConnectionProxy0, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSet) null).when(statement0).executeQuery(anyString());
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(iHikariConnectionProxy0).createStatement();
      long long0 = 243L;
      hikariPool0.configuration = hikariPool0.configuration;
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNotNull(hikariDataSource0);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      
      hikariPool0.configuration = (HikariConfig) hikariDataSource0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertFalse(hikariPool0.configuration.isInitializationFailFast());
      assertEquals(1800000L, hikariPool0.configuration.getMaxLifetime());
      assertEquals(600000L, hikariPool0.configuration.getIdleTimeout());
      assertEquals(750L, hikariPool0.configuration.getAcquireRetryDelay());
      assertEquals((-1), hikariPool0.configuration.getTransactionIsolation());
      assertFalse(hikariPool0.configuration.isRegisterMbeans());
      assertFalse(hikariPool0.configuration.isIsolateInternalQueries());
      assertEquals(10, hikariPool0.configuration.getMinimumPoolSize());
      assertNull(hikariPool0.configuration.getConnectionTestQuery());
      assertEquals(3, hikariPool0.configuration.getAcquireRetries());
      assertEquals("HikariPool-0", hikariPool0.configuration.getPoolName());
      assertNull(hikariPool0.configuration.getDataSourceClassName());
      assertTrue(hikariPool0.configuration.isAutoCommit());
      assertFalse(hikariPool0.configuration.isReadOnly());
      assertEquals(5000L, hikariPool0.configuration.getConnectionTimeout());
      assertNull(hikariPool0.configuration.getConnectionCustomizerClassName());
      assertTrue(hikariPool0.configuration.isJdbc4ConnectionTest());
      assertNull(hikariPool0.configuration.getCatalog());
      assertNull(hikariPool0.configuration.getConnectionInitSql());
      assertEquals(0L, hikariPool0.configuration.getLeakDetectionThreshold());
      assertNull(hikariPool0.configuration.getJdbcUrl());
      assertEquals(60, hikariPool0.configuration.getMaximumPoolSize());
      assertEquals(1, hikariPool0.configuration.getAcquireIncrement());
      
      HikariConfig.poolNumber = hikariDataSource0.transactionIsolation;
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      
      String string0 = "kE";
      hikariPool0.configuration.connectionTestQuery = string0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      boolean boolean0 = hikariPool0.isConnectionAlive(iHikariConnectionProxy0, long0);
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertTrue(boolean0);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      
      // Undeclared exception!
      try { 
        hikariPool0.bagIsEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(statement0).executeQuery(anyString());
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(iHikariConnectionProxy0).createStatement();
      long long0 = 243L;
      hikariPool0.configuration = hikariPool0.configuration;
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNotNull(hikariDataSource0);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      
      hikariPool0.configuration = (HikariConfig) hikariDataSource0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals("HikariPool-0", hikariPool0.configuration.getPoolName());
      assertTrue(hikariPool0.configuration.isAutoCommit());
      assertEquals(60, hikariPool0.configuration.getMaximumPoolSize());
      assertNull(hikariPool0.configuration.getConnectionCustomizerClassName());
      assertNull(hikariPool0.configuration.getDataSourceClassName());
      assertNull(hikariPool0.configuration.getConnectionInitSql());
      assertNull(hikariPool0.configuration.getConnectionTestQuery());
      assertEquals(3, hikariPool0.configuration.getAcquireRetries());
      assertNull(hikariPool0.configuration.getJdbcUrl());
      assertEquals(1, hikariPool0.configuration.getAcquireIncrement());
      assertEquals(0L, hikariPool0.configuration.getLeakDetectionThreshold());
      assertFalse(hikariPool0.configuration.isInitializationFailFast());
      assertEquals(5000L, hikariPool0.configuration.getConnectionTimeout());
      assertFalse(hikariPool0.configuration.isReadOnly());
      assertTrue(hikariPool0.configuration.isJdbc4ConnectionTest());
      assertFalse(hikariPool0.configuration.isIsolateInternalQueries());
      assertFalse(hikariPool0.configuration.isRegisterMbeans());
      assertNull(hikariPool0.configuration.getCatalog());
      assertEquals(1800000L, hikariPool0.configuration.getMaxLifetime());
      assertEquals(600000L, hikariPool0.configuration.getIdleTimeout());
      assertEquals(750L, hikariPool0.configuration.getAcquireRetryDelay());
      assertEquals((-1), hikariPool0.configuration.getTransactionIsolation());
      assertEquals(10, hikariPool0.configuration.getMinimumPoolSize());
      
      HikariConfig.poolNumber = hikariDataSource0.transactionIsolation;
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      
      String string0 = "kE";
      hikariPool0.configuration.connectionTestQuery = string0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      boolean boolean0 = hikariPool0.isConnectionAlive(iHikariConnectionProxy0, long0);
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertTrue(boolean0);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      
      // Undeclared exception!
      try { 
        hikariPool0.addConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isReadOnly);
      assertFalse(hikariPool0.debug);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNotNull(hikariConfig0);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      
      hikariPool0.configuration = hikariConfig0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariPool0.configuration.isRegisterMbeans());
      assertFalse(hikariPool0.configuration.isInitializationFailFast());
      assertEquals((-1), hikariPool0.configuration.getTransactionIsolation());
      assertNull(hikariPool0.configuration.getCatalog());
      assertEquals(1, hikariPool0.configuration.getAcquireIncrement());
      assertNull(hikariPool0.configuration.getConnectionInitSql());
      assertEquals(0L, hikariPool0.configuration.getLeakDetectionThreshold());
      assertNull(hikariPool0.configuration.getJdbcUrl());
      assertEquals(750L, hikariPool0.configuration.getAcquireRetryDelay());
      assertEquals(60, hikariPool0.configuration.getMaximumPoolSize());
      assertFalse(hikariPool0.configuration.isReadOnly());
      assertNull(hikariPool0.configuration.getConnectionCustomizerClassName());
      assertNull(hikariPool0.configuration.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariPool0.configuration.getPoolName());
      assertTrue(hikariPool0.configuration.isAutoCommit());
      assertTrue(hikariPool0.configuration.isJdbc4ConnectionTest());
      assertEquals(10, hikariPool0.configuration.getMinimumPoolSize());
      assertNull(hikariPool0.configuration.getConnectionTestQuery());
      assertEquals(5000L, hikariPool0.configuration.getConnectionTimeout());
      assertFalse(hikariPool0.configuration.isIsolateInternalQueries());
      assertEquals(3, hikariPool0.configuration.getAcquireRetries());
      assertEquals(600000L, hikariPool0.configuration.getIdleTimeout());
      assertEquals(1800000L, hikariPool0.configuration.getMaxLifetime());
      
      // Undeclared exception!
      try { 
        hikariPool0.getConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      
      long long0 = 0L;
      hikariPool0.leakDetectionThreshold = long0;
      String string0 = "Connection returned to pool is broken, or the pool is shutting down.  Closing connection.";
      boolean boolean0 = false;
      MockTimer mockTimer0 = new MockTimer();
      assertNotNull(mockTimer0);
      
      hikariPool0.houseKeepingTimer = (Timer) mockTimer0;
      HikariPool.HouseKeeper hikariPool_HouseKeeper0 = hikariPool0.new HouseKeeper();
      assertEquals(0L, hikariPool_HouseKeeper0.scheduledExecutionTime());
      assertNotNull(hikariPool_HouseKeeper0);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        hikariPool_HouseKeeper0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.debug);
      assertEquals(0, hikariPool0.transactionIsolation);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = null;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = true;
      hikariPool0.shutdown = boolean1;
      ConcurrentBag<IHikariConnectionProxy> concurrentBag0 = new ConcurrentBag<IHikariConnectionProxy>();
      assertNotNull(concurrentBag0);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      
      hikariPool0.idleConnectionBag = concurrentBag0;
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      concurrentBag0.add(iHikariConnectionProxy0);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean2 = FileSystemHandling.createFolder(evoSuiteFile1);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      concurrentBag0.addBagStateListener(hikariPool0);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertTrue(hikariPool0.shutdown);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.debug);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      
      IHikariConnectionProxy iHikariConnectionProxy1 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(hikariPool0.shutdown).when(iHikariConnectionProxy1).isBrokenConnection();
      doReturn(boolean2, hikariPool0.isIsolateInternalQueries).when(iHikariConnectionProxy1).compareAndSetState(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        hikariPool0.releaseConnection(iHikariConnectionProxy1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to remove an object from the bag that was not borrowed or reserved
         //
         verifyException("com.zaxxer.hikari.util.ConcurrentBag", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = null;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = true;
      hikariPool0.shutdown = boolean1;
      ConcurrentBag<IHikariConnectionProxy> concurrentBag0 = new ConcurrentBag<IHikariConnectionProxy>();
      assertNotNull(concurrentBag0);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      
      hikariPool0.idleConnectionBag = concurrentBag0;
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      concurrentBag0.add(iHikariConnectionProxy0);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean2 = FileSystemHandling.createFolder(evoSuiteFile1);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      concurrentBag0.addBagStateListener(hikariPool0);
      assertTrue(hikariPool0.shutdown);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      
      IHikariConnectionProxy iHikariConnectionProxy1 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(hikariPool0.debug).when(iHikariConnectionProxy1).isBrokenConnection();
      doReturn(hikariPool0.shutdown).when(iHikariConnectionProxy1).compareAndSetState(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        hikariPool0.releaseConnection(iHikariConnectionProxy1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isReadOnly);
      assertFalse(hikariPool0.debug);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = null;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = true;
      hikariPool0.shutdown = boolean1;
      ConcurrentBag<IHikariConnectionProxy> concurrentBag0 = new ConcurrentBag<IHikariConnectionProxy>();
      assertNotNull(concurrentBag0);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      
      hikariPool0.idleConnectionBag = concurrentBag0;
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      concurrentBag0.add(iHikariConnectionProxy0);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean2 = FileSystemHandling.createFolder(evoSuiteFile1);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      concurrentBag0.addBagStateListener(hikariPool0);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertTrue(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isReadOnly);
      assertFalse(hikariPool0.debug);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      
      boolean boolean3 = true;
      IHikariConnectionProxy iHikariConnectionProxy1 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(boolean3).when(iHikariConnectionProxy1).isBrokenConnection();
      doReturn(boolean3).when(iHikariConnectionProxy1).compareAndSetState(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        hikariPool0.releaseConnection(iHikariConnectionProxy1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(statement0).executeQuery(anyString());
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(iHikariConnectionProxy0).createStatement();
      long long0 = 243L;
      hikariPool0.configuration = hikariPool0.configuration;
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNotNull(hikariDataSource0);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      
      hikariPool0.configuration = (HikariConfig) hikariDataSource0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertTrue(hikariPool0.configuration.isJdbc4ConnectionTest());
      assertEquals(1, hikariPool0.configuration.getAcquireIncrement());
      assertEquals(0L, hikariPool0.configuration.getLeakDetectionThreshold());
      assertTrue(hikariPool0.configuration.isAutoCommit());
      assertEquals("HikariPool-0", hikariPool0.configuration.getPoolName());
      assertEquals((-1), hikariPool0.configuration.getTransactionIsolation());
      assertNull(hikariPool0.configuration.getJdbcUrl());
      assertFalse(hikariPool0.configuration.isReadOnly());
      assertFalse(hikariPool0.configuration.isInitializationFailFast());
      assertFalse(hikariPool0.configuration.isIsolateInternalQueries());
      assertEquals(1800000L, hikariPool0.configuration.getMaxLifetime());
      assertNull(hikariPool0.configuration.getDataSourceClassName());
      assertEquals(600000L, hikariPool0.configuration.getIdleTimeout());
      assertNull(hikariPool0.configuration.getConnectionTestQuery());
      assertEquals(3, hikariPool0.configuration.getAcquireRetries());
      assertEquals(5000L, hikariPool0.configuration.getConnectionTimeout());
      assertNull(hikariPool0.configuration.getCatalog());
      assertEquals(10, hikariPool0.configuration.getMinimumPoolSize());
      assertNull(hikariPool0.configuration.getConnectionCustomizerClassName());
      assertFalse(hikariPool0.configuration.isRegisterMbeans());
      assertEquals(750L, hikariPool0.configuration.getAcquireRetryDelay());
      assertEquals(60, hikariPool0.configuration.getMaximumPoolSize());
      assertNull(hikariPool0.configuration.getConnectionInitSql());
      
      HikariConfig.poolNumber = hikariDataSource0.transactionIsolation;
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      
      String string0 = "kE";
      hikariPool0.configuration.connectionTestQuery = string0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      boolean boolean0 = hikariPool0.isConnectionAlive(iHikariConnectionProxy0, long0);
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertTrue(boolean0);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      
      String string1 = hikariPool0.toString();
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals("HikariPool-0", string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      
      // Undeclared exception!
      try { 
        hikariPool0.bagIsEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = null;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = true;
      hikariPool0.shutdown = boolean1;
      ConcurrentBag<IHikariConnectionProxy> concurrentBag0 = new ConcurrentBag<IHikariConnectionProxy>();
      assertNotNull(concurrentBag0);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      
      hikariPool0.idleConnectionBag = concurrentBag0;
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      IHikariConnectionProxy iHikariConnectionProxy1 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iHikariConnectionProxy1).compareAndSetState(anyInt() , anyInt());
      boolean boolean2 = concurrentBag0.reserve(iHikariConnectionProxy1);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      
      concurrentBag0.add(iHikariConnectionProxy0);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean3 = FileSystemHandling.createFolder(evoSuiteFile1);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      concurrentBag0.addBagStateListener(hikariPool0);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertTrue(hikariPool0.shutdown);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      
      try { 
        hikariPool0.getConnection();
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Pool has been shutdown
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = null;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = true;
      hikariPool0.shutdown = boolean1;
      ConcurrentBag<IHikariConnectionProxy> concurrentBag0 = new ConcurrentBag<IHikariConnectionProxy>();
      assertNotNull(concurrentBag0);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      
      hikariPool0.idleConnectionBag = concurrentBag0;
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iHikariConnectionProxy0).compareAndSetState(anyInt() , anyInt());
      doReturn(0).when(iHikariConnectionProxy0).getState();
      concurrentBag0.add(iHikariConnectionProxy0);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean2 = FileSystemHandling.createFolder(evoSuiteFile1);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      concurrentBag0.addBagStateListener(hikariPool0);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.debug);
      assertTrue(hikariPool0.shutdown);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      
      boolean boolean3 = true;
      boolean boolean4 = true;
      hikariPool0.closeIdleConnections();
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.debug);
      assertTrue(hikariPool0.shutdown);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = null;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = true;
      hikariPool0.shutdown = boolean1;
      ConcurrentBag<IHikariConnectionProxy> concurrentBag0 = new ConcurrentBag<IHikariConnectionProxy>();
      assertNotNull(concurrentBag0);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      
      hikariPool0.idleConnectionBag = concurrentBag0;
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      concurrentBag0.add(iHikariConnectionProxy0);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean2 = FileSystemHandling.createFolder(evoSuiteFile1);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      concurrentBag0.addBagStateListener(hikariPool0);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertTrue(hikariPool0.shutdown);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      
      boolean boolean3 = true;
      boolean boolean4 = false;
      IHikariConnectionProxy iHikariConnectionProxy1 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(iHikariConnectionProxy1).compareAndSetState(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        hikariPool0.closeConnection(iHikariConnectionProxy1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to remove an object from the bag that was not borrowed or reserved
         //
         verifyException("com.zaxxer.hikari.util.ConcurrentBag", e);
      }
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0, hikariPool0.transactionIsolation);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = null;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = true;
      hikariPool0.shutdown = boolean1;
      ConcurrentBag<IHikariConnectionProxy> concurrentBag0 = new ConcurrentBag<IHikariConnectionProxy>();
      assertNotNull(concurrentBag0);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      
      hikariPool0.idleConnectionBag = concurrentBag0;
      int int0 = 2146601724;
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(iHikariConnectionProxy0).getState();
      concurrentBag0.add(iHikariConnectionProxy0);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean2 = FileSystemHandling.createFolder(evoSuiteFile1);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      concurrentBag0.addBagStateListener(hikariPool0);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertTrue(hikariPool0.shutdown);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      
      boolean boolean3 = true;
      hikariPool0.leakDetectionThreshold = (long) concurrentBag0.STATE_IN_USE;
      boolean boolean4 = true;
      hikariPool0.closeIdleConnections();
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(1L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertTrue(hikariPool0.shutdown);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = hikariPool0.catalog;
      stringArray0[1] = hikariPool0.catalog;
      stringArray0[2] = hikariPool0.catalog;
      stringArray0[3] = hikariPool0.catalog;
      stringArray0[4] = hikariPool0.catalog;
      stringArray0[5] = hikariPool0.catalog;
      int int1 = hikariPool0.getIdleConnections();
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(1L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertTrue(hikariPool0.shutdown);
      
      // Undeclared exception!
      try { 
        hikariPool0.logPoolState(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = null;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = true;
      hikariPool0.shutdown = boolean1;
      ConcurrentBag<IHikariConnectionProxy> concurrentBag0 = new ConcurrentBag<IHikariConnectionProxy>();
      assertNotNull(concurrentBag0);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      
      hikariPool0.idleConnectionBag = concurrentBag0;
      int int0 = 2146601724;
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(int0, concurrentBag0.STATE_NOT_IN_USE).when(iHikariConnectionProxy0).getState();
      concurrentBag0.add(iHikariConnectionProxy0);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean2 = FileSystemHandling.createFolder(evoSuiteFile1);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      concurrentBag0.addBagStateListener(hikariPool0);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertTrue(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      
      boolean boolean3 = true;
      hikariPool0.leakDetectionThreshold = (long) concurrentBag0.STATE_IN_USE;
      boolean boolean4 = true;
      hikariPool0.closeIdleConnections();
      assertEquals(1L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isReadOnly);
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertTrue(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = hikariPool0.catalog;
      stringArray0[1] = hikariPool0.catalog;
      stringArray0[2] = hikariPool0.catalog;
      stringArray0[3] = hikariPool0.catalog;
      stringArray0[4] = hikariPool0.catalog;
      stringArray0[5] = hikariPool0.catalog;
      int int1 = hikariPool0.getIdleConnections();
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(1L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isReadOnly);
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertTrue(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      
      // Undeclared exception!
      try { 
        hikariPool0.logPoolState(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.debug);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      
      int int0 = 1593;
      AtomicInteger atomicInteger0 = new AtomicInteger(int0);
      assertEquals("1593", atomicInteger0.toString());
      assertEquals((short)1593, atomicInteger0.shortValue());
      assertEquals(1593, atomicInteger0.get());
      assertEquals(1593.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(1593.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(1593, atomicInteger0.intValue());
      assertEquals((byte)57, atomicInteger0.byteValue());
      assertEquals(1593L, atomicInteger0.longValue());
      assertNotNull(atomicInteger0);
      
      hikariPool0.totalConnections = atomicInteger0;
      assertEquals(1593, hikariPool0.getTotalConnections());
      assertEquals("1593", atomicInteger0.toString());
      assertEquals((short)1593, atomicInteger0.shortValue());
      assertEquals(1593, atomicInteger0.get());
      assertEquals(1593.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(1593.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(1593, atomicInteger0.intValue());
      assertEquals((byte)57, atomicInteger0.byteValue());
      assertEquals(1593L, atomicInteger0.longValue());
      assertEquals(1593.0, hikariPool0.totalConnections.doubleValue(), 0.01);
      assertEquals("1593", hikariPool0.totalConnections.toString());
      assertEquals((short)1593, hikariPool0.totalConnections.shortValue());
      assertEquals(1593L, hikariPool0.totalConnections.longValue());
      assertEquals(1593, hikariPool0.totalConnections.get());
      assertEquals((byte)57, hikariPool0.totalConnections.byteValue());
      assertEquals(1593, hikariPool0.totalConnections.intValue());
      assertEquals(1593.0F, hikariPool0.totalConnections.floatValue(), 0.01F);
      
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      IntUnaryOperator intUnaryOperator0 = IntUnaryOperator.identity();
      assertNotNull(intUnaryOperator0);
      
      int int1 = intUnaryOperator0.applyAsInt(int0);
      assertEquals(1593, int1);
      assertTrue(int1 == int0);
      
      int int2 = atomicInteger0.updateAndGet(intUnaryOperator0);
      assertEquals("1593", atomicInteger0.toString());
      assertEquals((short)1593, atomicInteger0.shortValue());
      assertEquals(1593, atomicInteger0.get());
      assertEquals(1593.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(1593.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(1593, atomicInteger0.intValue());
      assertEquals((byte)57, atomicInteger0.byteValue());
      assertEquals(1593L, atomicInteger0.longValue());
      assertEquals(1593, int2);
      assertTrue(int0 == int1);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      IHikariConnectionProxy iHikariConnectionProxy1 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(iHikariConnectionProxy1).createStatement();
      long long0 = 421L;
      // Undeclared exception!
      try { 
        hikariPool0.isConnectionAlive(iHikariConnectionProxy1, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isAutoCommit);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = null;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = true;
      hikariPool0.shutdown = boolean1;
      ConcurrentBag<IHikariConnectionProxy> concurrentBag0 = new ConcurrentBag<IHikariConnectionProxy>();
      assertNotNull(concurrentBag0);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      
      hikariPool0.idleConnectionBag = concurrentBag0;
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(hikariPool0.transactionIsolation).when(iHikariConnectionProxy0).getState();
      concurrentBag0.add(iHikariConnectionProxy0);
      assertTrue(hikariPool0.shutdown);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean3 = FileSystemHandling.createFolder(evoSuiteFile1);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      concurrentBag0.addBagStateListener(hikariPool0);
      assertTrue(hikariPool0.shutdown);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      
      boolean boolean4 = true;
      hikariPool0.leakDetectionThreshold = (long) concurrentBag0.STATE_IN_USE;
      boolean boolean5 = true;
      String[] stringArray0 = new String[6];
      stringArray0[0] = hikariPool0.catalog;
      stringArray0[1] = hikariPool0.catalog;
      stringArray0[2] = hikariPool0.catalog;
      stringArray0[3] = hikariPool0.catalog;
      stringArray0[4] = hikariPool0.catalog;
      stringArray0[5] = hikariPool0.catalog;
      int int0 = hikariPool0.getIdleConnections();
      assertEquals(1, int0);
      assertTrue(hikariPool0.shutdown);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(1L, hikariPool0.leakDetectionThreshold);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isAutoCommit);
      
      int int1 = hikariPool0.getThreadsAwaitingConnection();
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertTrue(hikariPool0.shutdown);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(1L, hikariPool0.leakDetectionThreshold);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isAutoCommit);
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(iHikariConnectionProxy0).isValid(anyInt());
      long long0 = 243L;
      hikariPool0.configuration = hikariPool0.configuration;
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertNotNull(hikariDataSource0);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      hikariPool0.configuration = (HikariConfig) hikariDataSource0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertNull(hikariPool0.configuration.getDataSourceClassName());
      assertFalse(hikariPool0.configuration.isReadOnly());
      assertEquals("HikariPool-0", hikariPool0.configuration.getPoolName());
      assertEquals(10, hikariPool0.configuration.getMinimumPoolSize());
      assertEquals(5000L, hikariPool0.configuration.getConnectionTimeout());
      assertTrue(hikariPool0.configuration.isJdbc4ConnectionTest());
      assertEquals(3, hikariPool0.configuration.getAcquireRetries());
      assertNull(hikariPool0.configuration.getConnectionTestQuery());
      assertFalse(hikariPool0.configuration.isIsolateInternalQueries());
      assertEquals(1800000L, hikariPool0.configuration.getMaxLifetime());
      assertEquals(600000L, hikariPool0.configuration.getIdleTimeout());
      assertFalse(hikariPool0.configuration.isInitializationFailFast());
      assertEquals(1, hikariPool0.configuration.getAcquireIncrement());
      assertNull(hikariPool0.configuration.getJdbcUrl());
      assertEquals(0L, hikariPool0.configuration.getLeakDetectionThreshold());
      assertEquals((-1), hikariPool0.configuration.getTransactionIsolation());
      assertTrue(hikariPool0.configuration.isAutoCommit());
      assertEquals(60, hikariPool0.configuration.getMaximumPoolSize());
      assertNull(hikariPool0.configuration.getConnectionCustomizerClassName());
      assertFalse(hikariPool0.configuration.isRegisterMbeans());
      assertNull(hikariPool0.configuration.getConnectionInitSql());
      assertNull(hikariPool0.configuration.getCatalog());
      assertEquals(750L, hikariPool0.configuration.getAcquireRetryDelay());
      
      HikariConfig.poolNumber = hikariDataSource0.transactionIsolation;
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      
      String string0 = "kE";
      hikariPool0.configuration.connectionTestQuery = string0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      boolean boolean2 = true;
      hikariPool0.jdbc4ConnectionTest = boolean2;
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      boolean boolean3 = hikariPool0.isConnectionAlive(iHikariConnectionProxy0, long0);
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertTrue(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      
      IHikariConnectionProxy iHikariConnectionProxy1 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        hikariPool0.bagIsEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      
      int int0 = 1593;
      boolean boolean0 = false;
      hikariPool0.shutdown = boolean0;
      AtomicInteger atomicInteger0 = new AtomicInteger(int0);
      assertEquals(1593, atomicInteger0.get());
      assertEquals((byte)57, atomicInteger0.byteValue());
      assertEquals(1593, atomicInteger0.intValue());
      assertEquals(1593L, atomicInteger0.longValue());
      assertEquals(1593.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals("1593", atomicInteger0.toString());
      assertEquals((short)1593, atomicInteger0.shortValue());
      assertEquals(1593.0F, atomicInteger0.floatValue(), 0.01F);
      assertNotNull(atomicInteger0);
      
      hikariPool0.totalConnections = atomicInteger0;
      assertEquals(1593, hikariPool0.getTotalConnections());
      assertEquals(1593, atomicInteger0.get());
      assertEquals((byte)57, atomicInteger0.byteValue());
      assertEquals(1593, atomicInteger0.intValue());
      assertEquals(1593L, atomicInteger0.longValue());
      assertEquals(1593.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals("1593", atomicInteger0.toString());
      assertEquals((short)1593, atomicInteger0.shortValue());
      assertEquals(1593.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals((short)1593, hikariPool0.totalConnections.shortValue());
      assertEquals(1593L, hikariPool0.totalConnections.longValue());
      assertEquals(1593, hikariPool0.totalConnections.get());
      assertEquals(1593.0F, hikariPool0.totalConnections.floatValue(), 0.01F);
      assertEquals(1593.0, hikariPool0.totalConnections.doubleValue(), 0.01);
      assertEquals(1593, hikariPool0.totalConnections.intValue());
      assertEquals("1593", hikariPool0.totalConnections.toString());
      assertEquals((byte)57, hikariPool0.totalConnections.byteValue());
      
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      IntUnaryOperator intUnaryOperator0 = IntUnaryOperator.identity();
      assertNotNull(intUnaryOperator0);
      
      int int1 = intUnaryOperator0.applyAsInt(int0);
      assertEquals(1593, int1);
      assertTrue(int1 == int0);
      
      int int2 = atomicInteger0.updateAndGet(intUnaryOperator0);
      assertEquals(1593, atomicInteger0.get());
      assertEquals((byte)57, atomicInteger0.byteValue());
      assertEquals(1593, atomicInteger0.intValue());
      assertEquals(1593L, atomicInteger0.longValue());
      assertEquals(1593.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals("1593", atomicInteger0.toString());
      assertEquals((short)1593, atomicInteger0.shortValue());
      assertEquals(1593.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(1593, int2);
      assertTrue(int0 == int1);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      long long0 = 421L;
      String[] stringArray0 = new String[4];
      stringArray0[0] = hikariPool0.catalog;
      stringArray0[1] = hikariPool0.catalog;
      stringArray0[2] = hikariPool0.catalog;
      hikariPool0.catalog = hikariPool0.catalog;
      assertEquals(1593, hikariPool0.getTotalConnections());
      
      // Undeclared exception!
      try { 
        hikariPool0.logPoolState(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = null;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = false;
      hikariPool0.shutdown = boolean1;
      ConcurrentBag<IHikariConnectionProxy> concurrentBag0 = new ConcurrentBag<IHikariConnectionProxy>();
      assertNotNull(concurrentBag0);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      
      hikariPool0.idleConnectionBag = concurrentBag0;
      int int0 = 2146601724;
      int int1 = 3514;
      boolean boolean2 = true;
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(boolean2, false, false).when(iHikariConnectionProxy0).compareAndSetState(anyInt() , anyInt());
      doReturn(int0, int1, hikariPool0.idleConnectionBag.STATE_NOT_IN_USE).when(iHikariConnectionProxy0).getState();
      concurrentBag0.add(iHikariConnectionProxy0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean3 = FileSystemHandling.createFolder(evoSuiteFile1);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      concurrentBag0.addBagStateListener(hikariPool0);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      
      boolean boolean4 = true;
      hikariPool0.leakDetectionThreshold = (long) concurrentBag0.STATE_IN_USE;
      boolean boolean5 = false;
      hikariPool0.closeIdleConnections();
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isReadOnly);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertEquals(1L, hikariPool0.leakDetectionThreshold);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = hikariPool0.catalog;
      stringArray0[1] = hikariPool0.catalog;
      stringArray0[2] = hikariPool0.catalog;
      stringArray0[3] = stringArray0[0];
      stringArray0[4] = hikariPool0.catalog;
      int int2 = hikariPool0.getIdleConnections();
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isReadOnly);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertEquals(1L, hikariPool0.leakDetectionThreshold);
      
      // Undeclared exception!
      try { 
        hikariPool0.closeIdleConnections();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to remove an object from the bag that was not borrowed or reserved
         //
         verifyException("com.zaxxer.hikari.util.ConcurrentBag", e);
      }
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      long long0 = 243L;
      hikariPool0.configuration = hikariPool0.configuration;
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNotNull(hikariDataSource0);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      
      hikariPool0.configuration = (HikariConfig) hikariDataSource0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertFalse(hikariPool0.configuration.isInitializationFailFast());
      assertFalse(hikariPool0.configuration.isRegisterMbeans());
      assertEquals(750L, hikariPool0.configuration.getAcquireRetryDelay());
      assertFalse(hikariPool0.configuration.isIsolateInternalQueries());
      assertEquals(1800000L, hikariPool0.configuration.getMaxLifetime());
      assertNull(hikariPool0.configuration.getConnectionInitSql());
      assertEquals(600000L, hikariPool0.configuration.getIdleTimeout());
      assertNull(hikariPool0.configuration.getConnectionTestQuery());
      assertEquals(3, hikariPool0.configuration.getAcquireRetries());
      assertEquals(5000L, hikariPool0.configuration.getConnectionTimeout());
      assertTrue(hikariPool0.configuration.isJdbc4ConnectionTest());
      assertEquals(1, hikariPool0.configuration.getAcquireIncrement());
      assertEquals(0L, hikariPool0.configuration.getLeakDetectionThreshold());
      assertNull(hikariPool0.configuration.getJdbcUrl());
      assertFalse(hikariPool0.configuration.isReadOnly());
      assertNull(hikariPool0.configuration.getDataSourceClassName());
      assertNull(hikariPool0.configuration.getConnectionCustomizerClassName());
      assertEquals(60, hikariPool0.configuration.getMaximumPoolSize());
      assertNull(hikariPool0.configuration.getCatalog());
      assertEquals(10, hikariPool0.configuration.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariPool0.configuration.getPoolName());
      assertTrue(hikariPool0.configuration.isAutoCommit());
      assertEquals((-1), hikariPool0.configuration.getTransactionIsolation());
      
      hikariPool0.isIsolateInternalQueries = hikariDataSource0.isJdbc4connectionTest;
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      
      int int0 = 1315;
      hikariPool0.configuration.acquireRetries = int0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      HikariConfig.poolNumber = hikariDataSource0.transactionIsolation;
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1315, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      
      String string0 = "kE";
      hikariPool0.configuration.connectionTestQuery = string0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      // Undeclared exception!
      try { 
        hikariPool0.fillPool();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.debug);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = hikariPool0.shutdown;
      assertFalse(boolean0);
      
      HikariPool.HouseKeeper hikariPool_HouseKeeper0 = hikariPool0.new HouseKeeper();
      assertEquals(0L, hikariPool_HouseKeeper0.scheduledExecutionTime());
      assertNotNull(hikariPool_HouseKeeper0);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.debug);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      
      boolean boolean1 = hikariPool_HouseKeeper0.cancel();
      assertEquals(0L, hikariPool_HouseKeeper0.scheduledExecutionTime());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.debug);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      
      boolean boolean2 = hikariPool_HouseKeeper0.cancel();
      assertEquals(0L, hikariPool_HouseKeeper0.scheduledExecutionTime());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.debug);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      
      // Undeclared exception!
      try { 
        hikariPool0.executeInitSql(iHikariConnectionProxy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      
      long long0 = 243L;
      hikariPool0.configuration = hikariPool0.configuration;
      boolean boolean0 = true;
      hikariPool0.isAutoCommit = boolean0;
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertNotNull(hikariDataSource0);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      
      hikariPool0.configuration = (HikariConfig) hikariDataSource0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertNull(hikariPool0.configuration.getCatalog());
      assertEquals(10, hikariPool0.configuration.getMinimumPoolSize());
      assertFalse(hikariPool0.configuration.isReadOnly());
      assertNull(hikariPool0.configuration.getDataSourceClassName());
      assertFalse(hikariPool0.configuration.isIsolateInternalQueries());
      assertFalse(hikariPool0.configuration.isInitializationFailFast());
      assertEquals(5000L, hikariPool0.configuration.getConnectionTimeout());
      assertNull(hikariPool0.configuration.getConnectionTestQuery());
      assertTrue(hikariPool0.configuration.isJdbc4ConnectionTest());
      assertNull(hikariPool0.configuration.getJdbcUrl());
      assertEquals(3, hikariPool0.configuration.getAcquireRetries());
      assertNull(hikariPool0.configuration.getConnectionInitSql());
      assertEquals(60, hikariPool0.configuration.getMaximumPoolSize());
      assertEquals((-1), hikariPool0.configuration.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariPool0.configuration.getPoolName());
      assertEquals(1800000L, hikariPool0.configuration.getMaxLifetime());
      assertEquals(600000L, hikariPool0.configuration.getIdleTimeout());
      assertEquals(0L, hikariPool0.configuration.getLeakDetectionThreshold());
      assertEquals(1, hikariPool0.configuration.getAcquireIncrement());
      assertFalse(hikariPool0.configuration.isRegisterMbeans());
      assertTrue(hikariPool0.configuration.isAutoCommit());
      assertEquals(750L, hikariPool0.configuration.getAcquireRetryDelay());
      assertNull(hikariPool0.configuration.getConnectionCustomizerClassName());
      
      String string0 = "kE";
      hikariPool0.configuration.connectionTestQuery = string0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      // Undeclared exception!
      try { 
        hikariPool0.bagIsEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.shutdown);
      
      long long0 = 243L;
      hikariPool0.configuration = hikariPool0.configuration;
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNotNull(hikariDataSource0);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      hikariPool0.configuration = (HikariConfig) hikariDataSource0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertFalse(hikariPool0.configuration.isIsolateInternalQueries());
      assertEquals(10, hikariPool0.configuration.getMinimumPoolSize());
      assertNull(hikariPool0.configuration.getJdbcUrl());
      assertEquals(1800000L, hikariPool0.configuration.getMaxLifetime());
      assertNull(hikariPool0.configuration.getDataSourceClassName());
      assertEquals(3, hikariPool0.configuration.getAcquireRetries());
      assertEquals(600000L, hikariPool0.configuration.getIdleTimeout());
      assertNull(hikariPool0.configuration.getConnectionTestQuery());
      assertFalse(hikariPool0.configuration.isReadOnly());
      assertTrue(hikariPool0.configuration.isJdbc4ConnectionTest());
      assertFalse(hikariPool0.configuration.isInitializationFailFast());
      assertEquals(5000L, hikariPool0.configuration.getConnectionTimeout());
      assertTrue(hikariPool0.configuration.isAutoCommit());
      assertEquals("HikariPool-0", hikariPool0.configuration.getPoolName());
      assertEquals(60, hikariPool0.configuration.getMaximumPoolSize());
      assertEquals(1, hikariPool0.configuration.getAcquireIncrement());
      assertEquals(0L, hikariPool0.configuration.getLeakDetectionThreshold());
      assertEquals(750L, hikariPool0.configuration.getAcquireRetryDelay());
      assertEquals((-1), hikariPool0.configuration.getTransactionIsolation());
      assertNull(hikariPool0.configuration.getConnectionInitSql());
      assertNull(hikariPool0.configuration.getCatalog());
      assertNull(hikariPool0.configuration.getConnectionCustomizerClassName());
      assertFalse(hikariPool0.configuration.isRegisterMbeans());
      
      hikariPool0.isRegisteredMbeans = hikariDataSource0.isJdbc4connectionTest;
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      
      HikariConfig.poolNumber = hikariDataSource0.transactionIsolation;
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      
      String string0 = "kE";
      hikariPool0.configuration.connectionTestQuery = string0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      // Undeclared exception!
      try { 
        hikariPool0.addConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.shutdown);
      
      boolean boolean0 = false;
      AtomicInteger atomicInteger0 = new AtomicInteger(hikariPool0.transactionIsolation);
      assertEquals(0.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(0, atomicInteger0.get());
      assertEquals(0.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals("0", atomicInteger0.toString());
      assertEquals((short)0, atomicInteger0.shortValue());
      assertEquals(0, atomicInteger0.intValue());
      assertEquals((byte)0, atomicInteger0.byteValue());
      assertEquals(0L, atomicInteger0.longValue());
      assertNotNull(atomicInteger0);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.shutdown);
      
      hikariPool0.totalConnections = atomicInteger0;
      assertEquals(0, hikariPool0.getTotalConnections());
      assertEquals(0.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(0, atomicInteger0.get());
      assertEquals(0.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals("0", atomicInteger0.toString());
      assertEquals((short)0, atomicInteger0.shortValue());
      assertEquals(0, atomicInteger0.intValue());
      assertEquals((byte)0, atomicInteger0.byteValue());
      assertEquals(0L, atomicInteger0.longValue());
      assertEquals(0.0, hikariPool0.totalConnections.doubleValue(), 0.01);
      assertEquals((short)0, hikariPool0.totalConnections.shortValue());
      assertEquals(0, hikariPool0.totalConnections.intValue());
      assertEquals((byte)0, hikariPool0.totalConnections.byteValue());
      assertEquals(0L, hikariPool0.totalConnections.longValue());
      assertEquals(0.0F, hikariPool0.totalConnections.floatValue(), 0.01F);
      assertEquals("0", hikariPool0.totalConnections.toString());
      assertEquals(0, hikariPool0.totalConnections.get());
      
      hikariPool0.isReadOnly = boolean0;
      assertEquals(0, hikariPool0.getTotalConnections());
      
      long long0 = (-1L);
      hikariPool0.leakDetectionThreshold = long0;
      assertEquals(0, hikariPool0.getTotalConnections());
      
      int int0 = hikariPool0.getTotalConnections();
      assertEquals(0, hikariPool0.getTotalConnections());
      assertEquals(0, int0);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals((-1L), hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.shutdown);
      
      int int1 = 3;
      atomicInteger0.lazySet(int1);
      assertEquals(3, hikariPool0.getTotalConnections());
      assertEquals("3", atomicInteger0.toString());
      assertEquals(3.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals((short)3, atomicInteger0.shortValue());
      assertEquals((byte)3, atomicInteger0.byteValue());
      assertEquals(3, atomicInteger0.get());
      assertEquals(3, atomicInteger0.intValue());
      assertEquals(3.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(3L, atomicInteger0.longValue());
      assertFalse(int1 == int0);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals((-1L), hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.shutdown);
      
      // Undeclared exception!
      try { 
        hikariPool0.getThreadsAwaitingConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      long long0 = 5000L;
      System.setCurrentTimeMillis(long0);
      Properties properties0 = null;
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNotNull(hikariConfig0);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      boolean boolean0 = true;
      hikariConfig0.isJdbc4connectionTest = boolean0;
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      String string0 = "R =s";
      hikariConfig0.jdbcUrl = string0;
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("R =s", hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      boolean boolean1 = false;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      hikariConfig0.maxLifetime = long0;
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("R =s", hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      hikariConfig0.setJdbc4ConnectionTest(boolean1);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("R =s", hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(boolean1 == boolean0);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      HikariPool hikariPool0 = null;
      try {
        hikariPool0 = new HikariPool(hikariConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to get driver for JDBC URL R =s
         //
         verifyException("com.zaxxer.hikari.util.DriverDataSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test74()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertNotNull(hikariPool0);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.shutdown);
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      long long0 = 243L;
      hikariPool0.configuration = hikariPool0.configuration;
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNotNull(hikariDataSource0);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      
      hikariPool0.configuration = (HikariConfig) hikariDataSource0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertNull(hikariPool0.configuration.getConnectionTestQuery());
      assertEquals(1, hikariPool0.configuration.getAcquireIncrement());
      assertNull(hikariPool0.configuration.getConnectionInitSql());
      assertNull(hikariPool0.configuration.getJdbcUrl());
      assertTrue(hikariPool0.configuration.isAutoCommit());
      assertEquals((-1), hikariPool0.configuration.getTransactionIsolation());
      assertTrue(hikariPool0.configuration.isJdbc4ConnectionTest());
      assertFalse(hikariPool0.configuration.isReadOnly());
      assertFalse(hikariPool0.configuration.isInitializationFailFast());
      assertNull(hikariPool0.configuration.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariPool0.configuration.getPoolName());
      assertFalse(hikariPool0.configuration.isIsolateInternalQueries());
      assertEquals(3, hikariPool0.configuration.getAcquireRetries());
      assertEquals(600000L, hikariPool0.configuration.getIdleTimeout());
      assertEquals(1800000L, hikariPool0.configuration.getMaxLifetime());
      assertNull(hikariPool0.configuration.getCatalog());
      assertEquals(10, hikariPool0.configuration.getMinimumPoolSize());
      assertEquals(5000L, hikariPool0.configuration.getConnectionTimeout());
      assertNull(hikariPool0.configuration.getConnectionCustomizerClassName());
      assertFalse(hikariPool0.configuration.isRegisterMbeans());
      assertEquals(750L, hikariPool0.configuration.getAcquireRetryDelay());
      assertEquals(60, hikariPool0.configuration.getMaximumPoolSize());
      assertEquals(0L, hikariPool0.configuration.getLeakDetectionThreshold());
      
      boolean boolean0 = true;
      hikariDataSource0.setAutoCommit(boolean0);
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      
      hikariPool0.isIsolateInternalQueries = hikariDataSource0.isJdbc4connectionTest;
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      
      int int0 = 41;
      hikariPool0.configuration.acquireRetries = int0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      HikariConfig.poolNumber = hikariDataSource0.transactionIsolation;
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(41, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      
      String string0 = "s_";
      Connection connection0 = null;
      hikariPool0.executeInitSql(connection0);
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertFalse(hikariPool0.isAutoCommit);
      assertTrue(hikariPool0.isIsolateInternalQueries);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isReadOnly);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.shutdown);
      
      hikariPool0.configuration.connectionTestQuery = string0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      // Undeclared exception!
      try { 
        hikariPool0.fillPool();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }
}
