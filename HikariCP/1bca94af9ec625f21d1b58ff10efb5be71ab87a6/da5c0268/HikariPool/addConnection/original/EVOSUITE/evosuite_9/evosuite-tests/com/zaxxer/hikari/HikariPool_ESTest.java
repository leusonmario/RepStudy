/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 07 04:12:05 GMT 2021
 */

package com.zaxxer.hikari;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import com.zaxxer.hikari.HikariPool;
import com.zaxxer.hikari.proxy.IHikariConnectionProxy;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HikariPool_ESTest extends HikariPool_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNotNull(hikariDataSource0);
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      
      String string0 = "MAINTAIN_MINIMUM";
      hikariDataSource0.setDataSourceClassName(string0);
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("MAINTAIN_MINIMUM", hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      
      HikariPool hikariPool0 = null;
      try {
        hikariPool0 = new HikariPool(hikariDataSource0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create datasource instance: MAINTAIN_MINIMUM
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNotNull(hikariDataSource0);
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      
      String string0 = ")|";
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      assertNotNull(hikariDataSource1);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertFalse(hikariDataSource1.isReadOnly());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertNull(hikariDataSource1.getCatalog());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      
      hikariDataSource0.setDataSource(hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertFalse(hikariDataSource1.isReadOnly());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertNull(hikariDataSource1.getCatalog());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      
      hikariDataSource0.setDataSourceClassName(string0);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(")|", hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      
      HikariPool hikariPool0 = new HikariPool(hikariDataSource0);
      assertNotNull(hikariPool0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(")|", hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      hikariPool0.bagIsEmpty();
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(")|", hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      long long0 = (-1531L);
      // Undeclared exception!
      try { 
        hikariDataSource0.setConnectionTimeout(long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // connectionTimeout cannot be less than 100ms
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNotNull(hikariConfig0);
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      HikariPool hikariPool0 = null;
      try {
        hikariPool0 = new HikariPool(hikariConfig0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      HikariConfig hikariConfig0 = null;
      HikariPool hikariPool0 = null;
      try {
        hikariPool0 = new HikariPool(hikariConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNotNull(hikariConfig0);
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      
      HikariPool hikariPool0 = null;
      try {
        hikariPool0 = new HikariPool(hikariConfig0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNotNull(hikariConfig0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      String string0 = "Property file ";
      hikariConfig0.setConnectionInitSql(string0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("Property file ", hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      int int0 = 0;
      hikariConfig0.setMaximumPoolSize(int0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("Property file ", hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      String string1 = "V/";
      hikariConfig0.setTransactionIsolation(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("Property file ", hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      long long0 = 5425L;
      hikariConfig0.setLeakDetectionThreshold(long0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5425L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("Property file ", hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      String string2 = "";
      hikariConfig0.setDataSourceClassName(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5425L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("Property file ", hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      HikariPool hikariPool0 = null;
      try {
        hikariPool0 = new HikariPool(hikariConfig0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid transaction isolation value: V/
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNotNull(hikariDataSource0);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      
      String string0 = "acquireRetryDelay cannot be negative";
      hikariDataSource0.setPoolName(string0);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("acquireRetryDelay cannot be negative", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      
      String string1 = "";
      hikariDataSource0.setDataSourceClassName(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("acquireRetryDelay cannot be negative", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      
      hikariDataSource0.setConnectionInitSql(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("acquireRetryDelay cannot be negative", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("", hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      
      HikariPool hikariPool0 = null;
      try {
        hikariPool0 = new HikariPool(hikariDataSource0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create datasource instance: 
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNotNull(hikariConfig0);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      
      String string0 = "HikariCP pool {} is being shutdown.";
      hikariConfig0.setDataSourceClassName(string0);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariCP pool {} is being shutdown.", hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      
      long long0 = 1460L;
      hikariConfig0.setIdleTimeout(long0);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1460L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariCP pool {} is being shutdown.", hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      
      HikariPool hikariPool0 = null;
      try {
        hikariPool0 = new HikariPool(hikariConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create datasource instance: HikariCP pool {} is being shutdown.
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNotNull(hikariDataSource0);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      
      String string0 = "com.zaxxer.hikari.HikariPool$1";
      hikariDataSource0.setDataSourceClassName(string0);
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("com.zaxxer.hikari.HikariPool$1", hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      
      HikariPool hikariPool0 = null;
      try {
        hikariPool0 = new HikariPool(hikariDataSource0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create datasource instance: com.zaxxer.hikari.HikariPool$1
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNotNull(hikariDataSource0);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      
      String string0 = ")|";
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      assertNotNull(hikariDataSource1);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource1.isReadOnly());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      
      hikariDataSource0.setDataSource(hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource1.isReadOnly());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      
      hikariDataSource0.setDataSourceClassName(string0);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(")|", hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      
      HikariPool hikariPool0 = new HikariPool(hikariDataSource0);
      assertNotNull(hikariPool0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(")|", hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0, hikariPool0.getTotalConnections());
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      long long0 = (-1531L);
      // Undeclared exception!
      try { 
        hikariDataSource0.setConnectionTimeout(long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // connectionTimeout cannot be less than 100ms
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNotNull(hikariDataSource0);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      
      String string0 = ")|";
      hikariDataSource0.setDataSource(hikariDataSource0);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      
      hikariDataSource0.setDataSourceClassName(string0);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(")|", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      
      HikariPool hikariPool0 = null;
      try {
        hikariPool0 = new HikariPool(hikariDataSource0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }
}
