/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 18:13:03 GMT 2021
 */

package com.zaxxer.hikari;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import com.zaxxer.hikari.HikariPool;
import com.zaxxer.hikari.IConnectionCustomizer;
import java.util.Enumeration;
import java.util.Properties;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import javax.sql.DataSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HikariConfig_ESTest extends HikariConfig_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertNotNull(hikariConfig0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      Object object0 = properties0.put(hikariConfig0, hikariConfig0);
      assertNull(object0);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      long long0 = 0L;
      hikariConfig0.setConnectionTimeout(long0);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(2147483647L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNotNull(hikariDataSource0);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      
      Object object2 = properties0.put(object1, hikariDataSource0);
      assertNull(object2);
      assertEquals(2, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      
      int int0 = 180;
      hikariConfig0.setAcquireIncrement(int0);
      assertEquals(2, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(2147483647L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(180, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      long long1 = (-1288L);
      hikariConfig0.setLeakDetectionThreshold(long1);
      assertFalse(long1 == long0);
      assertEquals(2, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1288L), hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(2147483647L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(180, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      String string0 = hikariConfig0.getConnectionCustomizerClassName();
      assertNull(string0);
      assertEquals(2, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1288L), hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(2147483647L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(180, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      assertNull(iConnectionCustomizer0);
      assertEquals(2, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1288L), hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(2147483647L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(180, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      int int1 = hikariConfig0.getMaximumPoolSize();
      assertEquals(60, int1);
      assertFalse(int1 == int0);
      assertEquals(2, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1288L), hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(2147483647L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(180, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      boolean boolean0 = hikariConfig0.isRegisterMbeans();
      assertFalse(boolean0);
      assertEquals(2, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1288L), hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(2147483647L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(180, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      Properties properties1 = hikariConfig0.getDataSourceProperties();
      assertNotNull(properties1);
      assertNotSame(properties1, properties0);
      assertNotSame(properties0, properties1);
      assertFalse(properties1.equals((Object)properties0));
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertEquals(2, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1288L), hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(2147483647L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(180, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      String string1 = hikariConfig0.getJdbcUrl();
      assertNull(string1);
      assertNotSame(properties0, properties1);
      assertFalse(properties0.equals((Object)properties1));
      assertEquals(2, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1288L), hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(2147483647L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(180, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      hikariConfig0.setAcquireRetryDelay(int1);
      assertNotSame(properties0, properties1);
      assertFalse(properties0.equals((Object)properties1));
      assertFalse(int1 == int0);
      assertEquals(2, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1288L), hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(2147483647L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(180, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Property file  was not found.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNotNull(hikariConfig0);
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isReadOnly());
      
      int int0 = 60;
      hikariConfig0.setMaximumPoolSize(int0);
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isReadOnly());
      
      HikariConfig hikariConfig1 = new HikariConfig();
      assertNotNull(hikariConfig1);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getJdbcUrl());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertTrue(hikariConfig1.isAutoCommit());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertNull(hikariConfig1.getCatalog());
      assertFalse(hikariConfig1.isReadOnly());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      
      hikariConfig0.copyState(hikariConfig1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getJdbcUrl());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertTrue(hikariConfig1.isAutoCommit());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertNull(hikariConfig1.getCatalog());
      assertFalse(hikariConfig1.isReadOnly());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      
      String string0 = hikariConfig1.getDataSourceClassName();
      assertNull(string0);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getJdbcUrl());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertTrue(hikariConfig1.isAutoCommit());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertNull(hikariConfig1.getCatalog());
      assertFalse(hikariConfig1.isReadOnly());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      
      hikariConfig1.setJdbcUrl(string0);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getJdbcUrl());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertTrue(hikariConfig1.isAutoCommit());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertNull(hikariConfig1.getCatalog());
      assertFalse(hikariConfig1.isReadOnly());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      
      hikariConfig0.setConnectionInitSql(string0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getJdbcUrl());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertTrue(hikariConfig1.isAutoCommit());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertNull(hikariConfig1.getCatalog());
      assertFalse(hikariConfig1.isReadOnly());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      
      String string1 = "";
      hikariConfig0.setPoolName(string1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      
      boolean boolean0 = false;
      hikariConfig0.setReadOnly(boolean0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      
      String string2 = "";
      hikariConfig1.setConnectionInitSql(string2);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertSame(string2, string1);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals("", hikariConfig1.getConnectionInitSql());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getJdbcUrl());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertTrue(hikariConfig1.isAutoCommit());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertNull(hikariConfig1.getCatalog());
      assertFalse(hikariConfig1.isReadOnly());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      
      boolean boolean1 = true;
      hikariConfig1.setReadOnly(boolean1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(boolean1 == boolean0);
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals("", hikariConfig1.getConnectionInitSql());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getJdbcUrl());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertTrue(hikariConfig1.isAutoCommit());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertTrue(hikariConfig1.isReadOnly());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertNull(hikariConfig1.getCatalog());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      
      long long0 = 30L;
      hikariConfig1.setAcquireRetryDelay(long0);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals("", hikariConfig1.getConnectionInitSql());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getJdbcUrl());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertTrue(hikariConfig1.isAutoCommit());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertTrue(hikariConfig1.isReadOnly());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(30L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertNull(hikariConfig1.getCatalog());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig1.getConnectionCustomizer();
      assertNull(iConnectionCustomizer0);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals("", hikariConfig1.getConnectionInitSql());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getJdbcUrl());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertTrue(hikariConfig1.isAutoCommit());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertTrue(hikariConfig1.isReadOnly());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(30L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertNull(hikariConfig1.getCatalog());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      
      long long1 = hikariConfig1.getMaxLifetime();
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(1800000L, long1);
      assertFalse(long1 == long0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals("", hikariConfig1.getConnectionInitSql());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getJdbcUrl());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertTrue(hikariConfig1.isAutoCommit());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertTrue(hikariConfig1.isReadOnly());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(30L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertNull(hikariConfig1.getCatalog());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      
      String string3 = "t}6\"n_'p+";
      hikariConfig1.setCatalog(string3);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals("", hikariConfig1.getConnectionInitSql());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getJdbcUrl());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertTrue(hikariConfig1.isAutoCommit());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertTrue(hikariConfig1.isReadOnly());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(30L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("t}6\"n_'p+", hikariConfig1.getCatalog());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      
      String string4 = hikariConfig1.getConnectionInitSql();
      assertNotNull(string4);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNotSame(string4, string3);
      assertSame(string4, string2);
      assertSame(string4, string1);
      assertEquals("", string4);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(string4.equals((Object)string3));
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals("", hikariConfig1.getConnectionInitSql());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getJdbcUrl());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertTrue(hikariConfig1.isAutoCommit());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertTrue(hikariConfig1.isReadOnly());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(30L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("t}6\"n_'p+", hikariConfig1.getCatalog());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      
      // Undeclared exception!
      try { 
        hikariConfig1.setDriverClassName(string3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // driverClassName specified class 't}6\"n_'p+' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertNotNull(hikariConfig0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      
      boolean boolean0 = false;
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = 0;
      String string0 = "";
      hikariConfig0.setConnectionCustomizerClassName(string0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      
      hikariConfig0.setAcquireRetries(int0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      
      boolean boolean1 = true;
      hikariConfig0.setJdbc4ConnectionTest(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      
      hikariConfig0.setRegisterMbeans(boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      
      int int1 = hikariConfig0.getMinimumPoolSize();
      assertEquals(10, int1);
      assertFalse(int1 == int0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      
      String string1 = ">-9!t\\OyB2=3";
      String string2 = "idG";
      hikariConfig0.setDataSourceClassName(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("idG", hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      
      Object object1 = properties0.setProperty(string1, string1);
      assertNull(object1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      
      boolean boolean2 = true;
      hikariConfig0.setReadOnly(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("idG", hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      
      boolean boolean3 = false;
      hikariConfig0.setUseInstrumentation(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("idG", hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      
      hikariConfig0.setIsolateInternalQueries(boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("idG", hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create datasource instance: idG
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertNotNull(hikariConfig0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      
      boolean boolean0 = false;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = properties0.put(object0, object0);
      assertNull(object1);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      
      int int0 = 0;
      String string0 = "";
      hikariConfig0.setConnectionCustomizerClassName(string0);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      
      hikariConfig0.setAcquireRetries(int0);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      
      boolean boolean1 = true;
      hikariConfig0.setJdbc4ConnectionTest(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      
      hikariConfig0.setRegisterMbeans(boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      
      int int1 = hikariConfig0.getMinimumPoolSize();
      assertEquals(10, int1);
      assertFalse(int1 == int0);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      
      String string1 = ">-9!t\\OyB2=3";
      String string2 = "idG";
      hikariConfig0.setDataSourceClassName(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("idG", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      
      Object object2 = properties0.setProperty(string1, string1);
      assertNull(object2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, properties0.size());
      assertFalse(properties0.isEmpty());
      
      boolean boolean2 = true;
      hikariConfig0.setReadOnly(boolean2);
      assertFalse(boolean2 == boolean0);
      assertEquals(2, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals("idG", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      
      boolean boolean3 = false;
      hikariConfig0.setUseInstrumentation(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertEquals(2, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals("idG", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      
      hikariConfig0.setIsolateInternalQueries(boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertEquals(2, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals("idG", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      
      HikariConfig hikariConfig1 = new HikariConfig();
      assertNotNull(hikariConfig1);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertNull(hikariConfig1.getCatalog());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isReadOnly());
      assertNull(hikariConfig1.getJdbcUrl());
      
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNotNull(hikariDataSource0);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      
      boolean boolean0 = true;
      boolean boolean1 = true;
      hikariDataSource0.setRegisterMbeans(boolean1);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      
      int int0 = 0;
      hikariDataSource0.setMaximumPoolSize(int0);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      
      hikariDataSource0.setMaxLifetime(int0);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      
      String string0 = "{u6E:1'MDGj?u(cu";
      hikariDataSource0.setJdbcUrl(string0);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("{u6E:1'MDGj?u(cu", hikariDataSource0.getJdbcUrl());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      
      hikariDataSource0.setReadOnly(boolean0);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("{u6E:1'MDGj?u(cu", hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isReadOnly());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      
      int int1 = hikariDataSource0.getMaximumPoolSize();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("{u6E:1'MDGj?u(cu", hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isReadOnly());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      assertNotNull(hikariDataSource1);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertFalse(hikariDataSource1.isReadOnly());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertNull(hikariDataSource1.getJdbcUrl());
      
      hikariDataSource1.setLoginTimeout(int1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertTrue(int1 == int0);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("{u6E:1'MDGj?u(cu", hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isReadOnly());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertFalse(hikariDataSource1.isReadOnly());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertNull(hikariDataSource1.getJdbcUrl());
      
      hikariDataSource0.copyState(hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("{u6E:1'MDGj?u(cu", hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isReadOnly());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals("{u6E:1'MDGj?u(cu", hikariDataSource1.getJdbcUrl());
      assertTrue(hikariDataSource1.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(0, hikariDataSource1.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource1.getMaxLifetime());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertTrue(hikariDataSource1.isReadOnly());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      
      long long0 = 0L;
      hikariDataSource0.setMaxLifetime(long0);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("{u6E:1'MDGj?u(cu", hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isReadOnly());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      
      String string1 = hikariDataSource0.getCatalog();
      assertNull(string1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("{u6E:1'MDGj?u(cu", hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isReadOnly());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      
      hikariDataSource1.setTransactionIsolation(string1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("{u6E:1'MDGj?u(cu", hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isReadOnly());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals("{u6E:1'MDGj?u(cu", hikariDataSource1.getJdbcUrl());
      assertTrue(hikariDataSource1.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(0, hikariDataSource1.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource1.getMaxLifetime());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertTrue(hikariDataSource1.isReadOnly());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      
      hikariDataSource0.setDataSourceClassName(string1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("{u6E:1'MDGj?u(cu", hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isReadOnly());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string2 = "EAa,U#?I<F";
      boolean boolean2 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string2);
      assertNotSame(string2, string0);
      assertFalse(boolean2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      hikariDataSource1.setConnectionCustomizerClassName(string1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("{u6E:1'MDGj?u(cu", hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isReadOnly());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals("{u6E:1'MDGj?u(cu", hikariDataSource1.getJdbcUrl());
      assertTrue(hikariDataSource1.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(0, hikariDataSource1.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource1.getMaxLifetime());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertTrue(hikariDataSource1.isReadOnly());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      
      long long1 = hikariDataSource1.getMaxLifetime();
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals("{u6E:1'MDGj?u(cu", hikariDataSource1.getJdbcUrl());
      assertTrue(hikariDataSource1.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(0, hikariDataSource1.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource1.getMaxLifetime());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertTrue(hikariDataSource1.isReadOnly());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      
      boolean boolean3 = hikariDataSource1.isJdbc4ConnectionTest();
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals("{u6E:1'MDGj?u(cu", hikariDataSource1.getJdbcUrl());
      assertTrue(hikariDataSource1.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(0, hikariDataSource1.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource1.getMaxLifetime());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertTrue(hikariDataSource1.isReadOnly());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      
      String string3 = hikariDataSource1.getDataSourceClassName();
      assertNull(string3);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals("{u6E:1'MDGj?u(cu", hikariDataSource1.getJdbcUrl());
      assertTrue(hikariDataSource1.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(0, hikariDataSource1.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource1.getMaxLifetime());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertTrue(hikariDataSource1.isReadOnly());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "|=";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error loading properties file
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNotNull(hikariConfig0);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNotNull(hikariDataSource0);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      
      String string0 = "HikariPool-";
      hikariDataSource0.setCatalog(string0);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-", hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      
      hikariConfig0.setDataSource(hikariDataSource0);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-", hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      
      long long0 = (-2726L);
      // Undeclared exception!
      try { 
        hikariConfig0.setConnectionTimeout(long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // connectionTimeout cannot be less than 100ms
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNotNull(hikariConfig0);
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNotNull(hikariDataSource0);
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      
      String string0 = "HikariPool-";
      hikariDataSource0.setCatalog(string0);
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("HikariPool-", hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      
      hikariConfig0.setDataSource(hikariDataSource0);
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("HikariPool-", hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      
      HikariDataSource hikariDataSource1 = new HikariDataSource(hikariConfig0);
      assertNotNull(hikariDataSource1);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      
      hikariDataSource1.setDataSourceClassName(string0);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals("HikariPool-", hikariDataSource1.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getCatalog());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      
      boolean boolean0 = true;
      hikariDataSource0.setJdbc4ConnectionTest(boolean0);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("HikariPool-", hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      
      long long0 = 0L;
      hikariDataSource0.setDataSourceClassName(string0);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("HikariPool-", hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-", hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      
      int int0 = 1998;
      hikariDataSource1.setMaximumPoolSize(int0);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(1998, hikariDataSource1.getMaximumPoolSize());
      assertEquals("HikariPool-", hikariDataSource1.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getCatalog());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      
      hikariDataSource1.addDataSourceProperty(string0, hikariDataSource0);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("HikariPool-", hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-", hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(1998, hikariDataSource1.getMaximumPoolSize());
      assertEquals("HikariPool-", hikariDataSource1.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getCatalog());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      
      hikariDataSource1.setLeakDetectionThreshold(long0);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(1998, hikariDataSource1.getMaximumPoolSize());
      assertEquals("HikariPool-", hikariDataSource1.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getCatalog());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      
      boolean boolean1 = false;
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      hikariConfig0.setDataSourceProperties(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      hikariConfig0.setReadOnly(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      hikariConfig0.setDataSource(hikariDataSource0);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("HikariPool-", hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-", hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      
      boolean boolean2 = true;
      long long1 = hikariDataSource0.getMaxLifetime();
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertEquals(1800000L, long1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(long1 == long0);
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("HikariPool-", hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-", hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      
      int int1 = hikariDataSource1.getAcquireIncrement();
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(1, int1);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertFalse(int1 == int0);
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(1998, hikariDataSource1.getMaximumPoolSize());
      assertEquals("HikariPool-", hikariDataSource1.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getCatalog());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      
      hikariConfig0.setPoolName(string0);
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      boolean boolean3 = hikariConfig0.isAutoCommit();
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      long long2 = 0L;
      hikariConfig0.setConnectionTimeout(long2);
      assertFalse(long2 == long1);
      assertEquals(2147483647L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      boolean boolean4 = hikariDataSource1.isRegisterMbeans();
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(boolean4);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertEquals(2147483647L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(1998, hikariDataSource1.getMaximumPoolSize());
      assertEquals("HikariPool-", hikariDataSource1.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getCatalog());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Property file  was not found.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "a@r@";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error loading properties file
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNotNull(hikariConfig0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      
      boolean boolean0 = true;
      hikariConfig0.setInitializationFailFast(boolean0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      
      long long0 = hikariConfig0.getIdleTimeout();
      assertEquals(600000L, long0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertNotNull(hikariConfig0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      
      long long0 = 645L;
      hikariConfig0.setIdleTimeout(long0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(645L, hikariConfig0.getIdleTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNotNull(hikariDataSource0);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      
      boolean boolean0 = hikariDataSource0.isAutoCommit();
      assertTrue(boolean0);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      
      String string0 = "";
      hikariDataSource0.setConnectionTestQuery(string0);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("", hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      
      boolean boolean1 = hikariDataSource0.isInitializationFailFast();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("", hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      
      hikariDataSource0.setJdbc4ConnectionTest(boolean1);
      assertFalse(boolean1 == boolean0);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("", hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      
      String string1 = "yFSneM,/";
      hikariDataSource0.setPoolName(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("", hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("yFSneM,/", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      
      long long0 = 0L;
      hikariDataSource0.setJdbcUrl(string0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("", hikariDataSource0.getJdbcUrl());
      assertEquals("", hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("yFSneM,/", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      
      hikariDataSource0.setIdleTimeout(long0);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("", hikariDataSource0.getJdbcUrl());
      assertEquals("", hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("yFSneM,/", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      
      String string2 = hikariDataSource0.getConnectionTestQuery();
      assertNotNull(string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("", hikariDataSource0.getJdbcUrl());
      assertEquals("", hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("yFSneM,/", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      
      boolean boolean2 = hikariDataSource0.isRegisterMbeans();
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("", hikariDataSource0.getJdbcUrl());
      assertEquals("", hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("yFSneM,/", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      
      hikariDataSource0.setAcquireRetryDelay(long0);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("", hikariDataSource0.getJdbcUrl());
      assertEquals("", hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("yFSneM,/", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      
      boolean boolean3 = hikariDataSource0.isAutoCommit();
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("", hikariDataSource0.getJdbcUrl());
      assertEquals("", hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("yFSneM,/", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNotNull(hikariDataSource0);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      
      boolean boolean0 = false;
      hikariDataSource0.setInitializationFailFast(boolean0);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      
      int int0 = (-684);
      // Undeclared exception!
      try { 
        hikariDataSource0.setMaximumPoolSize(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNotNull(hikariDataSource0);
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      
      String string0 = "\"hoYT$~Q";
      String string1 = "p^e/";
      String string2 = "";
      hikariDataSource0.addDataSourceProperty(string1, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      
      int int0 = (-2577);
      hikariDataSource0.setLoginTimeout(int0);
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals((-2577), hikariDataSource0.getLoginTimeout());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      
      long long0 = 4489L;
      hikariDataSource0.setConnectionTimeout(long0);
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(4489L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals((-2577), hikariDataSource0.getLoginTimeout());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      
      hikariDataSource0.setConnectionTestQuery(string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(4489L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("\"hoYT$~Q", hikariDataSource0.getConnectionTestQuery());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals((-2577), hikariDataSource0.getLoginTimeout());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      
      long long1 = hikariDataSource0.getIdleTimeout();
      assertEquals(600000L, long1);
      assertFalse(long1 == long0);
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(4489L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("\"hoYT$~Q", hikariDataSource0.getConnectionTestQuery());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals((-2577), hikariDataSource0.getLoginTimeout());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNotNull(hikariConfig0);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      boolean boolean0 = false;
      hikariConfig0.setIsolateInternalQueries(boolean0);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      boolean boolean1 = false;
      hikariConfig0.setAutoCommit(boolean1);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isAutoCommit());
      
      long long0 = (-2399L);
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireRetryDelay(long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // acquireRetryDelay cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNotNull(hikariConfig0);
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      
      long long0 = 0L;
      hikariConfig0.setMaxLifetime(long0);
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      
      long long1 = 0L;
      hikariConfig0.setMaxLifetime(long1);
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      
      hikariConfig0.setAcquireRetryDelay(long1);
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      
      int int0 = hikariConfig0.getMinimumPoolSize();
      assertEquals(10, int0);
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNotNull(hikariDataSource0);
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      
      String string0 = "4l~y'EBXd~%a:";
      hikariDataSource0.setTransactionIsolation(string0);
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      
      boolean boolean0 = hikariDataSource0.isInitializationFailFast();
      assertFalse(boolean0);
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNotNull(hikariDataSource0);
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      
      long long0 = 10000L;
      hikariDataSource0.setAcquireRetryDelay(long0);
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(10000L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      
      String string0 = hikariDataSource0.getConnectionTestQuery();
      assertNull(string0);
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(10000L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      
      int int0 = (-1426);
      // Undeclared exception!
      try { 
        hikariDataSource0.setMaximumPoolSize(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNotNull(hikariDataSource0);
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      
      long long0 = 1335L;
      String string0 = "javassist.runtime.DotClass";
      hikariDataSource0.setTransactionIsolation(string0);
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      
      hikariDataSource0.setMaxLifetime(long0);
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(1335L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      
      hikariDataSource0.setIdleTimeout(long0);
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(1335L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1335L, hikariDataSource0.getIdleTimeout());
      
      boolean boolean0 = false;
      int int0 = 116;
      boolean boolean1 = false;
      hikariDataSource0.setReadOnly(boolean1);
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(1335L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1335L, hikariDataSource0.getIdleTimeout());
      
      hikariDataSource0.setLoginTimeout(int0);
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(1335L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(116, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1335L, hikariDataSource0.getIdleTimeout());
      
      hikariDataSource0.setRegisterMbeans(boolean0);
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(1335L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(116, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1335L, hikariDataSource0.getIdleTimeout());
      
      hikariDataSource0.setJdbcUrl(string0);
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(1335L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("javassist.runtime.DotClass", hikariDataSource0.getJdbcUrl());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(116, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1335L, hikariDataSource0.getIdleTimeout());
      
      long long1 = (-849L);
      String string1 = "";
      hikariDataSource0.setTransactionIsolation(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(1335L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("javassist.runtime.DotClass", hikariDataSource0.getJdbcUrl());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(116, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1335L, hikariDataSource0.getIdleTimeout());
      
      hikariDataSource0.setIdleTimeout(long1);
      assertFalse(long1 == long0);
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(1335L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("javassist.runtime.DotClass", hikariDataSource0.getJdbcUrl());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-849L), hikariDataSource0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(116, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      
      hikariDataSource0.setAutoCommit(boolean0);
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(1335L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("javassist.runtime.DotClass", hikariDataSource0.getJdbcUrl());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-849L), hikariDataSource0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(116, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      
      hikariDataSource0.setReadOnly(boolean0);
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(1335L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("javassist.runtime.DotClass", hikariDataSource0.getJdbcUrl());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-849L), hikariDataSource0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(116, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariDataSource0.getConnectionCustomizer();
      assertNull(iConnectionCustomizer0);
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(1335L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("javassist.runtime.DotClass", hikariDataSource0.getJdbcUrl());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-849L), hikariDataSource0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(116, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      
      hikariDataSource0.addDataSourceProperty(string0, string0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(1335L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("javassist.runtime.DotClass", hikariDataSource0.getJdbcUrl());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-849L), hikariDataSource0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(116, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      
      String string2 = "1*A:nFJU2RP!qhB\"O`";
      // Undeclared exception!
      try { 
        hikariDataSource0.setDriverClassName(string2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // driverClassName specified class '1*A:nFJU2RP!qhB\"O`' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNotNull(hikariDataSource0);
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      
      boolean boolean0 = true;
      boolean boolean1 = false;
      hikariDataSource0.setRegisterMbeans(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      
      int int0 = 0;
      hikariDataSource0.setMaximumPoolSize(int0);
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      
      hikariDataSource0.setMaxLifetime(int0);
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      
      String string0 = "{u6E:1'MDGj?u(cu";
      hikariDataSource0.setJdbcUrl(string0);
      assertEquals("{u6E:1'MDGj?u(cu", hikariDataSource0.getJdbcUrl());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      
      hikariDataSource0.setReadOnly(boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals("{u6E:1'MDGj?u(cu", hikariDataSource0.getJdbcUrl());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      
      int int1 = hikariDataSource0.getMaximumPoolSize();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals("{u6E:1'MDGj?u(cu", hikariDataSource0.getJdbcUrl());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      assertNotNull(hikariDataSource1);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      
      hikariDataSource1.setLoginTimeout(int1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertTrue(int1 == int0);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals("{u6E:1'MDGj?u(cu", hikariDataSource0.getJdbcUrl());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      
      hikariDataSource0.copyState(hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals("{u6E:1'MDGj?u(cu", hikariDataSource0.getJdbcUrl());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals("{u6E:1'MDGj?u(cu", hikariDataSource1.getJdbcUrl());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertTrue(hikariDataSource1.isReadOnly());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource1.getMaxLifetime());
      assertEquals(0, hikariDataSource1.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      
      long long0 = 0L;
      hikariDataSource0.setMaxLifetime(long0);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertEquals("{u6E:1'MDGj?u(cu", hikariDataSource0.getJdbcUrl());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      
      String string1 = hikariDataSource0.getCatalog();
      assertNull(string1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertEquals("{u6E:1'MDGj?u(cu", hikariDataSource0.getJdbcUrl());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      
      hikariDataSource1.setTransactionIsolation(string1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals("{u6E:1'MDGj?u(cu", hikariDataSource0.getJdbcUrl());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals("{u6E:1'MDGj?u(cu", hikariDataSource1.getJdbcUrl());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertTrue(hikariDataSource1.isReadOnly());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource1.getMaxLifetime());
      assertEquals(0, hikariDataSource1.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      
      hikariDataSource0.setDataSourceClassName(string1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertEquals("{u6E:1'MDGj?u(cu", hikariDataSource0.getJdbcUrl());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      
      int int2 = hikariDataSource0.getAcquireRetries();
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertEquals(3, int2);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals("{u6E:1'MDGj?u(cu", hikariDataSource0.getJdbcUrl());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      
      hikariDataSource1.setConnectionCustomizerClassName(string1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals("{u6E:1'MDGj?u(cu", hikariDataSource0.getJdbcUrl());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals("{u6E:1'MDGj?u(cu", hikariDataSource1.getJdbcUrl());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertTrue(hikariDataSource1.isReadOnly());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource1.getMaxLifetime());
      assertEquals(0, hikariDataSource1.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      
      long long1 = hikariDataSource1.getMaxLifetime();
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals("{u6E:1'MDGj?u(cu", hikariDataSource1.getJdbcUrl());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertTrue(hikariDataSource1.isReadOnly());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource1.getMaxLifetime());
      assertEquals(0, hikariDataSource1.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      
      boolean boolean2 = hikariDataSource1.isJdbc4ConnectionTest();
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals("{u6E:1'MDGj?u(cu", hikariDataSource1.getJdbcUrl());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertTrue(hikariDataSource1.isReadOnly());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource1.getMaxLifetime());
      assertEquals(0, hikariDataSource1.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNotNull(hikariDataSource0);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      
      DataSource dataSource0 = hikariDataSource0.getDataSource();
      assertNull(dataSource0);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      
      String string0 = "'+cFq";
      HikariPool hikariPool0 = hikariDataSource0.pool;
      assertNull(hikariPool0);
      
      int int0 = 3;
      hikariDataSource0.setLoginTimeout(int0);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      
      hikariDataSource0.fastPathPool = hikariPool0;
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      
      hikariDataSource0.setJdbcUrl(string0);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("'+cFq", hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      
      int int1 = hikariDataSource0.getAcquireIncrement();
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("'+cFq", hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      
      hikariDataSource0.setDataSourceClassName(string0);
      assertEquals("'+cFq", hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("'+cFq", hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      
      // Undeclared exception!
      try { 
        hikariDataSource0.getConnection();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to get driver for JDBC URL '+cFq
         //
         verifyException("com.zaxxer.hikari.util.DriverDataSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNotNull(hikariConfig0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      
      boolean boolean0 = hikariConfig0.isIsolateInternalQueries();
      assertFalse(boolean0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNotNull(hikariDataSource0);
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isAutoCommit());
      
      Class<Object> class0 = Object.class;
      boolean boolean1 = hikariDataSource0.isWrapperFor(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isAutoCommit());
      
      hikariConfig0.setDataSource(hikariDataSource0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isAutoCommit());
      
      hikariConfig0.validate();
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      
      String string0 = "O82p";
      String string1 = "";
      // Undeclared exception!
      try { 
        hikariDataSource0.getConnection(string0, string1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertNotNull(hikariConfig0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      
      boolean boolean0 = hikariConfig0.isReadOnly();
      assertFalse(boolean0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      Properties properties0 = null;
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertNotNull(hikariConfig0);
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      
      DataSource dataSource0 = null;
      hikariConfig0.setDataSource(dataSource0);
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      
      String string0 = "T7'OVig6i7t";
      long long0 = 1113L;
      hikariConfig0.setMaxLifetime(long0);
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1113L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      
      hikariConfig0.setCatalog(string0);
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("T7'OVig6i7t", hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1113L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      
      long long1 = hikariConfig0.getLeakDetectionThreshold();
      assertEquals(0L, long1);
      assertFalse(long1 == long0);
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("T7'OVig6i7t", hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1113L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      
      int int0 = hikariConfig0.getMaximumPoolSize();
      assertEquals(60, int0);
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("T7'OVig6i7t", hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1113L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      
      String string1 = "";
      hikariConfig0.setDataSourceClassName(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("T7'OVig6i7t", hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1113L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertNotNull(hikariConfig0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      
      int int0 = hikariConfig0.getTransactionIsolation();
      assertEquals((-1), int0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      
      Object object0 = properties0.put(hikariConfig0, hikariConfig0);
      assertNull(object0);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      
      String string0 = "^}:";
      hikariConfig0.setPoolName(string0);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("^}:", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      
      String string1 = hikariConfig0.getConnectionInitSql();
      assertNull(string1);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("^}:", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNotNull(hikariConfig0);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      
      boolean boolean0 = true;
      hikariConfig0.setUseInstrumentation(boolean0);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      hikariConfig0.setDataSourceProperties(properties0);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertNotNull(hikariConfig0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      
      boolean boolean0 = true;
      hikariConfig0.setDataSourceProperties(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      
      Object object0 = properties0.put(hikariConfig0, hikariConfig0);
      assertNull(object0);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      
      hikariConfig0.setInitializationFailFast(boolean0);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      
      HikariConfig hikariConfig1 = null;
      try {
        hikariConfig1 = new HikariConfig(properties0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.beans.IntrospectionException: Method not found: setCom.zaxxer.hikari.HikariConfig@0000000001
         //
         verifyException("com.zaxxer.hikari.util.PropertyBeanSetter", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNotNull(hikariConfig0);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      
      boolean boolean0 = false;
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      
      long long0 = 10L;
      // Undeclared exception!
      try { 
        hikariConfig0.setConnectionTimeout(long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // connectionTimeout cannot be less than 100ms
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNotNull(hikariConfig0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNotNull(hikariDataSource0);
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      
      hikariConfig0.setDataSource(hikariDataSource0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      
      hikariConfig0.validate();
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      
      String string0 = "SRC4U(NNgCX8i1<";
      hikariConfig0.setConnectionCustomizerClassName(string0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("SRC4U(NNgCX8i1<", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      
      int int0 = hikariConfig0.getAcquireRetries();
      assertEquals(3, int0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("SRC4U(NNgCX8i1<", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      
      DataSource dataSource0 = hikariDataSource0.getDataSource();
      assertNull(dataSource0);
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      
      hikariDataSource0.setDataSource(dataSource0);
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      
      hikariConfig0.setMaxLifetime(int0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("SRC4U(NNgCX8i1<", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      
      boolean boolean0 = hikariConfig0.isRegisterMbeans();
      assertFalse(boolean0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("SRC4U(NNgCX8i1<", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(3L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("SRC4U(NNgCX8i1<", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      
      boolean boolean1 = false;
      hikariConfig0.setReadOnly(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(3L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("SRC4U(NNgCX8i1<", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      
      int int1 = 0;
      long long0 = (-1757L);
      hikariDataSource0.setLeakDetectionThreshold(long0);
      assertEquals((-1757L), hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      
      hikariDataSource0.setAcquireRetries(int1);
      assertFalse(int1 == int0);
      assertEquals((-1757L), hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      
      String string1 = hikariDataSource0.getConnectionInitSql();
      assertNull(string1);
      assertEquals((-1757L), hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      
      String string2 = hikariDataSource0.getDataSourceClassName();
      assertNull(string2);
      assertEquals((-1757L), hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      
      boolean boolean2 = false;
      hikariDataSource0.setRegisterMbeans(boolean2);
      assertTrue(boolean2 == boolean0);
      assertEquals((-1757L), hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      
      String string3 = hikariConfig0.getPoolName();
      assertNotNull(string3);
      assertNotSame(string3, string0);
      assertEquals("HikariPool-0", string3);
      assertFalse(string3.equals((Object)string0));
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(3L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("SRC4U(NNgCX8i1<", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      
      int int2 = hikariDataSource0.getMinimumPoolSize();
      assertEquals(10, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1757L), hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariDataSource0.getConnectionCustomizer();
      assertNull(iConnectionCustomizer0);
      assertEquals((-1757L), hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      
      long long1 = hikariDataSource0.getMaxLifetime();
      assertEquals(1800000L, long1);
      assertFalse(long1 == long0);
      assertEquals((-1757L), hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      
      long long2 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(750L, long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(3L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("SRC4U(NNgCX8i1<", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNotNull(hikariConfig0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      
      int int0 = (-547);
      hikariConfig0.setIdleTimeout(int0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-547L), hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireRetries(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNotNull(hikariConfig0);
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      
      int int0 = (-292);
      // Undeclared exception!
      try { 
        hikariConfig0.setMinimumPoolSize(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNotNull(hikariConfig0);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      
      String string0 = "";
      long long0 = 0L;
      hikariConfig0.setMaxLifetime(long0);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      
      hikariConfig0.setConnectionTestQuery(string0);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      
      int int0 = 71;
      hikariConfig0.setMinimumPoolSize(int0);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(71, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      
      String string1 = "";
      hikariConfig0.setDataSourceClassName(string1);
      assertSame(string1, string0);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(71, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      
      boolean boolean0 = hikariConfig0.isReadOnly();
      assertFalse(boolean0);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(71, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      
      Properties properties0 = hikariConfig0.getDataSourceProperties();
      assertNotNull(properties0);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(71, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      hikariConfig0.setConnectionTestQuery(string1);
      assertSame(string1, string0);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(71, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      
      String string2 = hikariConfig0.getConnectionTestQuery();
      assertNotNull(string2);
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertEquals("", string2);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(71, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      
      hikariConfig0.setUseInstrumentation(boolean0);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(71, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      
      boolean boolean1 = false;
      hikariConfig0.setRegisterMbeans(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(71, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      
      int int1 = hikariConfig0.getAcquireRetries();
      assertEquals(3, int1);
      assertFalse(int1 == int0);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(71, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      
      int int2 = hikariConfig0.getAcquireRetries();
      assertEquals(3, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(71, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      String string0 = null;
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNotNull(hikariConfig0);
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      
      boolean boolean0 = false;
      hikariConfig0.setAutoCommit(boolean0);
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      
      String string0 = "[L";
      int int0 = 0;
      hikariConfig0.setMinimumPoolSize(int0);
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      
      String string1 = "";
      int int1 = (-4302);
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireRetries(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNotNull(hikariDataSource0);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      
      long long0 = hikariDataSource0.getIdleTimeout();
      assertEquals(600000L, long0);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      
      int int0 = 1;
      hikariDataSource0.setAcquireRetries(int0);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(1, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      
      String string0 = "";
      hikariDataSource0.setPoolName(string0);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(1, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("", hikariDataSource0.getPoolName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      
      long long1 = 1010L;
      hikariDataSource0.setIdleTimeout(long1);
      assertFalse(long1 == long0);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(1, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(1010L, hikariDataSource0.getIdleTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("", hikariDataSource0.getPoolName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      
      boolean boolean0 = true;
      hikariDataSource0.setReadOnly(boolean0);
      assertTrue(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(1, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(1010L, hikariDataSource0.getIdleTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("", hikariDataSource0.getPoolName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      
      String string1 = "";
      hikariDataSource0.setConnectionCustomizerClassName(string1);
      assertSame(string1, string0);
      assertTrue(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(1, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(1010L, hikariDataSource0.getIdleTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("", hikariDataSource0.getPoolName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertNotNull(hikariConfig0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      
      long long0 = hikariConfig0.getConnectionTimeout();
      assertEquals(5000L, long0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      Set<String> set0 = properties0.stringPropertyNames();
      assertNotNull(set0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertNotNull(hikariConfig0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      
      Object object0 = properties0.put(set0, hikariConfig0);
      assertNull(object0);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      
      int int0 = 0;
      String string0 = "";
      hikariConfig0.setTransactionIsolation(string0);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireIncrement(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be less than 1
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      Properties properties0 = null;
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertNotNull(hikariConfig0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      
      long long0 = 0L;
      hikariConfig0.setIdleTimeout(long0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      
      String string0 = "V0z3V9,hO<(N";
      hikariConfig0.setCatalog(string0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("V0z3V9,hO<(N", hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      
      int int0 = hikariConfig0.getAcquireRetries();
      assertEquals(3, int0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("V0z3V9,hO<(N", hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      
      boolean boolean0 = hikariConfig0.isInitializationFailFast();
      assertFalse(boolean0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("V0z3V9,hO<(N", hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNotNull(hikariDataSource0);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isReadOnly());
      
      String string1 = "com.zaxxer.hikari.HikariConfig";
      hikariDataSource0.setDriverClassName(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isReadOnly());
      
      int int1 = 0;
      String string2 = "dR),?U5;f`";
      hikariDataSource0.setConnectionTimeout(long0);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(2147483647L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isReadOnly());
      
      hikariConfig0.setConnectionInitSql(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("V0z3V9,hO<(N", hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("dR),?U5;f`", hikariConfig0.getConnectionInitSql());
      
      boolean boolean1 = false;
      hikariConfig0.setInitializationFailFast(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("V0z3V9,hO<(N", hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("dR),?U5;f`", hikariConfig0.getConnectionInitSql());
      
      // Undeclared exception!
      try { 
        hikariDataSource0.setAcquireIncrement(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be less than 1
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNotNull(hikariConfig0);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      long long0 = 2399L;
      boolean boolean0 = true;
      String string0 = "acquireRetryDelay cannot be negative";
      hikariConfig0.setJdbcUrl(string0);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("acquireRetryDelay cannot be negative", hikariConfig0.getJdbcUrl());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      hikariConfig0.setInitializationFailFast(boolean0);
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("acquireRetryDelay cannot be negative", hikariConfig0.getJdbcUrl());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      hikariConfig0.setConnectionTimeout(long0);
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("acquireRetryDelay cannot be negative", hikariConfig0.getJdbcUrl());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(2399L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      long long1 = hikariConfig0.getConnectionTimeout();
      assertEquals(2399L, long1);
      assertTrue(long1 == long0);
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("acquireRetryDelay cannot be negative", hikariConfig0.getJdbcUrl());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(2399L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to get driver for JDBC URL acquireRetryDelay cannot be negative
         //
         verifyException("com.zaxxer.hikari.util.DriverDataSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNotNull(hikariDataSource0);
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      
      boolean boolean0 = true;
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      assertNotNull(hikariDataSource1);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      
      hikariDataSource0.copyState(hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      
      hikariDataSource0.setRegisterMbeans(boolean0);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      
      // Undeclared exception!
      try { 
        hikariDataSource1.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNotNull(hikariConfig0);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      
      long long0 = (-1198L);
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireRetryDelay(long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // acquireRetryDelay cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNotNull(hikariConfig0);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      int int0 = hikariConfig0.getTransactionIsolation();
      assertEquals((-1), int0);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      String string0 = null;
      hikariConfig0.setConnectionInitSql(string0);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      String string1 = "m$L]YR(mVT ";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        hikariConfig0.setMinimumPoolSize(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNotNull(hikariDataSource0);
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      
      String string0 = "c`n%0GcQe";
      hikariDataSource0.setConnectionCustomizerClassName(string0);
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("c`n%0GcQe", hikariDataSource0.getConnectionCustomizerClassName());
      
      HikariDataSource hikariDataSource1 = null;
      try {
        hikariDataSource1 = new HikariDataSource(hikariDataSource0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNotNull(hikariConfig0);
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      long long0 = 69L;
      hikariConfig0.setAcquireRetryDelay(long0);
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(69L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = properties0.put(object0, object1);
      assertNull(object2);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      
      Object object4 = properties0.put(hikariConfig0, object3);
      assertNull(object4);
      assertNotSame(object3, object1);
      assertNotSame(object3, object0);
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(69L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      Enumeration<Object> enumeration0 = properties0.elements();
      assertNotNull(enumeration0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertNotNull(hikariConfig0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      
      String string0 = ")Fe[9jm#y~-ft*w";
      hikariConfig0.addDataSourceProperty(string0, string0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      
      boolean boolean0 = hikariConfig0.isIsolateInternalQueries();
      assertFalse(boolean0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      
      Enumeration<Object> enumeration1 = properties0.keys();
      assertNotNull(enumeration1);
      assertSame(enumeration1, enumeration0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      HikariConfig hikariConfig1 = new HikariConfig();
      assertNotNull(hikariConfig1);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getJdbcUrl());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertFalse(hikariConfig1.isReadOnly());
      
      Object object0 = properties0.put(enumeration1, hikariConfig1);
      assertNull(object0);
      assertSame(enumeration1, enumeration0);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getJdbcUrl());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertFalse(hikariConfig1.isReadOnly());
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object object2 = properties0.put(object1, object1);
      assertNull(object2);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      
      hikariConfig0.addDataSourceProperty(string0, enumeration0);
      assertSame(enumeration0, enumeration1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      
      hikariConfig0.setRegisterMbeans(boolean0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      
      Properties properties1 = hikariConfig0.getDataSourceProperties();
      assertNotNull(properties1);
      assertNotSame(properties0, properties1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(properties1, properties0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(properties1.equals((Object)properties0));
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, properties1.size());
      assertFalse(properties1.isEmpty());
      
      int int0 = 1539;
      hikariConfig0.setMinimumPoolSize(int0);
      assertNotSame(properties0, properties1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(properties0.equals((Object)properties1));
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1539, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      
      hikariConfig0.setPoolName(string0);
      assertNotSame(properties0, properties1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(properties0.equals((Object)properties1));
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1539, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(")Fe[9jm#y~-ft*w", hikariConfig0.getPoolName());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      
      hikariConfig0.setAcquireRetryDelay(int0);
      assertNotSame(properties0, properties1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(properties0.equals((Object)properties1));
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1539, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(")Fe[9jm#y~-ft*w", hikariConfig0.getPoolName());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(1539L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      
      hikariConfig0.setInitializationFailFast(boolean0);
      assertNotSame(properties0, properties1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(properties0.equals((Object)properties1));
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1539, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(")Fe[9jm#y~-ft*w", hikariConfig0.getPoolName());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(1539L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      
      boolean boolean1 = hikariConfig0.isRegisterMbeans();
      assertNotSame(properties0, properties1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(boolean1);
      assertFalse(properties0.equals((Object)properties1));
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertTrue(boolean1 == boolean0);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1539, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(")Fe[9jm#y~-ft*w", hikariConfig0.getPoolName());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(1539L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      
      long long0 = hikariConfig0.getIdleTimeout();
      assertNotSame(properties0, properties1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertEquals(600000L, long0);
      assertFalse(properties0.equals((Object)properties1));
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1539, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(")Fe[9jm#y~-ft*w", hikariConfig0.getPoolName());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(1539L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      
      hikariConfig1.setAcquireRetries(int0);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getJdbcUrl());
      assertEquals(1539, hikariConfig1.getAcquireRetries());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertFalse(hikariConfig1.isReadOnly());
      
      boolean boolean2 = true;
      hikariConfig1.setReadOnly(boolean2);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getJdbcUrl());
      assertEquals(1539, hikariConfig1.getAcquireRetries());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isReadOnly());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      
      String string1 = hikariConfig0.getJdbcUrl();
      assertNull(string1);
      assertNotSame(properties0, properties1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(properties0.equals((Object)properties1));
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1539, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(")Fe[9jm#y~-ft*w", hikariConfig0.getPoolName());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(1539L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      
      hikariConfig0.setIdleTimeout(int0);
      assertNotSame(properties0, properties1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(properties0.equals((Object)properties1));
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1539L, hikariConfig0.getIdleTimeout());
      assertEquals(1539, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(")Fe[9jm#y~-ft*w", hikariConfig0.getPoolName());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(1539L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      
      hikariConfig1.copyState(hikariConfig0);
      assertNotSame(properties0, properties1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(properties0.equals((Object)properties1));
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(1539, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getJdbcUrl());
      assertEquals(1539, hikariConfig1.getAcquireRetries());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isReadOnly());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      
      hikariConfig0.setUseInstrumentation(boolean0);
      assertNotSame(properties0, properties1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(properties0.equals((Object)properties1));
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(1539, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      
      String string2 = hikariConfig0.getPoolName();
      assertNotNull(string2);
      assertNotSame(properties0, properties1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(string2, string0);
      assertEquals("HikariPool-1", string2);
      assertFalse(properties0.equals((Object)properties1));
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(1539, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNotNull(hikariConfig0);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNotNull(hikariDataSource0);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      hikariDataSource0.setDataSourceProperties(properties0);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      long long0 = 1199L;
      hikariDataSource0.setAcquireRetryDelay(long0);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1199L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      
      hikariConfig0.copyState(hikariDataSource0);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      
      long long1 = (-1294L);
      // Undeclared exception!
      try { 
        hikariConfig0.setConnectionTimeout(long1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // connectionTimeout cannot be less than 100ms
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNotNull(hikariConfig0);
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      boolean boolean0 = false;
      long long0 = 0L;
      int int0 = 296;
      hikariConfig0.setMaximumPoolSize(int0);
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(296, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      hikariConfig0.setIdleTimeout(long0);
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(296, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(296, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      String string0 = null;
      String string1 = "@UW.xqgA";
      String string2 = "connectionTimeout cannot be less than 100ms";
      hikariConfig0.setConnectionCustomizerClassName(string2);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string1));
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(296, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("connectionTimeout cannot be less than 100ms", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      hikariConfig0.setTransactionIsolation(string1);
      assertNotSame(string1, string2);
      assertFalse(string1.equals((Object)string2));
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(296, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("connectionTimeout cannot be less than 100ms", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      hikariConfig0.setConnectionTestQuery(string0);
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(296, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("connectionTimeout cannot be less than 100ms", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      long long1 = hikariConfig0.getConnectionTimeout();
      assertEquals(5000L, long1);
      assertFalse(long1 == long0);
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(296, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("connectionTimeout cannot be less than 100ms", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      boolean boolean1 = hikariConfig0.isJdbc4ConnectionTest();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(296, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("connectionTimeout cannot be less than 100ms", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNotNull(hikariDataSource0);
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      
      int int0 = 1937;
      String string0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        hikariDataSource0.addDataSourceProperty(string0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = properties0.compute(object0, biFunction0);
      assertNull(object1);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)101;
      byteArray0[1] = byte1;
      byte byte2 = (byte)14;
      byteArray0[2] = byte2;
      byte byte3 = (byte)1;
      byteArray0[3] = byte3;
      byte byte4 = (byte)3;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-61);
      byteArray0[5] = byte5;
      byte byte6 = (byte)30;
      byteArray0[6] = byte6;
      byte byte7 = (byte)15;
      byteArray0[7] = byte7;
      byte byte8 = (byte)99;
      byteArray0[8] = byte8;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)101, (byte)14, (byte)1, (byte)3, (byte) (-61), (byte)30, (byte)15, (byte)99}, byteArray0);
      assertFalse(boolean0);
      assertEquals(9, byteArray0.length);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertNotNull(hikariConfig0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      String string0 = hikariConfig0.getConnectionTestQuery();
      assertNull(string0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      long long0 = (-55L);
      hikariConfig0.setLeakDetectionThreshold(long0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals((-55L), hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      String string1 = hikariConfig0.getDataSourceClassName();
      assertNull(string1);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals((-55L), hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      long long1 = hikariConfig0.getLeakDetectionThreshold();
      assertEquals((-55L), long1);
      assertTrue(long1 == long0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals((-55L), hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNotNull(hikariDataSource0);
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      
      hikariConfig0.copyState(hikariDataSource0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals((-55L), hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals((-55L), hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariDataSource0.getConnectionCustomizer();
      assertNull(iConnectionCustomizer0);
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals((-55L), hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      
      long long2 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(750L, long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals((-55L), hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      String string2 = hikariDataSource0.getConnectionTestQuery();
      assertNull(string2);
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals((-55L), hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      
      int int0 = hikariDataSource0.getTransactionIsolation();
      assertEquals((-1), int0);
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals((-55L), hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      
      String string3 = hikariConfig0.getJdbcUrl();
      assertNull(string3);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals((-55L), hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNotNull(hikariConfig0);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      
      String string0 = ")>0x1dlM\"b;/";
      hikariConfig0.setJdbcUrl(string0);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(")>0x1dlM\"b;/", hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      
      String string1 = "%r&2";
      hikariConfig0.setTransactionIsolation(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(")>0x1dlM\"b;/", hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      long long0 = hikariConfig0.getIdleTimeout();
      assertEquals(600000L, long0);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(")>0x1dlM\"b;/", hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      
      hikariConfig0.setAcquireRetryDelay(long0);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(")>0x1dlM\"b;/", hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getAcquireRetryDelay());
      
      boolean boolean0 = hikariConfig0.isReadOnly();
      assertFalse(boolean0);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(")>0x1dlM\"b;/", hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getAcquireRetryDelay());
      
      String string2 = "T";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      hikariConfig0.setConnectionCustomizerClassName(string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(")>0x1dlM\"b;/", hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("T", hikariConfig0.getConnectionCustomizerClassName());
      
      long long1 = hikariConfig0.getMaxLifetime();
      assertEquals(1800000L, long1);
      assertFalse(long1 == long0);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(")>0x1dlM\"b;/", hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("T", hikariConfig0.getConnectionCustomizerClassName());
      
      String string3 = hikariConfig0.getJdbcUrl();
      assertNotNull(string3);
      assertNotSame(string3, string1);
      assertSame(string3, string0);
      assertNotSame(string3, string2);
      assertEquals(")>0x1dlM\"b;/", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(")>0x1dlM\"b;/", hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("T", hikariConfig0.getConnectionCustomizerClassName());
      
      boolean boolean2 = hikariConfig0.isIsolateInternalQueries();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(")>0x1dlM\"b;/", hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("T", hikariConfig0.getConnectionCustomizerClassName());
      
      long long2 = hikariConfig0.getLeakDetectionThreshold();
      assertEquals(0L, long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(")>0x1dlM\"b;/", hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("T", hikariConfig0.getConnectionCustomizerClassName());
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      Properties properties1 = new Properties(properties0);
      assertNotNull(properties1);
      assertTrue(properties1.equals((Object)properties0));
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      
      HikariConfig hikariConfig0 = new HikariConfig(properties1);
      assertNotNull(hikariConfig0);
      assertTrue(properties0.equals((Object)properties1));
      assertTrue(properties1.equals((Object)properties0));
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      
      long long0 = hikariConfig0.getConnectionTimeout();
      assertNotSame(properties0, properties1);
      assertNotSame(properties1, properties0);
      assertEquals(5000L, long0);
      assertTrue(properties0.equals((Object)properties1));
      assertTrue(properties1.equals((Object)properties0));
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      
      DataSource dataSource0 = hikariConfig0.getDataSource();
      assertNull(dataSource0);
      assertNotSame(properties0, properties1);
      assertNotSame(properties1, properties0);
      assertTrue(properties0.equals((Object)properties1));
      assertTrue(properties1.equals((Object)properties0));
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      
      HikariConfig hikariConfig1 = null;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      hikariConfig0.setRegisterMbeans(boolean0);
      assertNotSame(properties0, properties1);
      assertNotSame(properties1, properties0);
      assertTrue(properties0.equals((Object)properties1));
      assertTrue(properties1.equals((Object)properties0));
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      
      properties0.replaceAll(biFunction0);
      assertNotSame(properties0, properties1);
      assertTrue(properties0.equals((Object)properties1));
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      // Undeclared exception!
      try { 
        hikariConfig0.copyState(hikariConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Exception copying HikariConfig state: null
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      String string0 = null;
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNotNull(hikariDataSource0);
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      
      long long0 = 0L;
      hikariDataSource0.setConnectionTimeout(long0);
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(2147483647L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      
      long long1 = (-2830L);
      hikariDataSource0.setLeakDetectionThreshold(long1);
      assertFalse(long1 == long0);
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-2830L), hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(2147483647L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      
      String string1 = "s%f$";
      Object object0 = new Object();
      assertNotNull(object0);
      
      hikariDataSource0.addDataSourceProperty(string1, object0);
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-2830L), hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(2147483647L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      
      hikariDataSource0.setConnectionTestQuery(string0);
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-2830L), hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(2147483647L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      
      // Undeclared exception!
      try { 
        hikariDataSource0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNotNull(hikariConfig0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNotNull(hikariDataSource0);
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      
      String string0 = "HikariPool-";
      hikariDataSource0.setCatalog(string0);
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("HikariPool-", hikariDataSource0.getCatalog());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      
      hikariConfig0.setDataSource(hikariDataSource0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("HikariPool-", hikariDataSource0.getCatalog());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      assertNotNull(hikariDataSource1);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals("HikariPool-2", hikariDataSource1.getPoolName());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      
      hikariDataSource1.setDataSourceClassName(string0);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals("HikariPool-", hikariDataSource1.getDataSourceClassName());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals("HikariPool-2", hikariDataSource1.getPoolName());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      
      boolean boolean0 = true;
      hikariDataSource0.setJdbc4ConnectionTest(boolean0);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("HikariPool-", hikariDataSource0.getCatalog());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      
      long long0 = 0L;
      hikariDataSource0.setDataSourceClassName(string0);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("HikariPool-", hikariDataSource0.getCatalog());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-", hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      
      int int0 = 1998;
      hikariDataSource1.setMaximumPoolSize(int0);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(1998, hikariDataSource1.getMaximumPoolSize());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals("HikariPool-", hikariDataSource1.getDataSourceClassName());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals("HikariPool-2", hikariDataSource1.getPoolName());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      
      hikariDataSource1.addDataSourceProperty(string0, hikariDataSource0);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("HikariPool-", hikariDataSource0.getCatalog());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-", hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(1998, hikariDataSource1.getMaximumPoolSize());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals("HikariPool-", hikariDataSource1.getDataSourceClassName());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals("HikariPool-2", hikariDataSource1.getPoolName());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      
      hikariDataSource1.setLeakDetectionThreshold(long0);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(1998, hikariDataSource1.getMaximumPoolSize());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals("HikariPool-", hikariDataSource1.getDataSourceClassName());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals("HikariPool-2", hikariDataSource1.getPoolName());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      
      boolean boolean1 = true;
      hikariConfig0.setReadOnly(boolean1);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      
      hikariConfig0.setDataSource(hikariDataSource0);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("HikariPool-", hikariDataSource0.getCatalog());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-", hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      
      boolean boolean2 = true;
      hikariConfig0.setIsolateInternalQueries(boolean2);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isIsolateInternalQueries());
      
      long long1 = hikariDataSource0.getMaxLifetime();
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertEquals(1800000L, long1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(long1 == long0);
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("HikariPool-", hikariDataSource0.getCatalog());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-", hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      
      int int1 = hikariDataSource1.getAcquireIncrement();
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(1998, hikariDataSource1.getMaximumPoolSize());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals("HikariPool-", hikariDataSource1.getDataSourceClassName());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals("HikariPool-2", hikariDataSource1.getPoolName());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      
      boolean boolean3 = hikariConfig0.isReadOnly();
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isIsolateInternalQueries());
      
      long long2 = 0L;
      hikariConfig0.setConnectionTimeout(long2);
      assertFalse(long2 == long1);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(2147483647L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isIsolateInternalQueries());
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HikariConfig hikariConfig0 = new HikariConfig();
          assertNotNull(hikariConfig0);
          assertFalse(hikariConfig0.isIsolateInternalQueries());
          assertNull(hikariConfig0.getCatalog());
          assertEquals(1800000L, hikariConfig0.getMaxLifetime());
          assertEquals(600000L, hikariConfig0.getIdleTimeout());
          assertNull(hikariConfig0.getDataSourceClassName());
          assertFalse(hikariConfig0.isInitializationFailFast());
          assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
          assertFalse(hikariConfig0.isReadOnly());
          assertEquals(5000L, hikariConfig0.getConnectionTimeout());
          assertNull(hikariConfig0.getJdbcUrl());
          assertTrue(hikariConfig0.isJdbc4ConnectionTest());
          assertEquals(60, hikariConfig0.getMaximumPoolSize());
          assertTrue(hikariConfig0.isAutoCommit());
          assertEquals("HikariPool-0", hikariConfig0.getPoolName());
          assertNull(hikariConfig0.getConnectionTestQuery());
          assertNull(hikariConfig0.getConnectionInitSql());
          assertEquals(1, hikariConfig0.getAcquireIncrement());
          assertEquals(3, hikariConfig0.getAcquireRetries());
          assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
          assertEquals((-1), hikariConfig0.getTransactionIsolation());
          assertEquals(10, hikariConfig0.getMinimumPoolSize());
          assertFalse(hikariConfig0.isRegisterMbeans());
          assertNull(hikariConfig0.getConnectionCustomizerClassName());
          
          HikariDataSource hikariDataSource0 = new HikariDataSource();
          assertNotNull(hikariDataSource0);
          assertFalse(hikariDataSource0.isRegisterMbeans());
          assertEquals(600000L, hikariDataSource0.getIdleTimeout());
          assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
          assertFalse(hikariDataSource0.isIsolateInternalQueries());
          assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
          assertFalse(hikariDataSource0.isInitializationFailFast());
          assertEquals(0, hikariDataSource0.getLoginTimeout());
          assertEquals(10, hikariDataSource0.getMinimumPoolSize());
          assertNull(hikariDataSource0.getConnectionTestQuery());
          assertEquals(3, hikariDataSource0.getAcquireRetries());
          assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
          assertEquals((-1), hikariDataSource0.getTransactionIsolation());
          assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
          assertNull(hikariDataSource0.getConnectionCustomizerClassName());
          assertFalse(hikariDataSource0.isReadOnly());
          assertNull(hikariDataSource0.getDataSourceClassName());
          assertTrue(hikariDataSource0.isAutoCommit());
          assertEquals(1, hikariDataSource0.getAcquireIncrement());
          assertNull(hikariDataSource0.getConnectionInitSql());
          assertNull(hikariDataSource0.getJdbcUrl());
          assertNull(hikariDataSource0.getCatalog());
          assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
          assertEquals(60, hikariDataSource0.getMaximumPoolSize());
          assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
          
          String string0 = "HikariPool-";
          hikariDataSource0.setCatalog(string0);
          assertFalse(hikariDataSource0.isRegisterMbeans());
          assertEquals(600000L, hikariDataSource0.getIdleTimeout());
          assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
          assertFalse(hikariDataSource0.isIsolateInternalQueries());
          assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
          assertFalse(hikariDataSource0.isInitializationFailFast());
          assertEquals(0, hikariDataSource0.getLoginTimeout());
          assertEquals(10, hikariDataSource0.getMinimumPoolSize());
          assertNull(hikariDataSource0.getConnectionTestQuery());
          assertEquals(3, hikariDataSource0.getAcquireRetries());
          assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
          assertEquals((-1), hikariDataSource0.getTransactionIsolation());
          assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
          assertNull(hikariDataSource0.getConnectionCustomizerClassName());
          assertFalse(hikariDataSource0.isReadOnly());
          assertNull(hikariDataSource0.getDataSourceClassName());
          assertTrue(hikariDataSource0.isAutoCommit());
          assertEquals(1, hikariDataSource0.getAcquireIncrement());
          assertEquals("HikariPool-", hikariDataSource0.getCatalog());
          assertNull(hikariDataSource0.getConnectionInitSql());
          assertNull(hikariDataSource0.getJdbcUrl());
          assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
          assertEquals(60, hikariDataSource0.getMaximumPoolSize());
          assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
          
          hikariConfig0.setDataSource(hikariDataSource0);
          assertFalse(hikariConfig0.isIsolateInternalQueries());
          assertNull(hikariConfig0.getCatalog());
          assertEquals(1800000L, hikariConfig0.getMaxLifetime());
          assertEquals(600000L, hikariConfig0.getIdleTimeout());
          assertNull(hikariConfig0.getDataSourceClassName());
          assertFalse(hikariConfig0.isInitializationFailFast());
          assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
          assertFalse(hikariConfig0.isReadOnly());
          assertEquals(5000L, hikariConfig0.getConnectionTimeout());
          assertNull(hikariConfig0.getJdbcUrl());
          assertTrue(hikariConfig0.isJdbc4ConnectionTest());
          assertEquals(60, hikariConfig0.getMaximumPoolSize());
          assertTrue(hikariConfig0.isAutoCommit());
          assertEquals("HikariPool-0", hikariConfig0.getPoolName());
          assertNull(hikariConfig0.getConnectionTestQuery());
          assertNull(hikariConfig0.getConnectionInitSql());
          assertEquals(1, hikariConfig0.getAcquireIncrement());
          assertEquals(3, hikariConfig0.getAcquireRetries());
          assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
          assertEquals((-1), hikariConfig0.getTransactionIsolation());
          assertEquals(10, hikariConfig0.getMinimumPoolSize());
          assertFalse(hikariConfig0.isRegisterMbeans());
          assertNull(hikariConfig0.getConnectionCustomizerClassName());
          assertFalse(hikariDataSource0.isRegisterMbeans());
          assertEquals(600000L, hikariDataSource0.getIdleTimeout());
          assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
          assertFalse(hikariDataSource0.isIsolateInternalQueries());
          assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
          assertFalse(hikariDataSource0.isInitializationFailFast());
          assertEquals(0, hikariDataSource0.getLoginTimeout());
          assertEquals(10, hikariDataSource0.getMinimumPoolSize());
          assertNull(hikariDataSource0.getConnectionTestQuery());
          assertEquals(3, hikariDataSource0.getAcquireRetries());
          assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
          assertEquals((-1), hikariDataSource0.getTransactionIsolation());
          assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
          assertNull(hikariDataSource0.getConnectionCustomizerClassName());
          assertFalse(hikariDataSource0.isReadOnly());
          assertNull(hikariDataSource0.getDataSourceClassName());
          assertTrue(hikariDataSource0.isAutoCommit());
          assertEquals(1, hikariDataSource0.getAcquireIncrement());
          assertEquals("HikariPool-", hikariDataSource0.getCatalog());
          assertNull(hikariDataSource0.getConnectionInitSql());
          assertNull(hikariDataSource0.getJdbcUrl());
          assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
          assertEquals(60, hikariDataSource0.getMaximumPoolSize());
          assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
          
          HikariDataSource hikariDataSource1 = new HikariDataSource(hikariConfig0);
          assertNotNull(hikariDataSource1);
          assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
          assertFalse(hikariConfig0.isIsolateInternalQueries());
          assertNull(hikariConfig0.getCatalog());
          assertEquals(1800000L, hikariConfig0.getMaxLifetime());
          assertEquals(600000L, hikariConfig0.getIdleTimeout());
          assertNull(hikariConfig0.getDataSourceClassName());
          assertFalse(hikariConfig0.isInitializationFailFast());
          assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
          assertFalse(hikariConfig0.isReadOnly());
          assertEquals(5000L, hikariConfig0.getConnectionTimeout());
          assertNull(hikariConfig0.getJdbcUrl());
          assertTrue(hikariConfig0.isJdbc4ConnectionTest());
          assertEquals(60, hikariConfig0.getMaximumPoolSize());
          assertTrue(hikariConfig0.isAutoCommit());
          assertEquals("HikariPool-0", hikariConfig0.getPoolName());
          assertNull(hikariConfig0.getConnectionTestQuery());
          assertNull(hikariConfig0.getConnectionInitSql());
          assertEquals(1, hikariConfig0.getAcquireIncrement());
          assertEquals(3, hikariConfig0.getAcquireRetries());
          assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
          assertEquals((-1), hikariConfig0.getTransactionIsolation());
          assertEquals(10, hikariConfig0.getMinimumPoolSize());
          assertFalse(hikariConfig0.isRegisterMbeans());
          assertNull(hikariConfig0.getConnectionCustomizerClassName());
          assertNull(hikariDataSource1.getConnectionCustomizerClassName());
          assertFalse(hikariDataSource1.isReadOnly());
          assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
          assertEquals(10, hikariDataSource1.getMinimumPoolSize());
          assertNull(hikariDataSource1.getConnectionInitSql());
          assertEquals(1, hikariDataSource1.getAcquireIncrement());
          assertEquals(60, hikariDataSource1.getMaximumPoolSize());
          assertTrue(hikariDataSource1.isAutoCommit());
          assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
          assertNull(hikariDataSource1.getCatalog());
          assertFalse(hikariDataSource1.isRegisterMbeans());
          assertFalse(hikariDataSource1.isInitializationFailFast());
          assertEquals(600000L, hikariDataSource1.getIdleTimeout());
          assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
          assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
          assertNull(hikariDataSource1.getJdbcUrl());
          assertEquals((-1), hikariDataSource1.getTransactionIsolation());
          assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
          assertNull(hikariDataSource1.getConnectionTestQuery());
          assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
          assertEquals(3, hikariDataSource1.getAcquireRetries());
          assertNull(hikariDataSource1.getDataSourceClassName());
          assertEquals(0, hikariDataSource1.getLoginTimeout());
          assertFalse(hikariDataSource1.isIsolateInternalQueries());
          
          hikariDataSource1.setDataSourceClassName(string0);
          assertNotSame(hikariDataSource1, hikariDataSource0);
          assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
          assertFalse(hikariConfig0.isIsolateInternalQueries());
          assertNull(hikariConfig0.getCatalog());
          assertEquals(1800000L, hikariConfig0.getMaxLifetime());
          assertEquals(600000L, hikariConfig0.getIdleTimeout());
          assertNull(hikariConfig0.getDataSourceClassName());
          assertFalse(hikariConfig0.isInitializationFailFast());
          assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
          assertFalse(hikariConfig0.isReadOnly());
          assertEquals(5000L, hikariConfig0.getConnectionTimeout());
          assertNull(hikariConfig0.getJdbcUrl());
          assertTrue(hikariConfig0.isJdbc4ConnectionTest());
          assertEquals(60, hikariConfig0.getMaximumPoolSize());
          assertTrue(hikariConfig0.isAutoCommit());
          assertEquals("HikariPool-0", hikariConfig0.getPoolName());
          assertNull(hikariConfig0.getConnectionTestQuery());
          assertNull(hikariConfig0.getConnectionInitSql());
          assertEquals(1, hikariConfig0.getAcquireIncrement());
          assertEquals(3, hikariConfig0.getAcquireRetries());
          assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
          assertEquals((-1), hikariConfig0.getTransactionIsolation());
          assertEquals(10, hikariConfig0.getMinimumPoolSize());
          assertFalse(hikariConfig0.isRegisterMbeans());
          assertNull(hikariConfig0.getConnectionCustomizerClassName());
          assertNull(hikariDataSource1.getConnectionCustomizerClassName());
          assertFalse(hikariDataSource1.isReadOnly());
          assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
          assertEquals(10, hikariDataSource1.getMinimumPoolSize());
          assertNull(hikariDataSource1.getConnectionInitSql());
          assertEquals(1, hikariDataSource1.getAcquireIncrement());
          assertEquals(60, hikariDataSource1.getMaximumPoolSize());
          assertTrue(hikariDataSource1.isAutoCommit());
          assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
          assertNull(hikariDataSource1.getCatalog());
          assertFalse(hikariDataSource1.isRegisterMbeans());
          assertEquals("HikariPool-", hikariDataSource1.getDataSourceClassName());
          assertFalse(hikariDataSource1.isInitializationFailFast());
          assertEquals(600000L, hikariDataSource1.getIdleTimeout());
          assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
          assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
          assertNull(hikariDataSource1.getJdbcUrl());
          assertEquals((-1), hikariDataSource1.getTransactionIsolation());
          assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
          assertNull(hikariDataSource1.getConnectionTestQuery());
          assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
          assertEquals(3, hikariDataSource1.getAcquireRetries());
          assertEquals(0, hikariDataSource1.getLoginTimeout());
          assertFalse(hikariDataSource1.isIsolateInternalQueries());
          
          boolean boolean0 = true;
          hikariDataSource0.setJdbc4ConnectionTest(boolean0);
          assertNotSame(hikariDataSource0, hikariDataSource1);
          assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
          assertFalse(hikariDataSource0.isRegisterMbeans());
          assertEquals(600000L, hikariDataSource0.getIdleTimeout());
          assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
          assertFalse(hikariDataSource0.isIsolateInternalQueries());
          assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
          assertFalse(hikariDataSource0.isInitializationFailFast());
          assertEquals(0, hikariDataSource0.getLoginTimeout());
          assertEquals(10, hikariDataSource0.getMinimumPoolSize());
          assertNull(hikariDataSource0.getConnectionTestQuery());
          assertEquals(3, hikariDataSource0.getAcquireRetries());
          assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
          assertEquals((-1), hikariDataSource0.getTransactionIsolation());
          assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
          assertNull(hikariDataSource0.getConnectionCustomizerClassName());
          assertFalse(hikariDataSource0.isReadOnly());
          assertNull(hikariDataSource0.getDataSourceClassName());
          assertTrue(hikariDataSource0.isAutoCommit());
          assertEquals(1, hikariDataSource0.getAcquireIncrement());
          assertEquals("HikariPool-", hikariDataSource0.getCatalog());
          assertNull(hikariDataSource0.getConnectionInitSql());
          assertNull(hikariDataSource0.getJdbcUrl());
          assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
          assertEquals(60, hikariDataSource0.getMaximumPoolSize());
          assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
          
          long long0 = 0L;
          hikariDataSource0.setDataSourceClassName(string0);
          assertNotSame(hikariDataSource0, hikariDataSource1);
          assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
          assertFalse(hikariDataSource0.isRegisterMbeans());
          assertEquals("HikariPool-", hikariDataSource0.getDataSourceClassName());
          assertEquals(600000L, hikariDataSource0.getIdleTimeout());
          assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
          assertFalse(hikariDataSource0.isIsolateInternalQueries());
          assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
          assertFalse(hikariDataSource0.isInitializationFailFast());
          assertEquals(0, hikariDataSource0.getLoginTimeout());
          assertEquals(10, hikariDataSource0.getMinimumPoolSize());
          assertNull(hikariDataSource0.getConnectionTestQuery());
          assertEquals(3, hikariDataSource0.getAcquireRetries());
          assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
          assertEquals((-1), hikariDataSource0.getTransactionIsolation());
          assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
          assertNull(hikariDataSource0.getConnectionCustomizerClassName());
          assertFalse(hikariDataSource0.isReadOnly());
          assertTrue(hikariDataSource0.isAutoCommit());
          assertEquals(1, hikariDataSource0.getAcquireIncrement());
          assertEquals("HikariPool-", hikariDataSource0.getCatalog());
          assertNull(hikariDataSource0.getConnectionInitSql());
          assertNull(hikariDataSource0.getJdbcUrl());
          assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
          assertEquals(60, hikariDataSource0.getMaximumPoolSize());
          assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
          
          int int0 = 1998;
          hikariDataSource1.setMaximumPoolSize(int0);
          assertNotSame(hikariDataSource1, hikariDataSource0);
          assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
          assertFalse(hikariConfig0.isIsolateInternalQueries());
          assertNull(hikariConfig0.getCatalog());
          assertEquals(1800000L, hikariConfig0.getMaxLifetime());
          assertEquals(600000L, hikariConfig0.getIdleTimeout());
          assertNull(hikariConfig0.getDataSourceClassName());
          assertFalse(hikariConfig0.isInitializationFailFast());
          assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
          assertFalse(hikariConfig0.isReadOnly());
          assertEquals(5000L, hikariConfig0.getConnectionTimeout());
          assertNull(hikariConfig0.getJdbcUrl());
          assertTrue(hikariConfig0.isJdbc4ConnectionTest());
          assertEquals(60, hikariConfig0.getMaximumPoolSize());
          assertTrue(hikariConfig0.isAutoCommit());
          assertEquals("HikariPool-0", hikariConfig0.getPoolName());
          assertNull(hikariConfig0.getConnectionTestQuery());
          assertNull(hikariConfig0.getConnectionInitSql());
          assertEquals(1, hikariConfig0.getAcquireIncrement());
          assertEquals(3, hikariConfig0.getAcquireRetries());
          assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
          assertEquals((-1), hikariConfig0.getTransactionIsolation());
          assertEquals(10, hikariConfig0.getMinimumPoolSize());
          assertFalse(hikariConfig0.isRegisterMbeans());
          assertNull(hikariConfig0.getConnectionCustomizerClassName());
          assertNull(hikariDataSource1.getConnectionCustomizerClassName());
          assertFalse(hikariDataSource1.isReadOnly());
          assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
          assertEquals(10, hikariDataSource1.getMinimumPoolSize());
          assertNull(hikariDataSource1.getConnectionInitSql());
          assertEquals(1, hikariDataSource1.getAcquireIncrement());
          assertTrue(hikariDataSource1.isAutoCommit());
          assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
          assertNull(hikariDataSource1.getCatalog());
          assertFalse(hikariDataSource1.isRegisterMbeans());
          assertEquals("HikariPool-", hikariDataSource1.getDataSourceClassName());
          assertFalse(hikariDataSource1.isInitializationFailFast());
          assertEquals(600000L, hikariDataSource1.getIdleTimeout());
          assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
          assertEquals(1998, hikariDataSource1.getMaximumPoolSize());
          assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
          assertNull(hikariDataSource1.getJdbcUrl());
          assertEquals((-1), hikariDataSource1.getTransactionIsolation());
          assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
          assertNull(hikariDataSource1.getConnectionTestQuery());
          assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
          assertEquals(3, hikariDataSource1.getAcquireRetries());
          assertEquals(0, hikariDataSource1.getLoginTimeout());
          assertFalse(hikariDataSource1.isIsolateInternalQueries());
          
          hikariDataSource1.addDataSourceProperty(string0, hikariDataSource0);
          assertNotSame(hikariDataSource0, hikariDataSource1);
          assertNotSame(hikariDataSource1, hikariDataSource0);
          assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
          assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
          assertFalse(hikariConfig0.isIsolateInternalQueries());
          assertNull(hikariConfig0.getCatalog());
          assertEquals(1800000L, hikariConfig0.getMaxLifetime());
          assertEquals(600000L, hikariConfig0.getIdleTimeout());
          assertNull(hikariConfig0.getDataSourceClassName());
          assertFalse(hikariConfig0.isInitializationFailFast());
          assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
          assertFalse(hikariConfig0.isReadOnly());
          assertEquals(5000L, hikariConfig0.getConnectionTimeout());
          assertNull(hikariConfig0.getJdbcUrl());
          assertTrue(hikariConfig0.isJdbc4ConnectionTest());
          assertEquals(60, hikariConfig0.getMaximumPoolSize());
          assertTrue(hikariConfig0.isAutoCommit());
          assertEquals("HikariPool-0", hikariConfig0.getPoolName());
          assertNull(hikariConfig0.getConnectionTestQuery());
          assertNull(hikariConfig0.getConnectionInitSql());
          assertEquals(1, hikariConfig0.getAcquireIncrement());
          assertEquals(3, hikariConfig0.getAcquireRetries());
          assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
          assertEquals((-1), hikariConfig0.getTransactionIsolation());
          assertEquals(10, hikariConfig0.getMinimumPoolSize());
          assertFalse(hikariConfig0.isRegisterMbeans());
          assertNull(hikariConfig0.getConnectionCustomizerClassName());
          assertFalse(hikariDataSource0.isRegisterMbeans());
          assertEquals("HikariPool-", hikariDataSource0.getDataSourceClassName());
          assertEquals(600000L, hikariDataSource0.getIdleTimeout());
          assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
          assertFalse(hikariDataSource0.isIsolateInternalQueries());
          assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
          assertFalse(hikariDataSource0.isInitializationFailFast());
          assertEquals(0, hikariDataSource0.getLoginTimeout());
          assertEquals(10, hikariDataSource0.getMinimumPoolSize());
          assertNull(hikariDataSource0.getConnectionTestQuery());
          assertEquals(3, hikariDataSource0.getAcquireRetries());
          assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
          assertEquals((-1), hikariDataSource0.getTransactionIsolation());
          assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
          assertNull(hikariDataSource0.getConnectionCustomizerClassName());
          assertFalse(hikariDataSource0.isReadOnly());
          assertTrue(hikariDataSource0.isAutoCommit());
          assertEquals(1, hikariDataSource0.getAcquireIncrement());
          assertEquals("HikariPool-", hikariDataSource0.getCatalog());
          assertNull(hikariDataSource0.getConnectionInitSql());
          assertNull(hikariDataSource0.getJdbcUrl());
          assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
          assertEquals(60, hikariDataSource0.getMaximumPoolSize());
          assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
          assertNull(hikariDataSource1.getConnectionCustomizerClassName());
          assertFalse(hikariDataSource1.isReadOnly());
          assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
          assertEquals(10, hikariDataSource1.getMinimumPoolSize());
          assertNull(hikariDataSource1.getConnectionInitSql());
          assertEquals(1, hikariDataSource1.getAcquireIncrement());
          assertTrue(hikariDataSource1.isAutoCommit());
          assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
          assertNull(hikariDataSource1.getCatalog());
          assertFalse(hikariDataSource1.isRegisterMbeans());
          assertEquals("HikariPool-", hikariDataSource1.getDataSourceClassName());
          assertFalse(hikariDataSource1.isInitializationFailFast());
          assertEquals(600000L, hikariDataSource1.getIdleTimeout());
          assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
          assertEquals(1998, hikariDataSource1.getMaximumPoolSize());
          assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
          assertNull(hikariDataSource1.getJdbcUrl());
          assertEquals((-1), hikariDataSource1.getTransactionIsolation());
          assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
          assertNull(hikariDataSource1.getConnectionTestQuery());
          assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
          assertEquals(3, hikariDataSource1.getAcquireRetries());
          assertEquals(0, hikariDataSource1.getLoginTimeout());
          assertFalse(hikariDataSource1.isIsolateInternalQueries());
          
          hikariDataSource1.setLeakDetectionThreshold(long0);
          assertNotSame(hikariDataSource1, hikariDataSource0);
          assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
          assertFalse(hikariConfig0.isIsolateInternalQueries());
          assertNull(hikariConfig0.getCatalog());
          assertEquals(1800000L, hikariConfig0.getMaxLifetime());
          assertEquals(600000L, hikariConfig0.getIdleTimeout());
          assertNull(hikariConfig0.getDataSourceClassName());
          assertFalse(hikariConfig0.isInitializationFailFast());
          assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
          assertFalse(hikariConfig0.isReadOnly());
          assertEquals(5000L, hikariConfig0.getConnectionTimeout());
          assertNull(hikariConfig0.getJdbcUrl());
          assertTrue(hikariConfig0.isJdbc4ConnectionTest());
          assertEquals(60, hikariConfig0.getMaximumPoolSize());
          assertTrue(hikariConfig0.isAutoCommit());
          assertEquals("HikariPool-0", hikariConfig0.getPoolName());
          assertNull(hikariConfig0.getConnectionTestQuery());
          assertNull(hikariConfig0.getConnectionInitSql());
          assertEquals(1, hikariConfig0.getAcquireIncrement());
          assertEquals(3, hikariConfig0.getAcquireRetries());
          assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
          assertEquals((-1), hikariConfig0.getTransactionIsolation());
          assertEquals(10, hikariConfig0.getMinimumPoolSize());
          assertFalse(hikariConfig0.isRegisterMbeans());
          assertNull(hikariConfig0.getConnectionCustomizerClassName());
          assertNull(hikariDataSource1.getConnectionCustomizerClassName());
          assertFalse(hikariDataSource1.isReadOnly());
          assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
          assertEquals(10, hikariDataSource1.getMinimumPoolSize());
          assertNull(hikariDataSource1.getConnectionInitSql());
          assertEquals(1, hikariDataSource1.getAcquireIncrement());
          assertTrue(hikariDataSource1.isAutoCommit());
          assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
          assertNull(hikariDataSource1.getCatalog());
          assertFalse(hikariDataSource1.isRegisterMbeans());
          assertEquals("HikariPool-", hikariDataSource1.getDataSourceClassName());
          assertFalse(hikariDataSource1.isInitializationFailFast());
          assertEquals(600000L, hikariDataSource1.getIdleTimeout());
          assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
          assertEquals(1998, hikariDataSource1.getMaximumPoolSize());
          assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
          assertNull(hikariDataSource1.getJdbcUrl());
          assertEquals((-1), hikariDataSource1.getTransactionIsolation());
          assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
          assertNull(hikariDataSource1.getConnectionTestQuery());
          assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
          assertEquals(3, hikariDataSource1.getAcquireRetries());
          assertEquals(0, hikariDataSource1.getLoginTimeout());
          assertFalse(hikariDataSource1.isIsolateInternalQueries());
          
          boolean boolean1 = false;
          hikariConfig0.setReadOnly(boolean1);
          assertFalse(boolean1 == boolean0);
          assertFalse(hikariConfig0.isIsolateInternalQueries());
          assertNull(hikariConfig0.getCatalog());
          assertEquals(1800000L, hikariConfig0.getMaxLifetime());
          assertEquals(600000L, hikariConfig0.getIdleTimeout());
          assertNull(hikariConfig0.getDataSourceClassName());
          assertFalse(hikariConfig0.isInitializationFailFast());
          assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
          assertFalse(hikariConfig0.isReadOnly());
          assertEquals(5000L, hikariConfig0.getConnectionTimeout());
          assertNull(hikariConfig0.getJdbcUrl());
          assertTrue(hikariConfig0.isJdbc4ConnectionTest());
          assertEquals(60, hikariConfig0.getMaximumPoolSize());
          assertTrue(hikariConfig0.isAutoCommit());
          assertEquals("HikariPool-0", hikariConfig0.getPoolName());
          assertNull(hikariConfig0.getConnectionTestQuery());
          assertNull(hikariConfig0.getConnectionInitSql());
          assertEquals(1, hikariConfig0.getAcquireIncrement());
          assertEquals(3, hikariConfig0.getAcquireRetries());
          assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
          assertEquals((-1), hikariConfig0.getTransactionIsolation());
          assertEquals(10, hikariConfig0.getMinimumPoolSize());
          assertFalse(hikariConfig0.isRegisterMbeans());
          assertNull(hikariConfig0.getConnectionCustomizerClassName());
          
          hikariConfig0.setDataSource(hikariDataSource0);
          assertNotSame(hikariDataSource0, hikariDataSource1);
          assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
          assertFalse(hikariConfig0.isIsolateInternalQueries());
          assertNull(hikariConfig0.getCatalog());
          assertEquals(1800000L, hikariConfig0.getMaxLifetime());
          assertEquals(600000L, hikariConfig0.getIdleTimeout());
          assertNull(hikariConfig0.getDataSourceClassName());
          assertFalse(hikariConfig0.isInitializationFailFast());
          assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
          assertFalse(hikariConfig0.isReadOnly());
          assertEquals(5000L, hikariConfig0.getConnectionTimeout());
          assertNull(hikariConfig0.getJdbcUrl());
          assertTrue(hikariConfig0.isJdbc4ConnectionTest());
          assertEquals(60, hikariConfig0.getMaximumPoolSize());
          assertTrue(hikariConfig0.isAutoCommit());
          assertEquals("HikariPool-0", hikariConfig0.getPoolName());
          assertNull(hikariConfig0.getConnectionTestQuery());
          assertNull(hikariConfig0.getConnectionInitSql());
          assertEquals(1, hikariConfig0.getAcquireIncrement());
          assertEquals(3, hikariConfig0.getAcquireRetries());
          assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
          assertEquals((-1), hikariConfig0.getTransactionIsolation());
          assertEquals(10, hikariConfig0.getMinimumPoolSize());
          assertFalse(hikariConfig0.isRegisterMbeans());
          assertNull(hikariConfig0.getConnectionCustomizerClassName());
          assertFalse(hikariDataSource0.isRegisterMbeans());
          assertEquals("HikariPool-", hikariDataSource0.getDataSourceClassName());
          assertEquals(600000L, hikariDataSource0.getIdleTimeout());
          assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
          assertFalse(hikariDataSource0.isIsolateInternalQueries());
          assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
          assertFalse(hikariDataSource0.isInitializationFailFast());
          assertEquals(0, hikariDataSource0.getLoginTimeout());
          assertEquals(10, hikariDataSource0.getMinimumPoolSize());
          assertNull(hikariDataSource0.getConnectionTestQuery());
          assertEquals(3, hikariDataSource0.getAcquireRetries());
          assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
          assertEquals((-1), hikariDataSource0.getTransactionIsolation());
          assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
          assertNull(hikariDataSource0.getConnectionCustomizerClassName());
          assertFalse(hikariDataSource0.isReadOnly());
          assertTrue(hikariDataSource0.isAutoCommit());
          assertEquals(1, hikariDataSource0.getAcquireIncrement());
          assertEquals("HikariPool-", hikariDataSource0.getCatalog());
          assertNull(hikariDataSource0.getConnectionInitSql());
          assertNull(hikariDataSource0.getJdbcUrl());
          assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
          assertEquals(60, hikariDataSource0.getMaximumPoolSize());
          assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
          
          boolean boolean2 = true;
          hikariConfig0.setIsolateInternalQueries(boolean2);
          assertFalse(boolean2 == boolean1);
          assertNull(hikariConfig0.getCatalog());
          assertEquals(1800000L, hikariConfig0.getMaxLifetime());
          assertEquals(600000L, hikariConfig0.getIdleTimeout());
          assertNull(hikariConfig0.getDataSourceClassName());
          assertFalse(hikariConfig0.isInitializationFailFast());
          assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
          assertFalse(hikariConfig0.isReadOnly());
          assertEquals(5000L, hikariConfig0.getConnectionTimeout());
          assertNull(hikariConfig0.getJdbcUrl());
          assertTrue(hikariConfig0.isJdbc4ConnectionTest());
          assertEquals(60, hikariConfig0.getMaximumPoolSize());
          assertTrue(hikariConfig0.isAutoCommit());
          assertEquals("HikariPool-0", hikariConfig0.getPoolName());
          assertNull(hikariConfig0.getConnectionTestQuery());
          assertNull(hikariConfig0.getConnectionInitSql());
          assertEquals(1, hikariConfig0.getAcquireIncrement());
          assertEquals(3, hikariConfig0.getAcquireRetries());
          assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
          assertEquals((-1), hikariConfig0.getTransactionIsolation());
          assertTrue(hikariConfig0.isIsolateInternalQueries());
          assertEquals(10, hikariConfig0.getMinimumPoolSize());
          assertFalse(hikariConfig0.isRegisterMbeans());
          assertNull(hikariConfig0.getConnectionCustomizerClassName());
          
          long long1 = hikariDataSource0.getMaxLifetime();
          assertNotSame(hikariDataSource0, hikariDataSource1);
          assertEquals(1800000L, long1);
          assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
          assertFalse(long1 == long0);
          assertFalse(hikariDataSource0.isRegisterMbeans());
          assertEquals("HikariPool-", hikariDataSource0.getDataSourceClassName());
          assertEquals(600000L, hikariDataSource0.getIdleTimeout());
          assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
          assertFalse(hikariDataSource0.isIsolateInternalQueries());
          assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
          assertFalse(hikariDataSource0.isInitializationFailFast());
          assertEquals(0, hikariDataSource0.getLoginTimeout());
          assertEquals(10, hikariDataSource0.getMinimumPoolSize());
          assertNull(hikariDataSource0.getConnectionTestQuery());
          assertEquals(3, hikariDataSource0.getAcquireRetries());
          assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
          assertEquals((-1), hikariDataSource0.getTransactionIsolation());
          assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
          assertNull(hikariDataSource0.getConnectionCustomizerClassName());
          assertFalse(hikariDataSource0.isReadOnly());
          assertTrue(hikariDataSource0.isAutoCommit());
          assertEquals(1, hikariDataSource0.getAcquireIncrement());
          assertEquals("HikariPool-", hikariDataSource0.getCatalog());
          assertNull(hikariDataSource0.getConnectionInitSql());
          assertNull(hikariDataSource0.getJdbcUrl());
          assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
          assertEquals(60, hikariDataSource0.getMaximumPoolSize());
          assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
          
          int int1 = hikariDataSource1.getAcquireIncrement();
          assertNotSame(hikariDataSource1, hikariDataSource0);
          assertEquals(1, int1);
          assertFalse(int1 == int0);
          assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
          assertNull(hikariConfig0.getCatalog());
          assertEquals(1800000L, hikariConfig0.getMaxLifetime());
          assertEquals(600000L, hikariConfig0.getIdleTimeout());
          assertNull(hikariConfig0.getDataSourceClassName());
          assertFalse(hikariConfig0.isInitializationFailFast());
          assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
          assertFalse(hikariConfig0.isReadOnly());
          assertEquals(5000L, hikariConfig0.getConnectionTimeout());
          assertNull(hikariConfig0.getJdbcUrl());
          assertTrue(hikariConfig0.isJdbc4ConnectionTest());
          assertEquals(60, hikariConfig0.getMaximumPoolSize());
          assertTrue(hikariConfig0.isAutoCommit());
          assertEquals("HikariPool-0", hikariConfig0.getPoolName());
          assertNull(hikariConfig0.getConnectionTestQuery());
          assertNull(hikariConfig0.getConnectionInitSql());
          assertEquals(1, hikariConfig0.getAcquireIncrement());
          assertEquals(3, hikariConfig0.getAcquireRetries());
          assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
          assertEquals((-1), hikariConfig0.getTransactionIsolation());
          assertTrue(hikariConfig0.isIsolateInternalQueries());
          assertEquals(10, hikariConfig0.getMinimumPoolSize());
          assertFalse(hikariConfig0.isRegisterMbeans());
          assertNull(hikariConfig0.getConnectionCustomizerClassName());
          assertNull(hikariDataSource1.getConnectionCustomizerClassName());
          assertFalse(hikariDataSource1.isReadOnly());
          assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
          assertEquals(10, hikariDataSource1.getMinimumPoolSize());
          assertNull(hikariDataSource1.getConnectionInitSql());
          assertEquals(1, hikariDataSource1.getAcquireIncrement());
          assertTrue(hikariDataSource1.isAutoCommit());
          assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
          assertNull(hikariDataSource1.getCatalog());
          assertFalse(hikariDataSource1.isRegisterMbeans());
          assertEquals("HikariPool-", hikariDataSource1.getDataSourceClassName());
          assertFalse(hikariDataSource1.isInitializationFailFast());
          assertEquals(600000L, hikariDataSource1.getIdleTimeout());
          assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
          assertEquals(1998, hikariDataSource1.getMaximumPoolSize());
          assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
          assertNull(hikariDataSource1.getJdbcUrl());
          assertEquals((-1), hikariDataSource1.getTransactionIsolation());
          assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
          assertNull(hikariDataSource1.getConnectionTestQuery());
          assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
          assertEquals(3, hikariDataSource1.getAcquireRetries());
          assertEquals(0, hikariDataSource1.getLoginTimeout());
          assertFalse(hikariDataSource1.isIsolateInternalQueries());
          
          boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
          assertTrue(boolean3);
          assertTrue(boolean3 == boolean0);
          assertTrue(boolean3 == boolean2);
          assertFalse(boolean3 == boolean1);
          
          long long2 = 0L;
          hikariConfig0.setConnectionTimeout(long2);
          assertFalse(long2 == long1);
          assertNull(hikariConfig0.getCatalog());
          assertEquals(1800000L, hikariConfig0.getMaxLifetime());
          assertEquals(600000L, hikariConfig0.getIdleTimeout());
          assertNull(hikariConfig0.getDataSourceClassName());
          assertFalse(hikariConfig0.isInitializationFailFast());
          assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
          assertFalse(hikariConfig0.isReadOnly());
          assertNull(hikariConfig0.getJdbcUrl());
          assertTrue(hikariConfig0.isJdbc4ConnectionTest());
          assertEquals(60, hikariConfig0.getMaximumPoolSize());
          assertTrue(hikariConfig0.isAutoCommit());
          assertEquals("HikariPool-0", hikariConfig0.getPoolName());
          assertNull(hikariConfig0.getConnectionTestQuery());
          assertNull(hikariConfig0.getConnectionInitSql());
          assertEquals(1, hikariConfig0.getAcquireIncrement());
          assertEquals(2147483647L, hikariConfig0.getConnectionTimeout());
          assertEquals(3, hikariConfig0.getAcquireRetries());
          assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
          assertEquals((-1), hikariConfig0.getTransactionIsolation());
          assertTrue(hikariConfig0.isIsolateInternalQueries());
          assertEquals(10, hikariConfig0.getMinimumPoolSize());
          assertFalse(hikariConfig0.isRegisterMbeans());
          assertNull(hikariConfig0.getConnectionCustomizerClassName());
          
          String string1 = hikariDataSource1.getDataSourceClassName();
          assertNotNull(string1);
          assertNotSame(hikariDataSource1, hikariDataSource0);
          assertSame(string1, string0);
          assertEquals("HikariPool-", string1);
          assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
          assertNull(hikariConfig0.getCatalog());
          assertEquals(1800000L, hikariConfig0.getMaxLifetime());
          assertEquals(600000L, hikariConfig0.getIdleTimeout());
          assertNull(hikariConfig0.getDataSourceClassName());
          assertFalse(hikariConfig0.isInitializationFailFast());
          assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
          assertFalse(hikariConfig0.isReadOnly());
          assertNull(hikariConfig0.getJdbcUrl());
          assertTrue(hikariConfig0.isJdbc4ConnectionTest());
          assertEquals(60, hikariConfig0.getMaximumPoolSize());
          assertTrue(hikariConfig0.isAutoCommit());
          assertEquals("HikariPool-0", hikariConfig0.getPoolName());
          assertNull(hikariConfig0.getConnectionTestQuery());
          assertNull(hikariConfig0.getConnectionInitSql());
          assertEquals(1, hikariConfig0.getAcquireIncrement());
          assertEquals(2147483647L, hikariConfig0.getConnectionTimeout());
          assertEquals(3, hikariConfig0.getAcquireRetries());
          assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
          assertEquals((-1), hikariConfig0.getTransactionIsolation());
          assertTrue(hikariConfig0.isIsolateInternalQueries());
          assertEquals(10, hikariConfig0.getMinimumPoolSize());
          assertFalse(hikariConfig0.isRegisterMbeans());
          assertNull(hikariConfig0.getConnectionCustomizerClassName());
          assertNull(hikariDataSource1.getConnectionCustomizerClassName());
          assertFalse(hikariDataSource1.isReadOnly());
          assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
          assertEquals(10, hikariDataSource1.getMinimumPoolSize());
          assertNull(hikariDataSource1.getConnectionInitSql());
          assertEquals(1, hikariDataSource1.getAcquireIncrement());
          assertTrue(hikariDataSource1.isAutoCommit());
          assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
          assertNull(hikariDataSource1.getCatalog());
          assertFalse(hikariDataSource1.isRegisterMbeans());
          assertEquals("HikariPool-", hikariDataSource1.getDataSourceClassName());
          assertFalse(hikariDataSource1.isInitializationFailFast());
          assertEquals(600000L, hikariDataSource1.getIdleTimeout());
          assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
          assertEquals(1998, hikariDataSource1.getMaximumPoolSize());
          assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
          assertNull(hikariDataSource1.getJdbcUrl());
          assertEquals((-1), hikariDataSource1.getTransactionIsolation());
          assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
          assertNull(hikariDataSource1.getConnectionTestQuery());
          assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
          assertEquals(3, hikariDataSource1.getAcquireRetries());
          assertEquals(0, hikariDataSource1.getLoginTimeout());
          assertFalse(hikariDataSource1.isIsolateInternalQueries());
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNotNull(hikariConfig0);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isReadOnly());
      
      int int0 = 60;
      hikariConfig0.setMaximumPoolSize(int0);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isReadOnly());
      
      HikariConfig hikariConfig1 = new HikariConfig();
      assertNotNull(hikariConfig1);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getJdbcUrl());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertFalse(hikariConfig1.isReadOnly());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      
      hikariConfig0.copyState(hikariConfig1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertFalse(hikariConfig1.isReadOnly());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      
      String string0 = hikariConfig1.getDataSourceClassName();
      assertNull(string0);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertFalse(hikariConfig1.isReadOnly());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      
      hikariConfig1.setJdbcUrl(string0);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertFalse(hikariConfig1.isReadOnly());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      
      hikariConfig0.setConnectionInitSql(string0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertFalse(hikariConfig1.isReadOnly());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      
      String string1 = "";
      hikariConfig0.setPoolName(string1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("", hikariConfig0.getPoolName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isReadOnly());
      
      boolean boolean0 = false;
      hikariConfig0.setReadOnly(boolean0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("", hikariConfig0.getPoolName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isReadOnly());
      
      String string2 = " was not found.";
      hikariConfig1.setConnectionInitSql(string2);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNotSame(string2, string1);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertEquals(" was not found.", hikariConfig1.getConnectionInitSql());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertFalse(hikariConfig1.isReadOnly());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      
      boolean boolean1 = true;
      hikariConfig1.setReadOnly(boolean1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(boolean1 == boolean0);
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertEquals(" was not found.", hikariConfig1.getConnectionInitSql());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertTrue(hikariConfig1.isReadOnly());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      
      long long0 = 30L;
      hikariConfig1.setAcquireRetryDelay(long0);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertEquals(" was not found.", hikariConfig1.getConnectionInitSql());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertTrue(hikariConfig1.isReadOnly());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(30L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig1.getConnectionCustomizer();
      assertNull(iConnectionCustomizer0);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertEquals(" was not found.", hikariConfig1.getConnectionInitSql());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertTrue(hikariConfig1.isReadOnly());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(30L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      
      long long1 = hikariConfig1.getMaxLifetime();
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(1800000L, long1);
      assertFalse(long1 == long0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertEquals(" was not found.", hikariConfig1.getConnectionInitSql());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertTrue(hikariConfig1.isReadOnly());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(30L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      
      String string3 = "t}6\"n_'p+";
      hikariConfig1.setCatalog(string3);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("t}6\"n_'p+", hikariConfig1.getCatalog());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertEquals(" was not found.", hikariConfig1.getConnectionInitSql());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertTrue(hikariConfig1.isReadOnly());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(30L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      
      String string4 = hikariConfig1.getConnectionInitSql();
      assertNotNull(string4);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertEquals(" was not found.", string4);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("t}6\"n_'p+", hikariConfig1.getCatalog());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertEquals(" was not found.", hikariConfig1.getConnectionInitSql());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertTrue(hikariConfig1.isReadOnly());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(30L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      
      // Undeclared exception!
      try { 
        hikariConfig1.setDriverClassName(string3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // driverClassName specified class 't}6\"n_'p+' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertNotNull(hikariConfig0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      Object object0 = properties0.put(hikariConfig0, hikariConfig0);
      assertNull(object0);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      long long0 = 0L;
      hikariConfig0.setConnectionTimeout(long0);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(2147483647L, hikariConfig0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNotNull(hikariDataSource0);
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      
      Object object2 = properties0.put(object1, hikariDataSource0);
      assertNull(object2);
      assertEquals(2, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      
      int int0 = 180;
      hikariConfig0.setAcquireIncrement(int0);
      assertEquals(2, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(2147483647L, hikariConfig0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(180, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      long long1 = 100L;
      hikariConfig0.setConnectionTimeout(long1);
      assertFalse(long1 == long0);
      assertEquals(2, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(100L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(180, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      long long2 = (-1288L);
      hikariConfig0.setLeakDetectionThreshold(long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(2, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(100L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(180, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1288L), hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      String string0 = hikariConfig0.getConnectionCustomizerClassName();
      assertNull(string0);
      assertEquals(2, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(100L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(180, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1288L), hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      assertNull(iConnectionCustomizer0);
      assertEquals(2, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(100L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(180, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1288L), hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      int int1 = hikariConfig0.getMaximumPoolSize();
      assertEquals(60, int1);
      assertFalse(int1 == int0);
      assertEquals(2, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(100L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(180, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1288L), hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      boolean boolean0 = hikariConfig0.isRegisterMbeans();
      assertFalse(boolean0);
      assertEquals(2, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(100L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(180, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1288L), hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      Properties properties1 = hikariConfig0.getDataSourceProperties();
      assertNotNull(properties1);
      assertNotSame(properties0, properties1);
      assertNotSame(properties1, properties0);
      assertFalse(properties1.equals((Object)properties0));
      assertEquals(2, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(100L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(180, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1288L), hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      
      String string1 = hikariConfig0.getJdbcUrl();
      assertNull(string1);
      assertNotSame(properties0, properties1);
      assertFalse(properties0.equals((Object)properties1));
      assertEquals(2, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(100L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(180, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1288L), hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      hikariConfig0.setAcquireRetryDelay(int1);
      assertNotSame(properties0, properties1);
      assertFalse(int1 == int0);
      assertFalse(properties0.equals((Object)properties1));
      assertEquals(2, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(100L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(180, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1288L), hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      long long3 = hikariDataSource0.getConnectionTimeout();
      assertEquals(5000L, long3);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
  }
}
