/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 23:39:45 GMT 2021
 */

package com.zaxxer.hikari;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import com.zaxxer.hikari.HikariPool;
import com.zaxxer.hikari.IConnectionCustomizer;
import com.zaxxer.hikari.proxy.IHikariConnectionProxy;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.PrintWriter;
import java.sql.SQLFeatureNotSupportedException;
import java.util.Collection;
import java.util.Enumeration;
import java.util.Properties;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import javax.sql.DataSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HikariConfig_ESTest extends HikariConfig_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test000()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertNotNull(hikariDataSource0);
      
      boolean boolean0 = false;
      String string0 = "u6sSue9moDmKH";
      hikariDataSource0.dataSourceClassName = string0;
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals("u6sSue9moDmKH", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isReadOnly());
      
      hikariDataSource0.isInitializationFailFast = boolean0;
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals("u6sSue9moDmKH", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isReadOnly());
      
      long long0 = 2147483647L;
      hikariDataSource0.setLeakDetectionThreshold(long0);
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(2147483647L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals("u6sSue9moDmKH", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(2147483647L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      
      long long1 = hikariDataSource0.getAcquireRetryDelay();
      assertEquals(750L, long1);
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(2147483647L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals("u6sSue9moDmKH", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(2147483647L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(long1 == long0);
      
      Object object0 = hikariDataSource0.dataSourceProperties.put(hikariDataSource0, hikariDataSource0);
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(2147483647L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals("u6sSue9moDmKH", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(2147483647L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object object2 = hikariDataSource0.dataSourceProperties.remove(object1);
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(2147483647L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals("u6sSue9moDmKH", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(2147483647L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertNull(object2);
      
      HikariDataSource hikariDataSource1 = (HikariDataSource)hikariDataSource0.dataSourceProperties.put(hikariDataSource0, hikariDataSource0);
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(2147483647L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals("u6sSue9moDmKH", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertEquals(2147483647L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals("u6sSue9moDmKH", hikariDataSource1.getDataSourceClassName());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals(2147483647L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource1.transactionIsolation);
      assertEquals(2147483647L, hikariDataSource1.leakDetectionThreshold);
      assertEquals(750L, hikariDataSource1.acquireRetryDelay);
      assertEquals(60, hikariDataSource1.maxPoolSize);
      assertEquals(1800000L, hikariDataSource1.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariDataSource1.idleTimeout);
      assertFalse(hikariDataSource1.isRegisterMbeans);
      assertTrue(hikariDataSource1.isAutoCommit);
      assertEquals(1, hikariDataSource1.acquireIncrement);
      assertFalse(hikariDataSource1.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariDataSource1.isJdbc4connectionTest);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource1.isInitializationFailFast);
      assertEquals(10, hikariDataSource1.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource1.acquireRetries);
      assertFalse(hikariDataSource1.isReadOnly);
      assertEquals(5000L, hikariDataSource1.connectionTimeout);
      assertSame(hikariDataSource0, hikariDataSource1);
      assertSame(hikariDataSource1, hikariDataSource0);
      assertNotNull(hikariDataSource1);
      
      hikariDataSource0.setConnectionCustomizerClassName(string0);
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(2147483647L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals("u6sSue9moDmKH", hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals("u6sSue9moDmKH", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(2147483647L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertSame(hikariDataSource0, hikariDataSource1);
      
      HikariPool hikariPool0 = null;
      try {
        hikariPool0 = new HikariPool(hikariDataSource0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create datasource instance: u6sSue9moDmKH
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test001()  throws Throwable  {
      String string0 = "N K1TgOC)L>Wy";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("idleTimeout is less than 30000ms, did you specify the wrong time unit?  Using default instead.");
      String string1 = "K@<:*]Y";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string1);
      assertTrue(boolean0);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "idleTimeout is less than 30000ms, did you specify the wrong time unit?  Using default instead.";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.beans.IntrospectionException: Method not found: setJava.lang.String@0000000002
         //
         verifyException("com.zaxxer.hikari.util.PropertyBeanSetter", e);
      }
  }

  @Test(timeout = 11000)
  public void test002()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertNotNull(hikariDataSource0);
      
      long long0 = (-1496L);
      hikariDataSource0.acquireRetryDelay = long0;
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals((-1496L), hikariDataSource0.getAcquireRetryDelay());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      
      String string0 = "L1";
      String string1 = "connectionCustomizationClass specified class '";
      // Undeclared exception!
      try { 
        hikariDataSource0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // acquireRetryDelay cannot be negative.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test003()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertNotNull(hikariConfig0);
      
      int int0 = (-3123);
      hikariConfig0.setMaxLifetime(int0);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      
      hikariConfig0.connectionTimeout = (long) int0;
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      hikariConfig0.setDataSourceClassName(hikariConfig0.poolName);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      
      Properties properties1 = (Properties)properties0.clone();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertNotSame(properties0, properties1);
      assertNotSame(properties1, properties0);
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      
      hikariConfig0.setDataSourceProperties(properties0);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertNotSame(properties0, properties1);
      assertTrue(properties0.equals((Object)properties1));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = false;
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      
      int int1 = hikariConfig0.getAcquireRetries();
      assertEquals(3, int1);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(int1 == int0);
      
      String string0 = "javassist.bytecode.SignatureAttribute$ClassType";
      hikariConfig0.setConnectionInitSql(string0);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      
      String string1 = "%_KKX7hFs";
      hikariConfig0.setConnectionTestQuery(string1);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("%_KKX7hFs", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = hikariConfig0.getConnectionTestQuery();
      assertEquals("%_KKX7hFs", string2);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("%_KKX7hFs", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      long long0 = HikariConfig.CONNECTION_TIMEOUT;
      assertEquals(5000L, long0);
      
      int int2 = hikariConfig0.getAcquireRetries();
      assertEquals(3, int2);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("%_KKX7hFs", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      String string3 = "l/t";
      hikariConfig0.setDataSourceClassName(string3);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("%_KKX7hFs", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("l/t", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // maxLifetime cannot be negative.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test004()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertNotNull(hikariDataSource0);
      
      hikariDataSource0.idleTimeout = (long) hikariDataSource0.transactionIsolation;
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1L), hikariDataSource0.getIdleTimeout());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      
      boolean boolean0 = false;
      Object object0 = hikariDataSource0.dataSourceProperties.put(hikariDataSource0, hikariDataSource0);
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1L), hikariDataSource0.getIdleTimeout());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1L), hikariDataSource0.idleTimeout);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertNull(object0);
      
      long long0 = hikariDataSource0.getConnectionTimeout();
      assertEquals(5000L, long0);
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1L), hikariDataSource0.getIdleTimeout());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1L), hikariDataSource0.idleTimeout);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      
      String string0 = "javassist.bytecode.SignatureAttribute$ClassType";
      String string1 = "\\nt-[";
      hikariDataSource0.setDataSourceClassName(string1);
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1L), hikariDataSource0.getIdleTimeout());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("\\nt-[", hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1L), hikariDataSource0.idleTimeout);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        hikariDataSource0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // idleTimeout cannot be negative.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test005()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertNotNull(hikariDataSource0);
      
      hikariDataSource0.setMaxLifetime(hikariDataSource0.acquireIncrement);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1L, hikariDataSource0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      hikariDataSource0.minPoolSize = hikariDataSource0.acquireRetries;
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      
      hikariDataSource0.idleTimeout = hikariDataSource0.acquireRetryDelay;
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(750L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      
      hikariDataSource0.MAX_LIFETIME = (long) hikariDataSource0.acquireRetries;
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(750L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      hikariDataSource0.isJdbc4connectionTest = hikariDataSource0.isRegisterMbeans;
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(750L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      
      Object object0 = properties0.put(hikariDataSource0, hikariDataSource0);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(750L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1L, hikariDataSource0.maxLifetime);
      assertEquals(3L, HikariConfig.MAX_LIFETIME);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(750L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertNull(object0);
      
      String string0 = ":^ec6T8/n}R>]{[Ak";
      hikariDataSource0.setDataSourceClassName(string0);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(750L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1L, hikariDataSource0.maxLifetime);
      assertEquals(3L, HikariConfig.MAX_LIFETIME);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(750L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      Properties properties1 = (Properties)properties0.clone();
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertEquals(1, properties1.size());
      assertFalse(properties1.isEmpty());
      assertNotSame(properties0, properties1);
      assertNotSame(properties1, properties0);
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      
      hikariDataSource0.connectionTestQuery = string0;
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(750L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      
      hikariDataSource0.setDataSourceProperties(properties0);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(750L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1L, hikariDataSource0.maxLifetime);
      assertEquals(3L, HikariConfig.MAX_LIFETIME);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(750L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertNotSame(properties0, properties1);
      assertTrue(properties0.equals((Object)properties1));
      
      boolean boolean0 = false;
      String string1 = "Yk";
      long long0 = hikariDataSource0.getIdleTimeout();
      assertEquals(750L, long0);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(750L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1L, hikariDataSource0.maxLifetime);
      assertEquals(3L, HikariConfig.MAX_LIFETIME);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(750L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      int int0 = hikariDataSource0.getMinimumPoolSize();
      assertEquals(3, int0);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(750L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1L, hikariDataSource0.maxLifetime);
      assertEquals(3L, HikariConfig.MAX_LIFETIME);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(750L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      String string2 = "";
      hikariDataSource0.setCatalog(hikariDataSource0.dataSourceClassName);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(750L, hikariDataSource0.getIdleTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1L, hikariDataSource0.maxLifetime);
      assertEquals(3L, HikariConfig.MAX_LIFETIME);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(750L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      hikariDataSource0.validate();
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getDataSourceClassName());
      assertEquals(3L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(3L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3L, HikariConfig.MAX_LIFETIME);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      hikariDataSource0.setConnectionCustomizerClassName(hikariDataSource0.connectionCustomizerClassName);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getDataSourceClassName());
      assertEquals(3L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(3L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3L, HikariConfig.MAX_LIFETIME);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      String string3 = hikariDataSource0.getPoolName();
      assertEquals("HikariPool-0", string3);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getDataSourceClassName());
      assertEquals(3L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(3L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3L, HikariConfig.MAX_LIFETIME);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = hikariDataSource0.getPoolName();
      assertEquals("HikariPool-0", string4);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getDataSourceClassName());
      assertEquals(3L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(3L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3L, HikariConfig.MAX_LIFETIME);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertSame(string4, string3);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int1 = hikariDataSource0.getMinimumPoolSize();
      assertEquals(3, int1);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getDataSourceClassName());
      assertEquals(3L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(3L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3L, HikariConfig.MAX_LIFETIME);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 11000)
  public void test006()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertNotNull(hikariConfig0);
      
      hikariConfig0.setAutoCommit(hikariConfig0.isInitializationFailFast);
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      
      long long0 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(750L, long0);
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      
      hikariConfig0.setMinimumPoolSize(hikariConfig0.maxPoolSize);
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(60, hikariConfig0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      
      long long1 = 1024L;
      boolean boolean0 = false;
      hikariConfig0.setIsolateInternalQueries(boolean0);
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(60, hikariConfig0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      
      int int0 = hikariConfig0.getAcquireIncrement();
      assertEquals(1, int0);
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(60, hikariConfig0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      
      hikariConfig0.setMaximumPoolSize(int0);
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(60, hikariConfig0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      
      long long2 = HikariConfig.CONNECTION_TIMEOUT;
      assertEquals(5000L, long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      String string0 = hikariConfig0.getJdbcUrl();
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(60, hikariConfig0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertNull(string0);
  }

  @Test(timeout = 11000)
  public void test007()  throws Throwable  {
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertNotNull(hikariConfig0);
      
      hikariConfig0.setTransactionIsolation(hikariConfig0.poolName);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      hikariConfig0.setAcquireIncrement(hikariConfig0.acquireRetries);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      hikariConfig0.isReadOnly = hikariConfig0.isAutoCommit;
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      
      hikariConfig0.setUseInstrumentation(hikariConfig0.isAutoCommit);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      hikariConfig0.setDataSourceProperties(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      // Undeclared exception!
      try { 
        hikariConfig0.setDriverClassName(hikariConfig0.catalog);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // driverClassName specified class 'null' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test008()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertNotNull(hikariDataSource0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "";
      hikariDataSource0.setConnectionCustomizerClassName(string0);
      assertEquals("", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      hikariDataSource0.setJdbcUrl(hikariDataSource0.connectionCustomizerClassName);
      assertEquals("", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals("", hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      hikariDataSource0.setAcquireRetryDelay(hikariDataSource0.ACQUIRE_RETRY_DELAY);
      assertEquals("", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals("", hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      
      hikariDataSource0.addDataSourceProperty(hikariDataSource0.connectionCustomizerClassName, object1);
      assertEquals("", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals("", hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      
      String string1 = hikariDataSource0.getCatalog();
      assertEquals("", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals("", hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertNull(string1);
      
      hikariDataSource0.copyState(hikariDataSource0);
      assertEquals("", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals("", hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
  }

  @Test(timeout = 11000)
  public void test009()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertNotNull(hikariConfig0);
      
      String string0 = "maxPoolSize is less than minPoolSize, forcing them equal.";
      hikariConfig0.setJdbcUrl(string0);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      
      int int0 = 0;
      hikariConfig0.setAcquireRetries(int0);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      
      String string1 = "No connection wait timeout is set, this might cause an infinite wait.";
      hikariConfig0.setConnectionCustomizerClassName(string1);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("No connection wait timeout is set, this might cause an infinite wait.", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      hikariConfig0.setRegisterMbeans(hikariConfig0.isIsolateInternalQueries);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("No connection wait timeout is set, this might cause an infinite wait.", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      
      String string2 = "duplicate method: ";
      hikariConfig0.setConnectionTimeout(int0);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("No connection wait timeout is set, this might cause an infinite wait.", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(2147483647L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2147483647L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(0, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to get driver for JDBC URL maxPoolSize is less than minPoolSize, forcing them equal.
         //
         verifyException("com.zaxxer.hikari.util.DriverDataSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test010()  throws Throwable  {
      String string0 = "";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Property file  was not found.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test011()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertNotNull(hikariConfig0);
      
      hikariConfig0.setIdleTimeout(hikariConfig0.maxPoolSize);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(60L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      
      hikariConfig0.setReadOnly(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(60L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      
      long long0 = hikariConfig0.getMaxLifetime();
      assertEquals(1800000L, long0);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(60L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      
      String string0 = hikariConfig0.getPoolName();
      assertEquals("HikariPool-0", string0);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(60L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertNotNull(string0);
  }

  @Test(timeout = 11000)
  public void test012()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertNotNull(hikariDataSource0);
      
      long long0 = HikariConfig.MAX_LIFETIME;
      assertEquals(1800000L, long0);
      
      Properties properties0 = hikariDataSource0.getDataSourceProperties();
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertNotNull(properties0);
      
      String string0 = hikariDataSource0.getConnectionCustomizerClassName();
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        hikariDataSource0.setConnectionTimeout(hikariDataSource0.poolNumber);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // connectionTimeout cannot be less than 100ms
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test013()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertNotNull(hikariConfig0);
      
      boolean boolean0 = true;
      boolean boolean1 = hikariConfig0.isInitializationFailFast();
      assertFalse(boolean1);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(boolean1 == boolean0);
      
      hikariConfig0.leakDetectionThreshold = hikariConfig0.CONNECTION_TIMEOUT;
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      
      hikariConfig0.dataSourceClassName = hikariConfig0.poolName;
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariConfig0.getDataSourceClassName());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      
      int int0 = 4929;
      hikariConfig0.transactionIsolation = int0;
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(4929, hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariConfig0.getDataSourceClassName());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      
      hikariConfig0.setReadOnly(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(4929, hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariConfig0.getDataSourceClassName());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(4929, hikariConfig0.transactionIsolation);
      assertEquals(5000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      hikariConfig0.validate();
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(4929, hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(4929, hikariConfig0.transactionIsolation);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      String string0 = hikariConfig0.getPoolName();
      assertEquals("HikariPool-0", string0);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(4929, hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(4929, hikariConfig0.transactionIsolation);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertNotNull(string0);
      
      hikariConfig0.setRegisterMbeans(boolean1);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(4929, hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(4929, hikariConfig0.transactionIsolation);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = hikariConfig0.isRegisterMbeans();
      assertFalse(boolean2);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(4929, hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(4929, hikariConfig0.transactionIsolation);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Properties properties0 = hikariConfig0.getDataSourceProperties();
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(4929, hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(4929, hikariConfig0.transactionIsolation);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertNotNull(properties0);
      
      hikariConfig0.setDataSourceClassName(string0);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(4929, hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(4929, hikariConfig0.transactionIsolation);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      String string1 = "QF|~@ Xxax*C3";
      hikariConfig0.setPoolName(string1);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("QF|~@ Xxax*C3", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(4929, hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(4929, hikariConfig0.transactionIsolation);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "";
      hikariConfig0.setDataSourceClassName(string2);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("QF|~@ Xxax*C3", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(4929, hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(4929, hikariConfig0.transactionIsolation);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = hikariConfig0.getJdbcUrl();
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("QF|~@ Xxax*C3", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(4929, hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(4929, hikariConfig0.transactionIsolation);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertNull(string3);
      
      HikariConfig hikariConfig1 = null;
      // Undeclared exception!
      try { 
        hikariConfig0.copyState(hikariConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Exception copying HikariConfig state: null
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test014()  throws Throwable  {
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertNotNull(hikariConfig0);
      
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireRetries(hikariConfig0.transactionIsolation);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test015()  throws Throwable  {
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      String string0 = "";
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertNotNull(hikariConfig0);
      
      hikariConfig0.setInitializationFailFast(hikariConfig0.isAutoCommit);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      
      int int0 = (-3008);
      HikariConfig.ACQUIRE_RETRY_DELAY = hikariConfig0.IDLE_TIMEOUT;
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isInitializationFailFast());
      
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireIncrement(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be less than 1
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test016()  throws Throwable  {
      byte byte0 = (byte)3;
      byte byte1 = (byte)1;
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertNotNull(hikariConfig0);
      
      int int0 = (-860);
      // Undeclared exception!
      try { 
        hikariConfig0.setMaximumPoolSize(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test017()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertNotNull(hikariConfig0);
      
      long long0 = (-1520L);
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireRetryDelay(long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // acquireRetryDelay cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test018()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertNotNull(hikariDataSource0);
      
      hikariDataSource0.acquireRetryDelay = hikariDataSource0.leakDetectionThreshold;
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertFalse(hikariDataSource1.isReadOnly());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource1.transactionIsolation);
      assertTrue(hikariDataSource1.isAutoCommit);
      assertTrue(hikariDataSource1.isJdbc4connectionTest);
      assertEquals(750L, hikariDataSource1.acquireRetryDelay);
      assertFalse(hikariDataSource1.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource1.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource1.idleTimeout);
      assertEquals(3, hikariDataSource1.acquireRetries);
      assertEquals(1, hikariDataSource1.acquireIncrement);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource1.isInitializationFailFast);
      assertEquals(60, hikariDataSource1.maxPoolSize);
      assertEquals(1800000L, hikariDataSource1.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource1.isReadOnly);
      assertEquals(5000L, hikariDataSource1.connectionTimeout);
      assertEquals(10, hikariDataSource1.minPoolSize);
      assertFalse(hikariDataSource1.isIsolateInternalQueries);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotNull(hikariDataSource1);
      
      hikariDataSource1.setLeakDetectionThreshold(hikariDataSource1.acquireIncrement);
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(1L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertFalse(hikariDataSource1.isReadOnly());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource1.transactionIsolation);
      assertTrue(hikariDataSource1.isAutoCommit);
      assertTrue(hikariDataSource1.isJdbc4connectionTest);
      assertEquals(750L, hikariDataSource1.acquireRetryDelay);
      assertFalse(hikariDataSource1.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1L, hikariDataSource1.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource1.idleTimeout);
      assertEquals(3, hikariDataSource1.acquireRetries);
      assertEquals(1, hikariDataSource1.acquireIncrement);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource1.isInitializationFailFast);
      assertEquals(60, hikariDataSource1.maxPoolSize);
      assertEquals(1800000L, hikariDataSource1.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource1.isReadOnly);
      assertEquals(5000L, hikariDataSource1.connectionTimeout);
      assertEquals(10, hikariDataSource1.minPoolSize);
      assertFalse(hikariDataSource1.isIsolateInternalQueries);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      
      long long0 = 750L;
      hikariDataSource0.setDataSource(hikariDataSource1);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(1L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertFalse(hikariDataSource1.isReadOnly());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(0L, hikariDataSource0.acquireRetryDelay);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals((-1), hikariDataSource1.transactionIsolation);
      assertTrue(hikariDataSource1.isAutoCommit);
      assertTrue(hikariDataSource1.isJdbc4connectionTest);
      assertEquals(750L, hikariDataSource1.acquireRetryDelay);
      assertFalse(hikariDataSource1.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1L, hikariDataSource1.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource1.idleTimeout);
      assertEquals(3, hikariDataSource1.acquireRetries);
      assertEquals(1, hikariDataSource1.acquireIncrement);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource1.isInitializationFailFast);
      assertEquals(60, hikariDataSource1.maxPoolSize);
      assertEquals(1800000L, hikariDataSource1.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource1.isReadOnly);
      assertEquals(5000L, hikariDataSource1.connectionTimeout);
      assertEquals(10, hikariDataSource1.minPoolSize);
      assertFalse(hikariDataSource1.isIsolateInternalQueries);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      
      String string0 = "";
      String string1 = "l}\"w0EC!x3SMQ/<";
      hikariDataSource0.transactionIsolationName = string1;
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      
      long long1 = (-3847L);
      String string2 = "s\"@X+";
      hikariDataSource0.connectionInitSql = string2;
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("s\"@X+", hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      
      hikariDataSource0.setDataSourceProperties(properties0);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("s\"@X+", hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(0L, hikariDataSource0.acquireRetryDelay);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      
      int int0 = hikariDataSource0.getTransactionIsolation();
      assertEquals((-1), int0);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("s\"@X+", hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.acquireRetryDelay);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      
      hikariDataSource0.setReadOnly(hikariDataSource1.isReadOnly);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("s\"@X+", hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(1L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertFalse(hikariDataSource1.isReadOnly());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(0L, hikariDataSource0.acquireRetryDelay);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals((-1), hikariDataSource1.transactionIsolation);
      assertTrue(hikariDataSource1.isAutoCommit);
      assertTrue(hikariDataSource1.isJdbc4connectionTest);
      assertEquals(750L, hikariDataSource1.acquireRetryDelay);
      assertFalse(hikariDataSource1.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1L, hikariDataSource1.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource1.idleTimeout);
      assertEquals(3, hikariDataSource1.acquireRetries);
      assertEquals(1, hikariDataSource1.acquireIncrement);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource1.isInitializationFailFast);
      assertEquals(60, hikariDataSource1.maxPoolSize);
      assertEquals(1800000L, hikariDataSource1.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource1.isReadOnly);
      assertEquals(5000L, hikariDataSource1.connectionTimeout);
      assertEquals(10, hikariDataSource1.minPoolSize);
      assertFalse(hikariDataSource1.isIsolateInternalQueries);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      
      String string3 = hikariDataSource0.getConnectionInitSql();
      assertEquals("s\"@X+", string3);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("s\"@X+", hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.acquireRetryDelay);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotNull(string3);
      
      String string4 = "connectionCustomizationClass specified class '";
      int int1 = hikariDataSource1.getMaximumPoolSize();
      assertEquals(60, int1);
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(1L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertFalse(hikariDataSource1.isReadOnly());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource1.transactionIsolation);
      assertTrue(hikariDataSource1.isAutoCommit);
      assertTrue(hikariDataSource1.isJdbc4connectionTest);
      assertEquals(750L, hikariDataSource1.acquireRetryDelay);
      assertFalse(hikariDataSource1.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1L, hikariDataSource1.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource1.idleTimeout);
      assertEquals(3, hikariDataSource1.acquireRetries);
      assertEquals(1, hikariDataSource1.acquireIncrement);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource1.isInitializationFailFast);
      assertEquals(60, hikariDataSource1.maxPoolSize);
      assertEquals(1800000L, hikariDataSource1.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource1.isReadOnly);
      assertEquals(5000L, hikariDataSource1.connectionTimeout);
      assertEquals(10, hikariDataSource1.minPoolSize);
      assertFalse(hikariDataSource1.isIsolateInternalQueries);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(int1 == int0);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      
      // Undeclared exception!
      try { 
        hikariDataSource0.validate();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid transaction isolation value: l}\"w0EC!x3SMQ/<
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test019()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertNotNull(hikariDataSource0);
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariDataSource0.getConnectionCustomizer();
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertNull(iConnectionCustomizer0);
      
      int int0 = (-69);
      // Undeclared exception!
      try { 
        hikariDataSource0.setMinimumPoolSize(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test020()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertNotNull(hikariDataSource0);
      
      hikariDataSource0.minPoolSize = hikariDataSource0.acquireRetries;
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      
      hikariDataSource0.idleTimeout = (long) hikariDataSource0.poolNumber;
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      
      boolean boolean0 = false;
      hikariDataSource0.isJdbc4connectionTest = boolean0;
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      
      String string0 = ":^ec6T8/n}R>]{[Ak";
      hikariDataSource0.setDataSourceClassName(string0);
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      
      hikariDataSource0.setDataSourceProperties(hikariDataSource0.dataSourceProperties);
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      
      long long0 = HikariConfig.MAX_LIFETIME;
      assertEquals(1800000L, long0);
      
      String string1 = hikariDataSource0.getConnectionTestQuery();
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertNull(string1);
      
      long long1 = hikariDataSource0.getAcquireRetryDelay();
      assertEquals(750L, long1);
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(long1 == long0);
      
      hikariDataSource0.dataSource = (DataSource) hikariDataSource0;
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      
      int int0 = hikariDataSource0.getMinimumPoolSize();
      assertEquals(3, int0);
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      
      String string2 = "";
      // Undeclared exception!
      try { 
        hikariDataSource0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Either jdbc4ConnectionTest must be enabled or a connectionTestQuery must be specified.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test021()  throws Throwable  {
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertNotNull(hikariDataSource0);
      
      int int0 = hikariDataSource0.getTransactionIsolation();
      assertEquals((-1), int0);
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(10, hikariDataSource0.minPoolSize);
      
      // Undeclared exception!
      try { 
        hikariDataSource0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test022()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertNotNull(hikariConfig0);
      
      String string0 = "k{}|CT=";
      hikariConfig0.dataSourceClassName = string0;
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("k{}|CT=", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      
      EvoSuiteFile evoSuiteFile0 = null;
      long long0 = 0L;
      hikariConfig0.setMaxLifetime(long0);
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("k{}|CT=", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      
      hikariConfig0.setIdleTimeout(long0);
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("k{}|CT=", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      
      Properties properties0 = hikariConfig0.getDataSourceProperties();
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("k{}|CT=", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertNotNull(properties0);
      
      long long1 = 189L;
      int int0 = 3;
      hikariConfig0.maxPoolSize = int0;
      assertEquals(3, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("k{}|CT=", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      
      hikariConfig0.setConnectionTimeout(long1);
      assertEquals(3, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(189L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("k{}|CT=", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(189L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(long1 == long0);
      
      hikariConfig0.validate();
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(189L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("k{}|CT=", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(10, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(189L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(189L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("k{}|CT=", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(10, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(189L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertNull(iConnectionCustomizer0);
  }

  @Test(timeout = 11000)
  public void test023()  throws Throwable  {
      String string0 = "hISZ3h1NE9ZQ";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error loading properties file
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test024()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertNotNull(hikariDataSource0);
      
      DataSource dataSource0 = hikariDataSource0.getDataSource();
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertNull(dataSource0);
      
      hikariDataSource0.setDataSource(dataSource0);
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(10, hikariDataSource0.minPoolSize);
      
      boolean boolean0 = hikariDataSource0.isIsolateInternalQueries();
      assertFalse(boolean0);
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(10, hikariDataSource0.minPoolSize);
      
      long long0 = hikariDataSource0.getIdleTimeout();
      assertEquals(600000L, long0);
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(10, hikariDataSource0.minPoolSize);
  }

  @Test(timeout = 11000)
  public void test025()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertNotNull(hikariConfig0);
      
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test026()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertNotNull(hikariDataSource0);
      
      boolean boolean0 = true;
      hikariDataSource0.setIsolateInternalQueries(boolean0);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isIsolateInternalQueries());
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertTrue(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      boolean boolean1 = false;
      hikariDataSource0.setRegisterMbeans(boolean1);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isIsolateInternalQueries());
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertTrue(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 11000)
  public void test027()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertNotNull(hikariConfig0);
      
      String string0 = "?k%2p6XVeu~:<v@";
      hikariConfig0.dataSourceClassName = string0;
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("?k%2p6XVeu~:<v@", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      long long0 = hikariConfig0.getIdleTimeout();
      assertEquals(600000L, long0);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("?k%2p6XVeu~:<v@", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      boolean boolean0 = hikariConfig0.isReadOnly();
      assertFalse(boolean0);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("?k%2p6XVeu~:<v@", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      boolean boolean1 = false;
      hikariConfig0.setIsolateInternalQueries(boolean1);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("?k%2p6XVeu~:<v@", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 11000)
  public void test028()  throws Throwable  {
      String string0 = ":";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error loading properties file
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test029()  throws Throwable  {
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertNotNull(hikariConfig0);
      
      boolean boolean0 = hikariConfig0.isRegisterMbeans();
      assertFalse(boolean0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
  }

  @Test(timeout = 11000)
  public void test030()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertNotNull(hikariConfig0);
      
      int int0 = 44;
      hikariConfig0.transactionIsolation = int0;
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(44, hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      
      long long0 = 1853L;
      hikariConfig0.setConnectionTimeout(long0);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1853L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(44, hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(44, hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1853L, hikariConfig0.connectionTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
  }

  @Test(timeout = 11000)
  public void test031()  throws Throwable  {
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertNotNull(hikariConfig0);
      
      int int0 = hikariConfig0.getAcquireRetries();
      assertEquals(3, int0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      String string0 = "n9B?e+\"-4)";
      hikariConfig0.setDataSourceClassName(string0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("n9B?e+\"-4)", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      long long0 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(750L, long0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("n9B?e+\"-4)", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      long long1 = hikariConfig0.getIdleTimeout();
      assertEquals(600000L, long1);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("n9B?e+\"-4)", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(long1 == long0);
      
      // Undeclared exception!
      try { 
        hikariConfig0.setConnectionTimeout(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // connectionTimeout cannot be less than 100ms
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test032()  throws Throwable  {
      String string0 = "Invalid transaction isolation value: ";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error loading properties file
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test033()  throws Throwable  {
      String string0 = "";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Property file  was not found.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test034()  throws Throwable  {
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      Set<String> set0 = properties0.stringPropertyNames();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertNotNull(hikariConfig0);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      HikariConfig hikariConfig1 = (HikariConfig)properties0.merge(hikariConfig0, hikariConfig0, biFunction0);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getJdbcUrl());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertFalse(hikariConfig1.isReadOnly());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(1, hikariConfig1.acquireIncrement);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, hikariConfig1.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertFalse(hikariConfig1.isReadOnly);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig1.isIsolateInternalQueries);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertSame(hikariConfig0, hikariConfig1);
      assertSame(hikariConfig1, hikariConfig0);
      assertNotNull(hikariConfig1);
      
      boolean boolean0 = true;
      hikariConfig0.isIsolateInternalQueries = boolean0;
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      int int0 = (-535);
      // Undeclared exception!
      try { 
        hikariConfig0.setConnectionTimeout(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // connectionTimeout cannot be less than 100ms
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test035()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertNotNull(hikariConfig0);
      
      String string0 = hikariConfig0.getConnectionCustomizerClassName();
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertNull(string0);
  }

  @Test(timeout = 11000)
  public void test036()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isReadOnly);
      assertNotNull(hikariDataSource0);
      
      boolean boolean0 = hikariDataSource0.isJdbc4ConnectionTest();
      assertTrue(boolean0);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isReadOnly);
      
      String string0 = "+El]Tkh7(|He1";
      hikariDataSource0.setPoolName(string0);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals("+El]Tkh7(|He1", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isReadOnly);
      
      String string1 = "no such $cflow: ";
      hikariDataSource0.setConnectionTestQuery(string1);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals("+El]Tkh7(|He1", hikariDataSource0.getPoolName());
      assertEquals("no such $cflow: ", hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isReadOnly);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 11000)
  public void test037()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertNotNull(hikariConfig0);
      
      String string0 = "";
      hikariConfig0.setConnectionInitSql(string0);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      boolean boolean0 = false;
      hikariConfig0.setInitializationFailFast(boolean0);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      hikariConfig0.setJdbcUrl(string0);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("", hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
  }

  @Test(timeout = 11000)
  public void test038()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertNotNull(hikariDataSource0);
      
      boolean boolean0 = true;
      hikariDataSource0.setJdbc4ConnectionTest(boolean0);
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      
      // Undeclared exception!
      try { 
        hikariDataSource0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test039()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertNotNull(hikariConfig0);
      
      boolean boolean0 = true;
      hikariConfig0.isInitializationFailFast = boolean0;
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      String string0 = "minPoolSize cannot be negative";
      hikariConfig0.connectionTestQuery = string0;
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("minPoolSize cannot be negative", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      int int0 = hikariConfig0.getMinimumPoolSize();
      assertEquals(10, int0);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("minPoolSize cannot be negative", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      
      String string1 = "w+gaFjH}L_M1&z$9gEe";
      hikariConfig0.setDataSourceClassName(string1);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("w+gaFjH}L_M1&z$9gEe", hikariConfig0.getDataSourceClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("minPoolSize cannot be negative", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create datasource instance: w+gaFjH}L_M1&z$9gEe
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test040()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertNotNull(hikariDataSource0);
      
      String string0 = "connectionCustomizationClass specified class '";
      hikariDataSource0.setJdbcUrl(string0);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("connectionCustomizationClass specified class '", hikariDataSource0.getJdbcUrl());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      
      // Undeclared exception!
      try { 
        hikariDataSource0.setDriverClassName(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // driverClassName specified class 'connectionCustomizationClass specified class '' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test041()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertNotNull(hikariDataSource0);
      
      // Undeclared exception!
      try { 
        hikariDataSource0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test042()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertNotNull(hikariDataSource0);
      
      boolean boolean0 = false;
      hikariDataSource0.setInitializationFailFast(boolean0);
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      
      String string0 = "";
      hikariDataSource0.setConnectionTestQuery(string0);
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("", hikariDataSource0.getConnectionTestQuery());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      
      String string1 = hikariDataSource0.getConnectionCustomizerClassName();
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("", hikariDataSource0.getConnectionTestQuery());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertNull(string1);
      
      long long0 = hikariDataSource0.getMaxLifetime();
      assertEquals(1800000L, long0);
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("", hikariDataSource0.getConnectionTestQuery());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
  }

  @Test(timeout = 11000)
  public void test043()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertNotNull(hikariConfig0);
      
      int int0 = (-5944);
      hikariConfig0.acquireRetries = int0;
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-5944), hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      
      boolean boolean0 = false;
      hikariConfig0.setInitializationFailFast(boolean0);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-5944), hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-5944), hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      
      boolean boolean1 = false;
      hikariConfig0.setJdbc4ConnectionTest(boolean1);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-5944), hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-5944), hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      
      long long0 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(750L, long0);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-5944), hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-5944), hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      
      HikariConfig.ACQUIRE_RETRY_DELAY = (long) hikariConfig0.minPoolSize;
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-5944), hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      
      int int1 = hikariConfig0.getTransactionIsolation();
      assertEquals((-1), int1);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-5944), hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(10L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-5944), hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(int1 == int0);
      
      String string0 = "JZ0C0";
      hikariConfig0.setConnectionTestQuery(string0);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-5944), hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("JZ0C0", hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(10L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-5944), hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      
      String string1 = hikariConfig0.getConnectionCustomizerClassName();
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-5944), hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("JZ0C0", hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(10L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-5944), hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertNull(string1);
      
      boolean boolean2 = hikariConfig0.isRegisterMbeans();
      assertFalse(boolean2);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-5944), hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("JZ0C0", hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(10L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-5944), hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      Object object0 = properties0.put(hikariConfig0, string0);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-5944), hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("JZ0C0", hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertEquals(10L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-5944), hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        properties0.put(string1, hikariConfig0.transactionIsolationName);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 11000)
  public void test044()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertNotNull(hikariDataSource0);
      
      String string0 = " cL!4";
      hikariDataSource0.setJdbcUrl(string0);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(" cL!4", hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      
      long long0 = 0L;
      hikariDataSource0.setIdleTimeout(long0);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(" cL!4", hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(0L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      
      long long1 = hikariDataSource0.getIdleTimeout();
      assertEquals(0L, long1);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(" cL!4", hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(0L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(long1 == long0);
      
      boolean boolean0 = false;
      boolean boolean1 = true;
      String string1 = hikariDataSource0.getDataSourceClassName();
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(" cL!4", hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(0L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertNull(string1);
      
      String string2 = hikariDataSource0.getPoolName();
      assertEquals("HikariPool-0", string2);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(" cL!4", hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(0L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean2 = hikariDataSource0.isRegisterMbeans();
      assertFalse(boolean2);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(" cL!4", hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(0L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      try { 
        hikariDataSource0.getParentLogger();
        fail("Expecting exception: SQLFeatureNotSupportedException");
      
      } catch(SQLFeatureNotSupportedException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariDataSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test045()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertNotNull(hikariConfig0);
      
      boolean boolean0 = true;
      hikariConfig0.setAutoCommit(boolean0);
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
  }

  @Test(timeout = 11000)
  public void test046()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertNotNull(hikariConfig0);
      
      int int0 = 1225;
      hikariConfig0.setMaximumPoolSize(int0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1225, hikariConfig0.getMaximumPoolSize());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(1225, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      
      hikariConfig0.setIdleTimeout(int0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1225, hikariConfig0.getMaximumPoolSize());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1225L, hikariConfig0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(1225, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1225L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      
      boolean boolean0 = false;
      boolean boolean1 = true;
      hikariConfig0.isReadOnly = boolean1;
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1225, hikariConfig0.getMaximumPoolSize());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1225L, hikariConfig0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isReadOnly());
      
      hikariConfig0.setUseInstrumentation(boolean0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1225, hikariConfig0.getMaximumPoolSize());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1225L, hikariConfig0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals(1225, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals(1225L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(boolean0 == boolean1);
      
      boolean boolean2 = hikariConfig0.isReadOnly();
      assertTrue(boolean2);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1225, hikariConfig0.getMaximumPoolSize());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1225L, hikariConfig0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals(1225, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals(1225L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int1 = hikariConfig0.getAcquireRetries();
      assertEquals(3, int1);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1225, hikariConfig0.getMaximumPoolSize());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1225L, hikariConfig0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals(1225, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals(1225L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 11000)
  public void test047()  throws Throwable  {
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isReadOnly);
      assertNotNull(hikariConfig0);
      
      boolean boolean0 = hikariConfig0.isIsolateInternalQueries();
      assertFalse(boolean0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isReadOnly);
      
      long long0 = 460L;
      hikariConfig0.setMaxLifetime(long0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(460L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(460L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isReadOnly);
      
      String string0 = null;
      int int0 = (-781);
      hikariConfig0.acquireRetries = int0;
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals((-781), hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(460L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      
      hikariConfig0.setTransactionIsolation(string0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals((-781), hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(460L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals((-781), hikariConfig0.acquireRetries);
      assertEquals(460L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      
      hikariConfig0.setDataSourceProperties(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals((-781), hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(460L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals((-781), hikariConfig0.acquireRetries);
      assertEquals(460L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      
      int int1 = 0;
      hikariConfig0.setMaximumPoolSize(int1);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals((-781), hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(460L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals((-781), hikariConfig0.acquireRetries);
      assertEquals(460L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(0, hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 11000)
  public void test048()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertNotNull(hikariDataSource0);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      hikariDataSource0.dataSourceProperties = properties0;
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(hikariDataSource0.dataSourceProperties.isEmpty());
      assertEquals(0, hikariDataSource0.dataSourceProperties.size());
      
      String string0 = "Dfnn\"";
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = properties0.put(hikariDataSource0.dataSourceProperties, object0);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertFalse(hikariDataSource0.dataSourceProperties.isEmpty());
      assertEquals(1, hikariDataSource0.dataSourceProperties.size());
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertSame(hikariDataSource0.dataSourceProperties, properties0);
      assertNull(object1);
      
      hikariDataSource0.transactionIsolationName = string0;
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      
      String string1 = hikariDataSource0.getPoolName();
      assertEquals("HikariPool-0", string1);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(properties0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.beans.IntrospectionException: Method not found: setJava.util.Properties@0000000003
         //
         verifyException("com.zaxxer.hikari.util.PropertyBeanSetter", e);
      }
  }

  @Test(timeout = 11000)
  public void test049()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertNotNull(hikariConfig0);
      
      boolean boolean0 = hikariConfig0.isInitializationFailFast();
      assertFalse(boolean0);
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      boolean boolean1 = false;
      boolean boolean2 = true;
      hikariConfig0.setIsolateInternalQueries(boolean2);
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      hikariConfig0.setAutoCommit(boolean1);
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertNull(iConnectionCustomizer0);
      
      String string0 = "tbV5";
      String string1 = "yj";
      hikariConfig0.addDataSourceProperty(string0, string1);
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 11000)
  public void test050()  throws Throwable  {
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertNotNull(hikariConfig0);
      
      String string0 = "u9S";
      hikariConfig0.setTransactionIsolation(string0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      
      int int0 = 1448;
      hikariConfig0.setAcquireIncrement(int0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1448, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1448, hikariConfig0.acquireIncrement);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      
      hikariConfig0.catalog = string0;
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1448, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("u9S", hikariConfig0.getCatalog());
      
      boolean boolean0 = true;
      hikariConfig0.isReadOnly = boolean0;
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1448, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("u9S", hikariConfig0.getCatalog());
      
      boolean boolean1 = true;
      hikariConfig0.setUseInstrumentation(boolean1);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1448, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("u9S", hikariConfig0.getCatalog());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1448, hikariConfig0.acquireIncrement);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      
      hikariConfig0.setDataSourceProperties(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1448, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("u9S", hikariConfig0.getCatalog());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1448, hikariConfig0.acquireIncrement);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      
      String string1 = hikariConfig0.getConnectionTestQuery();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1448, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("u9S", hikariConfig0.getCatalog());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1448, hikariConfig0.acquireIncrement);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        hikariConfig0.setDriverClassName(string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // driverClassName specified class 'null' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test051()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertNotNull(hikariConfig0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireIncrement(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be less than 1
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test052()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertNotNull(hikariDataSource0);
      
      long long0 = 2954L;
      HikariConfig.IDLE_TIMEOUT = long0;
      long long1 = hikariDataSource0.getConnectionTimeout();
      assertEquals(5000L, long1);
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(2954L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertFalse(long1 == long0);
  }

  @Test(timeout = 11000)
  public void test053()  throws Throwable  {
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertNotNull(hikariConfig0);
      
      long long0 = 30L;
      hikariConfig0.maxLifetime = long0;
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(30L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      String string0 = hikariConfig0.getJdbcUrl();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(30L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(30L, hikariConfig0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertNull(string0);
      
      long long1 = hikariConfig0.getIdleTimeout();
      assertEquals(600000L, long1);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(30L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(30L, hikariConfig0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(long1 == long0);
      
      String string1 = "";
      hikariConfig0.setConnectionTestQuery(string1);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(30L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(30L, hikariConfig0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
  }

  @Test(timeout = 11000)
  public void test054()  throws Throwable  {
      Properties properties0 = null;
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertNotNull(hikariConfig0);
      
      boolean boolean0 = false;
      hikariConfig0.setAutoCommit(boolean0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      boolean boolean1 = true;
      hikariConfig0.setRegisterMbeans(boolean1);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(boolean1 == boolean0);
      
      DataSource dataSource0 = hikariConfig0.dataSource;
      assertNull(dataSource0);
      
      hikariConfig0.setDataSource(dataSource0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertFalse(boolean0 == boolean1);
      
      DataSource dataSource1 = hikariConfig0.getDataSource();
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertNull(dataSource1);
      
      boolean boolean2 = hikariConfig0.isInitializationFailFast();
      assertFalse(boolean2);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string0 = null;
      int int0 = 1036;
      hikariConfig0.minPoolSize = int0;
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(1036, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      // Undeclared exception!
      try { 
        hikariConfig0.setDriverClassName(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // driverClassName specified class 'null' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test055()  throws Throwable  {
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertNotNull(hikariConfig0);
      
      int int0 = (-1);
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireRetries(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test056()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertNotNull(hikariDataSource0);
      
      int int0 = 0;
      hikariDataSource0.setAcquireRetries(int0);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(0, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(10, hikariDataSource0.minPoolSize);
      
      int int1 = hikariDataSource0.getMinimumPoolSize();
      assertEquals(10, int1);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(0, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(int1 == int0);
      
      String string0 = "x>[MJ[9%09\"`cD.";
      hikariDataSource0.setCatalog(string0);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("x>[MJ[9%09\"`cD.", hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(0, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(10, hikariDataSource0.minPoolSize);
  }

  @Test(timeout = 11000)
  public void test057()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertNotNull(hikariDataSource0);
      
      String string0 = "q\"q6]= P1DoR~9id]2";
      hikariDataSource0.setConnectionCustomizerClassName(string0);
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("q\"q6]= P1DoR~9id]2", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      
      boolean boolean0 = true;
      hikariDataSource0.isInitializationFailFast = boolean0;
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("q\"q6]= P1DoR~9id]2", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      
      boolean boolean1 = hikariDataSource0.isReadOnly();
      assertFalse(boolean1);
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("q\"q6]= P1DoR~9id]2", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertTrue(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertFalse(boolean1 == boolean0);
      
      String string1 = "' could not be loaded";
      hikariDataSource0.transactionIsolationName = string1;
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("q\"q6]= P1DoR~9id]2", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      
      hikariDataSource0.setAutoCommit(boolean1);
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("q\"q6]= P1DoR~9id]2", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertTrue(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertFalse(boolean1 == boolean0);
      
      long long0 = 120000L;
      hikariDataSource0.setIdleTimeout(long0);
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("q\"q6]= P1DoR~9id]2", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(120000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertTrue(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      
      hikariDataSource0.setAcquireRetryDelay(long0);
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(120000L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("q\"q6]= P1DoR~9id]2", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(120000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertTrue(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(120000L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      
      String string2 = hikariDataSource0.getDataSourceClassName();
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(120000L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("q\"q6]= P1DoR~9id]2", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(120000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertTrue(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(120000L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertNull(string2);
      
      long long1 = hikariDataSource0.getAcquireRetryDelay();
      assertEquals(120000L, long1);
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(120000L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("q\"q6]= P1DoR~9id]2", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(120000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertTrue(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(120000L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(long1 == long0);
      
      String string3 = "javassist.bytecode.stackmap.TypeData$BasicType";
      hikariDataSource0.setConnectionInitSql(string3);
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(120000L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("q\"q6]= P1DoR~9id]2", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("javassist.bytecode.stackmap.TypeData$BasicType", hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(120000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertTrue(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(120000L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        hikariDataSource0.setDriverClassName(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // driverClassName specified class 'q\"q6]= P1DoR~9id]2' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test058()  throws Throwable  {
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertNotNull(hikariConfig0);
      
      hikariConfig0.setDataSourceProperties(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      
      int int0 = hikariConfig0.getMaximumPoolSize();
      assertEquals(60, int0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
  }

  @Test(timeout = 11000)
  public void test059()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertNotNull(hikariConfig0);
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.connectionCustomizer;
      assertNull(iConnectionCustomizer0);
      
      hikariConfig0.connectionCustomizer = iConnectionCustomizer0;
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      boolean boolean0 = hikariConfig0.isRegisterMbeans();
      assertFalse(boolean0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      
      String string0 = "Invalid transaction isolation value: ";
      int int0 = 0;
      hikariConfig0.transactionIsolation = int0;
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0, hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      long long0 = 0L;
      hikariConfig0.setAcquireRetryDelay(long0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      
      hikariConfig0.setTransactionIsolation(string0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      
      hikariConfig0.setAutoCommit(boolean0);
      assertFalse(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      
      hikariConfig0.connectionTestQuery = string0;
      assertFalse(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("Invalid transaction isolation value: ", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      int int1 = hikariConfig0.getMaximumPoolSize();
      assertEquals(60, int1);
      assertFalse(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("Invalid transaction isolation value: ", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(int1 == int0);
      
      boolean boolean1 = true;
      hikariConfig0.setRegisterMbeans(boolean1);
      assertFalse(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("Invalid transaction isolation value: ", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(boolean1 == boolean0);
      
      hikariConfig0.setRegisterMbeans(boolean0);
      assertFalse(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("Invalid transaction isolation value: ", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(boolean0 == boolean1);
      
      long long1 = hikariConfig0.getIdleTimeout();
      assertEquals(600000L, long1);
      assertFalse(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("Invalid transaction isolation value: ", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(long1 == long0);
      
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test060()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertNotNull(hikariDataSource0);
      
      long long0 = hikariDataSource0.getLeakDetectionThreshold();
      assertEquals(0L, long0);
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      
      HikariConfig hikariConfig0 = null;
      boolean boolean0 = true;
      hikariDataSource0.setIsolateInternalQueries(boolean0);
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      
      String string0 = "";
      hikariDataSource0.setTransactionIsolation(string0);
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      
      // Undeclared exception!
      try { 
        hikariDataSource0.copyState(hikariConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Exception copying HikariConfig state: null
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test061()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertNotNull(hikariConfig0);
      
      int int0 = 777;
      hikariConfig0.acquireIncrement = int0;
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(777, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      
      String string0 = "";
      hikariConfig0.setTransactionIsolation(string0);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(777, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(777, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      boolean boolean0 = true;
      String string1 = "5wT0@Tr9zgxR:IsQ";
      hikariConfig0.dataSourceClassName = string1;
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("5wT0@Tr9zgxR:IsQ", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(777, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      
      boolean boolean1 = false;
      hikariConfig0.isInitializationFailFast = boolean1;
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("5wT0@Tr9zgxR:IsQ", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(777, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      
      hikariConfig0.isIsolateInternalQueries = boolean0;
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("5wT0@Tr9zgxR:IsQ", hikariConfig0.getDataSourceClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(777, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      
      HikariConfig hikariConfig1 = null;
      // Undeclared exception!
      try { 
        hikariConfig0.copyState(hikariConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Exception copying HikariConfig state: null
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test062()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertNotNull(hikariDataSource0);
      
      long long0 = hikariDataSource0.getMaxLifetime();
      assertEquals(1800000L, long0);
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      
      int int0 = 4431;
      hikariDataSource0.setMinimumPoolSize(int0);
      assertEquals(4431, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(4431, hikariDataSource0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
  }

  @Test(timeout = 11000)
  public void test063()  throws Throwable  {
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertNotNull(hikariConfig0);
      
      String string0 = null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = properties0.put(object0, hikariConfig0);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertNull(object1);
      
      hikariConfig0.setJdbcUrl(string0);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      
      int int0 = hikariConfig0.getAcquireIncrement();
      assertEquals(1, int0);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      
      // Undeclared exception!
      try { 
        properties0.put(string0, hikariConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test064()  throws Throwable  {
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertNotNull(hikariConfig0);
      
      String string0 = "";
      hikariConfig0.dataSourceClassName = string0;
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      
      int int0 = 1271;
      hikariConfig0.setAcquireRetries(int0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1271, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1271, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      hikariConfig0.validate();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1271, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1271, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
  }

  @Test(timeout = 11000)
  public void test065()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertNotNull(hikariDataSource0);
      
      String string0 = "Property file ";
      String string1 = null;
      hikariDataSource0.dataSourceClassName = string1;
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      
      String string2 = "";
      hikariDataSource0.dataSourceClassName = string2;
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      
      hikariDataSource0.setConnectionCustomizerClassName(string0);
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("Property file ", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertNotSame(string0, string2);
      assertFalse(string0.equals((Object)string2));
      
      String string3 = "-]w}yo~mF 5i9d";
      String string4 = "javassist.compiler.JvstCodeGen";
      hikariDataSource0.connectionInitSql = string4;
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("Property file ", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("javassist.compiler.JvstCodeGen", hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      
      long long0 = 0L;
      hikariDataSource0.setConnectionTimeout(long0);
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("Property file ", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("javassist.compiler.JvstCodeGen", hikariDataSource0.getConnectionInitSql());
      assertEquals(2147483647L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(2147483647L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      
      boolean boolean0 = true;
      hikariDataSource0.isAutoCommit = boolean0;
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("Property file ", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("javassist.compiler.JvstCodeGen", hikariDataSource0.getConnectionInitSql());
      assertEquals(2147483647L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      
      hikariDataSource0.setConnectionInitSql(string3);
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("Property file ", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals("-]w}yo~mF 5i9d", hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(2147483647L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(2147483647L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      
      boolean boolean1 = hikariDataSource0.isRegisterMbeans();
      assertFalse(boolean1);
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("Property file ", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals("-]w}yo~mF 5i9d", hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(2147483647L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(2147483647L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = hikariDataSource0.isIsolateInternalQueries();
      assertFalse(boolean2);
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("Property file ", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals("-]w}yo~mF 5i9d", hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(2147483647L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(2147483647L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string5 = "rfcmlkub9=";
      hikariDataSource0.setTransactionIsolation(string5);
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("Property file ", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals("-]w}yo~mF 5i9d", hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(2147483647L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(2147483647L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = hikariDataSource0.getConnectionTestQuery();
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("Property file ", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals("-]w}yo~mF 5i9d", hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(2147483647L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(2147483647L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertNull(string6);
  }

  @Test(timeout = 11000)
  public void test066()  throws Throwable  {
      Properties properties0 = null;
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertNotNull(hikariConfig0);
      
      boolean boolean0 = true;
      hikariConfig0.setReadOnly(boolean0);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      
      String string0 = hikariConfig0.getPoolName();
      assertEquals("HikariPool-0", string0);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertNotNull(string0);
      
      boolean boolean1 = true;
      hikariConfig0.isReadOnly = boolean1;
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      hikariConfig0.dataSourceClassName = string0;
      assertEquals("HikariPool-0", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      long long0 = 0L;
      String string1 = "0";
      hikariConfig0.setDataSourceClassName(string1);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("0", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean2 = true;
      hikariConfig0.isJdbc4connectionTest = boolean2;
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("0", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      hikariConfig0.jdbcUrl = string0;
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("0", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      hikariConfig0.setLeakDetectionThreshold(long0);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("0", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      
      boolean boolean3 = hikariConfig0.isJdbc4ConnectionTest();
      assertTrue(boolean3);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("0", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      int int0 = 1235;
      hikariConfig0.setMaximumPoolSize(int0);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("0", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1235, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1235, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      
      int int1 = 360;
      hikariConfig0.setAcquireRetries(int1);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("0", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1235, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(360, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1235, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(360, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(int1 == int0);
      
      hikariConfig0.setDataSourceClassName(string0);
      assertEquals("HikariPool-0", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1235, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(360, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1235, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(360, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      
      boolean boolean4 = hikariConfig0.isRegisterMbeans();
      assertFalse(boolean4);
      assertEquals("HikariPool-0", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1235, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(360, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1235, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(360, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      
      String string2 = hikariConfig0.getPoolName();
      assertEquals("HikariPool-0", string2);
      assertEquals("HikariPool-0", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1235, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(360, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1235, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(360, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = hikariConfig0.getDataSourceClassName();
      assertEquals("HikariPool-0", string3);
      assertEquals("HikariPool-0", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1235, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(360, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1235, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(360, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int2 = hikariConfig0.getAcquireRetries();
      assertEquals(360, int2);
      assertEquals("HikariPool-0", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1235, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(360, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1235, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(360, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      long long1 = 0L;
      hikariConfig0.catalog = string2;
      assertEquals("HikariPool-0", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1235, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(360, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("HikariPool-0", hikariConfig0.getCatalog());
      
      hikariConfig0.setMaxLifetime(long1);
      assertEquals("HikariPool-0", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1235, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(360, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("HikariPool-0", hikariConfig0.getCatalog());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1235, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(360, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      
      String string4 = hikariConfig0.getConnectionTestQuery();
      assertEquals("HikariPool-0", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1235, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(360, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("HikariPool-0", hikariConfig0.getCatalog());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1235, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(360, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertNull(string4);
      
      boolean boolean5 = hikariConfig0.isRegisterMbeans();
      assertFalse(boolean5);
      assertEquals("HikariPool-0", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1235, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(360, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("HikariPool-0", hikariConfig0.getCatalog());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1235, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(360, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      
      boolean boolean6 = hikariConfig0.isJdbc4ConnectionTest();
      assertTrue(boolean6);
      assertEquals("HikariPool-0", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1235, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(360, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("HikariPool-0", hikariConfig0.getCatalog());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1235, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(360, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean5);
  }

  @Test(timeout = 11000)
  public void test067()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertNotNull(hikariConfig0);
      
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertNotNull(hikariDataSource0);
      
      hikariConfig0.setDataSource(hikariDataSource0);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      
      hikariConfig0.acquireIncrement = hikariDataSource0.transactionIsolation;
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      
      HikariDataSource hikariDataSource1 = (HikariDataSource)hikariConfig0.getDataSource();
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertFalse(hikariDataSource1.isReadOnly());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.acquireIncrement);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariDataSource1.isReadOnly);
      assertEquals(1800000L, hikariDataSource1.maxLifetime);
      assertEquals(5000L, hikariDataSource1.connectionTimeout);
      assertEquals(600000L, hikariDataSource1.idleTimeout);
      assertTrue(hikariDataSource1.isAutoCommit);
      assertEquals((-1), hikariDataSource1.transactionIsolation);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(750L, hikariDataSource1.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource1.leakDetectionThreshold);
      assertTrue(hikariDataSource1.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource1.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariDataSource1.maxPoolSize);
      assertFalse(hikariDataSource1.isRegisterMbeans);
      assertFalse(hikariDataSource1.isInitializationFailFast);
      assertEquals(1, hikariDataSource1.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource1.isIsolateInternalQueries);
      assertEquals(10, hikariDataSource1.minPoolSize);
      assertSame(hikariDataSource1, hikariDataSource0);
      assertNotNull(hikariDataSource1);
      
      String string0 = hikariConfig0.getConnectionCustomizerClassName();
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.acquireIncrement);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertNull(string0);
  }

  @Test(timeout = 11000)
  public void test068()  throws Throwable  {
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "&\"'G";
      boolean boolean0 = properties0.replace(object0, object0, (Object) string0);
      assertFalse(boolean0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertNotNull(hikariConfig0);
      
      String string1 = "VLg77Uy\\@LuD;m<";
      hikariConfig0.setConnectionInitSql(string1);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("VLg77Uy\\@LuD;m<", hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = hikariConfig0.isReadOnly();
      assertFalse(boolean1);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("VLg77Uy\\@LuD;m<", hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(boolean1 == boolean0);
      
      String string2 = "\\Z(P!";
      hikariConfig0.setJdbcUrl(string2);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("VLg77Uy\\@LuD;m<", hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("\\Z(P!", hikariConfig0.getJdbcUrl());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = hikariConfig0.getTransactionIsolation();
      assertEquals((-1), int0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("VLg77Uy\\@LuD;m<", hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("\\Z(P!", hikariConfig0.getJdbcUrl());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      
      String string3 = hikariConfig0.getCatalog();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("VLg77Uy\\@LuD;m<", hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("\\Z(P!", hikariConfig0.getJdbcUrl());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertNull(string3);
  }

  @Test(timeout = 11000)
  public void test069()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertNotNull(hikariConfig0);
      
      String string0 = "";
      long long0 = (-1713L);
      hikariConfig0.leakDetectionThreshold = long0;
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1713L), hikariConfig0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      
      hikariConfig0.jdbcUrl = string0;
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1713L), hikariConfig0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getJdbcUrl());
      
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to get driver for JDBC URL 
         //
         verifyException("com.zaxxer.hikari.util.DriverDataSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test070()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertNotNull(hikariConfig0);
      
      int int0 = hikariConfig0.getAcquireRetries();
      assertEquals(3, int0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      
      String string0 = null;
      boolean boolean0 = false;
      hikariConfig0.setAutoCommit(boolean0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      
      hikariConfig0.setMaximumPoolSize(int0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.maxPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      
      hikariConfig0.setCatalog(string0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.maxPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      
      String string1 = "pi9uc3==";
      hikariConfig0.leakDetectionThreshold = (long) int0;
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      hikariConfig0.connectionTestQuery = string1;
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("pi9uc3==", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      hikariConfig0.setMaximumPoolSize(int0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("pi9uc3==", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.maxPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      
      int int1 = hikariConfig0.getTransactionIsolation();
      assertEquals((-1), int1);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("pi9uc3==", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.maxPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(int1 == int0);
      
      hikariConfig0.dataSourceClassName = string1;
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("pi9uc3==", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("pi9uc3==", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      long long0 = (-2141L);
      HikariConfig.IDLE_TIMEOUT = long0;
      long long1 = 10000L;
      hikariConfig0.setLeakDetectionThreshold(long1);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("pi9uc3==", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("pi9uc3==", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.maxPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(10000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals((-2141L), HikariConfig.IDLE_TIMEOUT);
      assertFalse(long1 == long0);
      
      boolean boolean1 = false;
      hikariConfig0.setRegisterMbeans(boolean1);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("pi9uc3==", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("pi9uc3==", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.maxPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(10000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals((-2141L), HikariConfig.IDLE_TIMEOUT);
      
      Properties properties0 = null;
      // Undeclared exception!
      try { 
        hikariConfig0.setDataSourceProperties(properties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 11000)
  public void test071()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertNotNull(hikariConfig0);
      
      int int0 = (-2709);
      int int1 = 3179;
      hikariConfig0.acquireIncrement = int1;
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3179, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      String string0 = "6jz)qX`0<\"Lk";
      hikariConfig0.setTransactionIsolation(string0);
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3179, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(3179, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      boolean boolean0 = false;
      hikariConfig0.isJdbc4connectionTest = boolean0;
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3179, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireRetries(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test072()  throws Throwable  {
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      Properties properties1 = new Properties(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties1);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(properties0.equals((Object)properties1));
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(hikariConfig0);
      
      Enumeration<Object> enumeration0 = properties1.elements();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertNotSame(properties0, properties1);
      assertNotSame(properties1, properties0);
      assertTrue(properties0.equals((Object)properties1));
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(enumeration0);
      
      String string0 = hikariConfig0.getConnectionCustomizerClassName();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertNotSame(properties0, properties1);
      assertNotSame(properties1, properties0);
      assertTrue(properties0.equals((Object)properties1));
      assertTrue(properties1.equals((Object)properties0));
      assertNull(string0);
      
      DataSource dataSource0 = hikariConfig0.getDataSource();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertNotSame(properties0, properties1);
      assertNotSame(properties1, properties0);
      assertTrue(properties0.equals((Object)properties1));
      assertTrue(properties1.equals((Object)properties0));
      assertNull(dataSource0);
      
      HikariConfig hikariConfig1 = new HikariConfig();
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getJdbcUrl());
      assertNull(hikariConfig1.getCatalog());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertFalse(hikariConfig1.isReadOnly());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig1.isIsolateInternalQueries);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(1, hikariConfig1.acquireIncrement);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertFalse(hikariConfig1.isReadOnly);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig1.acquireRetryDelay);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertNotNull(hikariConfig1);
      
      String string1 = "g fsu:\"z";
      hikariConfig1.setConnectionTestQuery(string1);
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals("g fsu:\"z", hikariConfig1.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getJdbcUrl());
      assertNull(hikariConfig1.getCatalog());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertFalse(hikariConfig1.isReadOnly());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig1.isIsolateInternalQueries);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(1, hikariConfig1.acquireIncrement);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertFalse(hikariConfig1.isReadOnly);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig1.acquireRetryDelay);
      assertEquals(2, HikariConfig.poolNumber);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      hikariConfig0.copyState(hikariConfig1);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getJdbcUrl());
      assertNull(hikariConfig1.getCatalog());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertFalse(hikariConfig1.isReadOnly());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig1.isIsolateInternalQueries);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(1, hikariConfig1.acquireIncrement);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertFalse(hikariConfig1.isReadOnly);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig1.acquireRetryDelay);
      assertEquals(2, HikariConfig.poolNumber);
      assertNotSame(properties0, properties1);
      assertNotSame(properties1, properties0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertTrue(properties0.equals((Object)properties1));
      assertTrue(properties1.equals((Object)properties0));
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      hikariConfig0.connectionCustomizerClassName = string0;
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      
      boolean boolean0 = true;
      hikariConfig0.setInitializationFailFast(boolean0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertNotSame(properties0, properties1);
      assertNotSame(properties1, properties0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertTrue(properties0.equals((Object)properties1));
      assertTrue(properties1.equals((Object)properties0));
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      
      boolean boolean1 = hikariConfig0.isRegisterMbeans();
      assertFalse(boolean1);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertNotSame(properties0, properties1);
      assertNotSame(properties1, properties0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertTrue(properties0.equals((Object)properties1));
      assertTrue(properties1.equals((Object)properties0));
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 11000)
  public void test073()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertNotNull(hikariDataSource0);
      
      String string0 = "On";
      int int0 = 0;
      hikariDataSource0.setMinimumPoolSize(int0);
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(0, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      
      String string1 = "";
      hikariDataSource0.catalog = string1;
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("", hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      
      hikariDataSource0.setConnectionCustomizerClassName(string0);
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("On", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("", hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(0, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      
      boolean boolean0 = hikariDataSource0.isAutoCommit();
      assertTrue(boolean0);
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("On", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("", hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(0, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      
      // Undeclared exception!
      try { 
        hikariDataSource0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test074()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertNotNull(hikariConfig0);
      
      int int0 = 0;
      hikariConfig0.maxPoolSize = int0;
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      String string0 = hikariConfig0.getConnectionInitSql();
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0, hikariConfig0.maxPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertNull(string0);
  }

  @Test(timeout = 11000)
  public void test075()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertNotNull(hikariDataSource0);
      
      int int0 = (-2010);
      // Undeclared exception!
      try { 
        hikariDataSource0.setMinimumPoolSize(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test076()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertNotNull(hikariConfig0);
      
      boolean boolean0 = true;
      hikariConfig0.setIsolateInternalQueries(boolean0);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isIsolateInternalQueries);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      
      String string0 = "";
      int int0 = (-1728);
      hikariConfig0.minPoolSize = int0;
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1728), hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      boolean boolean1 = true;
      hikariConfig0.isIsolateInternalQueries = boolean1;
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1728), hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      hikariConfig0.setTransactionIsolation(string0);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1728), hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1728), hikariConfig0.minPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isIsolateInternalQueries);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      
      String string1 = " extends ";
      long long0 = (-1L);
      hikariConfig0.idleTimeout = long0;
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1L), hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1728), hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      hikariConfig0.transactionIsolationName = string1;
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1L), hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1728), hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      long long1 = 0L;
      hikariConfig0.setLeakDetectionThreshold(long1);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1L), hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1728), hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1728), hikariConfig0.minPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1L), hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(long1 == long0);
      
      Properties properties0 = hikariConfig0.getDataSourceProperties();
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1L), hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1728), hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals((-1728), hikariConfig0.minPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1L), hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertNotNull(properties0);
      
      String string2 = "";
      hikariConfig0.setDataSourceClassName(string2);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1L), hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1728), hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1728), hikariConfig0.minPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1L), hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string1));
      
      hikariConfig0.setInitializationFailFast(boolean0);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1L), hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1728), hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals((-1728), hikariConfig0.minPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1L), hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      
      int int1 = 1024;
      hikariConfig0.setAcquireRetries(int1);
      assertEquals(1024, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1L), hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1728), hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals((-1728), hikariConfig0.minPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1L), hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(1024, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 11000)
  public void test077()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertNotNull(hikariConfig0);
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.connectionCustomizer;
      assertNull(iConnectionCustomizer0);
      
      hikariConfig0.connectionCustomizer = iConnectionCustomizer0;
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      
      long long0 = (-1949L);
      hikariConfig0.setIdleTimeout(long0);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1949L), hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals((-1949L), hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      
      boolean boolean0 = true;
      hikariConfig0.setInitializationFailFast(boolean0);
      assertEquals((-1949L), hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals((-1949L), hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      
      boolean boolean1 = false;
      hikariConfig0.isAutoCommit = boolean1;
      assertEquals((-1949L), hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      
      boolean boolean2 = true;
      long long1 = (-4612L);
      hikariConfig0.setIdleTimeout(long1);
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals((-4612L), hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals((-4612L), hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(long1 == long0);
      
      hikariConfig0.setReadOnly(boolean2);
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals((-4612L), hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals((-4612L), hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(boolean2 == boolean1);
      
      Properties properties0 = hikariConfig0.getDataSourceProperties();
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals((-4612L), hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals((-4612L), hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertNotNull(properties0);
      
      hikariConfig0.setDataSourceProperties(properties0);
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals((-4612L), hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals((-4612L), hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      
      String string0 = "1}2W1";
      // Undeclared exception!
      try { 
        hikariConfig0.addDataSourceProperty(string0, iConnectionCustomizer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 11000)
  public void test078()  throws Throwable  {
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertNotNull(hikariConfig0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = properties0.put(object0, object0);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNull(object1);
      
      boolean boolean0 = true;
      String string0 = null;
      hikariConfig0.setCatalog(string0);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      
      hikariConfig0.setIsolateInternalQueries(boolean0);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertNull(iConnectionCustomizer0);
      
      hikariConfig0.connectionCustomizer = iConnectionCustomizer0;
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      
      int int0 = (-3587);
      // Undeclared exception!
      try { 
        hikariConfig0.setMaximumPoolSize(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test079()  throws Throwable  {
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertNotNull(hikariConfig0);
      
      boolean boolean0 = false;
      hikariConfig0.isJdbc4connectionTest = boolean0;
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      
      HikariConfig hikariConfig1 = new HikariConfig();
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertFalse(hikariConfig1.isReadOnly());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getJdbcUrl());
      assertNull(hikariConfig1.getCatalog());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig1.acquireRetryDelay);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertFalse(hikariConfig1.isReadOnly);
      assertEquals(1, hikariConfig1.acquireIncrement);
      assertFalse(hikariConfig1.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertNotNull(hikariConfig1);
      
      Object object0 = properties0.put(hikariConfig1, hikariConfig0);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertFalse(hikariConfig1.isReadOnly());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getJdbcUrl());
      assertNull(hikariConfig1.getCatalog());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig1.acquireRetryDelay);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertFalse(hikariConfig1.isReadOnly);
      assertEquals(1, hikariConfig1.acquireIncrement);
      assertFalse(hikariConfig1.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertNull(object0);
      
      String string0 = null;
      hikariConfig0.transactionIsolationName = string0;
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      
      String string1 = hikariConfig0.getCatalog();
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        hikariConfig1.setMaximumPoolSize(hikariConfig0.transactionIsolation);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test080()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertNotNull(hikariDataSource0);
      
      String string0 = hikariDataSource0.toString();
      assertEquals("HikariDataSource (null)", string0);
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertNotNull(string0);
      
      long long0 = 30L;
      hikariDataSource0.setMaxLifetime(long0);
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(30L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(30L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      
      int int0 = 1399;
      hikariDataSource0.acquireIncrement = int0;
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(30L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(1399, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      
      hikariDataSource0.connectionTimeout = long0;
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(30L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(30L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(1399, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      
      int int1 = 0;
      hikariDataSource0.minPoolSize = int1;
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getMinimumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(30L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(30L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(1399, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      
      hikariDataSource0.acquireRetries = int1;
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getMinimumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(30L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(30L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(1399, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      
      hikariDataSource0.dataSourceClassName = string0;
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getMinimumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(30L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(30L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals("HikariDataSource (null)", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(1399, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      
      hikariDataSource0.maxPoolSize = int1;
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getMinimumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(30L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(30L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals("HikariDataSource (null)", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(1399, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      
      boolean boolean0 = hikariDataSource0.isIsolateInternalQueries();
      assertFalse(boolean0);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getMinimumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(30L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(30L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals("HikariDataSource (null)", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(1399, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0, hikariDataSource0.acquireRetries);
      assertEquals(30L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0, hikariDataSource0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1399, hikariDataSource0.acquireIncrement);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(0, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(30L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariDataSource0.getConnectionCustomizer();
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getMinimumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(30L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(30L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals("HikariDataSource (null)", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(1399, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0, hikariDataSource0.acquireRetries);
      assertEquals(30L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0, hikariDataSource0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1399, hikariDataSource0.acquireIncrement);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(0, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(30L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertNull(iConnectionCustomizer0);
      
      hikariDataSource0.setAutoCommit(boolean0);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getMinimumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(30L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(30L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals("HikariDataSource (null)", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(1399, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0, hikariDataSource0.acquireRetries);
      assertEquals(30L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0, hikariDataSource0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1399, hikariDataSource0.acquireIncrement);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(0, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(30L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      
      boolean boolean1 = true;
      hikariDataSource0.setRegisterMbeans(boolean1);
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getMinimumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(30L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(30L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals("HikariDataSource (null)", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(1399, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0, hikariDataSource0.acquireRetries);
      assertEquals(30L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0, hikariDataSource0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1399, hikariDataSource0.acquireIncrement);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(0, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(30L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(boolean1 == boolean0);
      
      String string1 = hikariDataSource0.getDataSourceClassName();
      assertEquals("HikariDataSource (null)", string1);
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getMinimumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(30L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(30L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals("HikariDataSource (null)", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(1399, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0, hikariDataSource0.acquireRetries);
      assertEquals(30L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0, hikariDataSource0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1399, hikariDataSource0.acquireIncrement);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(0, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(30L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertSame(string1, string0);
      assertNotNull(string1);
      
      hikariDataSource0.setCatalog(string0);
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getMinimumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(30L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariDataSource (null)", hikariDataSource0.getCatalog());
      assertEquals(30L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals("HikariDataSource (null)", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(1399, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0, hikariDataSource0.acquireRetries);
      assertEquals(30L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0, hikariDataSource0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1399, hikariDataSource0.acquireIncrement);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(0, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(30L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertSame(string0, string1);
      
      boolean boolean2 = hikariDataSource0.isRegisterMbeans();
      assertTrue(boolean2);
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getMinimumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(30L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariDataSource (null)", hikariDataSource0.getCatalog());
      assertEquals(30L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals("HikariDataSource (null)", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(1399, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0, hikariDataSource0.acquireRetries);
      assertEquals(30L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0, hikariDataSource0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1399, hikariDataSource0.acquireIncrement);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(0, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(30L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      hikariDataSource0.addDataSourceProperty(string0, object0);
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getMinimumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(30L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariDataSource (null)", hikariDataSource0.getCatalog());
      assertEquals(30L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals("HikariDataSource (null)", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(1399, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0, hikariDataSource0.acquireRetries);
      assertEquals(30L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0, hikariDataSource0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1399, hikariDataSource0.acquireIncrement);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(0, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(30L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertSame(string0, string1);
      
      int int2 = (-2080);
      // Undeclared exception!
      try { 
        hikariDataSource0.setAcquireRetries(int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test081()  throws Throwable  {
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertNotNull(hikariConfig0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = properties0.put(object0, hikariConfig0);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertNull(object1);
      
      int int0 = 135;
      String string0 = "";
      hikariConfig0.catalog = string0;
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("", hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      Object object3 = properties0.put(object2, hikariConfig0);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("", hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertNotSame(object2, object0);
      assertFalse(object2.equals((Object)object0));
      assertNull(object3);
      
      hikariConfig0.setAcquireIncrement(int0);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertEquals(135, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("", hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(135, hikariConfig0.acquireIncrement);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      
      String string1 = "fatal error.  bug?";
      hikariConfig0.setCatalog(string1);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertEquals(135, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("fatal error.  bug?", hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(135, hikariConfig0.acquireIncrement);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertNotNull(object4);
      
      HikariConfig hikariConfig1 = (HikariConfig)properties0.put(object2, object4);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals("fatal error.  bug?", hikariConfig1.getCatalog());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getJdbcUrl());
      assertEquals(135, hikariConfig1.getAcquireIncrement());
      assertTrue(hikariConfig1.isAutoCommit());
      assertFalse(hikariConfig1.isReadOnly());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isReadOnly);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig1.acquireRetryDelay);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig1.isIsolateInternalQueries);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(135, hikariConfig1.acquireIncrement);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertNotSame(object2, object4);
      assertNotSame(object2, object0);
      assertNotSame(object4, object2);
      assertNotSame(object4, object0);
      assertSame(hikariConfig1, hikariConfig0);
      assertFalse(object2.equals((Object)object4));
      assertFalse(object2.equals((Object)object0));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertNotNull(hikariConfig1);
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertEquals(135, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("fatal error.  bug?", hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(135, hikariConfig0.acquireIncrement);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertSame(hikariConfig0, hikariConfig1);
      assertNull(iConnectionCustomizer0);
      
      hikariConfig0.setAcquireRetries(int0);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertEquals(135, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(135, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("fatal error.  bug?", hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(135, hikariConfig0.acquireIncrement);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(135, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertSame(hikariConfig0, hikariConfig1);
      
      String string2 = null;
      hikariConfig0.setJdbcUrl(string2);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertEquals(135, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(135, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("fatal error.  bug?", hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(135, hikariConfig0.acquireIncrement);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(135, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertSame(hikariConfig0, hikariConfig1);
      
      int int1 = hikariConfig0.getMinimumPoolSize();
      assertEquals(10, int1);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertEquals(135, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(135, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("fatal error.  bug?", hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(135, hikariConfig0.acquireIncrement);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(135, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertSame(hikariConfig0, hikariConfig1);
      assertFalse(int1 == int0);
      
      long long0 = hikariConfig0.getIdleTimeout();
      assertEquals(600000L, long0);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertEquals(135, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(135, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("fatal error.  bug?", hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(135, hikariConfig0.acquireIncrement);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(135, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertSame(hikariConfig0, hikariConfig1);
      
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertNotNull(hikariDataSource0);
      
      hikariDataSource0.connectionCustomizerClassName = hikariConfig0.connectionInitSql;
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertEquals(135, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(135, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("fatal error.  bug?", hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      
      hikariConfig0.copyState(hikariDataSource0);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertEquals(135, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(135, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("fatal error.  bug?", hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(135, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(135, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("fatal error.  bug?", hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(135, hikariConfig0.acquireIncrement);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(135, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(135, hikariDataSource0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(135, hikariDataSource0.acquireRetries);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertSame(hikariConfig0, hikariConfig1);
      
      hikariDataSource0.setDataSourceProperties(hikariConfig0.dataSourceProperties);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertEquals(135, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(135, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("fatal error.  bug?", hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(135, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(135, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("fatal error.  bug?", hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(135, hikariConfig0.acquireIncrement);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(135, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(135, hikariDataSource0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(135, hikariDataSource0.acquireRetries);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertSame(hikariConfig0, hikariConfig1);
      
      String string3 = "";
      hikariConfig0.setAcquireRetryDelay(hikariDataSource0.ACQUIRE_RETRY_DELAY);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertEquals(135, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(135, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("fatal error.  bug?", hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(135, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(135, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("fatal error.  bug?", hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(135, hikariConfig0.acquireIncrement);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(135, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(135, hikariDataSource0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(135, hikariDataSource0.acquireRetries);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertSame(hikariConfig0, hikariConfig1);
      
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object4));
      assertNotNull(object5);
      
      hikariConfig0.addDataSourceProperty(string3, object5);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertEquals(135, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(135, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("fatal error.  bug?", hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(135, hikariConfig0.acquireIncrement);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(135, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertSame(hikariConfig0, hikariConfig1);
      assertNotSame(string3, string1);
      assertSame(string3, string0);
      assertNotSame(object5, object2);
      assertNotSame(object5, object0);
      assertNotSame(object5, object4);
      assertFalse(string3.equals((Object)string1));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object4));
      
      boolean boolean0 = hikariConfig0.isJdbc4ConnectionTest();
      assertTrue(boolean0);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertEquals(135, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(135, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("fatal error.  bug?", hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(135, hikariConfig0.acquireIncrement);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(135, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertSame(hikariConfig0, hikariConfig1);
      
      hikariDataSource0.dataSourceClassName = string2;
      assertEquals(135, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(135, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("fatal error.  bug?", hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      
      String string4 = hikariDataSource0.getCatalog();
      assertEquals("fatal error.  bug?", string4);
      assertEquals(135, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(135, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("fatal error.  bug?", hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(135, hikariDataSource0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(135, hikariDataSource0.acquireRetries);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      hikariDataSource0.setJdbcUrl(string1);
      assertEquals(135, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(135, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("fatal error.  bug?", hikariDataSource0.getJdbcUrl());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("fatal error.  bug?", hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(135, hikariDataSource0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(135, hikariDataSource0.acquireRetries);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertNotSame(string1, string3);
      assertSame(string1, string4);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      
      DataSource dataSource0 = hikariConfig0.getDataSource();
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertEquals(135, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(135, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("fatal error.  bug?", hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(135, hikariConfig0.acquireIncrement);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(135, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertSame(hikariConfig0, hikariConfig1);
      assertNull(dataSource0);
      
      hikariConfig0.copyState(hikariDataSource0);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertEquals(135, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(135, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("fatal error.  bug?", hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(135, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(135, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("fatal error.  bug?", hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(135, hikariConfig0.acquireIncrement);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(135, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(135, hikariDataSource0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(135, hikariDataSource0.acquireRetries);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertSame(hikariConfig0, hikariConfig1);
      
      boolean boolean1 = hikariConfig0.isRegisterMbeans();
      assertFalse(boolean1);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertEquals(135, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(135, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("fatal error.  bug?", hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(135, hikariConfig0.acquireIncrement);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(135, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertSame(hikariConfig0, hikariConfig1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test082()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertNotNull(hikariConfig0);
      
      boolean boolean0 = true;
      long long0 = 0L;
      hikariConfig0.leakDetectionThreshold = long0;
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      
      hikariConfig0.isJdbc4connectionTest = boolean0;
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      
      int int0 = (-3074);
      hikariConfig0.maxPoolSize = int0;
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-3074), hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      
      boolean boolean1 = true;
      hikariConfig0.setRegisterMbeans(boolean1);
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-3074), hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-3074), hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      hikariConfig0.maxLifetime = (long) int0;
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-3074), hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-3074L), hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isRegisterMbeans());
      
      int int1 = hikariConfig0.getMaximumPoolSize();
      assertEquals((-3074), int1);
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-3074), hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-3074L), hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-3074L), hikariConfig0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-3074), hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireIncrement(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be less than 1
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test083()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertNotNull(hikariConfig0);
      
      long long0 = 1L;
      hikariConfig0.connectionTimeout = long0;
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test084()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertNotNull(hikariConfig0);
      
      long long0 = 4372L;
      hikariConfig0.idleTimeout = long0;
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(4372L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      String string0 = "";
      hikariConfig0.connectionTestQuery = string0;
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(4372L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      String string1 = null;
      String string2 = "";
      hikariConfig0.transactionIsolationName = string2;
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(4372L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      hikariConfig0.setConnectionTestQuery(string1);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(4372L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(4372L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      
      int int0 = hikariConfig0.getAcquireRetries();
      assertEquals(3, int0);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(4372L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(4372L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      
      String string3 = hikariConfig0.getJdbcUrl();
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(4372L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(4372L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertNull(string3);
      
      String string4 = null;
      hikariConfig0.setDataSourceClassName(string4);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(4372L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(4372L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      
      String string5 = hikariConfig0.getPoolName();
      assertEquals("HikariPool-0", string5);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(4372L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(4372L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      int int1 = hikariConfig0.getAcquireRetries();
      assertEquals(3, int1);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(4372L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(4372L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(int1 == int0);
      
      DataSource dataSource0 = hikariConfig0.dataSource;
      assertNull(dataSource0);
      
      hikariConfig0.setDataSource(dataSource0);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(4372L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(4372L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      
      String string6 = "1XNA6hV}9rp|4Q@Y";
      hikariConfig0.setConnectionCustomizerClassName(string6);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("1XNA6hV}9rp|4Q@Y", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(4372L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(4372L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertNotSame(string6, string2);
      assertNotSame(string6, string0);
      assertNotSame(string6, string5);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      
      long long1 = 1L;
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test085()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertNotNull(hikariConfig0);
      
      boolean boolean0 = true;
      hikariConfig0.isInitializationFailFast = boolean0;
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      boolean boolean1 = hikariConfig0.isInitializationFailFast();
      assertTrue(boolean1);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(boolean1 == boolean0);
      
      long long0 = 0L;
      hikariConfig0.leakDetectionThreshold = long0;
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      String string0 = "%=#G";
      hikariConfig0.dataSourceClassName = string0;
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("%=#G", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      boolean boolean2 = true;
      int int0 = 4929;
      hikariConfig0.transactionIsolation = int0;
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("%=#G", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(4929, hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      hikariConfig0.setReadOnly(boolean2);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("%=#G", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(4929, hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(4929, hikariConfig0.transactionIsolation);
      assertTrue(boolean2 == boolean1);
      
      hikariConfig0.validate();
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("%=#G", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(4929, hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(4929, hikariConfig0.transactionIsolation);
      
      boolean boolean3 = true;
      hikariConfig0.isReadOnly = boolean3;
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("%=#G", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(4929, hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      boolean boolean4 = hikariConfig0.isReadOnly();
      assertTrue(boolean4);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("%=#G", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(4929, hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(4929, hikariConfig0.transactionIsolation);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      
      String string1 = hikariConfig0.getPoolName();
      assertEquals("HikariPool-0", string1);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("%=#G", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(4929, hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(4929, hikariConfig0.transactionIsolation);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      DataSource dataSource0 = hikariConfig0.dataSource;
      assertNull(dataSource0);
      
      hikariConfig0.setDataSource(dataSource0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("%=#G", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(4929, hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(4929, hikariConfig0.transactionIsolation);
      
      hikariConfig0.setRegisterMbeans(boolean1);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("%=#G", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(4929, hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(4929, hikariConfig0.transactionIsolation);
      assertTrue(boolean1 == boolean2);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1 == boolean3);
      assertTrue(boolean1 == boolean4);
      
      boolean boolean5 = hikariConfig0.isRegisterMbeans();
      assertTrue(boolean5);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("%=#G", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(4929, hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(4929, hikariConfig0.transactionIsolation);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      
      Properties properties0 = hikariConfig0.getDataSourceProperties();
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("%=#G", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(4929, hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(4929, hikariConfig0.transactionIsolation);
      assertNotNull(properties0);
      
      hikariConfig0.setDataSourceClassName(string1);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(4929, hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(4929, hikariConfig0.transactionIsolation);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      long long1 = hikariConfig0.getLeakDetectionThreshold();
      assertEquals(0L, long1);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(4929, hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(4929, hikariConfig0.transactionIsolation);
      assertTrue(long1 == long0);
      
      boolean boolean6 = hikariConfig0.isReadOnly();
      assertTrue(boolean6);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(4929, hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(4929, hikariConfig0.transactionIsolation);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean3);
      
      String string2 = hikariConfig0.getDataSourceClassName();
      assertEquals("HikariPool-0", string2);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(4929, hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(4929, hikariConfig0.transactionIsolation);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      hikariConfig0.setDataSourceClassName(string2);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(4929, hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(4929, hikariConfig0.transactionIsolation);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean7 = hikariConfig0.isReadOnly();
      assertTrue(boolean7);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(4929, hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(4929, hikariConfig0.transactionIsolation);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean2);
      
      String string3 = "QF|~@ Xxax*C3";
      hikariConfig0.setPoolName(string3);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("QF|~@ Xxax*C3", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(4929, hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(4929, hikariConfig0.transactionIsolation);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = "";
      hikariConfig0.setDataSourceClassName(string4);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("QF|~@ Xxax*C3", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(4929, hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(4929, hikariConfig0.transactionIsolation);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = hikariConfig0.getCatalog();
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("QF|~@ Xxax*C3", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(4929, hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(4929, hikariConfig0.transactionIsolation);
      assertNull(string5);
  }

  @Test(timeout = 11000)
  public void test086()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertNotNull(hikariConfig0);
      
      int int0 = (-1212);
      String string0 = "";
      hikariConfig0.setTransactionIsolation(string0);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      
      hikariConfig0.acquireRetries = int0;
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1212), hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      long long0 = 5000L;
      hikariConfig0.maxLifetime = long0;
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1212), hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      long long1 = hikariConfig0.getMaxLifetime();
      assertEquals(5000L, long1);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1212), hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1212), hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(long1 == long0);
      
      boolean boolean0 = false;
      hikariConfig0.setRegisterMbeans(boolean0);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1212), hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1212), hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
  }

  @Test(timeout = 11000)
  public void test087()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertNotNull(hikariConfig0);
      
      String string0 = "wseSfkw~A*x32/Grz";
      hikariConfig0.poolName = string0;
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("wseSfkw~A*x32/Grz", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      
      boolean boolean0 = false;
      hikariConfig0.setIsolateInternalQueries(boolean0);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("wseSfkw~A*x32/Grz", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      
      int int0 = 659;
      hikariConfig0.maxPoolSize = int0;
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(659, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("wseSfkw~A*x32/Grz", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      
      String string1 = "";
      hikariConfig0.setConnectionInitSql(string1);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(659, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("wseSfkw~A*x32/Grz", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(659, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      long long0 = 0L;
      hikariConfig0.acquireRetryDelay = long0;
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(659, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("wseSfkw~A*x32/Grz", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig1 = new HikariConfig();
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getJdbcUrl());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isReadOnly());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isIsolateInternalQueries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(1, hikariConfig1.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(hikariConfig1.isReadOnly);
      assertEquals(750L, hikariConfig1.acquireRetryDelay);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertNotNull(hikariConfig1);
      
      Object object0 = properties0.put(hikariConfig0, hikariConfig1);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(659, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("wseSfkw~A*x32/Grz", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getJdbcUrl());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isReadOnly());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(659, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isIsolateInternalQueries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(1, hikariConfig1.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(hikariConfig1.isReadOnly);
      assertEquals(750L, hikariConfig1.acquireRetryDelay);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(2, HikariConfig.poolNumber);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertNull(object0);
      
      hikariConfig0.setDataSourceProperties(properties0);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(659, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("wseSfkw~A*x32/Grz", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(659, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      
      boolean boolean1 = hikariConfig0.isAutoCommit();
      assertTrue(boolean1);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(659, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("wseSfkw~A*x32/Grz", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(659, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(boolean1 == boolean0);
      
      long long1 = 0L;
      hikariConfig1.setConnectionTimeout(long1);
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getCatalog());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getJdbcUrl());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isReadOnly());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(2147483647L, hikariConfig1.getConnectionTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isIsolateInternalQueries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(1, hikariConfig1.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(2147483647L, hikariConfig1.connectionTimeout);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(hikariConfig1.isReadOnly);
      assertEquals(750L, hikariConfig1.acquireRetryDelay);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(2, HikariConfig.poolNumber);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      hikariConfig0.leakDetectionThreshold = hikariConfig1.MAX_LIFETIME;
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(659, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1800000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("wseSfkw~A*x32/Grz", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getCatalog());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getJdbcUrl());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isReadOnly());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(2147483647L, hikariConfig1.getConnectionTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      
      hikariConfig0.copyState(hikariConfig1);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(659, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1800000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("wseSfkw~A*x32/Grz", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("wseSfkw~A*x32/Grz", hikariConfig1.getPoolName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertEquals(659, hikariConfig1.getMaximumPoolSize());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("", hikariConfig1.getConnectionInitSql());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getJdbcUrl());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isReadOnly());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig1.getLeakDetectionThreshold());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(659, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(659, hikariConfig1.maxPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isIsolateInternalQueries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(1, hikariConfig1.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig1.leakDetectionThreshold);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(0L, hikariConfig1.acquireRetryDelay);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(hikariConfig1.isReadOnly);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(2, HikariConfig.poolNumber);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      String string2 = "0|L";
      hikariConfig1.addDataSourceProperty(string2, string2);
      assertEquals("wseSfkw~A*x32/Grz", hikariConfig1.getPoolName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertEquals(659, hikariConfig1.getMaximumPoolSize());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("", hikariConfig1.getConnectionInitSql());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getJdbcUrl());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isReadOnly());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig1.getLeakDetectionThreshold());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(659, hikariConfig1.maxPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isIsolateInternalQueries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(1, hikariConfig1.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig1.leakDetectionThreshold);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(0L, hikariConfig1.acquireRetryDelay);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(hikariConfig1.isReadOnly);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(2, HikariConfig.poolNumber);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      String string3 = hikariConfig0.getConnectionInitSql();
      assertEquals("", string3);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(659, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1800000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("wseSfkw~A*x32/Grz", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(659, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      long long2 = hikariConfig1.getIdleTimeout();
      assertEquals(600000L, long2);
      assertEquals("wseSfkw~A*x32/Grz", hikariConfig1.getPoolName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertEquals(659, hikariConfig1.getMaximumPoolSize());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("", hikariConfig1.getConnectionInitSql());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getJdbcUrl());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isReadOnly());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig1.getLeakDetectionThreshold());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(659, hikariConfig1.maxPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isIsolateInternalQueries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(1, hikariConfig1.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig1.leakDetectionThreshold);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(0L, hikariConfig1.acquireRetryDelay);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(hikariConfig1.isReadOnly);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(2, HikariConfig.poolNumber);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
  }

  @Test(timeout = 11000)
  public void test088()  throws Throwable  {
      String string0 = null;
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 11000)
  public void test089()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertNotNull(hikariDataSource0);
      
      long long0 = (-1483L);
      // Undeclared exception!
      try { 
        hikariDataSource0.setAcquireRetryDelay(long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // acquireRetryDelay cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test090()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertNotNull(hikariConfig0);
      
      DataSource dataSource0 = hikariConfig0.getDataSource();
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertNull(dataSource0);
      
      hikariConfig0.setDataSource(dataSource0);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      String string0 = "c^<UtQF\\<mv>_-";
      hikariConfig0.connectionTestQuery = string0;
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("c^<UtQF\\<mv>_-", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      
      long long0 = 296L;
      hikariConfig0.leakDetectionThreshold = long0;
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(296L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("c^<UtQF\\<mv>_-", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      
      long long1 = 80L;
      hikariConfig0.connectionTimeout = long1;
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(80L, hikariConfig0.getConnectionTimeout());
      assertEquals(296L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("c^<UtQF\\<mv>_-", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      
      hikariConfig0.setConnectionTimeout(long0);
      assertEquals(296L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(296L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("c^<UtQF\\<mv>_-", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(296L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(296L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(long0 == long1);
      
      int int0 = 50;
      hikariConfig0.setAcquireRetries(int0);
      assertEquals(296L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(50, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(296L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("c^<UtQF\\<mv>_-", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(296L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(50, hikariConfig0.acquireRetries);
      assertEquals(296L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      boolean boolean0 = false;
      String string1 = "DnC26+D[daa";
      hikariConfig0.addDataSourceProperty(string1, string1);
      assertEquals(296L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(50, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(296L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("c^<UtQF\\<mv>_-", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(296L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(50, hikariConfig0.acquireRetries);
      assertEquals(296L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      hikariConfig0.isAutoCommit = boolean0;
      assertEquals(296L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(50, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(296L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("c^<UtQF\\<mv>_-", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      
      long long2 = hikariConfig0.getIdleTimeout();
      assertEquals(600000L, long2);
      assertEquals(296L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(50, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(296L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("c^<UtQF\\<mv>_-", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(296L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(50, hikariConfig0.acquireRetries);
      assertEquals(296L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      int int1 = hikariConfig0.getAcquireRetries();
      assertEquals(50, int1);
      assertEquals(296L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(50, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(296L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("c^<UtQF\\<mv>_-", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(296L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(50, hikariConfig0.acquireRetries);
      assertEquals(296L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(int1 == int0);
      
      String string2 = "gDQb,!{&oFa+6,{)";
      hikariConfig0.setJdbcUrl(string2);
      assertEquals(296L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("gDQb,!{&oFa+6,{)", hikariConfig0.getJdbcUrl());
      assertEquals(50, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(296L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("c^<UtQF\\<mv>_-", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(296L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(50, hikariConfig0.acquireRetries);
      assertEquals(296L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      long long3 = hikariConfig0.getIdleTimeout();
      assertEquals(600000L, long3);
      assertEquals(296L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("gDQb,!{&oFa+6,{)", hikariConfig0.getJdbcUrl());
      assertEquals(50, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(296L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("c^<UtQF\\<mv>_-", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(296L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(50, hikariConfig0.acquireRetries);
      assertEquals(296L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertTrue(long3 == long2);
      
      hikariConfig0.setAcquireRetries(int1);
      assertEquals(296L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("gDQb,!{&oFa+6,{)", hikariConfig0.getJdbcUrl());
      assertEquals(50, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(296L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("c^<UtQF\\<mv>_-", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(296L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(50, hikariConfig0.acquireRetries);
      assertEquals(296L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(int1 == int0);
      
      hikariConfig0.setConnectionCustomizerClassName(string1);
      assertEquals(296L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("gDQb,!{&oFa+6,{)", hikariConfig0.getJdbcUrl());
      assertEquals(50, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(296L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("c^<UtQF\\<mv>_-", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("DnC26+D[daa", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(296L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(50, hikariConfig0.acquireRetries);
      assertEquals(296L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      
      hikariConfig0.setConnectionTestQuery(string0);
      assertEquals(296L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("gDQb,!{&oFa+6,{)", hikariConfig0.getJdbcUrl());
      assertEquals(50, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(296L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("c^<UtQF\\<mv>_-", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("DnC26+D[daa", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(296L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(50, hikariConfig0.acquireRetries);
      assertEquals(296L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      
      boolean boolean1 = hikariConfig0.isJdbc4ConnectionTest();
      assertTrue(boolean1);
      assertEquals(296L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("gDQb,!{&oFa+6,{)", hikariConfig0.getJdbcUrl());
      assertEquals(50, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(296L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("c^<UtQF\\<mv>_-", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("DnC26+D[daa", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(296L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(50, hikariConfig0.acquireRetries);
      assertEquals(296L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to get driver for JDBC URL gDQb,!{&oFa+6,{)
         //
         verifyException("com.zaxxer.hikari.util.DriverDataSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test091()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertNotNull(hikariDataSource0);
      
      long long0 = 0L;
      long long1 = 750L;
      HikariConfig.MAX_LIFETIME = long1;
      String string0 = "`~jmwbUoo2+a\\ `%";
      hikariDataSource0.setIdleTimeout(long0);
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getIdleTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.MAX_LIFETIME);
      assertEquals(0L, hikariDataSource0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(long0 == long1);
      
      hikariDataSource0.setJdbcUrl(string0);
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getIdleTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("`~jmwbUoo2+a\\ `%", hikariDataSource0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.MAX_LIFETIME);
      assertEquals(0L, hikariDataSource0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      
      hikariDataSource0.acquireRetryDelay = long0;
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getIdleTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("`~jmwbUoo2+a\\ `%", hikariDataSource0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      
      String string1 = "No connection wait timeout is set, this might cause an infinite wait.";
      int int0 = 10;
      hikariDataSource0.minPoolSize = int0;
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getIdleTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("`~jmwbUoo2+a\\ `%", hikariDataSource0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      
      hikariDataSource0.setJdbcUrl(string1);
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getIdleTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("No connection wait timeout is set, this might cause an infinite wait.", hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.acquireRetryDelay);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.MAX_LIFETIME);
      assertEquals(0L, hikariDataSource0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = true;
      String string2 = "6*].;\\>OXMb";
      hikariDataSource0.setDataSourceClassName(string2);
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getIdleTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("6*].;\\>OXMb", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("No connection wait timeout is set, this might cause an infinite wait.", hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.acquireRetryDelay);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.MAX_LIFETIME);
      assertEquals(0L, hikariDataSource0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      hikariDataSource0.setReadOnly(boolean0);
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getIdleTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("6*].;\\>OXMb", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("No connection wait timeout is set, this might cause an infinite wait.", hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isReadOnly);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.acquireRetryDelay);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.MAX_LIFETIME);
      assertEquals(0L, hikariDataSource0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      
      String string3 = hikariDataSource0.getCatalog();
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getIdleTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("6*].;\\>OXMb", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("No connection wait timeout is set, this might cause an infinite wait.", hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isReadOnly);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.acquireRetryDelay);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.MAX_LIFETIME);
      assertEquals(0L, hikariDataSource0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertNull(string3);
      
      String string4 = null;
      hikariDataSource0.setJdbcUrl(string4);
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getIdleTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("6*].;\\>OXMb", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isReadOnly);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.acquireRetryDelay);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.MAX_LIFETIME);
      assertEquals(0L, hikariDataSource0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      
      long long2 = 10L;
      hikariDataSource0.setLeakDetectionThreshold(long2);
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getIdleTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("6*].;\\>OXMb", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isReadOnly);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.acquireRetryDelay);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(750L, HikariConfig.MAX_LIFETIME);
      assertEquals(0L, hikariDataSource0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      long long3 = hikariDataSource0.getLeakDetectionThreshold();
      assertEquals(10L, long3);
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getIdleTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("6*].;\\>OXMb", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isReadOnly);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.acquireRetryDelay);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(750L, HikariConfig.MAX_LIFETIME);
      assertEquals(0L, hikariDataSource0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      
      hikariDataSource0.setReadOnly(boolean0);
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getIdleTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("6*].;\\>OXMb", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isReadOnly);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.acquireRetryDelay);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(750L, HikariConfig.MAX_LIFETIME);
      assertEquals(0L, hikariDataSource0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      
      boolean boolean1 = true;
      hikariDataSource0.setJdbc4ConnectionTest(boolean1);
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getIdleTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("6*].;\\>OXMb", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isReadOnly);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.acquireRetryDelay);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(750L, HikariConfig.MAX_LIFETIME);
      assertEquals(0L, hikariDataSource0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
  }

  @Test(timeout = 11000)
  public void test092()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertNotNull(hikariConfig0);
      
      int int0 = (-3123);
      hikariConfig0.setMaxLifetime(int0);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      hikariConfig0.minPoolSize = int0;
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      
      long long0 = 16L;
      hikariConfig0.leakDetectionThreshold = long0;
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      
      hikariConfig0.connectionTimeout = (long) int0;
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      Object object0 = properties0.put(hikariConfig0, hikariConfig0);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertNull(object0);
      
      String string0 = ":^ec6T8/n}R>]{[Ak";
      hikariConfig0.setDataSourceClassName(string0);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      Properties properties1 = (Properties)properties0.clone();
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(properties1.isEmpty());
      assertEquals(1, properties1.size());
      assertNotSame(properties0, properties1);
      assertNotSame(properties1, properties0);
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      
      Collection<Object> collection0 = properties0.values();
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotSame(properties0, properties1);
      assertTrue(properties0.equals((Object)properties1));
      assertNotNull(collection0);
      
      hikariConfig0.connectionTestQuery = string0;
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      
      hikariConfig0.setDataSourceProperties(properties0);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertNotSame(properties0, properties1);
      assertTrue(properties0.equals((Object)properties1));
      
      boolean boolean0 = false;
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      long long1 = hikariConfig0.getConnectionTimeout();
      assertEquals((-3123L), long1);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(long1 == long0);
      
      int int1 = hikariConfig0.getAcquireRetries();
      assertEquals(3, int1);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(int1 == int0);
      
      String string1 = "javassist.bytecode.SignatureAttribute$ClassType";
      hikariConfig0.setConnectionInitSql(string1);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "Yk";
      hikariConfig0.setConnectionTestQuery(string2);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      long long2 = hikariConfig0.getIdleTimeout();
      assertEquals(600000L, long2);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      String string3 = hikariConfig0.getConnectionTestQuery();
      assertEquals("Yk", string3);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      long long3 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(750L, long3);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      
      int int2 = hikariConfig0.getAcquireRetries();
      assertEquals(3, int2);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = hikariConfig0.getMinimumPoolSize();
      assertEquals((-3123), int3);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      
      String string4 = "";
      hikariConfig0.setDataSourceClassName(string4);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      hikariConfig0.setCatalog(string3);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("Yk", hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertSame(string3, string2);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // maxLifetime cannot be negative.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test093()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertNotNull(hikariConfig0);
      
      HikariConfig hikariConfig1 = new HikariConfig();
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertFalse(hikariConfig1.isReadOnly());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getJdbcUrl());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getCatalog());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(1, hikariConfig1.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(750L, hikariConfig1.acquireRetryDelay);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig1.isReadOnly);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertNotNull(hikariConfig1);
      
      hikariConfig0.setConnectionInitSql(hikariConfig1.poolName);
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertFalse(hikariConfig1.isReadOnly());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getJdbcUrl());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getCatalog());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(1, hikariConfig1.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(750L, hikariConfig1.acquireRetryDelay);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig1.isReadOnly);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      String string0 = "OZ|*Q^9xHGm6j{(i";
      hikariConfig0.connectionCustomizerClassName = string0;
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("OZ|*Q^9xHGm6j{(i", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      hikariConfig0.copyState(hikariConfig1);
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("OZ|*Q^9xHGm6j{(i", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertFalse(hikariConfig1.isReadOnly());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getJdbcUrl());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getCatalog());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals("OZ|*Q^9xHGm6j{(i", hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(1, hikariConfig1.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(750L, hikariConfig1.acquireRetryDelay);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig1.isReadOnly);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      hikariConfig0.idleTimeout = (long) hikariConfig1.acquireRetries;
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("OZ|*Q^9xHGm6j{(i", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3L, hikariConfig0.getIdleTimeout());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertFalse(hikariConfig1.isReadOnly());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getJdbcUrl());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getCatalog());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals("OZ|*Q^9xHGm6j{(i", hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      
      String string1 = null;
      hikariConfig1.leakDetectionThreshold = hikariConfig0.idleTimeout;
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("OZ|*Q^9xHGm6j{(i", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3L, hikariConfig0.getIdleTimeout());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(3L, hikariConfig1.getLeakDetectionThreshold());
      assertFalse(hikariConfig1.isReadOnly());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getJdbcUrl());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getCatalog());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals("OZ|*Q^9xHGm6j{(i", hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      
      boolean boolean0 = true;
      hikariConfig1.isJdbc4connectionTest = boolean0;
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(3L, hikariConfig1.getLeakDetectionThreshold());
      assertFalse(hikariConfig1.isReadOnly());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getJdbcUrl());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getCatalog());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals("OZ|*Q^9xHGm6j{(i", hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      
      hikariConfig0.setConnectionInitSql(string1);
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("OZ|*Q^9xHGm6j{(i", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(3L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      
      boolean boolean1 = hikariConfig0.isIsolateInternalQueries();
      assertFalse(boolean1);
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("OZ|*Q^9xHGm6j{(i", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(3L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(boolean1 == boolean0);
      
      HikariConfig.CONNECTION_TIMEOUT = hikariConfig0.ACQUIRE_RETRY_DELAY;
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("OZ|*Q^9xHGm6j{(i", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      String string2 = "k";
      hikariConfig0.setJdbcUrl(string2);
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("k", hikariConfig0.getJdbcUrl());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("OZ|*Q^9xHGm6j{(i", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(3L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(string2, string0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = hikariConfig1.getJdbcUrl();
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(3L, hikariConfig1.getLeakDetectionThreshold());
      assertFalse(hikariConfig1.isReadOnly());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getJdbcUrl());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getCatalog());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals("OZ|*Q^9xHGm6j{(i", hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(750L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(1, hikariConfig1.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(750L, hikariConfig1.acquireRetryDelay);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig1.isReadOnly);
      assertEquals(3L, hikariConfig1.leakDetectionThreshold);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertNull(string3);
      
      // Undeclared exception!
      try { 
        hikariConfig1.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test094()  throws Throwable  {
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertNotNull(hikariConfig0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      int int0 = hikariConfig0.getAcquireIncrement();
      assertEquals(1, int0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      
      boolean boolean1 = false;
      hikariConfig0.setReadOnly(boolean1);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = false;
      hikariConfig0.setReadOnly(boolean2);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 11000)
  public void test095()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertNotNull(hikariDataSource0);
      
      long long0 = (-1507L);
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      String string0 = "L1";
      long long1 = 169L;
      String string1 = "s\"y@oZX+";
      Object object0 = properties0.getOrDefault(hikariDataSource0, string0);
      assertEquals("L1", object0);
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertNotSame(string0, string1);
      assertSame(string0, object0);
      assertSame(object0, string0);
      assertNotSame(object0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(object0.equals((Object)string1));
      assertNotNull(object0);
      
      hikariDataSource0.connectionInitSql = string1;
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("s\"y@oZX+", hikariDataSource0.getConnectionInitSql());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      
      hikariDataSource0.setDataSourceProperties(properties0);
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("s\"y@oZX+", hikariDataSource0.getConnectionInitSql());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      int int0 = hikariDataSource0.getTransactionIsolation();
      assertEquals((-1), int0);
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("s\"y@oZX+", hikariDataSource0.getConnectionInitSql());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      boolean boolean0 = false;
      hikariDataSource0.setReadOnly(boolean0);
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("s\"y@oZX+", hikariDataSource0.getConnectionInitSql());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      String string2 = hikariDataSource0.getConnectionInitSql();
      assertEquals("s\"y@oZX+", string2);
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("s\"y@oZX+", hikariDataSource0.getConnectionInitSql());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertNotSame(string2, object0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string2.equals((Object)object0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int1 = hikariDataSource0.getTransactionIsolation();
      assertEquals((-1), int1);
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("s\"y@oZX+", hikariDataSource0.getConnectionInitSql());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        hikariDataSource0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test096()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertNotNull(hikariConfig0);
      
      String string0 = "it%teyrP\\(,)8j2+";
      hikariConfig0.connectionCustomizerClassName = string0;
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("it%teyrP\\(,)8j2+", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      
      String string1 = "(Z)Ljava/lang/String;";
      int int0 = 246;
      hikariConfig0.maxPoolSize = int0;
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(246, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("it%teyrP\\(,)8j2+", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      
      boolean boolean0 = true;
      hikariConfig0.setIsolateInternalQueries(boolean0);
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(246, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("it%teyrP\\(,)8j2+", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(246, hikariConfig0.maxPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      
      hikariConfig0.setDataSourceClassName(string1);
      assertEquals("(Z)Ljava/lang/String;", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(246, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("it%teyrP\\(,)8j2+", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(246, hikariConfig0.maxPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = hikariConfig0.isIsolateInternalQueries();
      assertTrue(boolean1);
      assertEquals("(Z)Ljava/lang/String;", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(246, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("it%teyrP\\(,)8j2+", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(246, hikariConfig0.maxPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(boolean1 == boolean0);
      
      String string2 = hikariConfig0.getDataSourceClassName();
      assertEquals("(Z)Ljava/lang/String;", string2);
      assertEquals("(Z)Ljava/lang/String;", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(246, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("it%teyrP\\(,)8j2+", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(246, hikariConfig0.maxPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      long long0 = 0L;
      long long1 = 10L;
      // Undeclared exception!
      try { 
        hikariConfig0.setConnectionTimeout(long1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // connectionTimeout cannot be less than 100ms
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test097()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertNotNull(hikariConfig0);
      
      hikariConfig0.setConnectionInitSql(hikariConfig0.poolName);
      assertEquals("HikariPool-0", hikariConfig0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      
      String string0 = "OZ|*Q^9xHGm6j{(i";
      hikariConfig0.connectionCustomizerClassName = string0;
      assertEquals("HikariPool-0", hikariConfig0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("OZ|*Q^9xHGm6j{(i", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      hikariConfig0.copyState(hikariConfig0);
      assertEquals("HikariPool-0", hikariConfig0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("OZ|*Q^9xHGm6j{(i", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      
      String string1 = null;
      boolean boolean0 = true;
      hikariConfig0.setConnectionInitSql(string1);
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("OZ|*Q^9xHGm6j{(i", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      
      boolean boolean1 = hikariConfig0.isIsolateInternalQueries();
      assertFalse(boolean1);
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("OZ|*Q^9xHGm6j{(i", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(boolean1 == boolean0);
      
      HikariConfig.CONNECTION_TIMEOUT = hikariConfig0.ACQUIRE_RETRY_DELAY;
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("OZ|*Q^9xHGm6j{(i", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      hikariConfig0.setJdbcUrl(hikariConfig0.connectionCustomizerClassName);
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("OZ|*Q^9xHGm6j{(i", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("OZ|*Q^9xHGm6j{(i", hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      
      String string2 = hikariConfig0.getJdbcUrl();
      assertEquals("OZ|*Q^9xHGm6j{(i", string2);
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("OZ|*Q^9xHGm6j{(i", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("OZ|*Q^9xHGm6j{(i", hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertSame(string2, string0);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to get driver for JDBC URL OZ|*Q^9xHGm6j{(i
         //
         verifyException("com.zaxxer.hikari.util.DriverDataSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test098()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertNotNull(hikariConfig0);
      
      int int0 = (-3123);
      hikariConfig0.setMaxLifetime(int0);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      
      hikariConfig0.minPoolSize = int0;
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      hikariConfig0.leakDetectionThreshold = hikariConfig0.IDLE_TIMEOUT;
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      hikariConfig0.connectionTimeout = (long) int0;
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      Object object0 = properties0.put(hikariConfig0, hikariConfig0);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertNull(object0);
      
      String string0 = "";
      hikariConfig0.setDataSourceClassName(string0);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      
      Properties properties1 = (Properties)properties0.clone();
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties1.size());
      assertFalse(properties1.isEmpty());
      assertNotSame(properties0, properties1);
      assertNotSame(properties1, properties0);
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      
      Collection<Object> collection0 = properties0.values();
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotSame(properties0, properties1);
      assertTrue(properties0.equals((Object)properties1));
      assertNotNull(collection0);
      
      Enumeration<Object> enumeration0 = properties0.elements();
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotSame(properties0, properties1);
      assertTrue(properties0.equals((Object)properties1));
      assertNotNull(enumeration0);
      
      hikariConfig0.connectionTestQuery = string0;
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      hikariConfig0.setDataSourceProperties(properties0);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertNotSame(properties0, properties1);
      assertTrue(properties0.equals((Object)properties1));
      
      boolean boolean0 = false;
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      
      long long0 = hikariConfig0.getConnectionTimeout();
      assertEquals((-3123L), long0);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      
      int int1 = hikariConfig0.getAcquireRetries();
      assertEquals(3, int1);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(int1 == int0);
      
      hikariConfig0.setConnectionInitSql(hikariConfig0.transactionIsolationName);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      
      String string1 = "Yk";
      hikariConfig0.setConnectionTestQuery(string1);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      long long1 = hikariConfig0.getIdleTimeout();
      assertEquals(600000L, long1);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(long1 == long0);
      
      String string2 = hikariConfig0.getConnectionTestQuery();
      assertEquals("Yk", string2);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      long long2 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(750L, long2);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      int int2 = hikariConfig0.getAcquireRetries();
      assertEquals(3, int2);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = hikariConfig0.getMinimumPoolSize();
      assertEquals((-3123), int3);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      String string3 = "";
      hikariConfig0.setDataSourceClassName(string3);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      hikariConfig0.setCatalog(string2);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("Yk", hikariConfig0.getCatalog());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertNotSame(string2, string3);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // maxLifetime cannot be negative.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test099()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertNotNull(hikariDataSource0);
      
      long long0 = (-1507L);
      hikariDataSource0.acquireRetryDelay = long0;
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1507L), hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      String string0 = "L1";
      boolean boolean0 = hikariDataSource0.isJdbc4ConnectionTest();
      assertTrue(boolean0);
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1507L), hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1507L), hikariDataSource0.acquireRetryDelay);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertNotNull(hikariConfig0);
      
      Object object0 = properties0.put(hikariConfig0, hikariDataSource0);
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1507L), hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1507L), hikariDataSource0.acquireRetryDelay);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertNull(object0);
      
      long long1 = 169L;
      String string1 = "s\"y@oZX+";
      Object object1 = properties0.getOrDefault(hikariDataSource0, string0);
      assertEquals("L1", object1);
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1507L), hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1507L), hikariDataSource0.acquireRetryDelay);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertSame(string0, object1);
      assertNotSame(string0, string1);
      assertNotSame(object1, string1);
      assertSame(object1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(object1.equals((Object)string1));
      assertNotNull(object1);
      
      hikariDataSource0.connectionInitSql = string1;
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("s\"y@oZX+", hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1507L), hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      
      hikariDataSource0.setDataSourceProperties(properties0);
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("s\"y@oZX+", hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1507L), hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1507L), hikariDataSource0.acquireRetryDelay);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      
      int int0 = hikariDataSource0.getTransactionIsolation();
      assertEquals((-1), int0);
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("s\"y@oZX+", hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1507L), hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1507L), hikariDataSource0.acquireRetryDelay);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      
      boolean boolean1 = false;
      hikariDataSource0.setReadOnly(boolean1);
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("s\"y@oZX+", hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1507L), hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1507L), hikariDataSource0.acquireRetryDelay);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(boolean1 == boolean0);
      
      String string2 = hikariDataSource0.getConnectionInitSql();
      assertEquals("s\"y@oZX+", string2);
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("s\"y@oZX+", hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1507L), hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1507L), hikariDataSource0.acquireRetryDelay);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string2, object1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)object1));
      assertNotNull(string2);
      
      int int1 = hikariDataSource0.getTransactionIsolation();
      assertEquals((-1), int1);
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals("s\"y@oZX+", hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1507L), hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1507L), hikariDataSource0.acquireRetryDelay);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        hikariDataSource0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // acquireRetryDelay cannot be negative.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test100()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertNotNull(hikariConfig0);
      
      boolean boolean0 = false;
      String string0 = "u*|kqa(#]fL";
      hikariConfig0.addDataSourceProperty(string0, string0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      String string1 = "";
      hikariConfig0.setPoolName(string1);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "acquireRetryDelay cannot be negative";
      hikariConfig0.setTransactionIsolation(string2);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = "NBs:0W";
      hikariConfig0.setCatalog(string3);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("NBs:0W", hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = "s%Pr5U=E@uogEOn$'8&";
      hikariConfig0.setPoolName(string4);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("NBs:0W", hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("s%Pr5U=E@uogEOn$'8&", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      int int0 = 23;
      hikariConfig0.maxPoolSize = int0;
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("NBs:0W", hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("s%Pr5U=E@uogEOn$'8&", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(23, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      boolean boolean1 = false;
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertNotNull(hikariDataSource0);
      
      hikariConfig0.setDataSource(hikariDataSource0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("NBs:0W", hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("s%Pr5U=E@uogEOn$'8&", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(23, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(23, hikariConfig0.maxPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      
      hikariConfig0.isInitializationFailFast = boolean1;
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("NBs:0W", hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("s%Pr5U=E@uogEOn$'8&", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(23, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      String string5 = "";
      hikariConfig0.connectionInitSql = string5;
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("NBs:0W", hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("s%Pr5U=E@uogEOn$'8&", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(23, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      hikariConfig0.isAutoCommit = boolean0;
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("NBs:0W", hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("s%Pr5U=E@uogEOn$'8&", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(23, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      long long0 = hikariConfig0.getIdleTimeout();
      assertEquals(600000L, long0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("NBs:0W", hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("s%Pr5U=E@uogEOn$'8&", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(23, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(23, hikariConfig0.maxPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      int int1 = hikariConfig0.getAcquireIncrement();
      assertEquals(1, int1);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("NBs:0W", hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("s%Pr5U=E@uogEOn$'8&", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(23, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(23, hikariConfig0.maxPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        hikariConfig0.setDriverClassName(string3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // driverClassName specified class 'NBs:0W' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test101()  throws Throwable  {
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertNotNull(hikariConfig0);
      
      HikariConfig.poolNumber = hikariConfig0.minPoolSize;
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      long long0 = (-535L);
      HikariConfig.IDLE_TIMEOUT = long0;
      int int0 = 2021161080;
      hikariConfig0.transactionIsolation = int0;
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(2021161080, hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      boolean boolean0 = hikariConfig0.isAutoCommit();
      assertTrue(boolean0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(2021161080, hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(2021161080, hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-535L), HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, HikariConfig.poolNumber);
      
      String string0 = "connectionTimeout is less than 100ms, did you specify the wrong time unit?  Using default instead.";
      hikariConfig0.dataSourceClassName = string0;
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals("connectionTimeout is less than 100ms, did you specify the wrong time unit?  Using default instead.", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(2021161080, hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals("connectionTimeout is less than 100ms, did you specify the wrong time unit?  Using default instead.", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(2021161080, hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(2021161080, hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-535L), HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, HikariConfig.poolNumber);
      assertNull(iConnectionCustomizer0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = false;
      boolean boolean2 = false;
      boolean boolean3 = FileSystemHandling.setPermissions(evoSuiteFile0, hikariConfig0.isIsolateInternalQueries, boolean1, boolean2);
      assertFalse(boolean3);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals("connectionTimeout is less than 100ms, did you specify the wrong time unit?  Using default instead.", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(2021161080, hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(2021161080, hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-535L), HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, HikariConfig.poolNumber);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      long long1 = hikariConfig0.getIdleTimeout();
      assertEquals(600000L, long1);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals("connectionTimeout is less than 100ms, did you specify the wrong time unit?  Using default instead.", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(2021161080, hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(2021161080, hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-535L), HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, HikariConfig.poolNumber);
      assertFalse(long1 == long0);
      
      int int1 = hikariConfig0.getMaximumPoolSize();
      assertEquals(60, int1);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals("connectionTimeout is less than 100ms, did you specify the wrong time unit?  Using default instead.", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(2021161080, hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(2021161080, hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-535L), HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, HikariConfig.poolNumber);
      assertFalse(int1 == int0);
      
      HikariConfig.MAX_LIFETIME = (long) int1;
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals("connectionTimeout is less than 100ms, did you specify the wrong time unit?  Using default instead.", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(2021161080, hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      long long2 = hikariConfig0.getLeakDetectionThreshold();
      assertEquals(0L, long2);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals("connectionTimeout is less than 100ms, did you specify the wrong time unit?  Using default instead.", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(2021161080, hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(2021161080, hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-535L), HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, HikariConfig.poolNumber);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      hikariConfig0.connectionCustomizer = iConnectionCustomizer0;
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals("connectionTimeout is less than 100ms, did you specify the wrong time unit?  Using default instead.", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(2021161080, hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      String string1 = hikariConfig0.getConnectionCustomizerClassName();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals("connectionTimeout is less than 100ms, did you specify the wrong time unit?  Using default instead.", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(2021161080, hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(2021161080, hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-535L), HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, HikariConfig.poolNumber);
      assertNull(string1);
      
      boolean boolean4 = hikariConfig0.isAutoCommit();
      assertTrue(boolean4);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals("connectionTimeout is less than 100ms, did you specify the wrong time unit?  Using default instead.", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(2021161080, hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(2021161080, hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-535L), HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, HikariConfig.poolNumber);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      
      int int2 = hikariConfig0.getAcquireIncrement();
      assertEquals(1, int2);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals("connectionTimeout is less than 100ms, did you specify the wrong time unit?  Using default instead.", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(2021161080, hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(2021161080, hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-535L), HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, HikariConfig.poolNumber);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string2 = hikariConfig0.getDataSourceClassName();
      assertEquals("connectionTimeout is less than 100ms, did you specify the wrong time unit?  Using default instead.", string2);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals("connectionTimeout is less than 100ms, did you specify the wrong time unit?  Using default instead.", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(2021161080, hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(2021161080, hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-535L), HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, HikariConfig.poolNumber);
      assertSame(string2, string0);
      assertNotNull(string2);
      
      String string3 = hikariConfig0.getJdbcUrl();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals("connectionTimeout is less than 100ms, did you specify the wrong time unit?  Using default instead.", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(2021161080, hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(2021161080, hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-535L), HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, HikariConfig.poolNumber);
      assertNull(string3);
      
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean5 = FileSystemHandling.appendStringToFile(evoSuiteFile1, string0);
      assertFalse(boolean5);
      assertSame(string0, string2);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      
      int int3 = hikariConfig0.getMaximumPoolSize();
      assertEquals(60, int3);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals("connectionTimeout is less than 100ms, did you specify the wrong time unit?  Using default instead.", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(2021161080, hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(2021161080, hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-535L), HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, HikariConfig.poolNumber);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      
      String string4 = hikariConfig0.getPoolName();
      assertEquals("HikariPool-0", string4);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals("connectionTimeout is less than 100ms, did you specify the wrong time unit?  Using default instead.", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(2021161080, hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(2021161080, hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-535L), HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, HikariConfig.poolNumber);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int4 = 4;
      hikariConfig0.setAcquireIncrement(int4);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals("connectionTimeout is less than 100ms, did you specify the wrong time unit?  Using default instead.", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(2021161080, hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(4, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(4, hikariConfig0.acquireIncrement);
      assertEquals(60L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(2021161080, hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-535L), HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, HikariConfig.poolNumber);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      
      long long3 = (-1L);
      // Undeclared exception!
      try { 
        hikariConfig0.setConnectionTimeout(long3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // connectionTimeout cannot be less than 100ms
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test102()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertNotNull(hikariDataSource0);
      
      String string0 = hikariDataSource0.getPoolName();
      assertEquals("HikariPool-0", string0);
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertNotNull(string0);
      
      String string1 = hikariDataSource0.getJdbcUrl();
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertNull(string1);
      
      boolean boolean0 = true;
      hikariDataSource0.setAutoCommit(boolean0);
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      
      Properties properties0 = null;
      hikariDataSource0.dataSourceProperties = properties0;
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      
      long long0 = (-3276L);
      hikariDataSource0.idleTimeout = long0;
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-3276L), hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      
      String string2 = ";r";
      hikariDataSource0.connectionCustomizerClassName = string2;
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(";r", hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-3276L), hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariDataSource0.getConnectionCustomizer();
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(";r", hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-3276L), hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-3276L), hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertNull(iConnectionCustomizer0);
      
      boolean boolean1 = true;
      hikariDataSource0.isRegisterMbeans = boolean1;
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(";r", hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-3276L), hikariDataSource0.getIdleTimeout());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      
      String string3 = hikariDataSource0.getJdbcUrl();
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(";r", hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-3276L), hikariDataSource0.getIdleTimeout());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-3276L), hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertNull(string3);
      
      Class<Object> class0 = Object.class;
      boolean boolean2 = hikariDataSource0.isWrapperFor(class0);
      assertFalse(boolean2);
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(";r", hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-3276L), hikariDataSource0.getIdleTimeout());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-3276L), hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      long long1 = 0L;
      hikariDataSource0.connectionTimeout = long1;
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(";r", hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-3276L), hikariDataSource0.getIdleTimeout());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      
      boolean boolean3 = true;
      hikariDataSource0.setRegisterMbeans(boolean3);
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(";r", hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-3276L), hikariDataSource0.getIdleTimeout());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-3276L), hikariDataSource0.idleTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariDataSource0.connectionTimeout);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(boolean3 == boolean2);
      
      boolean boolean4 = hikariDataSource0.isReadOnly();
      assertFalse(boolean4);
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(";r", hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-3276L), hikariDataSource0.getIdleTimeout());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-3276L), hikariDataSource0.idleTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariDataSource0.connectionTimeout);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      
      long long2 = 0L;
      hikariDataSource0.setIdleTimeout(long2);
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(";r", hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariDataSource0.connectionTimeout);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(0L, hikariDataSource0.idleTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(long2 == long0);
      
      int int0 = hikariDataSource0.getMinimumPoolSize();
      assertEquals(10, int0);
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(";r", hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariDataSource0.connectionTimeout);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(0L, hikariDataSource0.idleTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      
      long long3 = 8L;
      hikariDataSource0.setIdleTimeout(long3);
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(";r", hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(8L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(8L, hikariDataSource0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariDataSource0.connectionTimeout);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      
      Properties properties1 = hikariDataSource0.getDataSourceProperties();
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(";r", hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(8L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(8L, hikariDataSource0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariDataSource0.connectionTimeout);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertNull(properties1);
  }

  @Test(timeout = 11000)
  public void test103()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertNotNull(hikariConfig0);
      
      String string0 = "javassist.Modifier";
      hikariConfig0.setConnectionTestQuery(string0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("javassist.Modifier", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      
      String string1 = "";
      hikariConfig0.setCatalog(string1);
      assertEquals("", hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("javassist.Modifier", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = hikariConfig0.getTransactionIsolation();
      assertEquals((-1), int0);
      assertEquals("", hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("javassist.Modifier", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      
      String string2 = hikariConfig0.getCatalog();
      assertEquals("", string2);
      assertEquals("", hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("javassist.Modifier", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      HikariConfig hikariConfig1 = new HikariConfig();
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getJdbcUrl());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertFalse(hikariConfig1.isReadOnly());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isIsolateInternalQueries);
      assertEquals(1, hikariConfig1.acquireIncrement);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertFalse(hikariConfig1.isReadOnly);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(750L, hikariConfig1.acquireRetryDelay);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertNotNull(hikariConfig1);
      
      boolean boolean0 = false;
      hikariConfig0.setIsolateInternalQueries(boolean0);
      assertEquals("", hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("javassist.Modifier", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = true;
      boolean boolean2 = false;
      boolean boolean3 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean1, hikariConfig0.isInitializationFailFast, boolean2);
      assertFalse(boolean3);
      assertEquals("", hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("javassist.Modifier", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      long long0 = (-1L);
      hikariConfig1.setDataSourceClassName(hikariConfig0.transactionIsolationName);
      assertEquals("", hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("javassist.Modifier", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getJdbcUrl());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertFalse(hikariConfig1.isReadOnly());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig1.isIsolateInternalQueries);
      assertEquals(1, hikariConfig1.acquireIncrement);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertFalse(hikariConfig1.isReadOnly);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(750L, hikariConfig1.acquireRetryDelay);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      hikariConfig1.idleTimeout = long0;
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertEquals((-1L), hikariConfig1.getIdleTimeout());
      assertNull(hikariConfig1.getJdbcUrl());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertFalse(hikariConfig1.isReadOnly());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      
      long long1 = 176L;
      HikariConfig.CONNECTION_TIMEOUT = long1;
      hikariConfig0.copyState(hikariConfig1);
      assertEquals("", hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("javassist.Modifier", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getJdbcUrl());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals("", hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertFalse(hikariConfig1.isReadOnly());
      assertEquals("javassist.Modifier", hikariConfig1.getConnectionTestQuery());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(176L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig1.isIsolateInternalQueries);
      assertEquals(1, hikariConfig1.acquireIncrement);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(176L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig1.isReadOnly);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(750L, hikariConfig1.acquireRetryDelay);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      String string3 = "Really, a JDBC URL?  It's time to party like it's 1999!";
      // Undeclared exception!
      try { 
        hikariConfig1.setDriverClassName(string3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // driverClassName specified class 'Really, a JDBC URL?  It's time to party like it's 1999!' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test104()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertNotNull(hikariConfig0);
      
      int int0 = (-3123);
      hikariConfig0.setMaxLifetime(int0);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      
      hikariConfig0.minPoolSize = int0;
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      
      long long0 = 16L;
      hikariConfig0.leakDetectionThreshold = long0;
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      
      hikariConfig0.connectionTimeout = (long) int0;
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      Object object0 = properties0.put(hikariConfig0, hikariConfig0);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertNull(object0);
      
      String string0 = ":^ec6T8/n}R>]{[Ak";
      hikariConfig0.setDataSourceClassName(string0);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      
      Properties properties1 = (Properties)properties0.clone();
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertEquals(1, properties1.size());
      assertFalse(properties1.isEmpty());
      assertNotSame(properties0, properties1);
      assertNotSame(properties1, properties0);
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      
      Collection<Object> collection0 = properties0.values();
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertNotSame(properties0, properties1);
      assertTrue(properties0.equals((Object)properties1));
      assertNotNull(collection0);
      
      hikariConfig0.connectionTestQuery = string0;
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      
      hikariConfig0.setDataSourceProperties(properties0);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertNotSame(properties0, properties1);
      assertTrue(properties0.equals((Object)properties1));
      
      boolean boolean0 = false;
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      
      long long1 = hikariConfig0.getConnectionTimeout();
      assertEquals((-3123L), long1);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(long1 == long0);
      
      int int1 = hikariConfig0.getAcquireRetries();
      assertEquals(3, int1);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(int1 == int0);
      
      String string1 = "javassist.bytecode.SignatureAttribute$ClassType";
      hikariConfig0.setConnectionInitSql(string1);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "Yk";
      hikariConfig0.setConnectionTestQuery(string2);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      long long2 = hikariConfig0.getIdleTimeout();
      assertEquals(600000L, long2);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      String string3 = hikariConfig0.getConnectionTestQuery();
      assertEquals("Yk", string3);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      long long3 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(750L, long3);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      
      int int2 = hikariConfig0.getAcquireRetries();
      assertEquals(3, int2);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = hikariConfig0.getMinimumPoolSize();
      assertEquals((-3123), int3);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      String string4 = "";
      hikariConfig0.setDataSourceClassName(string4);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      hikariConfig0.setCatalog(string3);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals("Yk", hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string5 = "";
      String string6 = hikariConfig0.getConnectionCustomizerClassName();
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals("Yk", hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertNull(string6);
      
      hikariConfig0.setConnectionCustomizerClassName(string5);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals("Yk", hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertSame(string5, string4);
      assertNotSame(string5, string0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      
      DataSource dataSource0 = hikariConfig0.getDataSource();
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals("Yk", hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertNull(dataSource0);
      
      String string7 = hikariConfig0.getPoolName();
      assertEquals("HikariPool-0", string7);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals("Yk", hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertNotSame(string7, string3);
      assertNotSame(string7, string2);
      assertNotSame(string7, string0);
      assertNotSame(string7, string1);
      assertNotSame(string7, string4);
      assertNotSame(string7, string5);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      
      boolean boolean1 = false;
      hikariConfig0.setUseInstrumentation(boolean1);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals("Yk", hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      
      long long4 = hikariConfig0.getIdleTimeout();
      assertEquals(600000L, long4);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals("Yk", hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(long4 == long1);
      assertFalse(long4 == long0);
      assertTrue(long4 == long2);
      assertFalse(long4 == long3);
  }

  @Test(timeout = 11000)
  public void test105()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertNotNull(hikariDataSource0);
      
      hikariDataSource0.setAutoCommit(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      
      boolean boolean0 = false;
      hikariDataSource0.dataSourceClassName = hikariDataSource0.connectionInitSql;
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      
      hikariDataSource0.isInitializationFailFast = boolean0;
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      Object object0 = properties0.put(hikariDataSource0, hikariDataSource0);
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertNull(object0);
      
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = properties0.computeIfPresent(hikariDataSource0, biFunction0);
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertNull(object1);
      
      boolean boolean1 = true;
      hikariDataSource0.setJdbc4ConnectionTest(boolean1);
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = hikariDataSource0.isAutoCommit();
      assertFalse(boolean2);
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Object object2 = new Object();
      assertNotNull(object2);
      
      Object object3 = properties0.remove(object2);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNull(object3);
      
      Object object4 = properties0.put(hikariDataSource0, hikariDataSource0);
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertNull(object4);
      
      String string0 = "";
      hikariDataSource0.setConnectionCustomizerClassName(string0);
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      
      hikariDataSource0.setDataSourceProperties(properties0);
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      
      HikariPool hikariPool0 = null;
      try {
        hikariPool0 = new HikariPool(hikariDataSource0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test106()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertNotNull(hikariConfig0);
      
      String string0 = "";
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)45;
      byteArray0[0] = byte0;
      byte byte1 = (byte)15;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)45, (byte)15, (byte)0}, byteArray0);
      
      hikariConfig0.setConnectionTestQuery(string0);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      
      long long0 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(750L, long0);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      
      String string1 = hikariConfig0.getConnectionTestQuery();
      assertEquals("", string1);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertSame(string1, string0);
      assertNotNull(string1);
      
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test107()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)28;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-119);
      byteArray0[1] = byte1;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)28, (byte) (-119)}, byteArray0);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertNotNull(hikariConfig0);
      
      Integer integer0 = new Integer(byte1);
      assertEquals((-119), (int)integer0);
      assertFalse(byte1 == byte0);
      assertNotNull(integer0);
      
      String string0 = "Zd6Uu,.C>T9A";
      Object object0 = properties0.replace((Object) integer0, (Object) string0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(byte1 == byte0);
      assertNull(object0);
      
      hikariConfig0.setJdbcUrl(string0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("Zd6Uu,.C>T9A", hikariConfig0.getJdbcUrl());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      
      Enumeration<?> enumeration0 = properties0.propertyNames();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(enumeration0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      int int0 = 0;
      int int1 = 30;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, int0, int1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)28, (byte) (-119)}, byteArray0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(byteArrayInputStream0);
      
      Object object2 = properties0.put(object1, byteArrayInputStream0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertArrayEquals(new byte[] {(byte)28, (byte) (-119)}, byteArray0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNull(object2);
      
      Properties properties1 = (Properties)properties0.clone();
      assertFalse(properties1.isEmpty());
      assertEquals(1, properties1.size());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotSame(properties1, properties0);
      assertNotSame(properties0, properties1);
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      
      long long0 = 1169L;
      hikariConfig0.setConnectionTimeout(long0);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(1169L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("Zd6Uu,.C>T9A", hikariConfig0.getJdbcUrl());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1169L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertNotSame(properties0, properties1);
      assertTrue(properties0.equals((Object)properties1));
      
      int int2 = hikariConfig0.getMaximumPoolSize();
      assertEquals(60, int2);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(1169L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("Zd6Uu,.C>T9A", hikariConfig0.getJdbcUrl());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1169L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertNotSame(properties0, properties1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(properties0.equals((Object)properties1));
      
      long long1 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(750L, long1);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(1169L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("Zd6Uu,.C>T9A", hikariConfig0.getJdbcUrl());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1169L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertNotSame(properties0, properties1);
      assertFalse(long1 == long0);
      assertTrue(properties0.equals((Object)properties1));
      
      String string1 = hikariConfig0.getDataSourceClassName();
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(1169L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("Zd6Uu,.C>T9A", hikariConfig0.getJdbcUrl());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1169L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertNotSame(properties0, properties1);
      assertTrue(properties0.equals((Object)properties1));
      assertNull(string1);
      
      long long2 = hikariConfig0.getConnectionTimeout();
      assertEquals(1169L, long2);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(1169L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("Zd6Uu,.C>T9A", hikariConfig0.getJdbcUrl());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1169L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertNotSame(properties0, properties1);
      assertTrue(properties0.equals((Object)properties1));
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
      
      int int3 = hikariConfig0.getAcquireIncrement();
      assertEquals(1, int3);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(1169L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("Zd6Uu,.C>T9A", hikariConfig0.getJdbcUrl());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1169L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertNotSame(properties0, properties1);
      assertTrue(properties0.equals((Object)properties1));
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      String string2 = hikariConfig0.getDataSourceClassName();
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(1169L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("Zd6Uu,.C>T9A", hikariConfig0.getJdbcUrl());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1169L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertNotSame(properties0, properties1);
      assertTrue(properties0.equals((Object)properties1));
      assertNull(string2);
      
      long long3 = hikariConfig0.getIdleTimeout();
      assertEquals(600000L, long3);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(1169L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("Zd6Uu,.C>T9A", hikariConfig0.getJdbcUrl());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1169L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertNotSame(properties0, properties1);
      assertTrue(properties0.equals((Object)properties1));
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      
      String string3 = hikariConfig0.getConnectionCustomizerClassName();
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(1169L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("Zd6Uu,.C>T9A", hikariConfig0.getJdbcUrl());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1169L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertNotSame(properties0, properties1);
      assertTrue(properties0.equals((Object)properties1));
      assertNull(string3);
      
      long long4 = (-2580L);
      // Undeclared exception!
      try { 
        hikariConfig0.setConnectionTimeout(long4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // connectionTimeout cannot be less than 100ms
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test108()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("q0F)o");
      String string0 = ")H)sE5O%\\S";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertTrue(boolean0);
      
      String string1 = "q0F)o";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.beans.IntrospectionException: Method not found: setJava.lang.String@0000000002
         //
         verifyException("com.zaxxer.hikari.util.PropertyBeanSetter", e);
      }
  }

  @Test(timeout = 11000)
  public void test109()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertNotNull(hikariDataSource0);
      
      String string0 = hikariDataSource0.getPoolName();
      assertEquals("HikariPool-0", string0);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertNotNull(string0);
      
      String string1 = hikariDataSource0.getJdbcUrl();
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertNull(string1);
      
      boolean boolean0 = true;
      hikariDataSource0.setAutoCommit(boolean0);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      
      Properties properties0 = null;
      hikariDataSource0.dataSourceProperties = properties0;
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      
      String string2 = ";r";
      IConnectionCustomizer iConnectionCustomizer0 = hikariDataSource0.getConnectionCustomizer();
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertNull(iConnectionCustomizer0);
      
      boolean boolean1 = true;
      hikariDataSource0.isRegisterMbeans = boolean1;
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      
      String string3 = hikariDataSource0.getJdbcUrl();
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertNull(string3);
      
      Class<Object> class0 = Object.class;
      boolean boolean2 = hikariDataSource0.isWrapperFor(class0);
      assertFalse(boolean2);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      long long0 = 0L;
      hikariDataSource0.connectionTimeout = long0;
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      
      boolean boolean3 = true;
      hikariDataSource0.setRegisterMbeans(boolean3);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(0L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(boolean3 == boolean2);
      
      boolean boolean4 = hikariDataSource0.isReadOnly();
      assertFalse(boolean4);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(0L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      
      long long1 = 0L;
      hikariDataSource0.setIdleTimeout(long1);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(0L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(0L, hikariDataSource0.idleTimeout);
      
      int int0 = hikariDataSource0.getMinimumPoolSize();
      assertEquals(10, int0);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(0L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(0L, hikariDataSource0.idleTimeout);
      
      long long2 = 8L;
      hikariDataSource0.setIdleTimeout(long2);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(8L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(8L, hikariDataSource0.idleTimeout);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(0L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      long long3 = hikariDataSource0.getConnectionTimeout();
      assertEquals(0L, long3);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(8L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(8L, hikariDataSource0.idleTimeout);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(0L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(long3 == long2);
      assertTrue(long3 == long1);
      assertTrue(long3 == long0);
  }

  @Test(timeout = 11000)
  public void test110()  throws Throwable  {
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertNotNull(hikariConfig0);
      
      int int0 = 319;
      hikariConfig0.minPoolSize = int0;
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(319, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = properties0.put(object0, hikariConfig0);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(319, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(319, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertNull(object1);
      
      int int1 = 135;
      String string0 = "";
      hikariConfig0.catalog = string0;
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(319, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("", hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      Object object3 = properties0.put(object2, hikariConfig0);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(319, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("", hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(319, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertNotSame(object2, object0);
      assertFalse(object2.equals((Object)object0));
      assertNull(object3);
      
      hikariConfig0.setAcquireIncrement(int1);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(135, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(319, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("", hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(135, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(319, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(int1 == int0);
      
      String string1 = "fatal error.  bug?";
      hikariConfig0.setCatalog(string1);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(135, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(319, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("fatal error.  bug?", hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(135, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(319, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertNotNull(object4);
      
      HikariConfig hikariConfig1 = (HikariConfig)properties0.put(object2, object4);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertEquals("fatal error.  bug?", hikariConfig1.getCatalog());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(135, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isReadOnly());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(319, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getJdbcUrl());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(750L, hikariConfig1.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertFalse(hikariConfig1.isReadOnly);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig1.isIsolateInternalQueries);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(135, hikariConfig1.acquireIncrement);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals(319, hikariConfig1.minPoolSize);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertNotSame(object2, object0);
      assertNotSame(object2, object4);
      assertNotSame(object4, object2);
      assertNotSame(object4, object0);
      assertSame(hikariConfig1, hikariConfig0);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object4));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertNotNull(hikariConfig1);
      
      hikariConfig1.setJdbc4ConnectionTest(hikariConfig0.isRegisterMbeans);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(135, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(319, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("fatal error.  bug?", hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("fatal error.  bug?", hikariConfig1.getCatalog());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(135, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isReadOnly());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(319, hikariConfig1.getMinimumPoolSize());
      assertFalse(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getJdbcUrl());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(135, hikariConfig0.acquireIncrement);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(319, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(750L, hikariConfig1.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertFalse(hikariConfig1.isReadOnly);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig1.isIsolateInternalQueries);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(135, hikariConfig1.acquireIncrement);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals(319, hikariConfig1.minPoolSize);
      assertFalse(hikariConfig1.isJdbc4connectionTest);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertSame(hikariConfig0, hikariConfig1);
      assertNotSame(object2, object0);
      assertNotSame(object2, object4);
      assertNotSame(object4, object2);
      assertNotSame(object4, object0);
      assertSame(hikariConfig1, hikariConfig0);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object4));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(135, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(319, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("fatal error.  bug?", hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(135, hikariConfig0.acquireIncrement);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(319, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertSame(hikariConfig0, hikariConfig1);
      assertNull(iConnectionCustomizer0);
      
      hikariConfig0.setAcquireRetries(int1);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(135, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(135, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(319, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("fatal error.  bug?", hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(135, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(135, hikariConfig0.acquireIncrement);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(319, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertSame(hikariConfig0, hikariConfig1);
      assertFalse(int1 == int0);
      
      String string2 = null;
      hikariConfig0.setJdbcUrl(string2);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(135, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(135, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(319, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("fatal error.  bug?", hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(135, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(135, hikariConfig0.acquireIncrement);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(319, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertSame(hikariConfig0, hikariConfig1);
      
      int int2 = hikariConfig0.getMinimumPoolSize();
      assertEquals(319, int2);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(135, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(135, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(319, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("fatal error.  bug?", hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(135, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(135, hikariConfig0.acquireIncrement);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(319, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertSame(hikariConfig0, hikariConfig1);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      long long0 = hikariConfig0.getIdleTimeout();
      assertEquals(600000L, long0);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(135, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(135, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(319, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("fatal error.  bug?", hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(135, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(135, hikariConfig0.acquireIncrement);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(319, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertSame(hikariConfig0, hikariConfig1);
      
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertNotNull(hikariDataSource0);
      
      hikariDataSource0.connectionCustomizerClassName = hikariConfig0.connectionInitSql;
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(135, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(135, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(319, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("fatal error.  bug?", hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      
      hikariConfig0.copyState(hikariDataSource0);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(135, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(135, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(319, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("fatal error.  bug?", hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(135, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("fatal error.  bug?", hikariDataSource0.getCatalog());
      assertEquals(135, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(319, hikariDataSource0.getMinimumPoolSize());
      assertEquals(135, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(135, hikariConfig0.acquireIncrement);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(319, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(135, hikariDataSource0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(319, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(135, hikariDataSource0.acquireRetries);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertSame(hikariConfig0, hikariConfig1);
      
      hikariDataSource0.setDataSourceProperties(hikariConfig0.dataSourceProperties);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(135, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(135, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(319, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("fatal error.  bug?", hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(135, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("fatal error.  bug?", hikariDataSource0.getCatalog());
      assertEquals(135, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(319, hikariDataSource0.getMinimumPoolSize());
      assertEquals(135, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(135, hikariConfig0.acquireIncrement);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(319, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(135, hikariDataSource0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(319, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(135, hikariDataSource0.acquireRetries);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertSame(hikariConfig0, hikariConfig1);
      
      String string3 = "";
      hikariConfig0.setAcquireRetryDelay(hikariDataSource0.ACQUIRE_RETRY_DELAY);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(135, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(135, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(319, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("fatal error.  bug?", hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(135, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("fatal error.  bug?", hikariDataSource0.getCatalog());
      assertEquals(135, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(319, hikariDataSource0.getMinimumPoolSize());
      assertEquals(135, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(135, hikariConfig0.acquireIncrement);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(319, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(135, hikariDataSource0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(319, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(135, hikariDataSource0.acquireRetries);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertSame(hikariConfig0, hikariConfig1);
      
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object0));
      assertNotNull(object5);
      
      hikariConfig0.addDataSourceProperty(string3, object5);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(135, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(135, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(319, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("fatal error.  bug?", hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(135, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(135, hikariConfig0.acquireIncrement);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(319, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertSame(hikariConfig0, hikariConfig1);
      assertNotSame(string3, string1);
      assertSame(string3, string0);
      assertNotSame(object5, object4);
      assertNotSame(object5, object2);
      assertNotSame(object5, object0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object0));
      
      boolean boolean0 = hikariConfig0.isJdbc4ConnectionTest();
      assertFalse(boolean0);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(135, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(135, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(319, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("fatal error.  bug?", hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(135, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(135, hikariConfig0.acquireIncrement);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(319, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertSame(hikariConfig0, hikariConfig1);
      
      hikariDataSource0.dataSourceClassName = string2;
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(135, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("fatal error.  bug?", hikariDataSource0.getCatalog());
      assertEquals(135, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(319, hikariDataSource0.getMinimumPoolSize());
      
      String string4 = hikariDataSource0.getCatalog();
      assertEquals("fatal error.  bug?", string4);
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(135, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("fatal error.  bug?", hikariDataSource0.getCatalog());
      assertEquals(135, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(319, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(135, hikariDataSource0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(319, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(135, hikariDataSource0.acquireRetries);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertSame(string4, string1);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      hikariDataSource0.setJdbcUrl(string1);
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(135, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("fatal error.  bug?", hikariDataSource0.getCatalog());
      assertEquals(135, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals("fatal error.  bug?", hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(319, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(135, hikariDataSource0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(319, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(135, hikariDataSource0.acquireRetries);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(string1, string4);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      
      DataSource dataSource0 = hikariConfig0.getDataSource();
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(135, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(135, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(319, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("fatal error.  bug?", hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(135, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(135, hikariConfig0.acquireIncrement);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(319, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertSame(hikariConfig0, hikariConfig1);
      assertNull(dataSource0);
      
      String string5 = hikariConfig1.getPoolName();
      assertEquals("HikariPool-0", string5);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertEquals("fatal error.  bug?", hikariConfig1.getCatalog());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(750L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(135, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isReadOnly());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(319, hikariConfig1.getMinimumPoolSize());
      assertFalse(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getJdbcUrl());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertEquals(135, hikariConfig1.getAcquireRetries());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(750L, hikariConfig1.acquireRetryDelay);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertFalse(hikariConfig1.isReadOnly);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig1.isIsolateInternalQueries);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(135, hikariConfig1.acquireIncrement);
      assertEquals(135, hikariConfig1.acquireRetries);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals(319, hikariConfig1.minPoolSize);
      assertFalse(hikariConfig1.isJdbc4connectionTest);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(object2, object0);
      assertNotSame(object2, object5);
      assertNotSame(object2, object4);
      assertNotSame(object4, object2);
      assertNotSame(object4, object0);
      assertNotSame(object4, object5);
      assertSame(hikariConfig1, hikariConfig0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object5));
      assertFalse(object2.equals((Object)object4));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object5));
      assertNotNull(string5);
      
      hikariConfig0.copyState(hikariDataSource0);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(135, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(135, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(319, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("fatal error.  bug?", hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(135, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("fatal error.  bug?", hikariDataSource0.getCatalog());
      assertEquals(135, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(319, hikariDataSource0.getMinimumPoolSize());
      assertEquals(135, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(135, hikariConfig0.acquireIncrement);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(319, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(135, hikariDataSource0.acquireIncrement);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(319, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(135, hikariDataSource0.acquireRetries);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertSame(hikariConfig0, hikariConfig1);
      
      boolean boolean1 = hikariConfig0.isRegisterMbeans();
      assertFalse(boolean1);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(135, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(135, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(319, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("fatal error.  bug?", hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(135, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(135, hikariConfig0.acquireIncrement);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(319, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isReadOnly);
      assertSame(hikariConfig0, hikariConfig1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test111()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "javassist.runtime.DotClass";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      HikariConfig hikariConfig0 = new HikariConfig();
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertNotNull(hikariConfig0);
      
      long long0 = 146L;
      hikariConfig0.maxLifetime = long0;
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(146L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = false;
      hikariConfig0.setDriverClassName(string0);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(146L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(146L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      
      hikariConfig0.setAutoCommit(boolean2);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(146L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(146L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      long long1 = 10L;
      hikariConfig0.connectionTimeout = long1;
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(146L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(10L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      long long2 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(750L, long2);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(146L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(10L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(146L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(10L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      int int0 = 100;
      hikariConfig0.setMinimumPoolSize(int0);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(146L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(10L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals(100, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(100, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(146L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(10L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      
      String string1 = "E/8)N^%~BsVfiDWw5";
      hikariConfig0.setCatalog(string1);
      assertEquals("E/8)N^%~BsVfiDWw5", hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(146L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(10L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals(100, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(100, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(146L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(10L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      long long3 = 1000L;
      hikariConfig0.setConnectionTimeout(long3);
      assertEquals("E/8)N^%~BsVfiDWw5", hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(146L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals(100, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(100, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(146L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1000L, hikariConfig0.connectionTimeout);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      
      int int1 = hikariConfig0.getAcquireIncrement();
      assertEquals(1, int1);
      assertEquals("E/8)N^%~BsVfiDWw5", hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(146L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals(100, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(100, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(146L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1000L, hikariConfig0.connectionTimeout);
      assertFalse(int1 == int0);
      
      String string2 = "g";
      hikariConfig0.connectionCustomizerClassName = string2;
      assertEquals("E/8)N^%~BsVfiDWw5", hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(146L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1000L, hikariConfig0.getConnectionTimeout());
      assertEquals("g", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals(100, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      int int2 = (-41);
      HikariConfig.MAX_LIFETIME = (long) hikariConfig0.poolNumber;
      assertEquals("E/8)N^%~BsVfiDWw5", hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(146L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1000L, hikariConfig0.getConnectionTimeout());
      assertEquals("g", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals(100, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      // Undeclared exception!
      try { 
        hikariConfig0.setMaximumPoolSize(int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test112()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertNotNull(hikariConfig0);
      
      hikariConfig0.setMaxLifetime(hikariConfig0.acquireIncrement);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      
      hikariConfig0.minPoolSize = hikariConfig0.transactionIsolation;
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getMinimumPoolSize());
      assertEquals(1L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      long long0 = 16L;
      hikariConfig0.connectionTimeout = (long) hikariConfig0.acquireRetries;
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getMinimumPoolSize());
      assertEquals(1L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      Object object0 = hikariConfig0.dataSourceProperties.put(hikariConfig0, hikariConfig0);
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getMinimumPoolSize());
      assertEquals(1L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(3L, hikariConfig0.connectionTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertNull(object0);
      
      String string0 = ":^ec6T8/n}R>]{[Ak";
      Properties properties0 = (Properties)hikariConfig0.dataSourceProperties.clone();
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getMinimumPoolSize());
      assertEquals(1L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(3L, hikariConfig0.connectionTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertNotNull(properties0);
      
      Collection<Object> collection0 = hikariConfig0.dataSourceProperties.values();
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getMinimumPoolSize());
      assertEquals(1L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(3L, hikariConfig0.connectionTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertNotNull(collection0);
      
      hikariConfig0.connectionTestQuery = string0;
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getMinimumPoolSize());
      assertEquals(1L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      hikariConfig0.setDataSourceProperties(hikariConfig0.dataSourceProperties);
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getMinimumPoolSize());
      assertEquals(1L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(3L, hikariConfig0.connectionTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      
      boolean boolean0 = false;
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getMinimumPoolSize());
      assertEquals(1L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(3L, hikariConfig0.connectionTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      
      long long1 = hikariConfig0.getConnectionTimeout();
      assertEquals(3L, long1);
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getMinimumPoolSize());
      assertEquals(1L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(3L, hikariConfig0.connectionTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(long1 == long0);
      
      int int0 = hikariConfig0.getAcquireRetries();
      assertEquals(3, int0);
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getMinimumPoolSize());
      assertEquals(1L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(3L, hikariConfig0.connectionTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      
      String string1 = "javassist.bytecode.SignatureAttribute$ClassType";
      hikariConfig0.setConnectionInitSql(string1);
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getMinimumPoolSize());
      assertEquals(1L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(3L, hikariConfig0.connectionTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "Yk";
      hikariConfig0.setConnectionTestQuery(string2);
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getMinimumPoolSize());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertEquals(1L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(3L, hikariConfig0.connectionTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      long long2 = hikariConfig0.getIdleTimeout();
      assertEquals(600000L, long2);
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getMinimumPoolSize());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertEquals(1L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(3L, hikariConfig0.connectionTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      String string3 = hikariConfig0.getConnectionTestQuery();
      assertEquals("Yk", string3);
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getMinimumPoolSize());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertEquals(1L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(3L, hikariConfig0.connectionTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      long long3 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(750L, long3);
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getMinimumPoolSize());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertEquals(1L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(3L, hikariConfig0.connectionTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      
      int int1 = new Integer(hikariConfig0.acquireRetries);
      assertEquals(3, int1);
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getMinimumPoolSize());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertEquals(1L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(3L, hikariConfig0.connectionTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(int1 == int0);
      
      int int2 = hikariConfig0.getMinimumPoolSize();
      assertEquals((-1), int2);
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getMinimumPoolSize());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertEquals(1L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(3L, hikariConfig0.connectionTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string4 = "";
      hikariConfig0.setDataSourceClassName(string4);
      assertNull(hikariConfig0.getCatalog());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getMinimumPoolSize());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertEquals(1L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(3L, hikariConfig0.connectionTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      hikariConfig0.validate();
      assertNull(hikariConfig0.getCatalog());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getMinimumPoolSize());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      
      String string5 = "";
      hikariConfig0.setConnectionCustomizerClassName(string5);
      assertNull(hikariConfig0.getCatalog());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getMinimumPoolSize());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertSame(string5, string4);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      
      DataSource dataSource0 = hikariConfig0.getDataSource();
      assertNull(hikariConfig0.getCatalog());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getMinimumPoolSize());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertNull(dataSource0);
      
      String string6 = hikariConfig0.getPoolName();
      assertEquals("HikariPool-0", string6);
      assertNull(hikariConfig0.getCatalog());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getMinimumPoolSize());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertNotSame(string6, string4);
      assertNotSame(string6, string5);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string3);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      boolean boolean1 = false;
      hikariConfig0.setUseInstrumentation(boolean1);
      assertNull(hikariConfig0.getCatalog());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getMinimumPoolSize());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
  }

  @Test(timeout = 11000)
  public void test113()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertNotNull(hikariConfig0);
      
      String string0 = null;
      hikariConfig0.setCatalog(string0);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      
      long long0 = 56L;
      hikariConfig0.setIdleTimeout(long0);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(56L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(56L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      
      int int0 = (-1170);
      hikariConfig0.acquireIncrement = int0;
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(56L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1170), hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-66);
      byteArray0[0] = byte0;
      byte byte1 = (byte)18;
      byteArray0[1] = byte1;
      byte byte2 = (byte)86;
      byteArray0[2] = byte2;
      byte byte3 = (byte)3;
      byteArray0[3] = byte3;
      long long1 = (-160L);
      hikariConfig0.setIdleTimeout(long1);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-160L), hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1170), hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-160L), hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1170), hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(long1 == long0);
      
      byte byte4 = (byte) (-85);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-93);
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-54);
      byteArray0[6] = byte6;
      byte byte7 = (byte)5;
      byteArray0[7] = byte7;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-66), (byte)18, (byte)86, (byte)3, (byte) (-85), (byte) (-93), (byte) (-54), (byte)5}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile(evoSuiteFile0, hikariConfig0.catalog);
      assertFalse(boolean1);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-160L), hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1170), hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-160L), hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1170), hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = false;
      hikariConfig0.isReadOnly = boolean2;
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-160L), hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1170), hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      
      long long2 = hikariConfig0.getIdleTimeout();
      assertEquals((-160L), long2);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-160L), hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1170), hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-160L), hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1170), hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      
      long long3 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(750L, long3);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-160L), hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1170), hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-160L), hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1170), hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      
      int int1 = hikariConfig0.getMaximumPoolSize();
      assertEquals(60, int1);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-160L), hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1170), hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-160L), hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1170), hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(int1 == int0);
      
      hikariConfig0.setIdleTimeout(long0);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(56L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1170), hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1170), hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(56L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long0 == long3);
      
      String string1 = hikariConfig0.getDataSourceClassName();
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(56L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1170), hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1170), hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(56L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertNull(string1);
      
      hikariConfig0.isIsolateInternalQueries = boolean2;
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(56L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1170), hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      
      long long4 = hikariConfig0.getMaxLifetime();
      assertEquals(1800000L, long4);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(56L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1170), hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1170), hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(56L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(long4 == long2);
      assertFalse(long4 == long0);
      assertFalse(long4 == long1);
      assertFalse(long4 == long3);
      
      String string2 = hikariConfig0.getPoolName();
      assertEquals("HikariPool-0", string2);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(56L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1170), hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1170), hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(56L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertNotNull(string2);
      
      Properties properties0 = hikariConfig0.getDataSourceProperties();
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(56L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1170), hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1170), hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(56L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertNotNull(properties0);
  }

  @Test(timeout = 11000)
  public void test114()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertNotNull(hikariConfig0);
      
      int int0 = (-3123);
      hikariConfig0.setMaxLifetime(int0);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      
      hikariConfig0.minPoolSize = int0;
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      
      hikariConfig0.connectionTimeout = (long) int0;
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      Object object0 = properties0.put(hikariConfig0, hikariConfig0);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertNull(object0);
      
      String string0 = ":^ec6T8/n}R>]{[Ak";
      hikariConfig0.setDataSourceClassName(string0);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      
      Properties properties1 = (Properties)properties0.clone();
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertEquals(1, properties1.size());
      assertFalse(properties1.isEmpty());
      assertNotSame(properties0, properties1);
      assertNotSame(properties1, properties0);
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      
      Collection<Object> collection0 = properties0.values();
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertNotSame(properties0, properties1);
      assertTrue(properties0.equals((Object)properties1));
      assertNotNull(collection0);
      
      hikariConfig0.connectionTestQuery = string0;
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      
      hikariConfig0.setDataSourceProperties(properties0);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertNotSame(properties0, properties1);
      assertTrue(properties0.equals((Object)properties1));
      
      boolean boolean0 = false;
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      
      long long0 = hikariConfig0.getConnectionTimeout();
      assertEquals((-3123L), long0);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      
      int int1 = hikariConfig0.getAcquireRetries();
      assertEquals(3, int1);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(int1 == int0);
      
      String string1 = "javassist.bytecode.SignatureAttribute$ClassType";
      hikariConfig0.setConnectionInitSql(string1);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      hikariConfig0.setConnectionCustomizerClassName(string1);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "Yk";
      hikariConfig0.setConnectionTestQuery(string2);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      long long1 = hikariConfig0.getIdleTimeout();
      assertEquals(600000L, long1);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(long1 == long0);
      
      String string3 = hikariConfig0.getConnectionTestQuery();
      assertEquals("Yk", string3);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int2 = hikariConfig0.getAcquireRetries();
      assertEquals(3, int2);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = hikariConfig0.getMinimumPoolSize();
      assertEquals((-3123), int3);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      
      String string4 = "";
      hikariConfig0.setDataSourceClassName(string4);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      hikariConfig0.setCatalog(string3);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("Yk", hikariConfig0.getCatalog());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // maxLifetime cannot be negative.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test115()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertNotNull(hikariConfig0);
      
      int int0 = (-3123);
      hikariConfig0.setMaxLifetime(int0);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      
      hikariConfig0.minPoolSize = int0;
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      long long0 = 16L;
      hikariConfig0.leakDetectionThreshold = long0;
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      hikariConfig0.connectionTimeout = (long) int0;
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      Object object0 = properties0.put(hikariConfig0, hikariConfig0);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertNull(object0);
      
      String string0 = ":^ec6T8/n}R>]{[Ak";
      hikariConfig0.setDataSourceClassName(string0);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      Properties properties1 = (Properties)properties0.clone();
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(properties1.isEmpty());
      assertEquals(1, properties1.size());
      assertNotSame(properties0, properties1);
      assertNotSame(properties1, properties0);
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      
      Collection<Object> collection0 = properties0.values();
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotSame(properties0, properties1);
      assertTrue(properties0.equals((Object)properties1));
      assertNotNull(collection0);
      
      hikariConfig0.connectionTestQuery = string0;
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      hikariConfig0.setDataSourceProperties(properties0);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertNotSame(properties0, properties1);
      assertTrue(properties0.equals((Object)properties1));
      
      hikariConfig0.setJdbc4ConnectionTest(hikariConfig0.isRegisterMbeans);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      long long1 = hikariConfig0.getConnectionTimeout();
      assertEquals((-3123L), long1);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(long1 == long0);
      
      int int1 = hikariConfig0.getAcquireRetries();
      assertEquals(3, int1);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(int1 == int0);
      
      String string1 = "javassist.bytecode.SignatureAttribute$ClassType";
      hikariConfig0.setConnectionInitSql(string1);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "Yk";
      hikariConfig0.setConnectionTestQuery(string2);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      long long2 = hikariConfig0.getIdleTimeout();
      assertEquals(600000L, long2);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      String string3 = hikariConfig0.getConnectionTestQuery();
      assertEquals("Yk", string3);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      long long3 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(750L, long3);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      
      int int2 = hikariConfig0.getAcquireRetries();
      assertEquals(3, int2);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = hikariConfig0.getMinimumPoolSize();
      assertEquals((-3123), int3);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      
      String string4 = "";
      hikariConfig0.setDataSourceClassName(string4);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      hikariConfig0.setCatalog(string3);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("Yk", hikariConfig0.getCatalog());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      
      String string5 = "";
      hikariConfig0.setConnectionCustomizerClassName(string5);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("Yk", hikariConfig0.getCatalog());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertNotSame(string5, string2);
      assertSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      
      int int4 = hikariConfig0.getMinimumPoolSize();
      assertEquals((-3123), int4);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("Yk", hikariConfig0.getCatalog());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      assertTrue(int4 == int0);
      
      Properties properties2 = hikariConfig0.getDataSourceProperties();
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("Yk", hikariConfig0.getCatalog());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(properties2.isEmpty());
      assertEquals(1, properties2.size());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertNotSame(properties2, properties0);
      assertNotSame(properties2, properties1);
      assertTrue(properties2.equals((Object)properties1));
      assertTrue(properties2.equals((Object)properties0));
      assertNotNull(properties2);
      
      DataSource dataSource0 = hikariConfig0.getDataSource();
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("Yk", hikariConfig0.getCatalog());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertNull(dataSource0);
      
      String string6 = hikariConfig0.getPoolName();
      assertEquals("HikariPool-0", string6);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("Yk", hikariConfig0.getCatalog());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertNotSame(string6, string3);
      assertNotSame(string6, string1);
      assertNotSame(string6, string4);
      assertNotSame(string6, string0);
      assertNotSame(string6, string5);
      assertNotSame(string6, string2);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      boolean boolean0 = false;
      hikariConfig0.setUseInstrumentation(boolean0);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("Yk", hikariConfig0.getCatalog());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
  }

  @Test(timeout = 11000)
  public void test116()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertNotNull(hikariDataSource0);
      
      String string0 = "D:w{-l*";
      EvoSuiteFile evoSuiteFile0 = null;
      String string1 = "F^#Y&ioWe:THH$R?";
      int int0 = 27;
      hikariDataSource0.setLoginTimeout(int0);
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(27, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      
      hikariDataSource0.jdbcUrl = string1;
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(27, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals("F^#Y&ioWe:THH$R?", hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      
      String string2 = "";
      boolean boolean0 = false;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = true;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, hikariDataSource0.isReadOnly, boolean0, boolean1);
      assertFalse(boolean2);
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(27, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals("F^#Y&ioWe:THH$R?", hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      hikariDataSource0.setDataSourceClassName(string2);
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(27, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals("F^#Y&ioWe:THH$R?", hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean3 = true;
      hikariDataSource0.setIsolateInternalQueries(boolean3);
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(27, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals("F^#Y&ioWe:THH$R?", hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      String string3 = "vbh+UqY8cI{t4/";
      String string4 = "";
      boolean boolean4 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string4);
      assertFalse(boolean4);
      assertSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      
      boolean boolean5 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string3);
      assertFalse(boolean5);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      hikariDataSource0.setConnectionCustomizerClassName(string0);
      assertEquals(27, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("D:w{-l*", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals("F^#Y&ioWe:THH$R?", hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      
      long long0 = hikariDataSource0.getAcquireRetryDelay();
      assertEquals(750L, long0);
      assertEquals(27, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("D:w{-l*", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals("F^#Y&ioWe:THH$R?", hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      
      int int1 = hikariDataSource0.getMinimumPoolSize();
      assertEquals(10, int1);
      assertEquals(27, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("D:w{-l*", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals("F^#Y&ioWe:THH$R?", hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(int1 == int0);
      
      int int2 = hikariDataSource0.getMinimumPoolSize();
      assertEquals(10, int2);
      assertEquals(27, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("D:w{-l*", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals("F^#Y&ioWe:THH$R?", hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      Properties properties0 = hikariDataSource0.getDataSourceProperties();
      assertEquals(27, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("D:w{-l*", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals("F^#Y&ioWe:THH$R?", hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertTrue(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertNotNull(properties0);
      
      String string5 = hikariDataSource0.getConnectionCustomizerClassName();
      assertEquals("D:w{-l*", string5);
      assertEquals(27, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("D:w{-l*", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals("F^#Y&ioWe:THH$R?", hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isReadOnly);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
  }

  @Test(timeout = 11000)
  public void test117()  throws Throwable  {
      String string0 = "'*e8Q?=W=YvK!@o `";
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertNotNull(hikariConfig0);
      
      int int0 = (-1322);
      boolean boolean0 = false;
      hikariConfig0.setJdbcUrl(hikariConfig0.connectionInitSql);
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      
      String string1 = "";
      hikariConfig0.setConnectionCustomizerClassName(string1);
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      hikariConfig0.acquireIncrement = int0;
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1322), hikariConfig0.getAcquireIncrement());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = true;
      hikariConfig0.setAutoCommit(boolean2);
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1322), hikariConfig0.getAcquireIncrement());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-1322), hikariConfig0.acquireIncrement);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      hikariConfig0.transactionIsolationName = string0;
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1322), hikariConfig0.getAcquireIncrement());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      
      int int1 = hikariConfig0.getAcquireIncrement();
      assertEquals((-1322), int1);
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1322), hikariConfig0.getAcquireIncrement());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-1322), hikariConfig0.acquireIncrement);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(int1 == int0);
      
      long long0 = 30L;
      // Undeclared exception!
      try { 
        hikariConfig0.setConnectionTimeout(long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // connectionTimeout cannot be less than 100ms
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test118()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertNotNull(hikariConfig0);
      
      int int0 = (-3123);
      hikariConfig0.setMaxLifetime(int0);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      
      hikariConfig0.minPoolSize = int0;
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      
      long long0 = 16L;
      hikariConfig0.leakDetectionThreshold = long0;
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      
      hikariConfig0.connectionTimeout = (long) int0;
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      Object object0 = properties0.put(hikariConfig0, hikariConfig0);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertNull(object0);
      
      String string0 = ":^ec6T8/n}R>]{[Ak";
      hikariConfig0.setDataSourceClassName(string0);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      
      Properties properties1 = (Properties)properties0.clone();
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(properties1.isEmpty());
      assertEquals(1, properties1.size());
      assertNotSame(properties0, properties1);
      assertNotSame(properties1, properties0);
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      
      Collection<Object> collection0 = properties0.values();
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotSame(properties0, properties1);
      assertTrue(properties0.equals((Object)properties1));
      assertNotNull(collection0);
      
      hikariConfig0.connectionTestQuery = string0;
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      
      hikariConfig0.setDataSourceProperties(properties0);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertNotSame(properties0, properties1);
      assertTrue(properties0.equals((Object)properties1));
      
      boolean boolean0 = false;
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      
      long long1 = hikariConfig0.getConnectionTimeout();
      assertEquals((-3123L), long1);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(long1 == long0);
      
      int int1 = hikariConfig0.getAcquireRetries();
      assertEquals(3, int1);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(int1 == int0);
      
      String string1 = "javassist.bytecode.SignatureAttribute$ClassType";
      hikariConfig0.setConnectionInitSql(string1);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "Yk";
      hikariConfig0.setConnectionTestQuery(string2);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      long long2 = hikariConfig0.getMaxLifetime();
      assertEquals((-3123L), long2);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      
      String string3 = hikariConfig0.getConnectionTestQuery();
      assertEquals("Yk", string3);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      long long3 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(750L, long3);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      
      int int2 = hikariConfig0.getAcquireRetries();
      assertEquals(3, int2);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = hikariConfig0.getMinimumPoolSize();
      assertEquals((-3123), int3);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      String string4 = "";
      hikariConfig0.setDataSourceClassName(string4);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      hikariConfig0.setCatalog(string3);
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(16L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("Yk", hikariConfig0.getCatalog());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-3123L), hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-3123L), hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(16L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertNotSame(string3, string4);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // maxLifetime cannot be negative.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test119()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertNotNull(hikariConfig0);
      
      boolean boolean0 = false;
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.connectionCustomizer;
      assertNull(iConnectionCustomizer0);
      
      String string0 = "k{}|CT=";
      hikariConfig0.dataSourceClassName = string0;
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("k{}|CT=", hikariConfig0.getDataSourceClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      
      EvoSuiteFile evoSuiteFile0 = null;
      int int0 = 482;
      hikariConfig0.transactionIsolation = int0;
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("k{}|CT=", hikariConfig0.getDataSourceClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(482, hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      hikariConfig0.connectionCustomizer = iConnectionCustomizer0;
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("k{}|CT=", hikariConfig0.getDataSourceClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(482, hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      
      hikariConfig0.setInitializationFailFast(boolean0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("k{}|CT=", hikariConfig0.getDataSourceClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(482, hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(482, hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(boolean0 == boolean1);
      
      Properties properties0 = hikariConfig0.getDataSourceProperties();
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("k{}|CT=", hikariConfig0.getDataSourceClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(482, hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(482, hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertNotNull(properties0);
      
      IConnectionCustomizer iConnectionCustomizer1 = hikariConfig0.getConnectionCustomizer();
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("k{}|CT=", hikariConfig0.getDataSourceClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(482, hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(482, hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertNull(iConnectionCustomizer1);
      
      Properties properties1 = hikariConfig0.getDataSourceProperties();
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("k{}|CT=", hikariConfig0.getDataSourceClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(482, hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(482, hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertSame(properties1, properties0);
      assertNotNull(properties1);
      
      long long0 = 189L;
      int int1 = 3;
      hikariConfig0.maxPoolSize = int1;
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("k{}|CT=", hikariConfig0.getDataSourceClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(3, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(482, hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      
      hikariConfig0.setConnectionTimeout(long0);
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("k{}|CT=", hikariConfig0.getDataSourceClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(3, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(482, hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(189L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(3, hikariConfig0.maxPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(482, hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(189L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      
      hikariConfig0.validate();
      assertEquals(10, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("k{}|CT=", hikariConfig0.getDataSourceClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(482, hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(189L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(482, hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(189L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      
      IConnectionCustomizer iConnectionCustomizer2 = hikariConfig0.getConnectionCustomizer();
      assertEquals(10, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("k{}|CT=", hikariConfig0.getDataSourceClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(482, hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(189L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(482, hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(189L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertNull(iConnectionCustomizer2);
      
      String string1 = hikariConfig0.getJdbcUrl();
      assertEquals(10, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("k{}|CT=", hikariConfig0.getDataSourceClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(482, hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(189L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(482, hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(189L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertNull(string1);
  }

  @Test(timeout = 11000)
  public void test120()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertNotNull(hikariDataSource0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "F^#Y&ioWe:THH$R?";
      int int0 = 27;
      hikariDataSource0.setLoginTimeout(int0);
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(27, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      
      hikariDataSource0.jdbcUrl = string0;
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(27, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("F^#Y&ioWe:THH$R?", hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      
      String string1 = "";
      boolean boolean0 = false;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = true;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)60;
      byteArray0[0] = byte0;
      byte byte1 = (byte)123;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-93);
      byteArray0[2] = byte2;
      byte byte3 = (byte)119;
      byteArray0[3] = byte3;
      byteArray0[4] = byte0;
      byte byte4 = (byte)43;
      byteArray0[5] = byte4;
      boolean boolean2 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean2);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)60, (byte)123, (byte) (-93), (byte)119, (byte)60, (byte)43}, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = FileSystemHandling.setPermissions(evoSuiteFile0, hikariDataSource0.isReadOnly, boolean0, boolean1);
      assertFalse(boolean3);
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(27, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("F^#Y&ioWe:THH$R?", hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      
      hikariDataSource0.setDataSourceClassName(string1);
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(27, hikariDataSource0.getLoginTimeout());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("F^#Y&ioWe:THH$R?", hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean4 = true;
      hikariDataSource0.setIsolateInternalQueries(boolean4);
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(27, hikariDataSource0.getLoginTimeout());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("F^#Y&ioWe:THH$R?", hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      
      String string2 = "vbh+UqY8cI{t4/";
      String string3 = "";
      boolean boolean5 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string3);
      assertFalse(boolean5);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      
      boolean boolean6 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string2);
      assertFalse(boolean6);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean0);
      
      hikariDataSource0.setConnectionCustomizerClassName(hikariDataSource0.poolName);
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(27, hikariDataSource0.getLoginTimeout());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("F^#Y&ioWe:THH$R?", hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      
      long long0 = hikariDataSource0.getAcquireRetryDelay();
      assertEquals(750L, long0);
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(27, hikariDataSource0.getLoginTimeout());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("F^#Y&ioWe:THH$R?", hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      
      int int1 = hikariDataSource0.getMinimumPoolSize();
      assertEquals(10, int1);
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(27, hikariDataSource0.getLoginTimeout());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("F^#Y&ioWe:THH$R?", hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertFalse(int1 == int0);
      
      int int2 = hikariDataSource0.getMinimumPoolSize();
      assertEquals(10, int2);
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(27, hikariDataSource0.getLoginTimeout());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("F^#Y&ioWe:THH$R?", hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      Properties properties0 = hikariDataSource0.getDataSourceProperties();
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(27, hikariDataSource0.getLoginTimeout());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("F^#Y&ioWe:THH$R?", hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertNotNull(properties0);
      
      String string4 = hikariDataSource0.getConnectionCustomizerClassName();
      assertEquals("HikariPool-0", string4);
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(27, hikariDataSource0.getLoginTimeout());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("F^#Y&ioWe:THH$R?", hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      int int3 = hikariDataSource0.getTransactionIsolation();
      assertEquals((-1), int3);
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(27, hikariDataSource0.getLoginTimeout());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("F^#Y&ioWe:THH$R?", hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      String string5 = hikariDataSource0.getDataSourceClassName();
      assertEquals("", string5);
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(27, hikariDataSource0.getLoginTimeout());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("F^#Y&ioWe:THH$R?", hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertNotSame(string5, string0);
      assertSame(string5, string1);
      assertNotSame(string5, string2);
      assertSame(string5, string3);
      assertNotSame(string5, string4);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = hikariDataSource0.getJdbcUrl();
      assertEquals("F^#Y&ioWe:THH$R?", string6);
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(27, hikariDataSource0.getLoginTimeout());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals("F^#Y&ioWe:THH$R?", hikariDataSource0.getJdbcUrl());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertNotSame(string6, string3);
      assertSame(string6, string0);
      assertNotSame(string6, string5);
      assertNotSame(string6, string2);
      assertNotSame(string6, string1);
      assertNotSame(string6, string4);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
  }

  @Test(timeout = 11000)
  public void test121()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertNotNull(hikariDataSource0);
      
      long long0 = (-1507L);
      hikariDataSource0.acquireRetryDelay = hikariDataSource0.leakDetectionThreshold;
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getJdbcUrl());
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource1.isIsolateInternalQueries);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource1.idleTimeout);
      assertEquals(1, hikariDataSource1.acquireIncrement);
      assertEquals(5000L, hikariDataSource1.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource1.isInitializationFailFast);
      assertEquals(60, hikariDataSource1.maxPoolSize);
      assertEquals(1800000L, hikariDataSource1.maxLifetime);
      assertEquals(10, hikariDataSource1.minPoolSize);
      assertFalse(hikariDataSource1.isReadOnly);
      assertTrue(hikariDataSource1.isAutoCommit);
      assertEquals((-1), hikariDataSource1.transactionIsolation);
      assertEquals(3, hikariDataSource1.acquireRetries);
      assertFalse(hikariDataSource1.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource1.acquireRetryDelay);
      assertEquals(0L, hikariDataSource1.leakDetectionThreshold);
      assertTrue(hikariDataSource1.isJdbc4connectionTest);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotNull(hikariDataSource1);
      
      long long1 = 30L;
      hikariDataSource1.setLeakDetectionThreshold(long1);
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertEquals(30L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource1.isIsolateInternalQueries);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource1.idleTimeout);
      assertEquals(1, hikariDataSource1.acquireIncrement);
      assertEquals(5000L, hikariDataSource1.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource1.isInitializationFailFast);
      assertEquals(60, hikariDataSource1.maxPoolSize);
      assertEquals(1800000L, hikariDataSource1.maxLifetime);
      assertEquals(10, hikariDataSource1.minPoolSize);
      assertFalse(hikariDataSource1.isReadOnly);
      assertTrue(hikariDataSource1.isAutoCommit);
      assertEquals((-1), hikariDataSource1.transactionIsolation);
      assertEquals(3, hikariDataSource1.acquireRetries);
      assertFalse(hikariDataSource1.isRegisterMbeans);
      assertEquals(30L, hikariDataSource1.leakDetectionThreshold);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource1.acquireRetryDelay);
      assertTrue(hikariDataSource1.isJdbc4connectionTest);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertFalse(long1 == long0);
      
      long long2 = 750L;
      HikariConfig.CONNECTION_TIMEOUT = long2;
      hikariDataSource0.setDataSource(hikariDataSource1);
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource1.isReadOnly());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertEquals(30L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariDataSource0.acquireRetryDelay);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(750L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(750L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource1.isIsolateInternalQueries);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource1.idleTimeout);
      assertEquals(1, hikariDataSource1.acquireIncrement);
      assertEquals(5000L, hikariDataSource1.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource1.isInitializationFailFast);
      assertEquals(60, hikariDataSource1.maxPoolSize);
      assertEquals(1800000L, hikariDataSource1.maxLifetime);
      assertEquals(10, hikariDataSource1.minPoolSize);
      assertFalse(hikariDataSource1.isReadOnly);
      assertTrue(hikariDataSource1.isAutoCommit);
      assertEquals((-1), hikariDataSource1.transactionIsolation);
      assertEquals(3, hikariDataSource1.acquireRetries);
      assertFalse(hikariDataSource1.isRegisterMbeans);
      assertEquals(30L, hikariDataSource1.leakDetectionThreshold);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource1.acquireRetryDelay);
      assertTrue(hikariDataSource1.isJdbc4connectionTest);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      
      String string0 = "L1";
      boolean boolean0 = hikariDataSource0.isJdbc4ConnectionTest();
      assertTrue(boolean0);
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariDataSource0.acquireRetryDelay);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(750L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("HikariPool-2", hikariConfig0.getPoolName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(750L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(3, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.connectionTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertNotNull(hikariConfig0);
      
      Object object0 = properties0.put(hikariConfig0, hikariDataSource0);
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("HikariPool-2", hikariConfig0.getPoolName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariDataSource0.acquireRetryDelay);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(750L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(3, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(750L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(3, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.connectionTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNull(object0);
      
      long long3 = 169L;
      String string1 = "s\"y@oZX+";
      Object object1 = properties0.getOrDefault(hikariDataSource0, string0);
      assertEquals("L1", object1);
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariDataSource0.acquireRetryDelay);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(750L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(3, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertSame(object1, string0);
      assertNotSame(object1, string1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(string0, string1);
      assertSame(string0, object1);
      assertFalse(object1.equals((Object)string1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(object1);
      
      hikariDataSource0.connectionInitSql = string1;
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals("s\"y@oZX+", hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getJdbcUrl());
      
      hikariDataSource0.setDataSourceProperties(properties0);
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals("s\"y@oZX+", hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariDataSource0.acquireRetryDelay);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(750L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(3, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      
      int int0 = hikariDataSource0.getTransactionIsolation();
      assertEquals((-1), int0);
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals("s\"y@oZX+", hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariDataSource0.acquireRetryDelay);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(750L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(3, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      
      boolean boolean1 = false;
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)2;
      byteArray0[0] = byte0;
      byte byte1 = (byte)28;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-66);
      byteArray0[2] = byte2;
      boolean boolean2 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean2);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)28, (byte) (-66)}, byteArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      hikariDataSource0.setReadOnly(boolean1);
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals("s\"y@oZX+", hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariDataSource0.acquireRetryDelay);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(750L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(3, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1 == boolean2);
      
      String string2 = hikariDataSource0.getConnectionInitSql();
      assertEquals("s\"y@oZX+", string2);
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals("s\"y@oZX+", hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariDataSource0.acquireRetryDelay);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(750L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(3, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(string2, object1);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(string2.equals((Object)object1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int1 = hikariDataSource0.getTransactionIsolation();
      assertEquals((-1), int1);
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals("s\"y@oZX+", hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariDataSource0.acquireRetryDelay);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(750L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(3, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertTrue(int1 == int0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      
      String string3 = "connectionCustomizationClass specified class '";
      hikariConfig0.dataSourceClassName = string3;
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("connectionCustomizationClass specified class '", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("HikariPool-2", hikariConfig0.getPoolName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      
      hikariDataSource0.validate();
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals("s\"y@oZX+", hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(750L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(3, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      
      int int2 = hikariConfig0.getMaximumPoolSize();
      assertEquals(60, int2);
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("connectionCustomizationClass specified class '", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("HikariPool-2", hikariConfig0.getPoolName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(750L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(3, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.connectionTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      hikariDataSource0.setReadOnly(boolean1);
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals("s\"y@oZX+", hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isReadOnly());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(750L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(3, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1 == boolean2);
      
      String string4 = null;
      // Undeclared exception!
      try { 
        hikariDataSource0.setDriverClassName(string4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // driverClassName specified class 'null' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test122()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertNotNull(hikariConfig0);
      
      int int0 = 2;
      hikariConfig0.maxPoolSize = int0;
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(2, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      
      int int1 = 10;
      boolean boolean0 = true;
      hikariConfig0.setRegisterMbeans(boolean0);
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(2, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(2, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      
      hikariConfig0.transactionIsolation = int1;
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(2, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      
      int int2 = hikariConfig0.getTransactionIsolation();
      assertEquals(10, int2);
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(2, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(2, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = hikariConfig0.getMaximumPoolSize();
      assertEquals(2, int3);
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(2, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(2, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
  }

  @Test(timeout = 11000)
  public void test123()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertNotNull(hikariConfig0);
      
      String string0 = null;
      long long0 = 2908L;
      boolean boolean0 = true;
      hikariConfig0.isJdbc4connectionTest = boolean0;
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      
      hikariConfig0.setAcquireRetryDelay(long0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(2908L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(2908L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      
      hikariConfig0.setIdleTimeout(long0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(2908L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(2908L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(2908L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(2908L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      
      String string1 = "";
      hikariConfig0.setInitializationFailFast(boolean0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(2908L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(2908L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(2908L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(2908L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      
      hikariConfig0.connectionCustomizerClassName = string1;
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(2908L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(2908L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isInitializationFailFast());
      
      hikariConfig0.connectionInitSql = string0;
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(2908L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(2908L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isInitializationFailFast());
      
      hikariConfig0.idleTimeout = long0;
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(2908L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(2908L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isInitializationFailFast());
      
      long long1 = (-3101L);
      hikariConfig0.setLeakDetectionThreshold(long1);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals((-3101L), hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(2908L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(2908L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals((-3101L), hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(2908L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(2908L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(long1 == long0);
      
      int int0 = 406;
      hikariConfig0.transactionIsolation = int0;
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(406, hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-3101L), hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(2908L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(2908L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isInitializationFailFast());
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(406, hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-3101L), hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(2908L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(2908L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals((-3101L), hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(2908L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(406, hikariConfig0.transactionIsolation);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(2908L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertNull(iConnectionCustomizer0);
      
      int int1 = hikariConfig0.getMaximumPoolSize();
      assertEquals(60, int1);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(406, hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-3101L), hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(2908L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(2908L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals((-3101L), hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(2908L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(406, hikariConfig0.transactionIsolation);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(2908L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(int1 == int0);
      
      String string2 = "";
      hikariConfig0.setCatalog(string2);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(406, hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("", hikariConfig0.getCatalog());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-3101L), hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(2908L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(2908L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals((-3101L), hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(2908L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(406, hikariConfig0.transactionIsolation);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(2908L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertSame(string2, string1);
      
      long long2 = 10000L;
      hikariConfig0.setMaxLifetime(long2);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(406, hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("", hikariConfig0.getCatalog());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-3101L), hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(2908L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(2908L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals((-3101L), hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(2908L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(10000L, hikariConfig0.maxLifetime);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(406, hikariConfig0.transactionIsolation);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(2908L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      int int2 = hikariConfig0.getAcquireRetries();
      assertEquals(3, int2);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(406, hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("", hikariConfig0.getCatalog());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-3101L), hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(2908L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(2908L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals((-3101L), hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(2908L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(10000L, hikariConfig0.maxLifetime);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(406, hikariConfig0.transactionIsolation);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(2908L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      long long3 = hikariConfig0.getLeakDetectionThreshold();
      assertEquals((-3101L), long3);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(406, hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("", hikariConfig0.getCatalog());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-3101L), hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(2908L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(2908L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals((-3101L), hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(2908L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(10000L, hikariConfig0.maxLifetime);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(406, hikariConfig0.transactionIsolation);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(2908L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(long3 == long2);
      assertTrue(long3 == long1);
      assertFalse(long3 == long0);
      
      IConnectionCustomizer iConnectionCustomizer1 = hikariConfig0.getConnectionCustomizer();
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(406, hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("", hikariConfig0.getCatalog());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-3101L), hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(2908L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(2908L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals((-3101L), hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(2908L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(10000L, hikariConfig0.maxLifetime);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(406, hikariConfig0.transactionIsolation);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(2908L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertNull(iConnectionCustomizer1);
  }

  @Test(timeout = 11000)
  public void test124()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertNotNull(hikariConfig0);
      
      boolean boolean0 = true;
      hikariConfig0.isInitializationFailFast = boolean0;
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      boolean boolean1 = hikariConfig0.isInitializationFailFast();
      assertTrue(boolean1);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(boolean1 == boolean0);
      
      long long0 = 0L;
      String string0 = "";
      hikariConfig0.transactionIsolationName = string0;
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      hikariConfig0.leakDetectionThreshold = long0;
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      String string1 = "%=#G";
      hikariConfig0.dataSourceClassName = string1;
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals("%=#G", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      boolean boolean2 = true;
      int int0 = 4929;
      hikariConfig0.transactionIsolation = int0;
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(4929, hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals("%=#G", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      hikariConfig0.setReadOnly(boolean2);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(4929, hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals("%=#G", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(4929, hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isReadOnly);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid transaction isolation value: 
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test125()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertNotNull(hikariConfig0);
      
      boolean boolean0 = false;
      int int0 = 3869;
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = null;
      boolean boolean1 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      hikariConfig0.maxPoolSize = int0;
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3869, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      
      hikariConfig0.isJdbc4connectionTest = boolean0;
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3869, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      
      String string1 = "acquireRetries cannot be less than 1";
      hikariConfig0.setDataSourceClassName(string1);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3869, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("acquireRetries cannot be less than 1", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(3869, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      
      Properties properties0 = hikariConfig0.getDataSourceProperties();
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3869, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("acquireRetries cannot be less than 1", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(3869, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertNotNull(properties0);
      
      hikariConfig0.maxLifetime = (long) int0;
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3869L, hikariConfig0.getMaxLifetime());
      assertEquals(3869, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("acquireRetries cannot be less than 1", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      
      int int1 = hikariConfig0.getTransactionIsolation();
      assertEquals((-1), int1);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3869L, hikariConfig0.getMaxLifetime());
      assertEquals(3869, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("acquireRetries cannot be less than 1", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3869, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3869L, hikariConfig0.maxLifetime);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Either jdbc4ConnectionTest must be enabled or a connectionTestQuery must be specified.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test126()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertNotNull(hikariConfig0);
      
      String string0 = "";
      Integer integer0 = new Integer(hikariConfig0.acquireRetries);
      assertEquals(3, (int)integer0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertNotNull(integer0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      hikariConfig0.addDataSourceProperty(string0, integer0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertNull(iConnectionCustomizer0);
      
      hikariConfig0.jdbcUrl = string0;
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("", hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      
      int int0 = hikariConfig0.getAcquireRetries();
      assertEquals(3, int0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("", hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      DataSource dataSource0 = hikariConfig0.getDataSource();
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("", hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertNull(dataSource0);
      
      hikariConfig0.dataSource = dataSource0;
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("", hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean1, hikariConfig0.isJdbc4connectionTest);
      assertFalse(boolean2);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("", hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      long long0 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(750L, long0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("", hikariConfig0.getJdbcUrl());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      hikariConfig0.transactionIsolation = int0;
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("", hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      
      int int1 = hikariConfig0.getMaximumPoolSize();
      assertEquals(60, int1);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("", hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(int1 == int0);
      
      String string1 = hikariConfig0.getPoolName();
      assertEquals("HikariPool-0", string1);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("", hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = hikariConfig0.getJdbcUrl();
      assertEquals("", string2);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("", hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      hikariConfig0.acquireRetries = int1;
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("", hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      
      int int2 = hikariConfig0.getMinimumPoolSize();
      assertEquals(10, int2);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("", hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      int int3 = hikariConfig0.getMinimumPoolSize();
      assertEquals(10, int3);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("", hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      
      int int4 = hikariConfig0.getAcquireIncrement();
      assertEquals(1, int4);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("", hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      
      int int5 = hikariConfig0.getMaximumPoolSize();
      assertEquals(60, int5);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("", hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      
      String string3 = hikariConfig0.getConnectionCustomizerClassName();
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("", hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertNull(string3);
      
      int int6 = hikariConfig0.getTransactionIsolation();
      assertEquals(3, int6);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("", hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(int6 == int0);
      assertFalse(int6 == int3);
      assertFalse(int6 == int4);
      assertFalse(int6 == int1);
      assertFalse(int6 == int2);
      assertFalse(int6 == int5);
      
      int int7 = hikariConfig0.getMinimumPoolSize();
      assertEquals(10, int7);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("", hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(int7 == int2);
      assertTrue(int7 == int3);
      assertFalse(int7 == int6);
      assertFalse(int7 == int4);
      assertFalse(int7 == int1);
      assertFalse(int7 == int5);
      assertFalse(int7 == int0);
      
      IConnectionCustomizer iConnectionCustomizer1 = hikariConfig0.getConnectionCustomizer();
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("", hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertNull(iConnectionCustomizer1);
      
      int int8 = hikariConfig0.getMinimumPoolSize();
      assertEquals(10, int8);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("", hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(int8 == int1);
      assertFalse(int8 == int4);
      assertFalse(int8 == int5);
      assertTrue(int8 == int2);
      assertFalse(int8 == int6);
      assertFalse(int8 == int0);
      assertTrue(int8 == int3);
      assertTrue(int8 == int7);
      
      int int9 = hikariConfig0.getAcquireRetries();
      assertEquals(60, int9);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("", hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(int9 == int1);
      assertFalse(int9 == int0);
      assertFalse(int9 == int3);
      assertFalse(int9 == int4);
      assertFalse(int9 == int7);
      assertFalse(int9 == int2);
      assertFalse(int9 == int6);
      assertTrue(int9 == int5);
      assertFalse(int9 == int8);
      
      int int10 = hikariConfig0.getMinimumPoolSize();
      assertEquals(10, int10);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals("", hikariConfig0.getJdbcUrl());
      assertEquals(3, hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(int10 == int4);
      assertTrue(int10 == int8);
      assertFalse(int10 == int1);
      assertFalse(int10 == int9);
      assertFalse(int10 == int5);
      assertFalse(int10 == int0);
      assertTrue(int10 == int2);
      assertTrue(int10 == int3);
      assertTrue(int10 == int7);
      assertFalse(int10 == int6);
      
      HikariConfig hikariConfig1 = null;
      try {
        hikariConfig1 = new HikariConfig(hikariConfig0.connectionCustomizerClassName);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 11000)
  public void test127()  throws Throwable  {
      Properties properties0 = null;
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertNotNull(hikariConfig0);
      
      String string0 = "-Tz]'72UN;U$Oh7[";
      hikariConfig0.setTransactionIsolation(string0);
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      
      int int0 = hikariConfig0.getMaximumPoolSize();
      assertEquals(60, int0);
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      
      long long0 = 1853L;
      String string1 = null;
      hikariConfig0.setPoolName(string1);
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      
      hikariConfig0.maxLifetime = long0;
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1853L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      
      int int1 = hikariConfig0.getMaximumPoolSize();
      assertEquals(60, int1);
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1853L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1853L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(int1 == int0);
      
      long long1 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(750L, long1);
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1853L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1853L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(long1 == long0);
      
      Properties properties1 = hikariConfig0.getDataSourceProperties();
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1853L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1853L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertNotNull(properties1);
      
      DataSource dataSource0 = hikariConfig0.dataSource;
      assertNull(dataSource0);
      
      hikariConfig0.setDataSource(dataSource0);
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1853L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1853L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      
      Properties properties2 = hikariConfig0.getDataSourceProperties();
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1853L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(properties2.isEmpty());
      assertEquals(0, properties2.size());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1853L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertSame(properties2, properties1);
      assertNotNull(properties2);
      
      boolean boolean0 = false;
      hikariConfig0.isJdbc4connectionTest = boolean0;
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1853L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      
      int int2 = hikariConfig0.getMaximumPoolSize();
      assertEquals(60, int2);
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1853L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1853L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = hikariConfig0.getMaximumPoolSize();
      assertEquals(60, int3);
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1853L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1853L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      
      String string2 = hikariConfig0.getPoolName();
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1853L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1853L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertNull(string2);
      
      int int4 = hikariConfig0.getMinimumPoolSize();
      assertEquals(10, int4);
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1853L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1853L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      
      long long2 = hikariConfig0.getMaxLifetime();
      assertEquals(1853L, long2);
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1853L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1853L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
      
      long long3 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(750L, long3);
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1853L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1853L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(long3 == long0);
      assertTrue(long3 == long1);
      assertFalse(long3 == long2);
      
      String string3 = hikariConfig0.getPoolName();
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1853L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1853L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertNull(string3);
      
      long long4 = hikariConfig0.getMaxLifetime();
      assertEquals(1853L, long4);
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1853L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1853L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(long4 == long3);
      assertFalse(long4 == long1);
      assertTrue(long4 == long0);
      assertTrue(long4 == long2);
      
      int int5 = hikariConfig0.getAcquireRetries();
      assertEquals(3, int5);
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1853L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1853L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      
      int int6 = hikariConfig0.getTransactionIsolation();
      assertEquals((-1), int6);
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1853L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1853L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(int6 == int1);
      assertFalse(int6 == int5);
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertFalse(int6 == int3);
      assertFalse(int6 == int4);
      
      String string4 = hikariConfig0.getPoolName();
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1853L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1853L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertNull(string4);
  }

  @Test(timeout = 11000)
  public void test128()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertNotNull(hikariConfig0);
      
      int int0 = (-3123);
      hikariConfig0.setMaxLifetime(int0);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      
      hikariConfig0.minPoolSize = int0;
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      
      long long0 = 16L;
      hikariConfig0.leakDetectionThreshold = hikariConfig0.CONNECTION_TIMEOUT;
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      
      hikariConfig0.acquireRetryDelay = (long) int0;
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-3123L), hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      Object object0 = properties0.put(hikariConfig0, hikariConfig0);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-3123L), hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-3123L), hikariConfig0.acquireRetryDelay);
      assertNull(object0);
      
      String string0 = ":^ec6T8/n}R>]{[Ak";
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)3;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-55);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-25);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-10);
      byteArray0[3] = byte3;
      byte byte4 = (byte)56;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-27);
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-98);
      byteArray0[6] = byte6;
      byte byte7 = (byte)50;
      byteArray0[7] = byte7;
      byte byte8 = (byte)17;
      byteArray0[8] = byte8;
      int int1 = (-2146817554);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, byteArray0[7], int1);
      assertEquals(9, byteArray0.length);
      assertEquals((-2146817554), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)3, (byte) (-55), (byte) (-25), (byte) (-10), (byte)56, (byte) (-27), (byte) (-98), (byte)50, (byte)17}, byteArray0);
      assertFalse(int1 == int0);
      assertNotNull(byteArrayInputStream0);
      
      HikariConfig hikariConfig1 = (HikariConfig)properties0.put(hikariConfig0, byteArrayInputStream0);
      assertEquals(9, byteArray0.length);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-3123L), hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals((-2146817554), byteArrayInputStream0.available());
      assertNull(hikariConfig1.getCatalog());
      assertEquals((-3123), hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig1.getLeakDetectionThreshold());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals((-3123L), hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(1, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getJdbcUrl());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals((-3123L), hikariConfig1.getMaxLifetime());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertFalse(hikariConfig1.isIsolateInternalQueries());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isReadOnly());
      assertArrayEquals(new byte[] {(byte)3, (byte) (-55), (byte) (-25), (byte) (-10), (byte)56, (byte) (-27), (byte) (-98), (byte)50, (byte)17}, byteArray0);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-3123L), hikariConfig0.acquireRetryDelay);
      assertEquals((-3123L), hikariConfig1.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-3123), hikariConfig1.minPoolSize);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(hikariConfig1.isReadOnly);
      assertEquals(1, hikariConfig1.acquireIncrement);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isIsolateInternalQueries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-3123L), hikariConfig1.acquireRetryDelay);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(5000L, hikariConfig1.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertSame(hikariConfig0, hikariConfig1);
      assertSame(hikariConfig1, hikariConfig0);
      assertFalse(int1 == int0);
      assertNotNull(hikariConfig1);
      
      hikariConfig0.setDataSourceClassName(string0);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-3123L), hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-3123L), hikariConfig0.acquireRetryDelay);
      assertSame(hikariConfig0, hikariConfig1);
      
      Properties properties1 = (Properties)hikariConfig0.dataSourceProperties.clone();
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-3123L), hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-3123L), hikariConfig0.acquireRetryDelay);
      assertSame(hikariConfig0, hikariConfig1);
      assertNotSame(properties1, properties0);
      assertFalse(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      
      Collection<Object> collection0 = properties0.values();
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotSame(properties0, properties1);
      assertFalse(properties0.equals((Object)properties1));
      assertNotNull(collection0);
      
      hikariConfig0.connectionTestQuery = string0;
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertEquals((-3123L), hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      
      hikariConfig0.setDataSourceProperties(properties0);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertEquals((-3123L), hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-3123L), hikariConfig0.acquireRetryDelay);
      assertSame(hikariConfig0, hikariConfig1);
      assertNotSame(properties0, properties1);
      assertFalse(properties0.equals((Object)properties1));
      
      boolean boolean0 = false;
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertEquals((-3123L), hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals((-3123L), hikariConfig0.acquireRetryDelay);
      assertSame(hikariConfig0, hikariConfig1);
      
      long long1 = hikariConfig0.getConnectionTimeout();
      assertEquals(5000L, long1);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertEquals((-3123L), hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals((-3123L), hikariConfig0.acquireRetryDelay);
      assertSame(hikariConfig0, hikariConfig1);
      assertFalse(long1 == long0);
      
      int int2 = hikariConfig0.getAcquireRetries();
      assertEquals(3, int2);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertEquals((-3123L), hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals((-3123L), hikariConfig0.acquireRetryDelay);
      assertSame(hikariConfig0, hikariConfig1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string1 = "javassist.bytecode.SignatureAttribute$ClassType";
      hikariConfig0.setConnectionInitSql(string1);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getConnectionTestQuery());
      assertEquals((-3123L), hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals((-3123L), hikariConfig0.acquireRetryDelay);
      assertSame(hikariConfig0, hikariConfig1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "Yk";
      hikariConfig0.setConnectionTestQuery(string2);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals((-3123L), hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals((-3123L), hikariConfig0.acquireRetryDelay);
      assertSame(hikariConfig0, hikariConfig1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      long long2 = hikariConfig0.getIdleTimeout();
      assertEquals(600000L, long2);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals((-3123L), hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals((-3123L), hikariConfig0.acquireRetryDelay);
      assertSame(hikariConfig0, hikariConfig1);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      String string3 = hikariConfig0.getConnectionTestQuery();
      assertEquals("Yk", string3);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals((-3123L), hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals((-3123L), hikariConfig0.acquireRetryDelay);
      assertSame(hikariConfig0, hikariConfig1);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      long long3 = hikariConfig0.getAcquireRetryDelay();
      assertEquals((-3123L), long3);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals((-3123L), hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals((-3123L), hikariConfig0.acquireRetryDelay);
      assertSame(hikariConfig0, hikariConfig1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      
      int int3 = hikariConfig0.getAcquireRetries();
      assertEquals(3, int3);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals((-3123L), hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals((-3123L), hikariConfig0.acquireRetryDelay);
      assertSame(hikariConfig0, hikariConfig1);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      
      int int4 = hikariConfig0.getMinimumPoolSize();
      assertEquals((-3123), int4);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariConfig0.getDataSourceClassName());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals((-3123L), hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals((-3123L), hikariConfig0.acquireRetryDelay);
      assertSame(hikariConfig0, hikariConfig1);
      assertTrue(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      
      String string4 = "";
      hikariConfig0.setDataSourceClassName(string4);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals((-3123L), hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals((-3123L), hikariConfig0.acquireRetryDelay);
      assertSame(hikariConfig0, hikariConfig1);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      hikariConfig0.setCatalog(string3);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-3123), hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("Yk", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("Yk", hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("javassist.bytecode.SignatureAttribute$ClassType", hikariConfig0.getConnectionInitSql());
      assertEquals((-3123L), hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-3123L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-3123L), hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-3123), hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals((-3123L), hikariConfig0.acquireRetryDelay);
      assertSame(hikariConfig0, hikariConfig1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // acquireRetryDelay cannot be negative.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test129()  throws Throwable  {
      String string0 = "'*e8Q?=W=YvK!@o `";
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertNotNull(hikariConfig0);
      
      int int0 = (-1322);
      boolean boolean0 = false;
      String string1 = "maxPoolSize is less than minPoolSize, forcing them equal.";
      hikariConfig0.setJdbcUrl(string1);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = 0;
      hikariConfig0.setAcquireRetries(int1);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0, hikariConfig0.acquireRetries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(int1 == int0);
      
      String string2 = "";
      hikariConfig0.setConnectionCustomizerClassName(string2);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0, hikariConfig0.acquireRetries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      hikariConfig0.setRegisterMbeans(boolean0);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0, hikariConfig0.acquireRetries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      
      String string3 = "duplicate method: ";
      hikariConfig0.connectionTestQuery = string3;
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("duplicate method: ", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      hikariConfig0.acquireIncrement = int0;
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1322), hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("duplicate method: ", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      
      hikariConfig0.setConnectionTimeout(int1);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(2147483647L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1322), hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("duplicate method: ", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1322), hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2147483647L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(int1 == int0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      int int2 = hikariConfig0.getMinimumPoolSize();
      assertEquals(10, int2);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(2147483647L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1322), hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("duplicate method: ", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1322), hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2147483647L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to get driver for JDBC URL maxPoolSize is less than minPoolSize, forcing them equal.
         //
         verifyException("com.zaxxer.hikari.util.DriverDataSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test130()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      EvoSuiteFile evoSuiteFile1 = null;
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      assertFalse(boolean1);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean1 == boolean0);
      
      Properties properties0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertNotNull(hikariConfig0);
      
      int int0 = (-1234);
      hikariConfig0.acquireRetries = int0;
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-1234), hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string1 = "F_4o";
      boolean boolean3 = FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      assertFalse(boolean3);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      hikariConfig0.connectionInitSql = string1;
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("F_4o", hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-1234), hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      
      long long0 = hikariConfig0.getMaxLifetime();
      assertEquals(1800000L, long0);
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("F_4o", hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-1234), hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1234), hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      
      String string2 = "javassist.bytecode.ExceptionTableEntry";
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.connectionCustomizer;
      assertNull(iConnectionCustomizer0);
      
      hikariConfig0.connectionCustomizer = iConnectionCustomizer0;
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("F_4o", hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-1234), hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      
      hikariConfig0.setReadOnly(boolean1);
      assertEquals(0, byteArray0.length);
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("F_4o", hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-1234), hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1234), hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(boolean1 == boolean3);
      assertFalse(boolean1 == boolean2);
      assertTrue(boolean1 == boolean0);
      
      hikariConfig0.connectionCustomizerClassName = string2;
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("F_4o", hikariConfig0.getConnectionInitSql());
      assertEquals("javassist.bytecode.ExceptionTableEntry", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-1234), hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      
      IConnectionCustomizer iConnectionCustomizer1 = hikariConfig0.getConnectionCustomizer();
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("F_4o", hikariConfig0.getConnectionInitSql());
      assertEquals("javassist.bytecode.ExceptionTableEntry", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-1234), hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1234), hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertNull(iConnectionCustomizer1);
      
      int int1 = hikariConfig0.getMaximumPoolSize();
      assertEquals(60, int1);
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("F_4o", hikariConfig0.getConnectionInitSql());
      assertEquals("javassist.bytecode.ExceptionTableEntry", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-1234), hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1234), hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(int1 == int0);
      
      String string3 = hikariConfig0.getPoolName();
      assertEquals("HikariPool-0", string3);
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("F_4o", hikariConfig0.getConnectionInitSql());
      assertEquals("javassist.bytecode.ExceptionTableEntry", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-1234), hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1234), hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int2 = hikariConfig0.getAcquireRetries();
      assertEquals((-1234), int2);
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("F_4o", hikariConfig0.getConnectionInitSql());
      assertEquals("javassist.bytecode.ExceptionTableEntry", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-1234), hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1234), hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      long long1 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(750L, long1);
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("F_4o", hikariConfig0.getConnectionInitSql());
      assertEquals("javassist.bytecode.ExceptionTableEntry", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-1234), hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1234), hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(long1 == long0);
      
      IConnectionCustomizer iConnectionCustomizer2 = hikariConfig0.getConnectionCustomizer();
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("F_4o", hikariConfig0.getConnectionInitSql());
      assertEquals("javassist.bytecode.ExceptionTableEntry", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-1234), hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1234), hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertNull(iConnectionCustomizer2);
      
      EvoSuiteFile evoSuiteFile2 = null;
      String string4 = null;
      boolean boolean4 = FileSystemHandling.appendLineToFile(evoSuiteFile2, string4);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      
      IConnectionCustomizer iConnectionCustomizer3 = hikariConfig0.getConnectionCustomizer();
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("F_4o", hikariConfig0.getConnectionInitSql());
      assertEquals("javassist.bytecode.ExceptionTableEntry", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-1234), hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1234), hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertNull(iConnectionCustomizer3);
      
      Properties properties1 = hikariConfig0.getDataSourceProperties();
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("F_4o", hikariConfig0.getConnectionInitSql());
      assertEquals("javassist.bytecode.ExceptionTableEntry", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-1234), hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1234), hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertNotNull(properties1);
      
      int int3 = hikariConfig0.getAcquireRetries();
      assertEquals((-1234), int3);
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("F_4o", hikariConfig0.getConnectionInitSql());
      assertEquals("javassist.bytecode.ExceptionTableEntry", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals((-1234), hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1234), hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test131()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertNotNull(hikariDataSource0);
      
      String string0 = "";
      hikariDataSource0.setConnectionCustomizerClassName(string0);
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("", hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      String string1 = hikariDataSource0.getConnectionCustomizerClassName();
      assertEquals("", string1);
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("", hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertSame(string1, string0);
      assertNotNull(string1);
      
      int int0 = hikariDataSource0.getMaximumPoolSize();
      assertEquals(60, int0);
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("", hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      HikariPool hikariPool0 = hikariDataSource0.pool;
      assertNull(hikariPool0);
      
      hikariDataSource0.fastPathPool = hikariPool0;
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("", hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      
      HikariDataSource hikariDataSource1 = null;
      try {
        hikariDataSource1 = new HikariDataSource(hikariDataSource0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test132()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertNotNull(hikariDataSource0);
      
      long long0 = (-1509L);
      hikariDataSource0.acquireRetryDelay = hikariDataSource0.leakDetectionThreshold;
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertFalse(hikariDataSource1.isReadOnly());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource1.maxLifetime);
      assertEquals(600000L, hikariDataSource1.idleTimeout);
      assertEquals(5000L, hikariDataSource1.connectionTimeout);
      assertFalse(hikariDataSource1.isReadOnly);
      assertTrue(hikariDataSource1.isAutoCommit);
      assertEquals((-1), hikariDataSource1.transactionIsolation);
      assertFalse(hikariDataSource1.isIsolateInternalQueries);
      assertEquals(10, hikariDataSource1.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariDataSource1.maxPoolSize);
      assertFalse(hikariDataSource1.isInitializationFailFast);
      assertEquals(3, hikariDataSource1.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariDataSource1.acquireIncrement);
      assertFalse(hikariDataSource1.isRegisterMbeans);
      assertEquals(2, HikariConfig.poolNumber);
      assertTrue(hikariDataSource1.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource1.acquireRetryDelay);
      assertEquals(0L, hikariDataSource1.leakDetectionThreshold);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotNull(hikariDataSource1);
      
      long long1 = 30L;
      hikariDataSource1.setLeakDetectionThreshold(long1);
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertFalse(hikariDataSource1.isReadOnly());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertEquals(30L, hikariDataSource1.getLeakDetectionThreshold());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource1.maxLifetime);
      assertEquals(600000L, hikariDataSource1.idleTimeout);
      assertEquals(5000L, hikariDataSource1.connectionTimeout);
      assertFalse(hikariDataSource1.isReadOnly);
      assertTrue(hikariDataSource1.isAutoCommit);
      assertEquals((-1), hikariDataSource1.transactionIsolation);
      assertFalse(hikariDataSource1.isIsolateInternalQueries);
      assertEquals(10, hikariDataSource1.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariDataSource1.maxPoolSize);
      assertFalse(hikariDataSource1.isInitializationFailFast);
      assertEquals(3, hikariDataSource1.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariDataSource1.acquireIncrement);
      assertFalse(hikariDataSource1.isRegisterMbeans);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(30L, hikariDataSource1.leakDetectionThreshold);
      assertTrue(hikariDataSource1.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource1.acquireRetryDelay);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertFalse(long1 == long0);
      
      long long2 = 750L;
      HikariConfig.CONNECTION_TIMEOUT = long2;
      hikariDataSource0.setDataSource(hikariDataSource1);
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertFalse(hikariDataSource1.isReadOnly());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertFalse(hikariDataSource1.isIsolateInternalQueries());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertEquals(30L, hikariDataSource1.getLeakDetectionThreshold());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(750L, hikariDataSource1.getAcquireRetryDelay());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getJdbcUrl());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(1, hikariDataSource1.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.acquireRetryDelay);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1800000L, hikariDataSource1.maxLifetime);
      assertEquals(600000L, hikariDataSource1.idleTimeout);
      assertEquals(5000L, hikariDataSource1.connectionTimeout);
      assertFalse(hikariDataSource1.isReadOnly);
      assertTrue(hikariDataSource1.isAutoCommit);
      assertEquals((-1), hikariDataSource1.transactionIsolation);
      assertEquals(750L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource1.isIsolateInternalQueries);
      assertEquals(10, hikariDataSource1.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariDataSource1.maxPoolSize);
      assertFalse(hikariDataSource1.isInitializationFailFast);
      assertEquals(3, hikariDataSource1.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariDataSource1.acquireIncrement);
      assertFalse(hikariDataSource1.isRegisterMbeans);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(30L, hikariDataSource1.leakDetectionThreshold);
      assertTrue(hikariDataSource1.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource1.acquireRetryDelay);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      
      String string0 = "L1";
      boolean boolean0 = hikariDataSource0.isJdbc4ConnectionTest();
      assertTrue(boolean0);
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.acquireRetryDelay);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-2", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(3, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertNotNull(hikariConfig0);
      
      Object object0 = properties0.put(hikariConfig0, hikariDataSource0);
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-2", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.acquireRetryDelay);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(3, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(3, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNull(object0);
      
      long long3 = 169L;
      String string1 = "s\"y@oZX+";
      Object object1 = properties0.getOrDefault(hikariDataSource0, string0);
      assertEquals("L1", object1);
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.acquireRetryDelay);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(3, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertSame(object1, string0);
      assertNotSame(object1, string1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(string0, string1);
      assertSame(string0, object1);
      assertFalse(object1.equals((Object)string1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(object1);
      
      hikariDataSource0.connectionInitSql = string1;
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("s\"y@oZX+", hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      
      hikariDataSource0.setDataSourceProperties(properties0);
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("s\"y@oZX+", hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.acquireRetryDelay);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(3, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      
      int int0 = hikariDataSource0.getTransactionIsolation();
      assertEquals((-1), int0);
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("s\"y@oZX+", hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.acquireRetryDelay);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(3, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      
      boolean boolean1 = false;
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-35);
      byte byte1 = (byte)28;
      byteArray0[1] = byte1;
      byteArray0[2] = byte0;
      boolean boolean2 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean2);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)28, (byte) (-35)}, byteArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      hikariDataSource0.setReadOnly(boolean1);
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("s\"y@oZX+", hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.acquireRetryDelay);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(3, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertTrue(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
      
      String string2 = hikariDataSource0.getConnectionInitSql();
      assertEquals("s\"y@oZX+", string2);
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("s\"y@oZX+", hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.acquireRetryDelay);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(3, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, object1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)object1));
      assertNotNull(string2);
      
      int int1 = hikariDataSource0.getTransactionIsolation();
      assertEquals((-1), int1);
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("s\"y@oZX+", hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.acquireRetryDelay);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(3, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertTrue(int1 == int0);
      
      String string3 = "connectionCustomizationClass specified class '";
      hikariDataSource0.dataSourceClassName = string3;
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals("connectionCustomizationClass specified class '", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("s\"y@oZX+", hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      
      hikariDataSource0.validate();
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals("connectionCustomizationClass specified class '", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("s\"y@oZX+", hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(3, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      
      int int2 = hikariConfig0.getMaximumPoolSize();
      assertEquals(60, int2);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-2", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(750L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(3, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      hikariDataSource0.setReadOnly(boolean1);
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals("connectionCustomizationClass specified class '", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("s\"y@oZX+", hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(3, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertTrue(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
      
      String string4 = null;
      // Undeclared exception!
      try { 
        hikariDataSource0.setDriverClassName(string4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // driverClassName specified class 'null' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test133()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertNotNull(hikariDataSource0);
      
      hikariDataSource0.setMaxLifetime(hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1L, hikariDataSource0.maxLifetime);
      
      hikariDataSource0.minPoolSize = hikariDataSource0.acquireRetries;
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      
      hikariDataSource0.idleTimeout = hikariDataSource0.acquireRetryDelay;
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getIdleTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      
      hikariDataSource0.connectionTimeout = (long) hikariDataSource0.acquireRetries;
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3L, hikariDataSource0.getConnectionTimeout());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getIdleTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      boolean boolean0 = false;
      hikariDataSource0.isJdbc4connectionTest = boolean0;
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3L, hikariDataSource0.getConnectionTimeout());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getIdleTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      
      Object object0 = properties0.put(hikariDataSource0, hikariDataSource0);
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3L, hikariDataSource0.getConnectionTimeout());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getIdleTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(750L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(3L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1L, hikariDataSource0.maxLifetime);
      assertNull(object0);
      
      String string0 = ":^ec6T8/n}R>]{[Ak";
      hikariDataSource0.setDataSourceClassName(string0);
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(3L, hikariDataSource0.getConnectionTimeout());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getIdleTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(750L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(3L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1L, hikariDataSource0.maxLifetime);
      
      Properties properties1 = (Properties)properties0.clone();
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertEquals(1, properties1.size());
      assertFalse(properties1.isEmpty());
      assertNotSame(properties0, properties1);
      assertNotSame(properties1, properties0);
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      
      Collection<Object> collection0 = properties0.values();
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertNotSame(properties0, properties1);
      assertTrue(properties0.equals((Object)properties1));
      assertNotNull(collection0);
      
      hikariDataSource0.connectionTestQuery = string0;
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(3L, hikariDataSource0.getConnectionTimeout());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getIdleTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      
      hikariDataSource0.setDataSourceProperties(properties0);
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(3L, hikariDataSource0.getConnectionTimeout());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getIdleTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(750L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(3L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1L, hikariDataSource0.maxLifetime);
      assertNotSame(properties0, properties1);
      assertTrue(properties0.equals((Object)properties1));
      
      boolean boolean1 = false;
      long long0 = hikariDataSource0.getConnectionTimeout();
      assertEquals(3L, long0);
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(3L, hikariDataSource0.getConnectionTimeout());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getIdleTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(750L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(3L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1L, hikariDataSource0.maxLifetime);
      
      int int0 = hikariDataSource0.getAcquireRetries();
      assertEquals(3, int0);
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(3L, hikariDataSource0.getConnectionTimeout());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getIdleTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(750L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(3L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1L, hikariDataSource0.maxLifetime);
      
      String string1 = "javassist.bytecode.SignatureAttribute$ClassType";
      String string2 = "Yk";
      long long1 = hikariDataSource0.getIdleTimeout();
      assertEquals(750L, long1);
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(3L, hikariDataSource0.getConnectionTimeout());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getIdleTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(750L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(3L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1L, hikariDataSource0.maxLifetime);
      assertFalse(long1 == long0);
      
      String string3 = hikariDataSource0.getConnectionTestQuery();
      assertEquals(":^ec6T8/n}R>]{[Ak", string3);
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(3L, hikariDataSource0.getConnectionTimeout());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getIdleTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(750L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(3L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1L, hikariDataSource0.maxLifetime);
      assertSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      long long2 = hikariDataSource0.getAcquireRetryDelay();
      assertEquals(750L, long2);
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(3L, hikariDataSource0.getConnectionTimeout());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getIdleTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(750L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(3L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1L, hikariDataSource0.maxLifetime);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      
      int int1 = hikariDataSource0.getMinimumPoolSize();
      assertEquals(3, int1);
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(3L, hikariDataSource0.getConnectionTimeout());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getIdleTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(750L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(3L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1L, hikariDataSource0.maxLifetime);
      assertTrue(int1 == int0);
      
      String string4 = "";
      hikariDataSource0.setDataSourceClassName(string4);
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(3L, hikariDataSource0.getConnectionTimeout());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getIdleTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(750L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(3L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1L, hikariDataSource0.maxLifetime);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      hikariDataSource0.setCatalog(string3);
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(3L, hikariDataSource0.getConnectionTimeout());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(750L, hikariDataSource0.getIdleTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(750L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(3L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1L, hikariDataSource0.maxLifetime);
      assertSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      
      hikariDataSource0.validate();
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      
      String string5 = "";
      hikariDataSource0.setConnectionCustomizerClassName(string5);
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertSame(string5, string4);
      assertNotSame(string5, string3);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      
      DataSource dataSource0 = hikariDataSource0.getDataSource();
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertNull(dataSource0);
      
      hikariDataSource0.setConnectionTimeout(long1);
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(750L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(750L, hikariDataSource0.connectionTimeout);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      
      int int2 = hikariDataSource0.getMaximumPoolSize();
      assertEquals(60, int2);
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(750L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(750L, hikariDataSource0.connectionTimeout);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string6 = hikariDataSource0.getPoolName();
      assertEquals("HikariPool-0", string6);
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(750L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(750L, hikariDataSource0.connectionTimeout);
      assertNotSame(string6, string4);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string2);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String string7 = hikariDataSource0.getPoolName();
      assertEquals("HikariPool-0", string7);
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(750L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(750L, hikariDataSource0.connectionTimeout);
      assertNotSame(string7, string2);
      assertNotSame(string7, string5);
      assertNotSame(string7, string4);
      assertNotSame(string7, string3);
      assertNotSame(string7, string1);
      assertNotSame(string7, string0);
      assertSame(string7, string6);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      
      hikariDataSource0.setUseInstrumentation(hikariDataSource0.isRegisterMbeans);
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(750L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(750L, hikariDataSource0.connectionTimeout);
      
      int int3 = hikariDataSource0.getMinimumPoolSize();
      assertEquals(3, int3);
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(750L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(750L, hikariDataSource0.connectionTimeout);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
  }

  @Test(timeout = 11000)
  public void test134()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "javassist.runtime.DotClass";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      HikariConfig hikariConfig0 = new HikariConfig();
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertNotNull(hikariConfig0);
      
      long long0 = 146L;
      hikariConfig0.maxLifetime = long0;
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(146L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      hikariConfig0.setAutoCommit(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(146L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(146L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      long long1 = 10L;
      hikariConfig0.connectionTimeout = long1;
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(146L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      
      int int0 = 100;
      hikariConfig0.setMinimumPoolSize(int0);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(10L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(146L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(100, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(10L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(146L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(100, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      hikariConfig0.setConnectionTimeout(hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(146L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(100L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(100, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(146L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(100L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(100, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      int int1 = hikariConfig0.getAcquireIncrement();
      assertEquals(1, int1);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(146L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(100L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(100, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(146L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(100L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(100, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(int1 == int0);
      
      int int2 = 10;
      hikariConfig0.minPoolSize = int2;
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(146L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(100L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      
      boolean boolean2 = FileSystemHandling.appendLineToFile(evoSuiteFile0, hikariConfig0.jdbcUrl);
      assertFalse(boolean2);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(146L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(100L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(146L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(100L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string1 = "g";
      hikariConfig0.connectionCustomizerClassName = hikariConfig0.connectionInitSql;
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(146L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(100L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      
      HikariConfig.MAX_LIFETIME = (long) hikariConfig0.poolNumber;
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(146L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(100L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      
      hikariConfig0.setMaximumPoolSize(int1);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(146L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(100L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(146L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(100L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      
      boolean boolean3 = hikariConfig0.isJdbc4ConnectionTest();
      assertTrue(boolean3);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(146L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(100L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(146L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(100L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      int int3 = hikariConfig0.getMaximumPoolSize();
      assertEquals(1, int3);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(146L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(100L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(146L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(100L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      
      boolean boolean4 = hikariConfig0.isJdbc4ConnectionTest();
      assertTrue(boolean4);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(146L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(100L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(146L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(100L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      
      long long2 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(750L, long2);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(146L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(100L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(146L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(100L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      String string2 = hikariConfig0.getJdbcUrl();
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(146L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(100L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(146L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(100L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertNull(string2);
      
      int int4 = hikariConfig0.getTransactionIsolation();
      assertEquals((-1), int4);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(146L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(100L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(1, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(146L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(100L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      
      long long3 = (-911L);
  }

  @Test(timeout = 11000)
  public void test135()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertNotNull(hikariConfig0);
      
      String string0 = "";
      hikariConfig0.setPoolName(string0);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      
      String string1 = hikariConfig0.getPoolName();
      assertEquals("", string1);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test(timeout = 11000)
  public void test136()  throws Throwable  {
      String string0 = "'*e8Q?=W=YvK!@o `";
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertNotNull(hikariConfig0);
      
      boolean boolean0 = true;
      String string1 = "maxPoolSize is less than minPoolSize, forcing them equal.";
      int int0 = 0;
      hikariConfig0.setAcquireRetries(int0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(0, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      String string2 = "";
      hikariConfig0.setConnectionCustomizerClassName(string2);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(0, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      hikariConfig0.setRegisterMbeans(boolean0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(0, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      String string3 = "duplicate method: ";
      hikariConfig0.connectionTestQuery = string3;
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("duplicate method: ", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      hikariConfig0.setConnectionTimeout(int0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("duplicate method: ", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(2147483647L, hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(0, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(2147483647L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      EvoSuiteFile evoSuiteFile0 = null;
      int int1 = hikariConfig0.getMinimumPoolSize();
      assertEquals(10, int1);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("duplicate method: ", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(2147483647L, hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(0, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(2147483647L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(int1 == int0);
      
      boolean boolean1 = true;
      hikariConfig0.setAutoCommit(boolean1);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("duplicate method: ", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(2147483647L, hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(0, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(2147483647L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      hikariConfig0.transactionIsolationName = string0;
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("duplicate method: ", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(2147483647L, hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      
      int int2 = hikariConfig0.getAcquireRetries();
      assertEquals(0, int2);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("duplicate method: ", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(2147483647L, hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(0, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(2147483647L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = hikariConfig0.getAcquireIncrement();
      assertEquals(1, int3);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("duplicate method: ", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(2147483647L, hikariConfig0.getConnectionTimeout());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(0, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(2147483647L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      long long0 = 30L;
      // Undeclared exception!
      try { 
        hikariConfig0.setConnectionTimeout(long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // connectionTimeout cannot be less than 100ms
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test137()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertNotNull(hikariConfig0);
      
      String string0 = "aWt0L\"l";
      hikariConfig0.connectionTestQuery = string0;
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("aWt0L\"l", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      
      int int0 = 0;
      hikariConfig0.acquireIncrement = int0;
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("aWt0L\"l", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      
      DataSource dataSource0 = null;
      hikariConfig0.dataSource = dataSource0;
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("aWt0L\"l", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      
      String string1 = "";
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-51);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-100);
      byteArray0[1] = byte1;
      byte byte2 = (byte)60;
      byteArray0[2] = byte2;
      boolean boolean1 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean1);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-51), (byte) (-100), (byte)60}, byteArray0);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = false;
      hikariConfig0.setIsolateInternalQueries(boolean2);
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("aWt0L\"l", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      hikariConfig0.poolName = string1;
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("aWt0L\"l", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("aWt0L\"l", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertNull(iConnectionCustomizer0);
      
      long long0 = hikariConfig0.getMaxLifetime();
      assertEquals(1800000L, long0);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("aWt0L\"l", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      
      int int1 = hikariConfig0.getAcquireIncrement();
      assertEquals(0, int1);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("aWt0L\"l", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(int1 == int0);
      
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test138()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertNotNull(hikariDataSource0);
      
      hikariDataSource0.setMaxLifetime(hikariDataSource0.acquireIncrement);
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      
      hikariDataSource0.minPoolSize = hikariDataSource0.acquireRetries;
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      
      hikariDataSource0.idleTimeout = (long) hikariDataSource0.transactionIsolation;
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals((-1L), hikariDataSource0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      
      hikariDataSource0.connectionTimeout = (long) hikariDataSource0.acquireRetries;
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3L, hikariDataSource0.getConnectionTimeout());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals((-1L), hikariDataSource0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      boolean boolean0 = false;
      hikariDataSource0.isJdbc4connectionTest = boolean0;
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3L, hikariDataSource0.getConnectionTimeout());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals((-1L), hikariDataSource0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      
      Object object0 = properties0.put(hikariDataSource0, hikariDataSource0);
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3L, hikariDataSource0.getConnectionTimeout());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals((-1L), hikariDataSource0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertEquals(3L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(1L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals((-1L), hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertNull(object0);
      
      String string0 = ":^ec6T8/n}R>]{[Ak";
      Collection<Object> collection0 = properties0.values();
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertNotNull(collection0);
      
      hikariDataSource0.connectionTestQuery = string0;
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3L, hikariDataSource0.getConnectionTimeout());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals((-1L), hikariDataSource0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      
      hikariDataSource0.setDataSourceProperties(properties0);
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3L, hikariDataSource0.getConnectionTimeout());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals((-1L), hikariDataSource0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertEquals(3L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(1L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals((-1L), hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      
      boolean boolean1 = false;
      long long0 = hikariDataSource0.getConnectionTimeout();
      assertEquals(3L, long0);
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3L, hikariDataSource0.getConnectionTimeout());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals((-1L), hikariDataSource0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(3L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(1L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals((-1L), hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      
      int int0 = hikariDataSource0.getAcquireRetries();
      assertEquals(3, int0);
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3L, hikariDataSource0.getConnectionTimeout());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals((-1L), hikariDataSource0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(3L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(1L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals((-1L), hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      
      String string1 = "javassist.bytecode.SignatureAttribute$ClassType";
      String string2 = "Yk";
      long long1 = hikariDataSource0.getIdleTimeout();
      assertEquals((-1L), long1);
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3L, hikariDataSource0.getConnectionTimeout());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals((-1L), hikariDataSource0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(3L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(1L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals((-1L), hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(long1 == long0);
      
      long long2 = hikariDataSource0.getAcquireRetryDelay();
      assertEquals(750L, long2);
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3L, hikariDataSource0.getConnectionTimeout());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals((-1L), hikariDataSource0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(3L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(1L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals((-1L), hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      int int1 = hikariDataSource0.getMinimumPoolSize();
      assertEquals(3, int1);
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3L, hikariDataSource0.getConnectionTimeout());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals((-1L), hikariDataSource0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(3L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(1L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals((-1L), hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(int1 == int0);
      
      String string3 = "";
      hikariDataSource0.setDataSourceClassName(string3);
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(":^ec6T8/n}R>]{[Ak", hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isReadOnly());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3L, hikariDataSource0.getConnectionTimeout());
      assertEquals(3, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals((-1L), hikariDataSource0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(3L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isReadOnly);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(3, hikariDataSource0.minPoolSize);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(1L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals((-1L), hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        hikariDataSource0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // idleTimeout cannot be negative.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test139()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertNotNull(hikariConfig0);
      
      int int0 = (-1212);
      String string0 = "";
      int int1 = 524;
      hikariConfig0.setAcquireIncrement(int1);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(524, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(524, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(int1 == int0);
      
      hikariConfig0.setTransactionIsolation(string0);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(524, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(524, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      hikariConfig0.acquireRetries = int0;
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(524, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1212), hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isReadOnly());
      
      long long0 = 5000L;
      hikariConfig0.maxLifetime = hikariConfig0.leakDetectionThreshold;
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(524, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1212), hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isReadOnly());
      
      long long1 = hikariConfig0.getMaxLifetime();
      assertEquals(0L, long1);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(524, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1212), hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-1212), hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(524, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(long1 == long0);
      
      boolean boolean0 = false;
      hikariConfig0.setRegisterMbeans(boolean0);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(524, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1212), hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-1212), hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(524, hikariConfig0.acquireIncrement);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
  }

  @Test(timeout = 11000)
  public void test140()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertNotNull(hikariConfig0);
      
      boolean boolean0 = false;
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.connectionCustomizer;
      assertNull(iConnectionCustomizer0);
      
      String string0 = "k{}|CT=";
      hikariConfig0.dataSourceClassName = string0;
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("k{}|CT=", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      EvoSuiteFile evoSuiteFile0 = null;
      long long0 = 0L;
      hikariConfig0.setMaxLifetime(long0);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("k{}|CT=", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      
      hikariConfig0.transactionIsolation = hikariConfig0.acquireIncrement;
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("k{}|CT=", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      Properties properties0 = hikariConfig0.getDataSourceProperties();
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("k{}|CT=", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(1, hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertNotNull(properties0);
      
      long long1 = 189L;
      int int0 = 3;
      hikariConfig0.maxPoolSize = int0;
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("k{}|CT=", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(3, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      hikariConfig0.setConnectionTimeout(long1);
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("k{}|CT=", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(189L, hikariConfig0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(3, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(3, hikariConfig0.maxPoolSize);
      assertEquals(1, hikariConfig0.transactionIsolation);
      assertEquals(189L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertFalse(long1 == long0);
      
      hikariConfig0.validate();
      assertEquals(10, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("k{}|CT=", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(189L, hikariConfig0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1, hikariConfig0.transactionIsolation);
      assertEquals(189L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(10, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      
      IConnectionCustomizer iConnectionCustomizer1 = hikariConfig0.getConnectionCustomizer();
      assertEquals(10, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("k{}|CT=", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(189L, hikariConfig0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1, hikariConfig0.transactionIsolation);
      assertEquals(189L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(10, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertNull(iConnectionCustomizer1);
      
      String string1 = hikariConfig0.getJdbcUrl();
      assertEquals(10, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertEquals("k{}|CT=", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1, hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(189L, hikariConfig0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1, hikariConfig0.transactionIsolation);
      assertEquals(189L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(10, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isReadOnly);
      assertNull(string1);
      
      long long2 = HikariConfig.IDLE_TIMEOUT;
      assertEquals(600000L, long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
  }

  @Test(timeout = 11000)
  public void test141()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertNotNull(hikariConfig0);
      
      long long0 = 0L;
      hikariConfig0.acquireRetryDelay = long0;
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      
      long long1 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(0L, long1);
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(0L, hikariConfig0.acquireRetryDelay);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(long1 == long0);
      
      long long2 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(0L, long2);
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(0L, hikariConfig0.acquireRetryDelay);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
      
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertNotNull(hikariDataSource0);
      
      hikariConfig0.copyState(hikariDataSource0);
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isReadOnly());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(0L, hikariConfig0.acquireRetryDelay);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.acquireRetryDelay);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
  }

  @Test(timeout = 11000)
  public void test142()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertNotNull(hikariDataSource0);
      
      String string0 = hikariDataSource0.getPoolName();
      assertEquals("HikariPool-0", string0);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertNotNull(string0);
      
      String string1 = hikariDataSource0.getJdbcUrl();
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertNull(string1);
      
      boolean boolean0 = true;
      String string2 = ";r";
      IConnectionCustomizer iConnectionCustomizer0 = hikariDataSource0.getConnectionCustomizer();
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertNull(iConnectionCustomizer0);
      
      hikariDataSource0.isRegisterMbeans = hikariDataSource0.isAutoCommit;
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      
      int int0 = 0;
      hikariDataSource0.setMinimumPoolSize(int0);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getMinimumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(0, hikariDataSource0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      
      String string3 = hikariDataSource0.getJdbcUrl();
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getMinimumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(0, hikariDataSource0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertNull(string3);
      
      Class<Object> class0 = Object.class;
      boolean boolean1 = hikariDataSource0.isWrapperFor(class0);
      assertFalse(boolean1);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getMinimumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(0, hikariDataSource0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(boolean1 == boolean0);
      
      long long0 = 0L;
      hikariDataSource0.connectionTimeout = long0;
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getMinimumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      
      boolean boolean2 = true;
      hikariDataSource0.setRegisterMbeans(boolean2);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getMinimumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(0, hikariDataSource0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = hikariDataSource0.isReadOnly();
      assertFalse(boolean3);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getMinimumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(0, hikariDataSource0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      long long1 = 0L;
      hikariDataSource0.setIdleTimeout(long1);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getIdleTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getMinimumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(0L, hikariDataSource0.idleTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(0, hikariDataSource0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      
      int int1 = hikariDataSource0.getMinimumPoolSize();
      assertEquals(0, int1);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getIdleTimeout());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getMinimumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(0L, hikariDataSource0.idleTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(0, hikariDataSource0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(int1 == int0);
      
      long long2 = 8L;
      hikariDataSource0.setIdleTimeout(long2);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getJdbcUrl());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isReadOnly());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(8L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isIsolateInternalQueries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getMinimumPoolSize());
      assertEquals(750L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isReadOnly);
      assertEquals(750L, hikariDataSource0.acquireRetryDelay);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isIsolateInternalQueries);
      assertEquals(8L, hikariDataSource0.idleTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, hikariDataSource0.acquireIncrement);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(0, hikariDataSource0.minPoolSize);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
  }

  @Test(timeout = 11000)
  public void test143()  throws Throwable  {
      String string0 = "N K1TgOC)L>Wy";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("idleTimeout is less than 30000ms, did you specify the wrong time unit?  Using default instead.");
      String string1 = "";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string1);
      assertTrue(boolean0);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "idleTimeout is less than 30000ms, did you specify the wrong time unit?  Using default instead.";
      HikariConfig hikariConfig0 = new HikariConfig(string2);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(hikariConfig0);
      
      long long0 = hikariConfig0.getMaxLifetime();
      assertEquals(1800000L, long0);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = "both dataSource and dataSourceClassName are specified, ignoring dataSourceClassName";
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string4 = "4p,.m";
      String string5 = "";
      boolean boolean1 = true;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      long long1 = (-1887L);
      boolean boolean2 = false;
      int int0 = (-1852);
      long long2 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(750L, long2);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string5);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string5));
      
      int int1 = hikariConfig0.getMinimumPoolSize();
      assertEquals(10, int1);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string5);
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string5));
      
      Properties properties0 = hikariConfig0.getDataSourceProperties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isReadOnly());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getJdbcUrl());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string5);
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string5));
      assertNotNull(properties0);
  }

  @Test(timeout = 11000)
  public void test144()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertNotNull(hikariConfig0);
      
      boolean boolean0 = false;
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.connectionCustomizer;
      assertNull(iConnectionCustomizer0);
      
      String string0 = "k{}|CT=";
      hikariConfig0.dataSourceClassName = string0;
      assertEquals("k{}|CT=", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      
      EvoSuiteFile evoSuiteFile0 = null;
      long long0 = 0L;
      hikariConfig0.setMaxLifetime(long0);
      assertEquals("k{}|CT=", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      
      hikariConfig0.setIdleTimeout(long0);
      assertEquals("k{}|CT=", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      
      Properties properties0 = hikariConfig0.getDataSourceProperties();
      assertEquals("k{}|CT=", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertNotNull(properties0);
      
      long long1 = 189L;
      int int0 = 3;
      hikariConfig0.maxPoolSize = int0;
      assertEquals("k{}|CT=", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      
      hikariConfig0.setConnectionTimeout(long1);
      assertEquals(189L, hikariConfig0.getConnectionTimeout());
      assertEquals("k{}|CT=", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getMaximumPoolSize());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(3, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(189L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(long1 == long0);
      
      hikariConfig0.validate();
      assertEquals(189L, hikariConfig0.getConnectionTimeout());
      assertEquals("k{}|CT=", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(189L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.maxPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      
      IConnectionCustomizer iConnectionCustomizer1 = hikariConfig0.getConnectionCustomizer();
      assertEquals(189L, hikariConfig0.getConnectionTimeout());
      assertEquals("k{}|CT=", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(189L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.maxPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertNull(iConnectionCustomizer1);
      
      String string1 = hikariConfig0.getJdbcUrl();
      assertEquals(189L, hikariConfig0.getConnectionTimeout());
      assertEquals("k{}|CT=", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(189L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.maxPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertNull(string1);
      
      long long2 = HikariConfig.IDLE_TIMEOUT;
      assertEquals(600000L, long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      IConnectionCustomizer iConnectionCustomizer2 = hikariConfig0.getConnectionCustomizer();
      assertEquals(189L, hikariConfig0.getConnectionTimeout());
      assertEquals("k{}|CT=", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isReadOnly());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(189L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.maxPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isReadOnly);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertNull(iConnectionCustomizer2);
  }

  @Test(timeout = 11000)
  public void test145()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(750L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(750L, hikariConfig0.acquireRetryDelay);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isIsolateInternalQueries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertNotNull(hikariConfig0);
      
      long long0 = 100L;
      hikariConfig0.acquireRetryDelay = long0;
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(100L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isIsolateInternalQueries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      
      boolean boolean0 = true;
      hikariConfig0.isIsolateInternalQueries = boolean0;
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(100L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getJdbcUrl());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(100L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isReadOnly());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isIsolateInternalQueries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(750L, HikariConfig.ACQUIRE_RETRY_DELAY);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, hikariConfig0.acquireIncrement);
      assertTrue(hikariConfig0.isIsolateInternalQueries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(100L, hikariConfig0.acquireRetryDelay);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isReadOnly);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertNull(iConnectionCustomizer0);
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }
}
