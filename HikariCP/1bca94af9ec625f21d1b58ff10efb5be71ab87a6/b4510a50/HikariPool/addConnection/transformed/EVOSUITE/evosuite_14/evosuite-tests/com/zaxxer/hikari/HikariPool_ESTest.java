/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 07 04:32:32 GMT 2021
 */

package com.zaxxer.hikari;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import com.zaxxer.hikari.HikariPool;
import com.zaxxer.hikari.IConnectionCustomizer;
import com.zaxxer.hikari.proxy.IHikariConnectionProxy;
import com.zaxxer.hikari.util.ConcurrentBag;
import java.sql.Statement;
import java.util.Properties;
import java.util.Timer;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.IntBinaryOperator;
import java.util.function.IntUnaryOperator;
import javax.sql.DataSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HikariPool_ESTest extends HikariPool_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertNotNull(hikariDataSource0);
      
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.debug);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertNotNull(hikariPool0);
      
      hikariPool0.configuration = (HikariConfig) hikariDataSource0;
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(10, hikariPool0.configuration.getMinimumPoolSize());
      assertEquals((-1), hikariPool0.configuration.getTransactionIsolation());
      assertNull(hikariPool0.configuration.getConnectionInitSql());
      assertNull(hikariPool0.configuration.getCatalog());
      assertNull(hikariPool0.configuration.getConnectionCustomizerClassName());
      assertFalse(hikariPool0.configuration.isRegisterMbeans());
      assertTrue(hikariPool0.configuration.isAutoCommit());
      assertEquals("HikariPool-0", hikariPool0.configuration.getPoolName());
      assertEquals(60, hikariPool0.configuration.getMaximumPoolSize());
      assertEquals(0, hikariPool0.configuration.getAcquireIncrement());
      assertEquals(0L, hikariPool0.configuration.getLeakDetectionThreshold());
      assertEquals(600000L, hikariPool0.configuration.getIdleTimeout());
      assertEquals(1800000L, hikariPool0.configuration.getMaxLifetime());
      assertNull(hikariPool0.configuration.getConnectionTestQuery());
      assertEquals(3, hikariPool0.configuration.getAcquireRetries());
      assertEquals(5000L, hikariPool0.configuration.getConnectionTimeout());
      assertNull(hikariPool0.configuration.getDataSourceClassName());
      assertTrue(hikariPool0.configuration.isJdbc4ConnectionTest());
      assertFalse(hikariPool0.configuration.isInitializationFailFast());
      assertEquals(0L, hikariPool0.configuration.getAcquireRetryDelay());
      
      // Undeclared exception!
      try { 
        hikariPool0.bagIsEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      IHikariConnectionProxy iHikariConnectionProxy1 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertNotNull(hikariDataSource0);
      
      long long0 = 16L;
      String string0 = "Tiatt,L";
      hikariDataSource0.dataSourceClassName = string0;
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("Tiatt,L", hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      
      hikariDataSource0.maxLifetime = long0;
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("Tiatt,L", hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(16L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      
      HikariPool hikariPool0 = null;
      try {
        hikariPool0 = new HikariPool(hikariDataSource0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create datasource instance: Tiatt,L
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.debug);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertNotNull(hikariPool0);
      
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        hikariPool0.getConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.debug);
      assertNotNull(hikariPool0);
      
      // Undeclared exception!
      try { 
        hikariPool0.getTotalConnections();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.shutdown);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.debug);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertNotNull(hikariPool0);
      
      boolean boolean0 = false;
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(iHikariConnectionProxy0).createStatement();
      long long0 = 4122L;
      // Undeclared exception!
      try { 
        hikariPool0.isConnectionAlive(iHikariConnectionProxy0, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isAutoCommit);
      assertNotNull(hikariPool0);
      
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      HikariPool.HouseKeeper hikariPool_HouseKeeper0 = hikariPool0.new HouseKeeper();
      assertEquals(0L, hikariPool_HouseKeeper0.scheduledExecutionTime());
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isAutoCommit);
      assertNotNull(hikariPool_HouseKeeper0);
      
      // Undeclared exception!
      try { 
        hikariPool_HouseKeeper0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool$HouseKeeper", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertNotNull(hikariPool0);
      
      boolean boolean0 = true;
      hikariPool0.isRegisteredMbeans = boolean0;
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iHikariConnectionProxy0).isBrokenConnection();
      // Undeclared exception!
      try { 
        hikariPool0.releaseConnection(iHikariConnectionProxy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.debug);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertNotNull(hikariPool0);
      
      int int0 = hikariPool0.transactionIsolation;
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        hikariPool0.shutdown();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertNotNull(hikariPool0);
      
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(iHikariConnectionProxy0).createStatement();
      long long0 = 10L;
      // Undeclared exception!
      try { 
        hikariPool0.isConnectionAlive(iHikariConnectionProxy0, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.debug);
      assertNotNull(hikariPool0);
      
      boolean boolean0 = true;
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(iHikariConnectionProxy0).isBrokenConnection();
      boolean boolean1 = true;
      boolean boolean2 = false;
      hikariPool0.isRegisteredMbeans = boolean2;
      String string0 = "~D_";
      hikariPool0.catalog = string0;
      // Undeclared exception!
      try { 
        hikariPool0.releaseConnection(iHikariConnectionProxy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.shutdown);
      assertNotNull(hikariPool0);
      
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(hikariPool0.isRegisteredMbeans).when(iHikariConnectionProxy0).isBrokenConnection();
      boolean boolean0 = true;
      hikariPool0.shutdown = boolean0;
      boolean boolean1 = false;
      hikariPool0.isRegisteredMbeans = boolean1;
      String string0 = "~D_";
      hikariPool0.catalog = string0;
      // Undeclared exception!
      try { 
        hikariPool0.releaseConnection(iHikariConnectionProxy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertNotNull(hikariPool0);
      
      ConcurrentBag<IHikariConnectionProxy> concurrentBag0 = hikariPool0.idleConnectionBag;
      assertNull(concurrentBag0);
      
      hikariPool0.idleConnectionBag = concurrentBag0;
      int int0 = 852;
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertNotNull(hikariConfig0);
      
      hikariPool0.configuration = hikariConfig0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariPool0.configuration.isInitializationFailFast());
      assertEquals(600000L, hikariPool0.configuration.getIdleTimeout());
      assertEquals(1800000L, hikariPool0.configuration.getMaxLifetime());
      assertEquals((-1), hikariPool0.configuration.getTransactionIsolation());
      assertEquals(0, hikariPool0.configuration.getAcquireIncrement());
      assertEquals(0L, hikariPool0.configuration.getLeakDetectionThreshold());
      assertEquals(3, hikariPool0.configuration.getAcquireRetries());
      assertTrue(hikariPool0.configuration.isJdbc4ConnectionTest());
      assertNull(hikariPool0.configuration.getConnectionTestQuery());
      assertEquals(0L, hikariPool0.configuration.getAcquireRetryDelay());
      assertEquals(5000L, hikariPool0.configuration.getConnectionTimeout());
      assertNull(hikariPool0.configuration.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariPool0.configuration.getPoolName());
      assertEquals(60, hikariPool0.configuration.getMaximumPoolSize());
      assertEquals(10, hikariPool0.configuration.getMinimumPoolSize());
      assertNull(hikariPool0.configuration.getConnectionInitSql());
      assertNull(hikariPool0.configuration.getCatalog());
      assertFalse(hikariPool0.configuration.isRegisterMbeans());
      assertTrue(hikariPool0.configuration.isAutoCommit());
      assertNull(hikariPool0.configuration.getConnectionCustomizerClassName());
      
      String string0 = "^;o";
      Object object0 = properties0.put(hikariPool0, string0);
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertNull(object0);
      
      String string1 = hikariPool0.toString();
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals("HikariPool-0", string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[4];
      int int1 = 63;
      AtomicInteger atomicInteger0 = new AtomicInteger(int1);
      assertEquals(63L, atomicInteger0.longValue());
      assertEquals("63", atomicInteger0.toString());
      assertEquals((short)63, atomicInteger0.shortValue());
      assertEquals(63.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(63, atomicInteger0.get());
      assertEquals(63.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals((byte)63, atomicInteger0.byteValue());
      assertEquals(63, atomicInteger0.intValue());
      assertFalse(int1 == int0);
      assertNotNull(atomicInteger0);
      
      hikariPool0.totalConnections = atomicInteger0;
      assertEquals(63, hikariPool0.getTotalConnections());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(63L, atomicInteger0.longValue());
      assertEquals("63", atomicInteger0.toString());
      assertEquals((short)63, atomicInteger0.shortValue());
      assertEquals(63.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(63, atomicInteger0.get());
      assertEquals(63.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals((byte)63, atomicInteger0.byteValue());
      assertEquals(63, atomicInteger0.intValue());
      assertEquals("63", hikariPool0.totalConnections.toString());
      assertEquals(63.0, hikariPool0.totalConnections.doubleValue(), 0.01);
      assertEquals((byte)63, hikariPool0.totalConnections.byteValue());
      assertEquals(63L, hikariPool0.totalConnections.longValue());
      assertEquals(63, hikariPool0.totalConnections.get());
      assertEquals(63.0F, hikariPool0.totalConnections.floatValue(), 0.01F);
      assertEquals(63, hikariPool0.totalConnections.intValue());
      assertEquals((short)63, hikariPool0.totalConnections.shortValue());
      
      stringArray0[0] = hikariPool0.configuration.transactionIsolationName;
      String string2 = "J\\?5&\"N@h)Pjp~Xop";
      hikariPool0.bagIsEmpty();
      assertEquals(63, hikariPool0.getTotalConnections());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      
      stringArray0[1] = string2;
      stringArray0[2] = hikariConfig0.connectionInitSql;
      // Undeclared exception!
      try { 
        hikariPool0.fillPool();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.debug);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertNotNull(hikariPool0);
      
      ConcurrentBag<IHikariConnectionProxy> concurrentBag0 = hikariPool0.idleConnectionBag;
      assertNull(concurrentBag0);
      
      hikariPool0.idleConnectionBag = concurrentBag0;
      int int0 = 852;
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertNotNull(hikariConfig0);
      
      hikariPool0.configuration = hikariConfig0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariPool0.configuration.getConnectionInitSql());
      assertNull(hikariPool0.configuration.getConnectionTestQuery());
      assertEquals(0, hikariPool0.configuration.getAcquireIncrement());
      assertEquals(3, hikariPool0.configuration.getAcquireRetries());
      assertEquals(0L, hikariPool0.configuration.getLeakDetectionThreshold());
      assertTrue(hikariPool0.configuration.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariPool0.configuration.getMaxLifetime());
      assertFalse(hikariPool0.configuration.isInitializationFailFast());
      assertEquals(600000L, hikariPool0.configuration.getIdleTimeout());
      assertEquals(60, hikariPool0.configuration.getMaximumPoolSize());
      assertEquals(0L, hikariPool0.configuration.getAcquireRetryDelay());
      assertEquals(5000L, hikariPool0.configuration.getConnectionTimeout());
      assertNull(hikariPool0.configuration.getDataSourceClassName());
      assertNull(hikariPool0.configuration.getCatalog());
      assertFalse(hikariPool0.configuration.isRegisterMbeans());
      assertNull(hikariPool0.configuration.getConnectionCustomizerClassName());
      assertTrue(hikariPool0.configuration.isAutoCommit());
      assertEquals("HikariPool-0", hikariPool0.configuration.getPoolName());
      assertEquals(10, hikariPool0.configuration.getMinimumPoolSize());
      assertEquals((-1), hikariPool0.configuration.getTransactionIsolation());
      
      String string0 = "^;o";
      hikariConfig0.setJdbc4ConnectionTest(hikariPool0.debug);
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariPool0.debug);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      Object object0 = properties0.put(hikariPool0, string0);
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(hikariPool0.debug);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertNull(object0);
      
      hikariPool0.transactionIsolation = int0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      String string1 = hikariPool0.toString();
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals("HikariPool-0", string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(852, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertNotNull(string1);
      
      String string2 = "J\\?5&\"N@h)Pjp~Xop";
      // Undeclared exception!
      try { 
        hikariPool0.fillPool();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      HikariPool hikariPool0 = new HikariPool();
      assertEquals(0, hikariPool0.transactionIsolation);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.debug);
      assertNotNull(hikariPool0);
      
      hikariPool0.isRegisteredMbeans = boolean0;
      // Undeclared exception!
      try { 
        hikariPool0.getIdleConnections();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.debug);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertNotNull(hikariPool0);
      
      // Undeclared exception!
      try { 
        hikariPool0.getThreadsAwaitingConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertNotNull(hikariPool0);
      
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertNotNull(hikariConfig0);
      
      hikariPool0.configuration = hikariConfig0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariPool0.configuration.isInitializationFailFast());
      assertEquals(600000L, hikariPool0.configuration.getIdleTimeout());
      assertEquals(1800000L, hikariPool0.configuration.getMaxLifetime());
      assertFalse(hikariPool0.configuration.isRegisterMbeans());
      assertEquals(0, hikariPool0.configuration.getAcquireIncrement());
      assertEquals(0L, hikariPool0.configuration.getLeakDetectionThreshold());
      assertEquals((-1), hikariPool0.configuration.getTransactionIsolation());
      assertTrue(hikariPool0.configuration.isAutoCommit());
      assertEquals(60, hikariPool0.configuration.getMaximumPoolSize());
      assertNull(hikariPool0.configuration.getConnectionInitSql());
      assertNull(hikariPool0.configuration.getCatalog());
      assertNull(hikariPool0.configuration.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariPool0.configuration.getPoolName());
      assertEquals(10, hikariPool0.configuration.getMinimumPoolSize());
      assertTrue(hikariPool0.configuration.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariPool0.configuration.getConnectionTimeout());
      assertEquals(3, hikariPool0.configuration.getAcquireRetries());
      assertEquals(0L, hikariPool0.configuration.getAcquireRetryDelay());
      assertNull(hikariPool0.configuration.getConnectionTestQuery());
      assertNull(hikariPool0.configuration.getDataSourceClassName());
      
      String string0 = "no method descriptor: ";
      // Undeclared exception!
      try { 
        hikariPool0.getConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.debug);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertNotNull(hikariPool0);
      
      // Undeclared exception!
      try { 
        hikariPool0.getActiveConnections();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertNotNull(hikariPool0);
      
      ConcurrentBag<IHikariConnectionProxy> concurrentBag0 = new ConcurrentBag<IHikariConnectionProxy>();
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      assertNotNull(concurrentBag0);
      
      hikariPool0.idleConnectionBag = concurrentBag0;
      boolean boolean0 = true;
      hikariPool0.closeIdleConnections();
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      
      hikariPool0.isRegisteredMbeans = hikariPool0.isAutoCommit;
      long long0 = 4122L;
      hikariPool0.closeIdleConnections();
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(hikariPool0.debug, hikariPool0.shutdown).when(iHikariConnectionProxy0).compareAndSetState(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        concurrentBag0.remove(iHikariConnectionProxy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to remove an object from the bag that was not borrowed or reserved
         //
         verifyException("com.zaxxer.hikari.util.ConcurrentBag", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertNotNull(hikariDataSource0);
      
      long long0 = 16L;
      String string0 = "java.lang.Object";
      hikariDataSource0.dataSourceClassName = string0;
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("java.lang.Object", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      
      hikariDataSource0.maxLifetime = long0;
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("java.lang.Object", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(16L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      
      HikariPool hikariPool0 = null;
      try {
        hikariPool0 = new HikariPool(hikariDataSource0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create datasource instance: java.lang.Object
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertNotNull(hikariPool0);
      
      // Undeclared exception!
      try { 
        hikariPool0.addConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertNotNull(hikariConfig0);
      
      HikariPool hikariPool0 = null;
      try {
        hikariPool0 = new HikariPool(hikariConfig0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertNotNull(hikariPool0);
      
      // Undeclared exception!
      try { 
        hikariPool0.fillPool();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.debug);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertNotNull(hikariPool0);
      
      // Undeclared exception!
      try { 
        hikariPool0.addConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertNotNull(hikariConfig0);
      
      HikariPool hikariPool0 = null;
      try {
        hikariPool0 = new HikariPool(hikariConfig0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.shutdown);
      assertNotNull(hikariPool0);
      
      DataSource dataSource0 = hikariPool0.dataSource;
      assertNull(dataSource0);
      
      // Undeclared exception!
      try { 
        hikariPool0.fillPool();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertNotNull(hikariPool0);
      
      HikariPool.HouseKeeper hikariPool_HouseKeeper0 = hikariPool0.new HouseKeeper();
      assertEquals(0L, hikariPool_HouseKeeper0.scheduledExecutionTime());
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertNotNull(hikariPool_HouseKeeper0);
      
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertNotNull(hikariDataSource0);
      
      Properties properties0 = hikariDataSource0.getDataSourceProperties();
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertNotNull(properties0);
      
      hikariDataSource0.dataSourceProperties = properties0;
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertTrue(hikariDataSource0.dataSourceProperties.isEmpty());
      assertEquals(0, hikariDataSource0.dataSourceProperties.size());
      
      DataSource dataSource0 = hikariDataSource0.getDataSource();
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertNull(dataSource0);
      
      hikariPool0.dataSource = dataSource0;
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      
      boolean boolean0 = hikariPool_HouseKeeper0.cancel();
      assertEquals(0L, hikariPool_HouseKeeper0.scheduledExecutionTime());
      assertFalse(boolean0);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      
      // Undeclared exception!
      try { 
        hikariPool_HouseKeeper0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool$HouseKeeper", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isAutoCommit);
      assertNotNull(hikariPool0);
      
      IHikariConnectionProxy iHikariConnectionProxy0 = null;
      boolean boolean0 = true;
      hikariPool0.jdbc4ConnectionTest = boolean0;
      // Undeclared exception!
      try { 
        hikariPool0.releaseConnection(iHikariConnectionProxy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertNotNull(hikariPool0);
      
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iHikariConnectionProxy0).isBrokenConnection();
      // Undeclared exception!
      try { 
        hikariPool0.releaseConnection(iHikariConnectionProxy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertNotNull(hikariPool0);
      
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      hikariPool0.jdbc4ConnectionTest = boolean0;
      IHikariConnectionProxy iHikariConnectionProxy1 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iHikariConnectionProxy1).isBrokenConnection();
      // Undeclared exception!
      try { 
        hikariPool0.releaseConnection(iHikariConnectionProxy1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertNotNull(hikariPool0);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        hikariPool0.getConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      HikariConfig hikariConfig0 = null;
      HikariPool hikariPool0 = null;
      try {
        hikariPool0 = new HikariPool(hikariConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isAutoCommit);
      assertNotNull(hikariPool0);
      
      // Undeclared exception!
      try { 
        hikariPool0.bagIsEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.debug);
      assertNotNull(hikariPool0);
      
      int int0 = (-400);
      AtomicInteger atomicInteger0 = new AtomicInteger(int0);
      assertEquals((-400.0), atomicInteger0.doubleValue(), 0.01);
      assertEquals((-400), atomicInteger0.intValue());
      assertEquals((-400L), atomicInteger0.longValue());
      assertEquals((-400.0F), atomicInteger0.floatValue(), 0.01F);
      assertEquals("-400", atomicInteger0.toString());
      assertEquals((byte)112, atomicInteger0.byteValue());
      assertEquals((-400), atomicInteger0.get());
      assertEquals((short) (-400), atomicInteger0.shortValue());
      assertNotNull(atomicInteger0);
      
      hikariPool0.totalConnections = atomicInteger0;
      assertEquals((-400), hikariPool0.getTotalConnections());
      assertEquals((-400.0), atomicInteger0.doubleValue(), 0.01);
      assertEquals((-400), atomicInteger0.intValue());
      assertEquals((-400L), atomicInteger0.longValue());
      assertEquals((-400.0F), atomicInteger0.floatValue(), 0.01F);
      assertEquals("-400", atomicInteger0.toString());
      assertEquals((byte)112, atomicInteger0.byteValue());
      assertEquals((-400), atomicInteger0.get());
      assertEquals((short) (-400), atomicInteger0.shortValue());
      assertEquals((short) (-400), hikariPool0.totalConnections.shortValue());
      assertEquals((-400.0), hikariPool0.totalConnections.doubleValue(), 0.01);
      assertEquals((-400), hikariPool0.totalConnections.get());
      assertEquals((-400.0F), hikariPool0.totalConnections.floatValue(), 0.01F);
      assertEquals((-400L), hikariPool0.totalConnections.longValue());
      assertEquals((-400), hikariPool0.totalConnections.intValue());
      assertEquals((byte)112, hikariPool0.totalConnections.byteValue());
      assertEquals("-400", hikariPool0.totalConnections.toString());
      
      int int1 = (-1092);
      int int2 = atomicInteger0.getAndAdd(int1);
      assertEquals((-1492), atomicInteger0.intValue());
      assertEquals((-1492), atomicInteger0.get());
      assertEquals((-1492L), atomicInteger0.longValue());
      assertEquals("-1492", atomicInteger0.toString());
      assertEquals((byte)44, atomicInteger0.byteValue());
      assertEquals((-1492.0), atomicInteger0.doubleValue(), 0.01);
      assertEquals((short) (-1492), atomicInteger0.shortValue());
      assertEquals((-1492.0F), atomicInteger0.floatValue(), 0.01F);
      assertEquals((-400), int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = atomicInteger0.addAndGet(int1);
      assertEquals((byte) (-24), atomicInteger0.byteValue());
      assertEquals((-2584.0F), atomicInteger0.floatValue(), 0.01F);
      assertEquals("-2584", atomicInteger0.toString());
      assertEquals((-2584), atomicInteger0.get());
      assertEquals((short) (-2584), atomicInteger0.shortValue());
      assertEquals((-2584.0), atomicInteger0.doubleValue(), 0.01);
      assertEquals((-2584), atomicInteger0.intValue());
      assertEquals((-2584L), atomicInteger0.longValue());
      assertEquals((-2584), int3);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      int int4 = (-267);
      int int5 = atomicInteger0.addAndGet(int4);
      assertEquals((-2851L), atomicInteger0.longValue());
      assertEquals((byte) (-35), atomicInteger0.byteValue());
      assertEquals((-2851), atomicInteger0.intValue());
      assertEquals((-2851.0), atomicInteger0.doubleValue(), 0.01);
      assertEquals((short) (-2851), atomicInteger0.shortValue());
      assertEquals((-2851.0F), atomicInteger0.floatValue(), 0.01F);
      assertEquals((-2851), atomicInteger0.get());
      assertEquals("-2851", atomicInteger0.toString());
      assertEquals((-2851), int5);
      assertTrue(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int4);
      assertFalse(int0 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      
      int int6 = hikariPool0.getTotalConnections();
      assertEquals((-2851), hikariPool0.getTotalConnections());
      assertEquals((-2851), int6);
      assertFalse(int6 == int0);
      assertFalse(int6 == int4);
      assertFalse(int6 == int2);
      assertFalse(int6 == int1);
      assertTrue(int6 == int5);
      assertFalse(int6 == int3);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.debug);
      
      int int7 = 2823;
      hikariPool0.transactionIsolation = int7;
      assertEquals((-2851), hikariPool0.getTotalConnections());
      
      // Undeclared exception!
      try { 
        hikariPool0.getConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertNotNull(hikariPool0);
      
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        hikariPool0.closeConnection(iHikariConnectionProxy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertNotNull(hikariPool0);
      
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        hikariPool0.closeConnection(iHikariConnectionProxy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertNotNull(hikariPool0);
      
      boolean boolean0 = true;
      hikariPool0.jdbc4ConnectionTest = boolean0;
      // Undeclared exception!
      try { 
        hikariPool0.shutdown();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.shutdown);
      assertNotNull(hikariPool0);
      
      // Undeclared exception!
      try { 
        hikariPool0.shutdown();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isAutoCommit);
      assertNotNull(hikariPool0);
      
      DataSource dataSource0 = null;
      hikariPool0.dataSource = dataSource0;
      // Undeclared exception!
      try { 
        hikariPool0.getActiveConnections();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertNotNull(hikariPool0);
      
      DataSource dataSource0 = hikariPool0.dataSource;
      assertNull(dataSource0);
      
      hikariPool0.dataSource = dataSource0;
      // Undeclared exception!
      try { 
        hikariPool0.getActiveConnections();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.debug);
      assertNotNull(hikariPool0);
      
      long long0 = 793L;
      hikariPool0.leakDetectionThreshold = long0;
      ConcurrentBag<IHikariConnectionProxy> concurrentBag0 = null;
      hikariPool0.idleConnectionBag = concurrentBag0;
      // Undeclared exception!
      try { 
        hikariPool0.getIdleConnections();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertNotNull(hikariPool0);
      
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertNotNull(hikariDataSource0);
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariDataSource0.connectionCustomizer;
      assertNull(iConnectionCustomizer0);
      
      hikariPool0.dataSource = (DataSource) hikariDataSource0;
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      
      int int0 = 0;
      hikariDataSource0.setAcquireRetries(int0);
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(0, hikariDataSource0.acquireRetries);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      
      hikariPool0.connectionCustomizer = iConnectionCustomizer0;
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      
      String[] stringArray0 = new String[2];
      hikariDataSource0.leakDetectionThreshold = hikariPool0.leakDetectionThreshold;
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      
      stringArray0[0] = hikariPool0.catalog;
      AtomicInteger atomicInteger0 = new AtomicInteger(hikariPool0.transactionIsolation);
      assertEquals(0, atomicInteger0.intValue());
      assertEquals(0.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals((short)0, atomicInteger0.shortValue());
      assertEquals(0, atomicInteger0.get());
      assertEquals(0.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals("0", atomicInteger0.toString());
      assertEquals((byte)0, atomicInteger0.byteValue());
      assertEquals(0L, atomicInteger0.longValue());
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertNotNull(atomicInteger0);
      
      hikariPool0.totalConnections = atomicInteger0;
      assertEquals(0, hikariPool0.getTotalConnections());
      assertEquals(0, atomicInteger0.intValue());
      assertEquals(0.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals((short)0, atomicInteger0.shortValue());
      assertEquals(0, atomicInteger0.get());
      assertEquals(0.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals("0", atomicInteger0.toString());
      assertEquals((byte)0, atomicInteger0.byteValue());
      assertEquals(0L, atomicInteger0.longValue());
      assertEquals("0", hikariPool0.totalConnections.toString());
      assertEquals(0L, hikariPool0.totalConnections.longValue());
      assertEquals(0.0, hikariPool0.totalConnections.doubleValue(), 0.01);
      assertEquals(0.0F, hikariPool0.totalConnections.floatValue(), 0.01F);
      assertEquals(0, hikariPool0.totalConnections.intValue());
      assertEquals((byte)0, hikariPool0.totalConnections.byteValue());
      assertEquals(0, hikariPool0.totalConnections.get());
      assertEquals((short)0, hikariPool0.totalConnections.shortValue());
      
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(iHikariConnectionProxy0).createStatement();
      int int1 = 2;
      IntBinaryOperator intBinaryOperator0 = mock(IntBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(intBinaryOperator0).applyAsInt(anyInt() , anyInt());
      int int2 = atomicInteger0.getAndAccumulate(int1, intBinaryOperator0);
      assertEquals(0, hikariPool0.getTotalConnections());
      assertEquals(0, atomicInteger0.intValue());
      assertEquals(0.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals((short)0, atomicInteger0.shortValue());
      assertEquals(0, atomicInteger0.get());
      assertEquals(0.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals("0", atomicInteger0.toString());
      assertEquals((byte)0, atomicInteger0.byteValue());
      assertEquals(0L, atomicInteger0.longValue());
      assertEquals(0, int2);
      assertFalse(int1 == int0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      
      // Undeclared exception!
      try { 
        hikariPool0.isConnectionAlive(iHikariConnectionProxy0, hikariDataSource0.poolNumber);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertEquals(0, hikariPool0.transactionIsolation);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.debug);
      assertNotNull(hikariPool0);
      
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(iHikariConnectionProxy0).createStatement();
      long long0 = 0L;
      // Undeclared exception!
      try { 
        hikariPool0.isConnectionAlive(iHikariConnectionProxy0, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.shutdown);
      assertNotNull(hikariPool0);
      
      // Undeclared exception!
      try { 
        hikariPool0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertNotNull(hikariPool0);
      
      // Undeclared exception!
      try { 
        hikariPool0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertNotNull(hikariDataSource0);
      
      String string0 = "Exception copying HikariConfig state: ";
      int int0 = 2089;
      hikariDataSource0.setLoginTimeout(int0);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(2089, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      
      hikariDataSource0.dataSourceClassName = string0;
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(2089, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("Exception copying HikariConfig state: ", hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      
      HikariPool hikariPool0 = null;
      try {
        hikariPool0 = new HikariPool(hikariDataSource0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create datasource instance: Exception copying HikariConfig state: 
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertNotNull(hikariPool0);
      
      boolean boolean0 = false;
      hikariPool0.isAutoCommit = boolean0;
      ConcurrentBag<IHikariConnectionProxy> concurrentBag0 = new ConcurrentBag<IHikariConnectionProxy>();
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      assertNotNull(concurrentBag0);
      
      hikariPool0.idleConnectionBag = concurrentBag0;
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iHikariConnectionProxy0).compareAndSetState(anyInt() , anyInt());
      boolean boolean1 = concurrentBag0.reserve(iHikariConnectionProxy0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      
      boolean boolean2 = false;
      hikariPool0.jdbc4ConnectionTest = boolean2;
      int int0 = hikariPool0.getIdleConnections();
      assertEquals(0, int0);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      
      // Undeclared exception!
      try { 
        hikariPool0.bagIsEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertEquals(0, hikariPool0.transactionIsolation);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertNotNull(hikariPool0);
      
      // Undeclared exception!
      try { 
        hikariPool0.closeIdleConnections();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertNotNull(hikariPool0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        hikariPool0.closeIdleConnections();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertNotNull(hikariPool0);
      
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertNotNull(hikariDataSource0);
      
      DataSource dataSource0 = hikariDataSource0.getDataSource();
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertNull(dataSource0);
      
      hikariPool0.dataSource = dataSource0;
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = hikariPool0.catalog;
      stringArray0[1] = hikariPool0.catalog;
      stringArray0[2] = hikariPool0.catalog;
      stringArray0[3] = hikariPool0.catalog;
      boolean boolean0 = false;
      hikariPool0.debug = boolean0;
      // Undeclared exception!
      try { 
        hikariPool0.logPoolState(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertNotNull(hikariPool0);
      
      int int0 = 852;
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertNotNull(hikariConfig0);
      
      hikariPool0.configuration = hikariConfig0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariPool0.configuration.getAcquireIncrement());
      assertEquals(0L, hikariPool0.configuration.getLeakDetectionThreshold());
      assertEquals(3, hikariPool0.configuration.getAcquireRetries());
      assertTrue(hikariPool0.configuration.isJdbc4ConnectionTest());
      assertEquals((-1), hikariPool0.configuration.getTransactionIsolation());
      assertFalse(hikariPool0.configuration.isRegisterMbeans());
      assertTrue(hikariPool0.configuration.isAutoCommit());
      assertEquals(60, hikariPool0.configuration.getMaximumPoolSize());
      assertNull(hikariPool0.configuration.getConnectionCustomizerClassName());
      assertNull(hikariPool0.configuration.getCatalog());
      assertNull(hikariPool0.configuration.getConnectionInitSql());
      assertEquals(0L, hikariPool0.configuration.getAcquireRetryDelay());
      assertEquals(5000L, hikariPool0.configuration.getConnectionTimeout());
      assertEquals(10, hikariPool0.configuration.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariPool0.configuration.getPoolName());
      assertFalse(hikariPool0.configuration.isInitializationFailFast());
      assertNull(hikariPool0.configuration.getDataSourceClassName());
      assertEquals(600000L, hikariPool0.configuration.getIdleTimeout());
      assertEquals(1800000L, hikariPool0.configuration.getMaxLifetime());
      assertNull(hikariPool0.configuration.getConnectionTestQuery());
      
      String string0 = "^;o";
      hikariConfig0.setJdbc4ConnectionTest(hikariPool0.debug);
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      
      Object object0 = properties0.put(hikariPool0, string0);
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertNull(object0);
      
      hikariPool0.transactionIsolation = int0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      String string1 = hikariPool0.toString();
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals("HikariPool-0", string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(852, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = hikariPool0.configuration.transactionIsolationName;
      String string2 = "J\\?5&\"N@h)Pjp~Xop";
      stringArray0[1] = string2;
      stringArray0[2] = hikariConfig0.connectionInitSql;
      stringArray0[3] = hikariConfig0.connectionInitSql;
      // Undeclared exception!
      try { 
        hikariPool0.logPoolState(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertEquals(0, hikariPool0.transactionIsolation);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.debug);
      assertNotNull(hikariPool0);
      
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertNotNull(hikariDataSource0);
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariDataSource0.connectionCustomizer;
      assertNull(iConnectionCustomizer0);
      
      hikariPool0.dataSource = (DataSource) hikariDataSource0;
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      
      int int0 = 0;
      hikariDataSource0.setAcquireRetries(int0);
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(0, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      
      hikariPool0.connectionCustomizer = iConnectionCustomizer0;
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      
      String[] stringArray0 = new String[2];
      hikariDataSource0.leakDetectionThreshold = hikariPool0.leakDetectionThreshold;
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      
      stringArray0[0] = hikariPool0.catalog;
      AtomicInteger atomicInteger0 = new AtomicInteger(hikariPool0.transactionIsolation);
      assertEquals(0, atomicInteger0.intValue());
      assertEquals(0, atomicInteger0.get());
      assertEquals((byte)0, atomicInteger0.byteValue());
      assertEquals(0L, atomicInteger0.longValue());
      assertEquals((short)0, atomicInteger0.shortValue());
      assertEquals(0.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(0.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals("0", atomicInteger0.toString());
      assertEquals(0, hikariPool0.transactionIsolation);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.debug);
      assertNotNull(atomicInteger0);
      
      hikariPool0.totalConnections = atomicInteger0;
      assertEquals(0, hikariPool0.getTotalConnections());
      assertEquals(0, atomicInteger0.intValue());
      assertEquals(0, atomicInteger0.get());
      assertEquals((byte)0, atomicInteger0.byteValue());
      assertEquals(0L, atomicInteger0.longValue());
      assertEquals((short)0, atomicInteger0.shortValue());
      assertEquals(0.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(0.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals("0", atomicInteger0.toString());
      assertEquals(0.0F, hikariPool0.totalConnections.floatValue(), 0.01F);
      assertEquals(0, hikariPool0.totalConnections.get());
      assertEquals((short)0, hikariPool0.totalConnections.shortValue());
      assertEquals(0L, hikariPool0.totalConnections.longValue());
      assertEquals(0.0, hikariPool0.totalConnections.doubleValue(), 0.01);
      assertEquals("0", hikariPool0.totalConnections.toString());
      assertEquals(0, hikariPool0.totalConnections.intValue());
      assertEquals((byte)0, hikariPool0.totalConnections.byteValue());
      
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(iHikariConnectionProxy0).createStatement();
      int int1 = 2;
      IntBinaryOperator intBinaryOperator0 = mock(IntBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(hikariDataSource0.maxPoolSize).when(intBinaryOperator0).applyAsInt(anyInt() , anyInt());
      int int2 = atomicInteger0.getAndAccumulate(int1, intBinaryOperator0);
      assertEquals(60, hikariPool0.getTotalConnections());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((byte)60, atomicInteger0.byteValue());
      assertEquals("60", atomicInteger0.toString());
      assertEquals((short)60, atomicInteger0.shortValue());
      assertEquals(60, atomicInteger0.get());
      assertEquals(60L, atomicInteger0.longValue());
      assertEquals(60.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(60, atomicInteger0.intValue());
      assertEquals(60.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.debug);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(0, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      
      // Undeclared exception!
      try { 
        hikariPool0.isConnectionAlive(iHikariConnectionProxy0, hikariDataSource0.poolNumber);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertNotNull(hikariConfig0);
      
      HikariPool hikariPool0 = new HikariPool();
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertNotNull(hikariPool0);
      
      hikariConfig0.transactionIsolationName = hikariPool0.catalog;
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      
      // Undeclared exception!
      try { 
        hikariPool0.getThreadsAwaitingConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.debug);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertNotNull(hikariPool0);
      
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iHikariConnectionProxy0).isBrokenConnection();
      boolean boolean0 = true;
      hikariPool0.isAutoCommit = boolean0;
      boolean boolean1 = false;
      hikariPool0.isRegisteredMbeans = boolean1;
      String string0 = "~D_";
      hikariPool0.catalog = string0;
      // Undeclared exception!
      try { 
        hikariPool0.releaseConnection(iHikariConnectionProxy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.debug);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertNotNull(hikariPool0);
      
      String string0 = "";
      hikariPool0.catalog = string0;
      boolean boolean0 = false;
      hikariPool0.isRegisteredMbeans = boolean0;
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(iHikariConnectionProxy0).createStatement();
      long long0 = 4122L;
      // Undeclared exception!
      try { 
        hikariPool0.isConnectionAlive(iHikariConnectionProxy0, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertNotNull(hikariPool0);
      
      boolean boolean0 = true;
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(iHikariConnectionProxy0).isBrokenConnection();
      boolean boolean1 = true;
      hikariPool0.isAutoCommit = boolean1;
      boolean boolean2 = false;
      hikariPool0.isRegisteredMbeans = boolean2;
      String string0 = "~D_";
      hikariPool0.catalog = string0;
      // Undeclared exception!
      try { 
        hikariPool0.releaseConnection(iHikariConnectionProxy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertNotNull(hikariPool0);
      
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(hikariPool0.isAutoCommit).when(iHikariConnectionProxy0).isBrokenConnection();
      boolean boolean0 = true;
      hikariPool0.isAutoCommit = boolean0;
      boolean boolean1 = true;
      hikariPool0.isRegisteredMbeans = boolean1;
      String string0 = "~D_";
      hikariPool0.catalog = string0;
      // Undeclared exception!
      try { 
        hikariPool0.releaseConnection(iHikariConnectionProxy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertNotNull(hikariPool0);
      
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      hikariPool0.jdbc4ConnectionTest = boolean0;
      // Undeclared exception!
      try { 
        hikariPool0.getConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertNotNull(hikariPool0);
      
      ConcurrentBag<IHikariConnectionProxy> concurrentBag0 = new ConcurrentBag<IHikariConnectionProxy>();
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      assertNotNull(concurrentBag0);
      
      hikariPool0.idleConnectionBag = concurrentBag0;
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iHikariConnectionProxy0).isBrokenConnection();
      doReturn(false).when(iHikariConnectionProxy0).compareAndSetState(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        hikariPool0.releaseConnection(iHikariConnectionProxy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Value was returned to the bag that was not borrowed
         //
         verifyException("com.zaxxer.hikari.util.ConcurrentBag", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertNotNull(hikariPool0);
      
      hikariPool0.catalog = hikariPool0.catalog;
      boolean boolean0 = true;
      hikariPool0.isRegisteredMbeans = boolean0;
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(iHikariConnectionProxy0).createStatement();
      long long0 = 4122L;
      // Undeclared exception!
      try { 
        hikariPool0.isConnectionAlive(iHikariConnectionProxy0, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertEquals(0, hikariPool0.transactionIsolation);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.debug);
      assertNotNull(hikariPool0);
      
      int int0 = (-400);
      AtomicInteger atomicInteger0 = new AtomicInteger(int0);
      assertEquals((-400), atomicInteger0.get());
      assertEquals((-400.0F), atomicInteger0.floatValue(), 0.01F);
      assertEquals((-400L), atomicInteger0.longValue());
      assertEquals((-400), atomicInteger0.intValue());
      assertEquals((byte)112, atomicInteger0.byteValue());
      assertEquals("-400", atomicInteger0.toString());
      assertEquals((-400.0), atomicInteger0.doubleValue(), 0.01);
      assertEquals((short) (-400), atomicInteger0.shortValue());
      assertNotNull(atomicInteger0);
      
      hikariPool0.totalConnections = atomicInteger0;
      assertEquals((-400), hikariPool0.getTotalConnections());
      assertEquals((-400), atomicInteger0.get());
      assertEquals((-400.0F), atomicInteger0.floatValue(), 0.01F);
      assertEquals((-400L), atomicInteger0.longValue());
      assertEquals((-400), atomicInteger0.intValue());
      assertEquals((byte)112, atomicInteger0.byteValue());
      assertEquals("-400", atomicInteger0.toString());
      assertEquals((-400.0), atomicInteger0.doubleValue(), 0.01);
      assertEquals((short) (-400), atomicInteger0.shortValue());
      assertEquals((-400.0), hikariPool0.totalConnections.doubleValue(), 0.01);
      assertEquals((-400L), hikariPool0.totalConnections.longValue());
      assertEquals((-400), hikariPool0.totalConnections.intValue());
      assertEquals((byte)112, hikariPool0.totalConnections.byteValue());
      assertEquals("-400", hikariPool0.totalConnections.toString());
      assertEquals((-400.0F), hikariPool0.totalConnections.floatValue(), 0.01F);
      assertEquals((short) (-400), hikariPool0.totalConnections.shortValue());
      assertEquals((-400), hikariPool0.totalConnections.get());
      
      int int1 = (-1092);
      int int2 = atomicInteger0.getAndAdd(int1);
      assertEquals((-1492.0F), atomicInteger0.floatValue(), 0.01F);
      assertEquals((short) (-1492), atomicInteger0.shortValue());
      assertEquals((byte)44, atomicInteger0.byteValue());
      assertEquals("-1492", atomicInteger0.toString());
      assertEquals((-1492L), atomicInteger0.longValue());
      assertEquals((-1492), atomicInteger0.intValue());
      assertEquals((-1492), atomicInteger0.get());
      assertEquals((-1492.0), atomicInteger0.doubleValue(), 0.01);
      assertEquals((-400), int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = atomicInteger0.addAndGet(int1);
      assertEquals((short) (-2584), atomicInteger0.shortValue());
      assertEquals((-2584), atomicInteger0.get());
      assertEquals((-2584.0F), atomicInteger0.floatValue(), 0.01F);
      assertEquals("-2584", atomicInteger0.toString());
      assertEquals((-2584L), atomicInteger0.longValue());
      assertEquals((-2584.0), atomicInteger0.doubleValue(), 0.01);
      assertEquals((-2584), atomicInteger0.intValue());
      assertEquals((byte) (-24), atomicInteger0.byteValue());
      assertEquals((-2584), int3);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      int int4 = (-267);
      int int5 = atomicInteger0.addAndGet(int4);
      assertEquals((short) (-2851), atomicInteger0.shortValue());
      assertEquals((byte) (-35), atomicInteger0.byteValue());
      assertEquals((-2851), atomicInteger0.intValue());
      assertEquals((-2851L), atomicInteger0.longValue());
      assertEquals((-2851), atomicInteger0.get());
      assertEquals("-2851", atomicInteger0.toString());
      assertEquals((-2851.0F), atomicInteger0.floatValue(), 0.01F);
      assertEquals((-2851.0), atomicInteger0.doubleValue(), 0.01);
      assertEquals((-2851), int5);
      assertFalse(int0 == int4);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      
      int int6 = hikariPool0.getTotalConnections();
      assertEquals((-2851), hikariPool0.getTotalConnections());
      assertEquals((-2851), int6);
      assertFalse(int6 == int1);
      assertTrue(int6 == int5);
      assertFalse(int6 == int4);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.debug);
      
      int int7 = 2838;
      hikariPool0.transactionIsolation = int7;
      assertEquals((-2851), hikariPool0.getTotalConnections());
      
      // Undeclared exception!
      try { 
        hikariPool0.getConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.debug);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertNotNull(hikariPool0);
      
      hikariPool0.catalog = string0;
      hikariPool0.isRegisteredMbeans = boolean0;
      IHikariConnectionProxy iHikariConnectionProxy0 = null;
      long long0 = 1533L;
      // Undeclared exception!
      try { 
        hikariPool0.isConnectionAlive(iHikariConnectionProxy0, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.debug);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertNotNull(hikariPool0);
      
      boolean boolean0 = true;
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = true;
      hikariPool0.isAutoCommit = boolean1;
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertNotNull(hikariDataSource0);
      
      Properties properties0 = hikariDataSource0.getDataSourceProperties();
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-1", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertNotNull(hikariConfig0);
      
      hikariPool0.configuration = hikariConfig0;
      assertEquals("HikariPool-1", hikariPool0.toString());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-1", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariPool0.configuration.getIdleTimeout());
      assertEquals(1800000L, hikariPool0.configuration.getMaxLifetime());
      assertEquals((-1), hikariPool0.configuration.getTransactionIsolation());
      assertNull(hikariPool0.configuration.getConnectionTestQuery());
      assertNull(hikariPool0.configuration.getConnectionInitSql());
      assertEquals(3, hikariPool0.configuration.getAcquireRetries());
      assertEquals(0, hikariPool0.configuration.getAcquireIncrement());
      assertEquals(0L, hikariPool0.configuration.getLeakDetectionThreshold());
      assertFalse(hikariPool0.configuration.isInitializationFailFast());
      assertEquals(5000L, hikariPool0.configuration.getConnectionTimeout());
      assertEquals(0L, hikariPool0.configuration.getAcquireRetryDelay());
      assertTrue(hikariPool0.configuration.isJdbc4ConnectionTest());
      assertNull(hikariPool0.configuration.getDataSourceClassName());
      assertEquals("HikariPool-1", hikariPool0.configuration.getPoolName());
      assertTrue(hikariPool0.configuration.isAutoCommit());
      assertEquals(60, hikariPool0.configuration.getMaximumPoolSize());
      assertEquals(10, hikariPool0.configuration.getMinimumPoolSize());
      assertNull(hikariPool0.configuration.getCatalog());
      assertFalse(hikariPool0.configuration.isRegisterMbeans());
      assertNull(hikariPool0.configuration.getConnectionCustomizerClassName());
      
      boolean boolean2 = false;
      hikariPool0.isRegisteredMbeans = boolean2;
      assertEquals("HikariPool-1", hikariPool0.toString());
      
      String string0 = "~D_";
      hikariPool0.catalog = string0;
      assertEquals("HikariPool-1", hikariPool0.toString());
      
      // Undeclared exception!
      try { 
        hikariPool0.shutdown();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.debug);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertNotNull(hikariPool0);
      
      int int0 = 852;
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertNotNull(hikariConfig0);
      
      hikariPool0.configuration = hikariConfig0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariPool0.configuration.getAcquireRetryDelay());
      assertNull(hikariPool0.configuration.getDataSourceClassName());
      assertEquals(10, hikariPool0.configuration.getMinimumPoolSize());
      assertEquals(5000L, hikariPool0.configuration.getConnectionTimeout());
      assertNull(hikariPool0.configuration.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariPool0.configuration.getPoolName());
      assertNull(hikariPool0.configuration.getConnectionTestQuery());
      assertEquals(600000L, hikariPool0.configuration.getIdleTimeout());
      assertEquals(3, hikariPool0.configuration.getAcquireRetries());
      assertEquals(1800000L, hikariPool0.configuration.getMaxLifetime());
      assertEquals((-1), hikariPool0.configuration.getTransactionIsolation());
      assertEquals(0, hikariPool0.configuration.getAcquireIncrement());
      assertEquals(0L, hikariPool0.configuration.getLeakDetectionThreshold());
      assertFalse(hikariPool0.configuration.isInitializationFailFast());
      assertFalse(hikariPool0.configuration.isRegisterMbeans());
      assertTrue(hikariPool0.configuration.isAutoCommit());
      assertTrue(hikariPool0.configuration.isJdbc4ConnectionTest());
      assertNull(hikariPool0.configuration.getCatalog());
      assertNull(hikariPool0.configuration.getConnectionInitSql());
      assertEquals(60, hikariPool0.configuration.getMaximumPoolSize());
      
      String string0 = "^;o";
      // Undeclared exception!
      try { 
        hikariPool0.getConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      IHikariConnectionProxy iHikariConnectionProxy1 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertNotNull(hikariDataSource0);
      
      long long0 = 16L;
      String string0 = "Tiatt,L";
      hikariDataSource0.dataSourceClassName = string0;
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals("Tiatt,L", hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      
      hikariDataSource0.setPoolName(string0);
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("Tiatt,L", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals("Tiatt,L", hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      
      hikariDataSource0.maxLifetime = long0;
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("Tiatt,L", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(16L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("Tiatt,L", hikariDataSource0.getDataSourceClassName());
      
      String string1 = "";
      hikariDataSource0.setTransactionIsolation(string1);
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("Tiatt,L", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(16L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("Tiatt,L", hikariDataSource0.getDataSourceClassName());
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(16L, hikariDataSource0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      
      HikariPool hikariPool0 = null;
      try {
        hikariPool0 = new HikariPool(hikariDataSource0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid transaction isolation value: 
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertNotNull(hikariPool0);
      
      ConcurrentBag<IHikariConnectionProxy> concurrentBag0 = hikariPool0.idleConnectionBag;
      assertNull(concurrentBag0);
      
      hikariPool0.idleConnectionBag = concurrentBag0;
      int int0 = 852;
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertNotNull(hikariConfig0);
      
      hikariPool0.configuration = hikariConfig0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariPool0.configuration.isInitializationFailFast());
      assertFalse(hikariPool0.configuration.isRegisterMbeans());
      assertEquals((-1), hikariPool0.configuration.getTransactionIsolation());
      assertNull(hikariPool0.configuration.getConnectionInitSql());
      assertNull(hikariPool0.configuration.getCatalog());
      assertEquals(0, hikariPool0.configuration.getAcquireIncrement());
      assertEquals(0L, hikariPool0.configuration.getLeakDetectionThreshold());
      assertEquals(60, hikariPool0.configuration.getMaximumPoolSize());
      assertNull(hikariPool0.configuration.getDataSourceClassName());
      assertEquals(0L, hikariPool0.configuration.getAcquireRetryDelay());
      assertNull(hikariPool0.configuration.getConnectionCustomizerClassName());
      assertTrue(hikariPool0.configuration.isAutoCommit());
      assertTrue(hikariPool0.configuration.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariPool0.configuration.getConnectionTimeout());
      assertNull(hikariPool0.configuration.getConnectionTestQuery());
      assertEquals(10, hikariPool0.configuration.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariPool0.configuration.getPoolName());
      assertEquals(3, hikariPool0.configuration.getAcquireRetries());
      assertEquals(600000L, hikariPool0.configuration.getIdleTimeout());
      assertEquals(1800000L, hikariPool0.configuration.getMaxLifetime());
      
      String string0 = "^;o";
      hikariConfig0.setJdbc4ConnectionTest(hikariPool0.debug);
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      
      Object object0 = properties0.put(hikariPool0, string0);
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertNull(object0);
      
      hikariPool0.transactionIsolation = int0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      String string1 = hikariPool0.toString();
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals("HikariPool-0", string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(852, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = hikariPool0.configuration.transactionIsolationName;
      String string2 = "J\\?5&\"N@h)Pjp~Xop";
      stringArray0[1] = string2;
      stringArray0[2] = hikariConfig0.connectionInitSql;
      // Undeclared exception!
      try { 
        hikariPool0.fillPool();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertNotNull(hikariPool0);
      
      boolean boolean0 = true;
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = true;
      hikariPool0.isAutoCommit = boolean1;
      boolean boolean2 = false;
      hikariPool0.isRegisteredMbeans = boolean2;
      String string0 = "~D_";
      hikariPool0.catalog = string0;
      IHikariConnectionProxy iHikariConnectionProxy1 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(iHikariConnectionProxy1).createStatement();
      long long0 = (-884L);
      // Undeclared exception!
      try { 
        hikariPool0.isConnectionAlive(iHikariConnectionProxy1, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      HikariPool hikariPool0 = new HikariPool();
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertNotNull(hikariPool0);
      
      boolean boolean1 = true;
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      boolean boolean2 = true;
      hikariPool0.isAutoCommit = boolean1;
      boolean boolean3 = false;
      hikariPool0.isRegisteredMbeans = boolean3;
      IHikariConnectionProxy iHikariConnectionProxy1 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(iHikariConnectionProxy1).createStatement();
      long long0 = (-987L);
      // Undeclared exception!
      try { 
        hikariPool0.isConnectionAlive(iHikariConnectionProxy1, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertNotNull(hikariPool0);
      
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      ConcurrentBag<IHikariConnectionProxy> concurrentBag0 = new ConcurrentBag<IHikariConnectionProxy>();
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      assertNotNull(concurrentBag0);
      
      hikariPool0.idleConnectionBag = concurrentBag0;
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(iHikariConnectionProxy0).compareAndSetState(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        hikariPool0.closeConnection(iHikariConnectionProxy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to remove an object from the bag that was not borrowed or reserved
         //
         verifyException("com.zaxxer.hikari.util.ConcurrentBag", e);
      }
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      HikariPool hikariPool0 = new HikariPool();
      assertEquals(0, hikariPool0.transactionIsolation);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertNotNull(hikariPool0);
      
      String[] stringArray0 = null;
      AtomicInteger atomicInteger0 = new AtomicInteger(hikariPool0.transactionIsolation);
      assertEquals((short)0, atomicInteger0.shortValue());
      assertEquals(0L, atomicInteger0.longValue());
      assertEquals(0.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(0, atomicInteger0.get());
      assertEquals(0.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals("0", atomicInteger0.toString());
      assertEquals(0, atomicInteger0.intValue());
      assertEquals((byte)0, atomicInteger0.byteValue());
      assertEquals(0, hikariPool0.transactionIsolation);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertNotNull(atomicInteger0);
      
      hikariPool0.totalConnections = atomicInteger0;
      assertEquals(0, hikariPool0.getTotalConnections());
      assertEquals((short)0, atomicInteger0.shortValue());
      assertEquals(0L, atomicInteger0.longValue());
      assertEquals(0.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(0, atomicInteger0.get());
      assertEquals(0.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals("0", atomicInteger0.toString());
      assertEquals(0, atomicInteger0.intValue());
      assertEquals((byte)0, atomicInteger0.byteValue());
      assertEquals(0.0, hikariPool0.totalConnections.doubleValue(), 0.01);
      assertEquals((byte)0, hikariPool0.totalConnections.byteValue());
      assertEquals(0, hikariPool0.totalConnections.get());
      assertEquals(0.0F, hikariPool0.totalConnections.floatValue(), 0.01F);
      assertEquals("0", hikariPool0.totalConnections.toString());
      assertEquals(0L, hikariPool0.totalConnections.longValue());
      assertEquals((short)0, hikariPool0.totalConnections.shortValue());
      assertEquals(0, hikariPool0.totalConnections.intValue());
      
      // Undeclared exception!
      try { 
        hikariPool0.logPoolState(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.debug);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertNotNull(hikariPool0);
      
      ConcurrentBag<IHikariConnectionProxy> concurrentBag0 = new ConcurrentBag<IHikariConnectionProxy>();
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      assertNotNull(concurrentBag0);
      
      hikariPool0.idleConnectionBag = concurrentBag0;
      int int0 = hikariPool0.getThreadsAwaitingConnection();
      assertEquals(0, int0);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.debug);
      assertEquals(0, hikariPool0.transactionIsolation);
      
      // Undeclared exception!
      try { 
        hikariPool0.getTotalConnections();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isAutoCommit);
      assertNotNull(hikariPool0);
      
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      IHikariConnectionProxy iHikariConnectionProxy1 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(iHikariConnectionProxy1).createStatement();
      long long0 = 1000L;
      // Undeclared exception!
      try { 
        hikariPool0.isConnectionAlive(iHikariConnectionProxy1, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertNotNull(hikariDataSource0);
      
      HikariPool hikariPool0 = new HikariPool();
      assertEquals(0, hikariPool0.transactionIsolation);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.debug);
      assertNotNull(hikariPool0);
      
      hikariPool0.isAutoCommit = hikariDataSource0.isJdbc4connectionTest;
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      
      hikariPool0.configuration = (HikariConfig) hikariDataSource0;
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertNull(hikariPool0.configuration.getCatalog());
      assertEquals(5000L, hikariPool0.configuration.getConnectionTimeout());
      assertFalse(hikariPool0.configuration.isInitializationFailFast());
      assertFalse(hikariPool0.configuration.isRegisterMbeans());
      assertEquals(0L, hikariPool0.configuration.getAcquireRetryDelay());
      assertEquals(1800000L, hikariPool0.configuration.getMaxLifetime());
      assertEquals((-1), hikariPool0.configuration.getTransactionIsolation());
      assertNull(hikariPool0.configuration.getDataSourceClassName());
      assertEquals(600000L, hikariPool0.configuration.getIdleTimeout());
      assertEquals(3, hikariPool0.configuration.getAcquireRetries());
      assertEquals(10, hikariPool0.configuration.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariPool0.configuration.getPoolName());
      assertTrue(hikariPool0.configuration.isAutoCommit());
      assertEquals(60, hikariPool0.configuration.getMaximumPoolSize());
      assertTrue(hikariPool0.configuration.isJdbc4ConnectionTest());
      assertNull(hikariPool0.configuration.getConnectionTestQuery());
      assertNull(hikariPool0.configuration.getConnectionCustomizerClassName());
      assertNull(hikariPool0.configuration.getConnectionInitSql());
      assertEquals(0, hikariPool0.configuration.getAcquireIncrement());
      assertEquals(0L, hikariPool0.configuration.getLeakDetectionThreshold());
      
      // Undeclared exception!
      try { 
        hikariPool0.bagIsEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertNotNull(hikariPool0);
      
      ConcurrentBag<IHikariConnectionProxy> concurrentBag0 = new ConcurrentBag<IHikariConnectionProxy>();
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      assertNotNull(concurrentBag0);
      
      hikariPool0.idleConnectionBag = concurrentBag0;
      boolean boolean0 = true;
      hikariPool0.closeIdleConnections();
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.isAutoCommit);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      
      hikariPool0.catalog = hikariPool0.catalog;
      boolean boolean1 = false;
      hikariPool0.isRegisteredMbeans = boolean1;
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(iHikariConnectionProxy0).createStatement();
      long long0 = 4122L;
      // Undeclared exception!
      try { 
        hikariPool0.isConnectionAlive(iHikariConnectionProxy0, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isAutoCommit);
      assertNotNull(hikariPool0);
      
      ConcurrentBag<IHikariConnectionProxy> concurrentBag0 = new ConcurrentBag<IHikariConnectionProxy>();
      assertEquals(1, ConcurrentBag.STATE_IN_USE);
      assertEquals(0, ConcurrentBag.STATE_NOT_IN_USE);
      assertNotNull(concurrentBag0);
      
      hikariPool0.idleConnectionBag = concurrentBag0;
      boolean boolean0 = true;
      hikariPool0.closeIdleConnections();
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isAutoCommit);
      
      hikariPool0.catalog = hikariPool0.catalog;
      boolean boolean1 = false;
      hikariPool0.isRegisteredMbeans = boolean1;
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(iHikariConnectionProxy0).createStatement();
      long long0 = 4122L;
      int int0 = hikariPool0.getIdleConnections();
      assertEquals(0, int0);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isAutoCommit);
      
      // Undeclared exception!
      try { 
        hikariPool0.isConnectionAlive(iHikariConnectionProxy0, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test74()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertNotNull(hikariPool0);
      
      ConcurrentBag<IHikariConnectionProxy> concurrentBag0 = hikariPool0.idleConnectionBag;
      assertNull(concurrentBag0);
      
      hikariPool0.idleConnectionBag = concurrentBag0;
      int int0 = 852;
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertNotNull(hikariConfig0);
      
      hikariPool0.configuration = hikariConfig0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariPool0.configuration.getDataSourceClassName());
      assertEquals(10, hikariPool0.configuration.getMinimumPoolSize());
      assertFalse(hikariPool0.configuration.isInitializationFailFast());
      assertEquals(0L, hikariPool0.configuration.getAcquireRetryDelay());
      assertTrue(hikariPool0.configuration.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariPool0.configuration.getConnectionTimeout());
      assertEquals((-1), hikariPool0.configuration.getTransactionIsolation());
      assertEquals(600000L, hikariPool0.configuration.getIdleTimeout());
      assertEquals(1800000L, hikariPool0.configuration.getMaxLifetime());
      assertEquals(3, hikariPool0.configuration.getAcquireRetries());
      assertNull(hikariPool0.configuration.getConnectionInitSql());
      assertNull(hikariPool0.configuration.getConnectionTestQuery());
      assertEquals(0, hikariPool0.configuration.getAcquireIncrement());
      assertEquals(0L, hikariPool0.configuration.getLeakDetectionThreshold());
      assertTrue(hikariPool0.configuration.isAutoCommit());
      assertEquals(60, hikariPool0.configuration.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariPool0.configuration.getPoolName());
      assertFalse(hikariPool0.configuration.isRegisterMbeans());
      assertNull(hikariPool0.configuration.getCatalog());
      assertNull(hikariPool0.configuration.getConnectionCustomizerClassName());
      
      String string0 = "^;o";
      hikariConfig0.setJdbc4ConnectionTest(hikariPool0.debug);
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      
      Object object0 = properties0.put(hikariPool0, string0);
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.debug);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertNull(object0);
      
      hikariPool0.transactionIsolation = int0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      String string1 = hikariPool0.toString();
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals("HikariPool-0", string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.debug);
      assertEquals(852, hikariPool0.transactionIsolation);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[4];
      int int1 = 63;
      AtomicInteger atomicInteger0 = new AtomicInteger(int1);
      assertEquals(63, atomicInteger0.get());
      assertEquals(63, atomicInteger0.intValue());
      assertEquals((byte)63, atomicInteger0.byteValue());
      assertEquals(63.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals((short)63, atomicInteger0.shortValue());
      assertEquals("63", atomicInteger0.toString());
      assertEquals(63L, atomicInteger0.longValue());
      assertEquals(63.0, atomicInteger0.doubleValue(), 0.01);
      assertFalse(int1 == int0);
      assertNotNull(atomicInteger0);
      
      hikariPool0.totalConnections = atomicInteger0;
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(63, hikariPool0.getTotalConnections());
      assertEquals(63, atomicInteger0.get());
      assertEquals(63, atomicInteger0.intValue());
      assertEquals((byte)63, atomicInteger0.byteValue());
      assertEquals(63.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals((short)63, atomicInteger0.shortValue());
      assertEquals("63", atomicInteger0.toString());
      assertEquals(63L, atomicInteger0.longValue());
      assertEquals(63.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals((byte)63, hikariPool0.totalConnections.byteValue());
      assertEquals(63, hikariPool0.totalConnections.intValue());
      assertEquals(63.0F, hikariPool0.totalConnections.floatValue(), 0.01F);
      assertEquals(63, hikariPool0.totalConnections.get());
      assertEquals(63.0, hikariPool0.totalConnections.doubleValue(), 0.01);
      assertEquals("63", hikariPool0.totalConnections.toString());
      assertEquals(63L, hikariPool0.totalConnections.longValue());
      assertEquals((short)63, hikariPool0.totalConnections.shortValue());
      
      stringArray0[0] = hikariPool0.configuration.transactionIsolationName;
      String string2 = "J\\?5&\"N@h)Pjp~Xop";
      hikariPool0.bagIsEmpty();
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(63, hikariPool0.getTotalConnections());
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertFalse(hikariPool0.shutdown);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.debug);
      assertEquals(852, hikariPool0.transactionIsolation);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      
      stringArray0[1] = string2;
      stringArray0[2] = hikariConfig0.connectionInitSql;
      // Undeclared exception!
      try { 
        hikariPool0.fillPool();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test75()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertNotNull(hikariPool0);
      
      boolean boolean0 = true;
      hikariPool0.debug = boolean0;
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(iHikariConnectionProxy0).createStatement();
      long long0 = 10L;
      // Undeclared exception!
      try { 
        hikariPool0.isConnectionAlive(iHikariConnectionProxy0, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test76()  throws Throwable  {
      HikariPool hikariPool0 = new HikariPool();
      assertFalse(hikariPool0.debug);
      assertFalse(hikariPool0.isAutoCommit);
      assertFalse(hikariPool0.shutdown);
      assertEquals(0, hikariPool0.transactionIsolation);
      assertFalse(hikariPool0.jdbc4ConnectionTest);
      assertFalse(hikariPool0.isRegisteredMbeans);
      assertEquals(0L, hikariPool0.leakDetectionThreshold);
      assertNotNull(hikariPool0);
      
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      hikariPool0.shutdown = boolean0;
      boolean boolean1 = true;
      hikariPool0.isRegisteredMbeans = boolean1;
      EvoSuiteFile evoSuiteFile0 = null;
      IHikariConnectionProxy iHikariConnectionProxy1 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(iHikariConnectionProxy1).createStatement();
      long long0 = 1410L;
      // Undeclared exception!
      try { 
        hikariPool0.isConnectionAlive(iHikariConnectionProxy1, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }
}
