/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 07 04:19:10 GMT 2021
 */

package com.zaxxer.hikari;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import com.zaxxer.hikari.HikariPool;
import com.zaxxer.hikari.proxy.IHikariConnectionProxy;
import java.sql.SQLException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HikariPool_ESTest extends HikariPool_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNotNull(hikariDataSource0);
      
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertNotNull(hikariDataSource1);
      
      boolean boolean0 = true;
      hikariDataSource0.setInitializationFailFast(boolean0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      
      hikariDataSource0.copyState(hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertTrue(hikariDataSource1.isInitializationFailFast());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      
      hikariDataSource0.setDataSource(hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertTrue(hikariDataSource1.isInitializationFailFast());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      
      HikariDataSource hikariDataSource2 = new HikariDataSource(hikariDataSource0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertNull(hikariDataSource2.getCatalog());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertNotNull(hikariDataSource2);
      
      long long0 = 220L;
      hikariDataSource2.setConnectionTimeout(long0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals(220L, hikariDataSource2.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertNull(hikariDataSource2.getCatalog());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      
      HikariPool hikariPool0 = new HikariPool(hikariDataSource2);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals(220L, hikariDataSource2.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertNull(hikariDataSource2.getCatalog());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals(10, hikariPool0.getTotalConnections());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertNotNull(hikariPool0);
      
      hikariPool0.bagIsEmpty();
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals(220L, hikariDataSource2.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertNull(hikariDataSource2.getCatalog());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals(11, hikariPool0.getTotalConnections());
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      int int0 = hikariPool0.getTotalConnections();
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertEquals(11, int0);
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals(220L, hikariDataSource2.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertNull(hikariDataSource2.getCatalog());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals(11, hikariPool0.getTotalConnections());
      assertEquals("HikariPool-0", hikariPool0.toString());
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNotNull(hikariDataSource0);
      
      String string0 = "-H";
      hikariDataSource0.setDataSourceClassName(string0);
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("-H", hikariDataSource0.getDataSourceClassName());
      
      HikariDataSource hikariDataSource1 = null;
      try {
        hikariDataSource1 = new HikariDataSource(hikariDataSource0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create datasource instance: -H
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNotNull(hikariDataSource0);
      
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertNotNull(hikariDataSource1);
      
      boolean boolean0 = true;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      hikariDataSource0.setInitializationFailFast(boolean0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      hikariDataSource0.copyState(hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource1.isInitializationFailFast());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean2 = FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      hikariDataSource0.setDataSource(hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource1.isInitializationFailFast());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      
      HikariDataSource hikariDataSource2 = new HikariDataSource(hikariDataSource0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertNull(hikariDataSource2.getCatalog());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertNotNull(hikariDataSource2);
      
      HikariPool hikariPool0 = new HikariPool(hikariDataSource2);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertNull(hikariDataSource2.getCatalog());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(10, hikariPool0.getTotalConnections());
      assertNotNull(hikariPool0);
      
      hikariPool0.bagIsEmpty();
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertNull(hikariDataSource2.getCatalog());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(11, hikariPool0.getTotalConnections());
      
      hikariPool0.shutdown();
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertNull(hikariDataSource2.getCatalog());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(11, hikariPool0.getTotalConnections());
      
      long long0 = 100L;
      System.setCurrentTimeMillis(long0);
      boolean boolean3 = true;
      boolean boolean4 = false;
      int int0 = hikariPool0.getActiveConnections();
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertEquals(11, int0);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertNull(hikariDataSource2.getCatalog());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(11, hikariPool0.getTotalConnections());
      
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(boolean3).when(iHikariConnectionProxy0).isBrokenConnection();
      doReturn(boolean3).when(iHikariConnectionProxy0).compareAndSetState(anyInt() , anyInt());
      hikariPool0.releaseConnection(iHikariConnectionProxy0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean4);
      assertFalse(boolean3 == boolean1);
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertNull(hikariDataSource2.getCatalog());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(10, hikariPool0.getTotalConnections());
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNotNull(hikariDataSource0);
      
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNotNull(hikariDataSource1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      long long0 = 2147483647L;
      hikariDataSource0.setMaxLifetime(long0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(2147483647L, hikariDataSource0.getMaxLifetime());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      
      hikariDataSource0.copyState(hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(2147483647L, hikariDataSource0.getMaxLifetime());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(2147483647L, hikariDataSource1.getMaxLifetime());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      
      hikariDataSource0.setDataSource(hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(2147483647L, hikariDataSource0.getMaxLifetime());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(2147483647L, hikariDataSource1.getMaxLifetime());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      
      HikariDataSource hikariDataSource2 = new HikariDataSource(hikariDataSource0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(2147483647L, hikariDataSource0.getMaxLifetime());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(2147483647L, hikariDataSource2.getMaxLifetime());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertNull(hikariDataSource2.getCatalog());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertFalse(hikariDataSource2.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertNotNull(hikariDataSource2);
      
      HikariPool hikariPool0 = new HikariPool(hikariDataSource2);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(2147483647L, hikariDataSource0.getMaxLifetime());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(2147483647L, hikariDataSource2.getMaxLifetime());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertNull(hikariDataSource2.getCatalog());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertFalse(hikariDataSource2.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals(10, hikariPool0.getTotalConnections());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertNotNull(hikariPool0);
      
      hikariPool0.bagIsEmpty();
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(2147483647L, hikariDataSource0.getMaxLifetime());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(2147483647L, hikariDataSource2.getMaxLifetime());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertNull(hikariDataSource2.getCatalog());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertFalse(hikariDataSource2.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals(11, hikariPool0.getTotalConnections());
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      hikariPool0.shutdown();
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(2147483647L, hikariDataSource0.getMaxLifetime());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(2147483647L, hikariDataSource2.getMaxLifetime());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertNull(hikariDataSource2.getCatalog());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertFalse(hikariDataSource2.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals(11, hikariPool0.getTotalConnections());
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      long long1 = 100L;
      boolean boolean0 = false;
      boolean boolean1 = false;
      hikariPool0.closeIdleConnections();
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(2147483647L, hikariDataSource0.getMaxLifetime());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(2147483647L, hikariDataSource2.getMaxLifetime());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertNull(hikariDataSource2.getCatalog());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertFalse(hikariDataSource2.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals(11, hikariPool0.getTotalConnections());
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      boolean boolean2 = true;
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(iHikariConnectionProxy0).isBrokenConnection();
      doReturn(boolean1, boolean2).when(iHikariConnectionProxy0).compareAndSetState(anyInt() , anyInt());
      hikariPool0.releaseConnection(iHikariConnectionProxy0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(2147483647L, hikariDataSource0.getMaxLifetime());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(2147483647L, hikariDataSource2.getMaxLifetime());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertNull(hikariDataSource2.getCatalog());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertFalse(hikariDataSource2.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals(10, hikariPool0.getTotalConnections());
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      try { 
        hikariPool0.getConnection();
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Pool has been shutdown
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNotNull(hikariDataSource0);
      
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNotNull(hikariDataSource1);
      
      boolean boolean0 = true;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      hikariDataSource0.setInitializationFailFast(boolean0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      
      hikariDataSource0.copyState(hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertTrue(hikariDataSource1.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      
      hikariDataSource0.setDataSource(hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertTrue(hikariDataSource1.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      
      HikariDataSource hikariDataSource2 = new HikariDataSource(hikariDataSource0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertNotNull(hikariDataSource2);
      
      HikariPool hikariPool0 = new HikariPool(hikariDataSource2);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(10, hikariPool0.getTotalConnections());
      assertNotNull(hikariPool0);
      
      hikariPool0.bagIsEmpty();
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(11, hikariPool0.getTotalConnections());
      
      hikariPool0.shutdown();
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(11, hikariPool0.getTotalConnections());
      
      long long0 = 100L;
      System.setCurrentTimeMillis(long0);
      boolean boolean1 = false;
      boolean boolean2 = false;
      hikariPool0.closeIdleConnections();
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(11, hikariPool0.getTotalConnections());
      
      boolean boolean3 = true;
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(boolean1).when(iHikariConnectionProxy0).isBrokenConnection();
      doReturn(boolean2, boolean3).when(iHikariConnectionProxy0).compareAndSetState(anyInt() , anyInt());
      hikariPool0.releaseConnection(iHikariConnectionProxy0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertFalse(boolean1 == boolean3);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean2 == boolean3);
      assertFalse(boolean2 == boolean0);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(10, hikariPool0.getTotalConnections());
      
      try { 
        hikariPool0.getConnection();
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Pool has been shutdown
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNotNull(hikariDataSource0);
      
      HikariPool hikariPool0 = null;
      try {
        hikariPool0 = new HikariPool(hikariDataSource0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      HikariConfig hikariConfig0 = null;
      HikariPool hikariPool0 = null;
      try {
        hikariPool0 = new HikariPool(hikariConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNotNull(hikariConfig0);
      
      HikariPool hikariPool0 = null;
      try {
        hikariPool0 = new HikariPool(hikariConfig0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNotNull(hikariConfig0);
      
      String string0 = "";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = false;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean1, boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      hikariConfig0.setDataSourceClassName(string0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create datasource instance: 
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNotNull(hikariDataSource0);
      
      String string0 = "";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      hikariDataSource0.setDataSourceClassName(string0);
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      
      int int0 = 2207;
      HikariPool hikariPool0 = null;
      try {
        hikariPool0 = new HikariPool(hikariDataSource0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create datasource instance: 
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNotNull(hikariDataSource0);
      
      String string0 = "javassist.CtField";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      hikariDataSource0.setDataSourceClassName(string0);
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("javassist.CtField", hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionInitSql());
      
      HikariDataSource hikariDataSource1 = null;
      try {
        hikariDataSource1 = new HikariDataSource(hikariDataSource0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create datasource instance: javassist.CtField
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNotNull(hikariDataSource0);
      
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertNotNull(hikariDataSource1);
      
      boolean boolean0 = true;
      hikariDataSource0.setInitializationFailFast(boolean0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      
      hikariDataSource0.setDataSource(hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      
      HikariDataSource hikariDataSource2 = new HikariDataSource(hikariDataSource0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getCatalog());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertNotNull(hikariDataSource2);
      
      HikariPool hikariPool0 = new HikariPool(hikariDataSource2);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getCatalog());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertEquals(10, hikariPool0.getTotalConnections());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertNotNull(hikariPool0);
      
      hikariPool0.shutdown();
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getCatalog());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertEquals(10, hikariPool0.getTotalConnections());
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      hikariPool0.shutdown();
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getCatalog());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertEquals(10, hikariPool0.getTotalConnections());
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      String string0 = hikariPool0.toString();
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertEquals("HikariPool-0", string0);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getCatalog());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertEquals(10, hikariPool0.getTotalConnections());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNotNull(hikariDataSource0);
      
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getCatalog());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertNotNull(hikariDataSource1);
      
      boolean boolean0 = true;
      hikariDataSource0.setInitializationFailFast(boolean0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      
      hikariDataSource0.copyState(hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertTrue(hikariDataSource1.isInitializationFailFast());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getCatalog());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      
      hikariDataSource0.setDataSource(hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertTrue(hikariDataSource1.isInitializationFailFast());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getCatalog());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      
      HikariDataSource hikariDataSource2 = new HikariDataSource(hikariDataSource0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertNull(hikariDataSource2.getCatalog());
      assertNotNull(hikariDataSource2);
      
      HikariPool hikariPool0 = new HikariPool(hikariDataSource2);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(10, hikariPool0.getTotalConnections());
      assertNotNull(hikariPool0);
      
      hikariPool0.bagIsEmpty();
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(11, hikariPool0.getTotalConnections());
      
      hikariPool0.shutdown();
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(11, hikariPool0.getTotalConnections());
      
      hikariPool0.closeIdleConnections();
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(11, hikariPool0.getTotalConnections());
      
      int int0 = hikariPool0.getIdleConnections();
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertEquals(0, int0);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(11, hikariPool0.getTotalConnections());
      
      int int1 = hikariPool0.getTotalConnections();
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertFalse(int1 == int0);
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertEquals(11, int1);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(11, hikariPool0.getTotalConnections());
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNotNull(hikariDataSource0);
      
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertNotNull(hikariDataSource1);
      
      boolean boolean0 = false;
      hikariDataSource0.setInitializationFailFast(boolean0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      
      hikariDataSource0.setDataSource(hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      
      HikariDataSource hikariDataSource2 = new HikariDataSource(hikariDataSource0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertFalse(hikariDataSource2.isInitializationFailFast());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertNotNull(hikariDataSource2);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNotNull(hikariDataSource0);
      
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNotNull(hikariDataSource1);
      
      boolean boolean0 = true;
      hikariDataSource0.setInitializationFailFast(boolean0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      
      hikariDataSource0.copyState(hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource1.isInitializationFailFast());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getConnectionInitSql());
      
      hikariDataSource0.setDataSource(hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource1.isInitializationFailFast());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getConnectionInitSql());
      
      HikariDataSource hikariDataSource2 = new HikariDataSource(hikariDataSource0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertNull(hikariDataSource2.getCatalog());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertNotNull(hikariDataSource2);
      
      hikariDataSource2.close();
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertNull(hikariDataSource2.getCatalog());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      
      HikariPool hikariPool0 = new HikariPool(hikariDataSource2);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertNull(hikariDataSource2.getCatalog());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(10, hikariPool0.getTotalConnections());
      assertNotNull(hikariPool0);
      
      hikariPool0.bagIsEmpty();
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertNull(hikariDataSource2.getCatalog());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(11, hikariPool0.getTotalConnections());
      
      int int0 = hikariPool0.getThreadsAwaitingConnection();
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertEquals(0, int0);
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertNull(hikariDataSource2.getCatalog());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(11, hikariPool0.getTotalConnections());
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNotNull(hikariDataSource0);
      
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNotNull(hikariDataSource1);
      
      boolean boolean0 = true;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      hikariDataSource0.setInitializationFailFast(boolean0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      
      hikariDataSource0.copyState(hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertTrue(hikariDataSource1.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      
      hikariDataSource0.setDataSource(hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertTrue(hikariDataSource1.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      
      HikariDataSource hikariDataSource2 = new HikariDataSource(hikariDataSource0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNotNull(hikariDataSource2);
      
      HikariPool hikariPool0 = new HikariPool(hikariDataSource2);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertEquals(10, hikariPool0.getTotalConnections());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertNotNull(hikariPool0);
      
      hikariPool0.bagIsEmpty();
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertEquals(11, hikariPool0.getTotalConnections());
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      hikariPool0.shutdown();
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertEquals(11, hikariPool0.getTotalConnections());
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      long long0 = 100L;
      System.setCurrentTimeMillis(long0);
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iHikariConnectionProxy0).isBrokenConnection();
      doReturn(false, false).when(iHikariConnectionProxy0).compareAndSetState(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        hikariPool0.releaseConnection(iHikariConnectionProxy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to remove an object from the bag that was not borrowed or reserved
         //
         verifyException("com.zaxxer.hikari.util.ConcurrentBag", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNotNull(hikariDataSource0);
      
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertNotNull(hikariDataSource1);
      
      boolean boolean0 = true;
      hikariDataSource0.setInitializationFailFast(boolean0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      
      hikariDataSource0.copyState(hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertTrue(hikariDataSource1.isInitializationFailFast());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      
      hikariDataSource0.setDataSource(hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertTrue(hikariDataSource1.isInitializationFailFast());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      
      HikariDataSource hikariDataSource2 = new HikariDataSource(hikariDataSource0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertNotNull(hikariDataSource2);
      
      HikariPool hikariPool0 = new HikariPool(hikariDataSource2);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertEquals(10, hikariPool0.getTotalConnections());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertNotNull(hikariPool0);
      
      hikariPool0.shutdown();
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertEquals(10, hikariPool0.getTotalConnections());
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      hikariPool0.bagIsEmpty();
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertEquals(10, hikariPool0.getTotalConnections());
      assertEquals("HikariPool-0", hikariPool0.toString());
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertNotNull(hikariDataSource0);
      
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertNotNull(hikariDataSource1);
      
      String string0 = "PS`OX`,Lzfd<";
      hikariDataSource1.setConnectionInitSql(string0);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals("PS`OX`,Lzfd<", hikariDataSource1.getConnectionInitSql());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      
      boolean boolean0 = true;
      hikariDataSource0.setInitializationFailFast(boolean0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      
      hikariDataSource0.setDataSource(hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals("PS`OX`,Lzfd<", hikariDataSource1.getConnectionInitSql());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      HikariDataSource hikariDataSource2 = new HikariDataSource(hikariDataSource0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertNotNull(hikariDataSource2);
      
      HikariPool hikariPool0 = new HikariPool(hikariDataSource2);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals(10, hikariPool0.getTotalConnections());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertNotNull(hikariPool0);
      
      hikariPool0.shutdown();
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals(10, hikariPool0.getTotalConnections());
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      hikariPool0.closeIdleConnections();
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals(10, hikariPool0.getTotalConnections());
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      int int0 = hikariPool0.getIdleConnections();
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertEquals(0, int0);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals(10, hikariPool0.getTotalConnections());
      assertEquals("HikariPool-0", hikariPool0.toString());
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNotNull(hikariDataSource0);
      
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertNull(hikariDataSource1.getCatalog());
      assertNotNull(hikariDataSource1);
      
      boolean boolean0 = true;
      hikariDataSource0.setInitializationFailFast(boolean0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      
      hikariDataSource0.copyState(hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertTrue(hikariDataSource1.isInitializationFailFast());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertNull(hikariDataSource1.getCatalog());
      
      hikariDataSource0.setDataSource(hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertTrue(hikariDataSource1.isInitializationFailFast());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertNull(hikariDataSource1.getCatalog());
      
      HikariDataSource hikariDataSource2 = new HikariDataSource(hikariDataSource0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertNotNull(hikariDataSource2);
      
      HikariPool hikariPool0 = new HikariPool(hikariDataSource2);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(10, hikariPool0.getTotalConnections());
      assertNotNull(hikariPool0);
      
      hikariPool0.bagIsEmpty();
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(11, hikariPool0.getTotalConnections());
      
      int int0 = hikariPool0.getActiveConnections();
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertEquals(11, int0);
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(11, hikariPool0.getTotalConnections());
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNotNull(hikariDataSource0);
      
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertNotNull(hikariDataSource1);
      
      boolean boolean0 = true;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      hikariDataSource0.setInitializationFailFast(boolean0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      
      hikariDataSource0.copyState(hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertTrue(hikariDataSource1.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      
      hikariDataSource0.setDataSource(hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertTrue(hikariDataSource1.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      
      HikariDataSource hikariDataSource2 = new HikariDataSource(hikariDataSource0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertNotNull(hikariDataSource2);
      
      HikariPool hikariPool0 = new HikariPool(hikariDataSource2);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(10, hikariPool0.getTotalConnections());
      assertNotNull(hikariPool0);
      
      hikariPool0.bagIsEmpty();
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(11, hikariPool0.getTotalConnections());
      
      hikariPool0.shutdown();
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(11, hikariPool0.getTotalConnections());
      
      long long0 = 100L;
      System.setCurrentTimeMillis(long0);
      boolean boolean1 = true;
      boolean boolean2 = true;
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(boolean1).when(iHikariConnectionProxy0).isBrokenConnection();
      doReturn(boolean2).when(iHikariConnectionProxy0).compareAndSetState(anyInt() , anyInt());
      hikariPool0.releaseConnection(iHikariConnectionProxy0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(10, hikariPool0.getTotalConnections());
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNotNull(hikariDataSource0);
      
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNotNull(hikariDataSource1);
      
      boolean boolean0 = true;
      hikariDataSource0.setInitializationFailFast(boolean0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      
      hikariDataSource0.copyState(hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertTrue(hikariDataSource1.isInitializationFailFast());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      
      hikariDataSource0.setDataSource(hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertTrue(hikariDataSource1.isInitializationFailFast());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      
      HikariDataSource hikariDataSource2 = new HikariDataSource(hikariDataSource0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertNotNull(hikariDataSource2);
      
      HikariPool hikariPool0 = new HikariPool(hikariDataSource2);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(10, hikariPool0.getTotalConnections());
      assertNotNull(hikariPool0);
      
      hikariPool0.bagIsEmpty();
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(11, hikariPool0.getTotalConnections());
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      EvoSuiteFile evoSuiteFile0 = null;
      hikariDataSource0.fastPathPool = hikariPool0;
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(11, hikariPool0.getTotalConnections());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertEquals(11, hikariDataSource0.fastPathPool.getTotalConnections());
      assertEquals("HikariPool-0", hikariDataSource0.fastPathPool.toString());
      
      boolean boolean1 = true;
      boolean boolean2 = true;
      boolean boolean3 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean1, boolean2, boolean0);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      hikariPool0.shutdown();
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(11, hikariPool0.getTotalConnections());
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      hikariPool0.closeIdleConnections();
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(11, hikariPool0.getTotalConnections());
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      try { 
        hikariDataSource0.fastPathPool.getConnection();
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Pool has been shutdown
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNotNull(hikariDataSource0);
      
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertNotNull(hikariDataSource1);
      
      boolean boolean0 = true;
      hikariDataSource1.setJdbc4ConnectionTest(boolean0);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      
      boolean boolean1 = true;
      hikariDataSource0.setJdbc4ConnectionTest(boolean0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      
      hikariDataSource0.setInitializationFailFast(boolean1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      
      hikariDataSource0.setDataSource(hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      
      HikariDataSource hikariDataSource2 = new HikariDataSource(hikariDataSource0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertNotNull(hikariDataSource2);
      
      HikariPool hikariPool0 = new HikariPool(hikariDataSource2);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(10, hikariPool0.getTotalConnections());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertNotNull(hikariPool0);
      
      IHikariConnectionProxy iHikariConnectionProxy0 = null;
      // Undeclared exception!
      try { 
        hikariPool0.releaseConnection(iHikariConnectionProxy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNotNull(hikariDataSource0);
      
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertNotNull(hikariDataSource1);
      
      boolean boolean0 = true;
      hikariDataSource0.setInitializationFailFast(boolean0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      
      hikariDataSource0.copyState(hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertTrue(hikariDataSource1.isInitializationFailFast());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      
      hikariDataSource0.setDataSource(hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertTrue(hikariDataSource1.isInitializationFailFast());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      
      HikariDataSource hikariDataSource2 = new HikariDataSource(hikariDataSource0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertNotNull(hikariDataSource2);
      
      HikariPool hikariPool0 = new HikariPool(hikariDataSource2);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals(10, hikariPool0.getTotalConnections());
      assertEquals("HikariPool-0", hikariPool0.toString());
      assertNotNull(hikariPool0);
      
      hikariPool0.bagIsEmpty();
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertTrue(hikariDataSource2.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource2.getPoolName());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals(11, hikariPool0.getTotalConnections());
      assertEquals("HikariPool-0", hikariPool0.toString());
      
      IHikariConnectionProxy iHikariConnectionProxy0 = mock(IHikariConnectionProxy.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iHikariConnectionProxy0).isBrokenConnection();
      doReturn(false).when(iHikariConnectionProxy0).compareAndSetState(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        hikariPool0.releaseConnection(iHikariConnectionProxy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Value was returned to the bag that was not borrowed
         //
         verifyException("com.zaxxer.hikari.util.ConcurrentBag", e);
      }
  }
}
